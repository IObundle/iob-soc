#!/usr/bin/env python3

# importing modules
import os
import sys
import importlib.util
import time
import curses.ascii

# Global variables
ser = None
SerialFlag = True
PROGNAME = "IOb-Console"
EOT = b'\x04' # End of Transmission in Hexadecimal
ENQ = b'\x05' # Enquiry in Hexadecimal
ACK = b'\x06' # Acknowledgement in Hexadecimal
FTX = b'\x07' # Receive file request
FRX = b'\x08' # Send file request


def tb_write(data, number_of_bytes = 1, is_file = False):
    transfered_bytes = 0
    write_percentage = 100
    while(transfered_bytes < number_of_bytes):
        while (os.path.getsize("./cnsl2soc") != 0): pass
        f = open('./cnsl2soc', "wb")
        f.write(data[transfered_bytes].to_bytes(1, byteorder='little'))
        f.flush()
        transfered_bytes += 1
        if (is_file):
            new_percentage = int(100/number_of_bytes*transfered_bytes)
            if(write_percentage!=new_percentage):
                write_percentage = new_percentage
                if (not write_percentage%10): print("%3d %c" % (write_percentage, '%'))
        f.close()

def tb_read_until(end = b'\x00'):
    data = b''
    while(True):
        byte = tb_read(1)
        if (byte == end): return data
        else: data += byte

def tb_read(number_of_bytes, is_file = False):
    data = b''
    transfered_bytes = 0
    read_percentage = 100
    while(transfered_bytes < number_of_bytes):
        f = open('./soc2cnsl', "rb")
        while (os.path.getsize("./soc2cnsl") == 0): pass
        byte = f.read(1)
        data += byte
        transfered_bytes += 1
        if (is_file):
            new_percentage = int(100/number_of_bytes*transfered_bytes)
            if(read_percentage!=new_percentage):
                read_percentage = new_percentage
                if (not read_percentage%10): print("%3d %c" % (read_percentage, '%'))
        f.close()
        f = open('./soc2cnsl',"w")
        f.close()
    return data

def serial_read(number_of_bytes):
    data = b''
    i=0
    while(i<number_of_bytes):
        byte = ser.read(1)
        data += byte
        i = i+1;
    return data

# Print ERROR
def cnsl_perror(mesg):
    print(PROGNAME, end = '')
    print(": " + str(mesg))
    exit(1)

# Receive file name
def cnsl_recvstr():
    if SerialFlag: name = ser.read_until(b'\x00')[:-1] # reads 80 bytes
    else: name = tb_read_until(b'\x00')
    print(PROGNAME, end = '')
    print(': file name {0} '.format(name))
    return name

# Send file to target
def cnsl_sendfile():
    file_size = 0
    name = b''

    # receive file name
    name = cnsl_recvstr()

    # open file to send
    f = open(name, 'rb')
    file_size = os.path.getsize(name)
    print(PROGNAME, end = '')
    print(': file of size {0} bytes'.format(file_size))
    if SerialFlag:
        ser.write(file_size.to_bytes(4,  byteorder='little')) #send file size
        while (ser.read() != ACK): pass
        ser.write(f.read()) #send file
    else:
        tb_write(file_size.to_bytes(4,  byteorder='little'), 4)
        while (tb_read(1) != ACK): pass
        tb_write(f.read(), file_size, True)
    f.close()
    print(PROGNAME, end = '')
    print(': file sent')

def cnsl_recvfile():
    file_size = 0
    name = ""

    # receive file name
    name = cnsl_recvstr()

    # open data file
    f = open(name, 'wb')
    if SerialFlag:
        file_size = int.from_bytes(serial_read(4), byteorder='little', signed=False)
        print(PROGNAME, end = ' ')
        print(': file size: {0} bytes'.format(file_size))
        data = serial_read(file_size)
    else:
        file_size = int.from_bytes(tb_read(4), byteorder='little', signed=False)
        print(PROGNAME, end = ' ')
        print(': file size: {0} bytes'.format(file_size))
        data = tb_read(file_size, True)
    f.write(data)
    f.close()
    print(PROGNAME, end = '')
    print(': file received'.format(file_size))

def usage(message):
    print('{}:{}'.format(PROGNAME, "usage: ./console -s <serial port> [ -f ] [ -L/--local ]"))
    cnsl_perror(message)

def clean_exit():
    if SerialFlag:
        ser.close()
    else:
        os.remove('./cnsl2soc')
        os.remove('./soc2cnsl')
    exit(0)

def init_print():
    print()
    print('+-----------------------------------------------+')
    print('|                   IOb-Console                 |')
    print('+-----------------------------------------------+')
    print()
    if SerialFlag:
        print('  BaudRate = {0}'.format(ser.baudrate))
        print('  StopBits = {0}'.format(ser.stopbits))
        print('  Parity   = None')
        print()
    print(PROGNAME, end = '')
    print(': connecting...')
    print()

def init_serial():
    global ser

    package_name = 'serial'
    spec = importlib.util.find_spec(package_name)
    if spec is None:
        print(PROGNAME, end = '')
        print(": ERROR... py{0} is not installed!".format(package_name))
        exit(-1)

    import serial

    # configure the serial connections (the parameters differs on the device connected to)
    ser = serial.Serial()
    ser.port = "/dev/usb-uart"         # serial port
    ser.baudrate = 115200              # baudrate
    ser.bytesize = serial.EIGHTBITS    # number of bits per bytes
    ser.parity = serial.PARITY_NONE    # set parity check: no parity
    ser.stopbits = serial.STOPBITS_ONE # number of stop bits
    ser.timeout = None                 # block read
    ser.xonxoff = False                # disable software flow control
    ser.rtscts = False                 # disable hardware (RTS/CTS) flow control
    ser.dsrdtr = False                 # disable hardware (DSR/DTR) flow control
    ser.writeTimeout = None            # block write


def init_files():
    f = open('./cnsl2soc',"w")
    f.close()
    f = open('./soc2cnsl',"w")
    f.close()


def init_console():
    global SerialFlag
    global ser
    load_fw = False

    if ('-L' in sys.argv or '--local' in sys.argv):
        SerialFlag = False
        init_files()
    elif ('-s' in sys.argv):
        if (len(sys.argv)<3): usage("PROGNAME: not enough program arguments")

        # open connection
        try:
            init_serial()
            ser.port = sys.argv[sys.argv.index('-s')+1]
            ser.open()
        except Exception:
            usage("Error open serial port.")
    else:
        usage("PROGNAME: not enough program arguments")
    if ('-f' in sys.argv): load_fw = True

    init_print()

    return load_fw


# Main function.
def main():
    load_fw = init_console()
    gotENQ = False

    # Reading the data from the serial port or FIFO files. This will be running in an infinite loop.
    while(True):
        byte = b'\x00'

        # get byte from target
        if (not SerialFlag): byte = tb_read(1)
        elif (ser.isOpen()): byte = ser.read()

        # process command
        if (byte == ENQ):
            if (not gotENQ):
                gotENQ = True
                if (load_fw):
                    if SerialFlag: ser.write(FRX)
                    else: tb_write(FRX)
                else:
                    if SerialFlag: ser.write(ACK)
                    else: tb_write(ACK)
        elif (byte == EOT):
            print(PROGNAME, end = '')
            print(': exiting...')
            clean_exit()
        elif (byte == FTX):
            print(PROGNAME, end = '')
            print(': got file receive request')
            cnsl_recvfile()
        elif (byte == FRX):
            print(PROGNAME, end = '')
            print(': got file send request')
            cnsl_sendfile()
        else:
            print(str(byte, 'iso-8859-1'), end = '')
            sys.stdout.flush()

if __name__ == "__main__": main()
