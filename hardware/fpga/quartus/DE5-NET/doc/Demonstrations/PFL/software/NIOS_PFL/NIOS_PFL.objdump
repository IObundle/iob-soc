
NIOS_PFL.elf:     file format elf32-littlenios2
NIOS_PFL.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x112002c0

Program Header:
    LOAD off    0x00001000 vaddr 0x04140000 paddr 0x04140000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00001120 vaddr 0x11200120 paddr 0x11200120 align 2**12
         filesz 0x000121e0 memsz 0x0001233c flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  04140000  04140000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  11200120  11200120  00001120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000101c8  112002c0  112002c0  000012c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000037c  11210488  11210488  00011488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001afc  11210804  11210804  00011804  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  11212300  11212300  00013300  2**2
                  ALLOC, SMALL_DATA
  6 .ext_flash    00000000  04140020  04140020  00013300  2**0
                  CONTENTS
  7 .onchip_memory 00000000  1121245c  1121245c  00013300  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013300  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000eb8  00000000  00000000  00013328  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00024b6a  00000000  00000000  000141e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009434  00000000  00000000  00038d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000baf1  00000000  00000000  0004217e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000225c  00000000  00000000  0004dc70  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003576  00000000  00000000  0004fecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017b0d  00000000  00000000  00053442  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000050  00000000  00000000  0006af50  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018e8  00000000  00000000  0006afa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006f97e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0006f981  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006f984  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006f985  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006f986  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006f98a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006f98e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0006f992  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0006f99b  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0006f9a4  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  0006f9ad  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000041  00000000  00000000  0006f9b3  2**0
                  CONTENTS, READONLY
 30 .jdi          00003646  00000000  00000000  0006f9f4  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000802ee  00000000  00000000  0007303a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04140000 l    d  .entry	00000000 .entry
11200120 l    d  .exceptions	00000000 .exceptions
112002c0 l    d  .text	00000000 .text
11210488 l    d  .rodata	00000000 .rodata
11210804 l    d  .rwdata	00000000 .rwdata
11212300 l    d  .bss	00000000 .bss
04140020 l    d  .ext_flash	00000000 .ext_flash
1121245c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../NIOS_PFL_bsp//obj/HAL/src/crt0.o
11200304 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
11200194 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 main.c
11210804 l     O .rwdata	00000010 szMap.3851
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
11210552 l     O .rodata	00000010 zeroes.4404
11203900 l     F .text	000000bc __sbprintf
11210562 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
11203b10 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
11205640 l     F .text	00000008 __fp_unlock
11205654 l     F .text	0000019c __sinit.part.1
112057f0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
11210814 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
11210c58 l     O .rwdata	00000020 lc_ctype_charset
11210c38 l     O .rwdata	00000020 lc_message_charset
11210c78 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
11210594 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
11208d54 l     F .text	000000fc __sprint_r.part.0
112106c8 l     O .rodata	00000010 blanks.4348
112106b8 l     O .rodata	00000010 zeroes.4349
1120a2e0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1120dde8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1120def4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1120df20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1120e00c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
1120e0ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1120e2c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
112122f0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1120e53c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1120e670 l     F .text	00000034 alt_dev_reg
11211260 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1120e960 l     F .text	0000020c altera_avalon_jtag_uart_irq
1120eb6c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
1120f1a4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1120f51c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1120f95c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1120fa9c l     F .text	0000003c alt_get_errno
1120fad8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
11201568 g     F .text	00000018 putchar
11208230 g     F .text	00000074 _mprec_log10
112003e0 g     F .text	00000100 I2C_Read
1120831c g     F .text	0000008c __any_on
1120a9d4 g     F .text	00000054 _isatty_r
112105a0 g     O .rodata	00000028 __mprec_tinytens
1120e1fc g     F .text	0000007c alt_main
11201580 g     F .text	000000c0 _puts_r
1121235c g     O .bss	00000100 alt_irq
1120aa28 g     F .text	00000060 _lseek_r
1120c914 g     F .text	00000088 .hidden __eqdf2
1121245c g       *ABS*	00000000 __alt_heap_start
11201524 g     F .text	0000003c printf
1120aae8 g     F .text	0000009c _wcrtomb_r
11208c14 g     F .text	0000005c __sseek
11205990 g     F .text	00000010 __sinit
1120a39c g     F .text	00000140 __swbuf_r
11206458 g     F .text	0000007c _setlocale_r
112057f8 g     F .text	00000068 __sfmoreglue
1120e29c g     F .text	00000024 __malloc_unlock
11207128 g     F .text	0000015c memmove
11205978 g     F .text	00000018 _cleanup
112073ac g     F .text	000000a8 _Balloc
1120c99c g     F .text	000000dc .hidden __gtdf2
1120fe94 g     F .text	00000024 altera_nios2_gen2_irq_init
11200bb8 g     F .text	00000130 i2c_write
04140000 g     F .entry	00000000 __reset
1120a978 g     F .text	0000005c _fstat_r
11212318 g     O .bss	00000004 errno
11208b90 g     F .text	00000008 __seofread
11212320 g     O .bss	00000004 alt_argv
1121a2c0 g       *ABS*	00000000 _gp
1120e50c g     F .text	00000030 usleep
112110e0 g     O .rwdata	00000180 alt_fd_list
11201560 g     F .text	00000008 _putchar_r
1120feb8 g     F .text	00000090 alt_find_dev
11206fe0 g     F .text	00000148 memcpy
11200638 g     F .text	000000ac I2C_Receive
11205648 g     F .text	0000000c _cleanup_r
1120dc00 g     F .text	000000dc .hidden __floatsidf
1120fa20 g     F .text	0000007c alt_io_redirect
1120ca78 g     F .text	000000f4 .hidden __ltdf2
11210488 g       *ABS*	00000000 __DTOR_END__
11201640 g     F .text	00000014 puts
11208a74 g     F .text	00000074 __fpclassifyd
1120818c g     F .text	000000a4 __ratio
1120a2c4 g     F .text	0000001c __vfiprintf_internal
1120ed64 g     F .text	0000021c altera_avalon_jtag_uart_read
112014f4 g     F .text	00000030 _printf_r
11201438 g     F .text	00000064 .hidden __udivsi3
1120e048 g     F .text	000000a4 isatty
112105f0 g     O .rodata	000000c8 __mprec_tens
112064d4 g     F .text	0000000c __locale_charset
112004e0 g     F .text	00000158 I2C_MultipleRead
11212314 g     O .bss	00000004 __malloc_top_pad
112122c8 g     O .rwdata	00000004 __mb_cur_max
11206504 g     F .text	0000000c _localeconv_r
112077b8 g     F .text	0000003c __i2b
11205e14 g     F .text	000004bc __sfvwrite_r
11208ae8 g     F .text	00000054 _sbrk_r
1120aa88 g     F .text	00000060 _read_r
112122e8 g     O .rwdata	00000004 alt_max_fd
1120a66c g     F .text	000000f0 _fclose_r
11205610 g     F .text	00000030 fflush
11212310 g     O .bss	00000004 __malloc_max_sbrked_mem
112007f4 g     F .text	00000138 I2CL_Read
1120b780 g     F .text	000008ac .hidden __adddf3
11207f34 g     F .text	0000010c __b2d
1120b248 g     F .text	00000538 .hidden __umoddi3
1120e128 g     F .text	000000d4 lseek
112122c0 g     O .rwdata	00000004 _global_impure_ptr
11208510 g     F .text	00000564 _realloc_r
1121245c g       *ABS*	00000000 __bss_end
1120f86c g     F .text	000000f0 alt_iic_isr_register
1120fd8c g     F .text	00000108 alt_tick
1120acd0 g     F .text	00000578 .hidden __udivdi3
1120a8d4 g     F .text	00000024 _fputwc_r
112105c8 g     O .rodata	00000028 __mprec_bigtens
1120759c g     F .text	00000104 __s2b
1120dcdc g     F .text	000000a8 .hidden __floatunsidf
11207c74 g     F .text	00000060 __mcmp
112059b0 g     F .text	00000018 __fp_lock_all
1120f820 g     F .text	0000004c alt_ic_irq_enabled
11200308 g     F .text	000000d8 I2C_Write
11200f40 g     F .text	000002a8 TEMPERATURE_Display
1120fcf0 g     F .text	0000009c alt_alarm_stop
11212328 g     O .bss	00000004 alt_irq_active
112001ec g     F .exceptions	000000d4 alt_irq_handler
112110b8 g     O .rwdata	00000028 alt_dev_null
11200ab4 g     F .text	0000008c i2c_start
112076a0 g     F .text	00000068 __hi0bits
1120db80 g     F .text	00000080 .hidden __fixdfsi
11200000 g       *ABS*	00000000 __alt_mem_onchip_memory
112122e0 g     O .rwdata	00000008 alt_dev_list
1120e578 g     F .text	000000f8 write
112083a8 g     F .text	000000a0 _putc_r
1120df5c g     F .text	000000b0 fstat
1120ca78 g     F .text	000000f4 .hidden __ledf2
112079ec g     F .text	00000140 __pow5mult
11208e68 g     F .text	0000145c ___vfiprintf_internal_r
11212308 g     O .bss	00000004 __nlocale_changed
1120149c g     F .text	00000058 .hidden __umodsi3
1121245c g       *ABS*	00000000 end
1120e8a0 g     F .text	000000c0 altera_avalon_jtag_uart_init
11210488 g       *ABS*	00000000 __CTOR_LIST__
11380000 g       *ABS*	00000000 __alt_stack_pointer
1120f21c g     F .text	0000007c alt_avalon_timer_sc_init
1120dd84 g     F .text	00000064 .hidden __clzsi2
1120ef80 g     F .text	00000224 altera_avalon_jtag_uart_write
112059a0 g     F .text	00000004 __sfp_lock_acquire
11206efc g     F .text	000000e4 memchr
112016ec g     F .text	000021f8 ___vfprintf_internal_r
11205b04 g     F .text	00000310 _free_r
112064e0 g     F .text	00000010 __locale_mb_cur_max
112102d4 g     F .text	00000180 __call_exitprocs
11200e40 g     F .text	00000100 LED_Play
11212304 g     O .bss	00000004 __mlocale_changed
112122cc g     O .rwdata	00000004 __malloc_sbrk_base
112002c0 g     F .text	00000048 _start
1121232c g     O .bss	00000004 _alt_tick_rate
11207b2c g     F .text	00000148 __lshift
11212330 g     O .bss	00000004 _alt_nticks
1120e2fc g     F .text	000000fc read
1120e6dc g     F .text	00000060 alt_sys_init
112011e8 g     F .text	0000009c DisplayInfo
112101bc g     F .text	00000118 __register_exitproc
112077f4 g     F .text	000001f8 __multiply
1120ec0c g     F .text	00000068 altera_avalon_jtag_uart_close
11212334 g     O .bss	00000028 __malloc_current_mallinfo
11208040 g     F .text	0000014c __d2b
1120e73c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
11210050 g     F .text	000000a4 alt_get_fd
1120f3c4 g     F .text	00000158 alt_busy_sleep
1120a554 g     F .text	00000054 _close_r
11210140 g     F .text	0000007c memcmp
1120e7fc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1121245c g       *ABS*	00000000 __alt_stack_base
1120e84c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
112039bc g     F .text	00000154 __swsetup_r
1120c02c g     F .text	000008e8 .hidden __divdf3
11205860 g     F .text	00000118 __sfp
112082a4 g     F .text	00000078 __copybits
11210cb0 g     O .rwdata	00000408 __malloc_av_
112059ac g     F .text	00000004 __sinit_lock_release
11200b40 g     F .text	00000078 i2c_stop
1120cb6c g     F .text	00000718 .hidden __muldf3
11208b3c g     F .text	00000054 __sread
1120ff48 g     F .text	00000108 alt_find_file
1120f558 g     F .text	000000a4 alt_dev_llist_insert
1120e278 g     F .text	00000024 __malloc_lock
1120e45c g     F .text	000000b0 sbrk
112055b4 g     F .text	0000005c _fflush_r
1120a5a8 g     F .text	000000c4 _calloc_r
11212300 g       *ABS*	00000000 __bss_start
11207284 g     F .text	00000128 memset
11201284 g     F .text	000000bc main
11212324 g     O .bss	00000004 alt_envp
1121230c g     O .bss	00000004 __malloc_max_total_mem
1120e79c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
11200ce8 g     F .text	00000158 i2c_read
1120a4dc g     F .text	00000018 __swbuf
11208c70 g     F .text	00000008 __sclose
11380000 g       *ABS*	00000000 __alt_heap_limit
1120a75c g     F .text	00000014 fclose
11203d10 g     F .text	00001688 _dtoa_r
112066f0 g     F .text	0000080c _malloc_r
1120ac44 g     F .text	00000030 __ascii_wctomb
112122ec g     O .rwdata	00000004 alt_errno
112062d0 g     F .text	000000c4 _fwalk
11208448 g     F .text	000000c8 putc
11201340 g     F .text	00000084 .hidden __divsi3
112059e0 g     F .text	00000124 _malloc_trim_r
11210488 g       *ABS*	00000000 __CTOR_END__
11208c78 g     F .text	000000dc strcmp
11210488 g       *ABS*	00000000 __DTOR_LIST__
1120c914 g     F .text	00000088 .hidden __nedf2
1120e6a4 g     F .text	00000038 alt_irq_init
1120e3f8 g     F .text	00000064 alt_release_fd
112106d8 g     O .rodata	00000100 .hidden __clz_tab
11212300 g     O .bss	00000004 _PathLocale
112100f4 g     F .text	00000014 atexit
1120a4f4 g     F .text	00000060 _write_r
11206510 g     F .text	00000018 setlocale
112122c4 g     O .rwdata	00000004 _impure_ptr
1121231c g     O .bss	00000004 alt_argc
11205398 g     F .text	0000021c __sflush_r
1120f65c g     F .text	00000060 _do_dtors
112064fc g     F .text	00000008 __locale_cjk_lang
1120092c g     F .text	00000188 I2CL_MultipleRead
11200120 g       .exceptions	00000000 alt_irq_entry
11207ed0 g     F .text	00000064 __ulp
112059c8 g     F .text	00000018 __fp_unlock_all
112122d8 g     O .rwdata	00000008 alt_fs_list
11206528 g     F .text	0000000c localeconv
1120f6bc g     F .text	00000050 alt_ic_isr_register
11212300 g       *ABS*	00000000 _edata
1121245c g       *ABS*	00000000 _end
1120a770 g     F .text	00000164 __fputwc
1120ec74 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1120f794 g     F .text	0000008c alt_ic_irq_disable
11208b98 g     F .text	0000007c __swrite
112122d0 g     O .rwdata	00000004 __malloc_trim_threshold
112064f0 g     F .text	0000000c __locale_msgcharset
11210108 g     F .text	00000038 exit
11206394 g     F .text	000000c4 _fwalk_reent
11207cd4 g     F .text	000001fc __mdiff
112013c4 g     F .text	00000074 .hidden __modsi3
11380000 g       *ABS*	00000000 __alt_data_end
11200120 g     F .exceptions	00000000 alt_exception
112059a4 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_ext_flash
11210454 g     F .text	00000034 _exit
1120f298 g     F .text	0000012c alt_alarm_start
11206534 g     F .text	000001bc __smakebuf_r
11201654 g     F .text	00000098 strlen
1120fb9c g     F .text	00000154 open
1120c99c g     F .text	000000dc .hidden __gedf2
112122d4 g     O .rwdata	00000004 __wctomb
11208e50 g     F .text	00000018 __sprint_r
112122f4 g     O .rwdata	00000004 alt_priority_mask
1120f70c g     F .text	00000088 alt_ic_irq_enable
112038e4 g     F .text	0000001c __vfprintf_internal
1120ac74 g     F .text	0000005c _wctomb_r
1120d284 g     F .text	000008fc .hidden __subdf3
11207708 g     F .text	000000b0 __lo0bits
112122f8 g     O .rwdata	00000008 alt_alarm_list
1120f5fc g     F .text	00000060 _do_ctors
112006e4 g     F .text	00000110 I2CL_Write
1120ab84 g     F .text	000000c0 wcrtomb
1120de24 g     F .text	000000d0 close
1120a8f8 g     F .text	00000080 fputwc
112059a8 g     F .text	00000004 __sinit_lock_acquire
1120747c g     F .text	00000120 __multadd
11207454 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

11200120 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
11200120:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
11200124:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
11200128:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1120012c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
11200130:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
11200134:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
11200138:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1120013c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
11200140:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
11200144:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
11200148:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1120014c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
11200150:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
11200154:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
11200158:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1120015c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
11200160:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
11200164:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
11200168:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1120016c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
11200170:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
11200174:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
11200178:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1120017c:	10000326 	beq	r2,zero,1120018c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
11200180:	20000226 	beq	r4,zero,1120018c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
11200184:	12001ec0 	call	112001ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
11200188:	00000306 	br	11200198 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1120018c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
11200190:	e8bfff17 	ldw	r2,-4(ea)

11200194 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
11200194:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
11200198:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1120019c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
112001a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
112001a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
112001a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
112001ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
112001b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
112001b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
112001b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
112001bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
112001c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
112001c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
112001c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
112001cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
112001d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
112001d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
112001d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
112001dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
112001e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
112001e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
112001e8:	ef80083a 	eret

112001ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
112001ec:	defff904 	addi	sp,sp,-28
112001f0:	dfc00615 	stw	ra,24(sp)
112001f4:	df000515 	stw	fp,20(sp)
112001f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
112001fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
11200200:	0005313a 	rdctl	r2,ipending
11200204:	e0bffe15 	stw	r2,-8(fp)

  return active;
11200208:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1120020c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
11200210:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
11200214:	00800044 	movi	r2,1
11200218:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1120021c:	e0fffb17 	ldw	r3,-20(fp)
11200220:	e0bffc17 	ldw	r2,-16(fp)
11200224:	1884703a 	and	r2,r3,r2
11200228:	10001426 	beq	r2,zero,1120027c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1120022c:	00844874 	movhi	r2,4385
11200230:	1088d704 	addi	r2,r2,9052
11200234:	e0fffd17 	ldw	r3,-12(fp)
11200238:	180690fa 	slli	r3,r3,3
1120023c:	10c5883a 	add	r2,r2,r3
11200240:	10c00017 	ldw	r3,0(r2)
11200244:	00844874 	movhi	r2,4385
11200248:	1088d704 	addi	r2,r2,9052
1120024c:	e13ffd17 	ldw	r4,-12(fp)
11200250:	200890fa 	slli	r4,r4,3
11200254:	1105883a 	add	r2,r2,r4
11200258:	10800104 	addi	r2,r2,4
1120025c:	10800017 	ldw	r2,0(r2)
11200260:	1009883a 	mov	r4,r2
11200264:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
11200268:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1120026c:	0005313a 	rdctl	r2,ipending
11200270:	e0bfff15 	stw	r2,-4(fp)

  return active;
11200274:	e0bfff17 	ldw	r2,-4(fp)
11200278:	00000706 	br	11200298 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1120027c:	e0bffc17 	ldw	r2,-16(fp)
11200280:	1085883a 	add	r2,r2,r2
11200284:	e0bffc15 	stw	r2,-16(fp)
      i++;
11200288:	e0bffd17 	ldw	r2,-12(fp)
1120028c:	10800044 	addi	r2,r2,1
11200290:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
11200294:	003fe106 	br	1120021c <__alt_data_end+0xffe8021c>

    active = alt_irq_pending ();
11200298:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1120029c:	e0bffb17 	ldw	r2,-20(fp)
112002a0:	103fdb1e 	bne	r2,zero,11200210 <__alt_data_end+0xffe80210>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
112002a4:	0001883a 	nop
}
112002a8:	0001883a 	nop
112002ac:	e037883a 	mov	sp,fp
112002b0:	dfc00117 	ldw	ra,4(sp)
112002b4:	df000017 	ldw	fp,0(sp)
112002b8:	dec00204 	addi	sp,sp,8
112002bc:	f800283a 	ret

Disassembly of section .text:

112002c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
112002c0:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
112002c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
112002c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
112002cc:	00bffd16 	blt	zero,r2,112002c4 <__alt_data_end+0xffe802c4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
112002d0:	06c44e34 	movhi	sp,4408
    ori sp, sp, %lo(__alt_stack_pointer)
112002d4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
112002d8:	06844874 	movhi	gp,4385
    ori gp, gp, %lo(_gp)
112002dc:	d6a8b014 	ori	gp,gp,41664
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
112002e0:	00844874 	movhi	r2,4385
    ori r2, r2, %lo(__bss_start)
112002e4:	1088c014 	ori	r2,r2,8960

    movhi r3, %hi(__bss_end)
112002e8:	00c44874 	movhi	r3,4385
    ori r3, r3, %lo(__bss_end)
112002ec:	18c91714 	ori	r3,r3,9308

    beq r2, r3, 1f
112002f0:	10c00326 	beq	r2,r3,11200300 <_start+0x40>

0:
    stw zero, (r2)
112002f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
112002f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
112002fc:	10fffd36 	bltu	r2,r3,112002f4 <__alt_data_end+0xffe802f4>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
11200300:	120e1fc0 	call	1120e1fc <alt_main>

11200304 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
11200304:	003fff06 	br	11200304 <__alt_data_end+0xffe80304>

11200308 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
11200308:	defff804 	addi	sp,sp,-32
1120030c:	dfc00715 	stw	ra,28(sp)
11200310:	df000615 	stw	fp,24(sp)
11200314:	df000604 	addi	fp,sp,24
11200318:	e13ffb15 	stw	r4,-20(fp)
1120031c:	e17ffc15 	stw	r5,-16(fp)
11200320:	3009883a 	mov	r4,r6
11200324:	3807883a 	mov	r3,r7
11200328:	e0800217 	ldw	r2,8(fp)
1120032c:	e13ffd05 	stb	r4,-12(fp)
11200330:	e0fffe05 	stb	r3,-8(fp)
11200334:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
11200338:	00800044 	movi	r2,1
1120033c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
11200340:	e17ffc17 	ldw	r5,-16(fp)
11200344:	e13ffb17 	ldw	r4,-20(fp)
11200348:	1200ab40 	call	11200ab4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
1120034c:	e0bffd03 	ldbu	r2,-12(fp)
11200350:	10803fcc 	andi	r2,r2,255
11200354:	100d883a 	mov	r6,r2
11200358:	e17ffc17 	ldw	r5,-16(fp)
1120035c:	e13ffb17 	ldw	r4,-20(fp)
11200360:	1200bb80 	call	11200bb8 <i2c_write>
11200364:	1000011e 	bne	r2,zero,1120036c <I2C_Write+0x64>
        bSuccess = FALSE;
11200368:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
1120036c:	e0bffa17 	ldw	r2,-24(fp)
11200370:	10000726 	beq	r2,zero,11200390 <I2C_Write+0x88>
11200374:	e0bffe03 	ldbu	r2,-8(fp)
11200378:	100d883a 	mov	r6,r2
1120037c:	e17ffc17 	ldw	r5,-16(fp)
11200380:	e13ffb17 	ldw	r4,-20(fp)
11200384:	1200bb80 	call	11200bb8 <i2c_write>
11200388:	1000011e 	bne	r2,zero,11200390 <I2C_Write+0x88>
        bSuccess = FALSE;
1120038c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
11200390:	e0bffa17 	ldw	r2,-24(fp)
11200394:	10000726 	beq	r2,zero,112003b4 <I2C_Write+0xac>
11200398:	e0bfff03 	ldbu	r2,-4(fp)
1120039c:	100d883a 	mov	r6,r2
112003a0:	e17ffc17 	ldw	r5,-16(fp)
112003a4:	e13ffb17 	ldw	r4,-20(fp)
112003a8:	1200bb80 	call	11200bb8 <i2c_write>
112003ac:	1000011e 	bne	r2,zero,112003b4 <I2C_Write+0xac>
        bSuccess = FALSE;
112003b0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
112003b4:	e17ffc17 	ldw	r5,-16(fp)
112003b8:	e13ffb17 	ldw	r4,-20(fp)
112003bc:	1200b400 	call	11200b40 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
112003c0:	0106d604 	movi	r4,7000
112003c4:	120e50c0 	call	1120e50c <usleep>
    
    return bSuccess;
112003c8:	e0bffa17 	ldw	r2,-24(fp)

    
}
112003cc:	e037883a 	mov	sp,fp
112003d0:	dfc00117 	ldw	ra,4(sp)
112003d4:	df000017 	ldw	fp,0(sp)
112003d8:	dec00204 	addi	sp,sp,8
112003dc:	f800283a 	ret

112003e0 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
112003e0:	defff904 	addi	sp,sp,-28
112003e4:	dfc00615 	stw	ra,24(sp)
112003e8:	df000515 	stw	fp,20(sp)
112003ec:	df000504 	addi	fp,sp,20
112003f0:	e13ffc15 	stw	r4,-16(fp)
112003f4:	e17ffd15 	stw	r5,-12(fp)
112003f8:	3007883a 	mov	r3,r6
112003fc:	3805883a 	mov	r2,r7
11200400:	e0fffe05 	stb	r3,-8(fp)
11200404:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
11200408:	00800044 	movi	r2,1
1120040c:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
11200410:	e17ffd17 	ldw	r5,-12(fp)
11200414:	e13ffc17 	ldw	r4,-16(fp)
11200418:	1200ab40 	call	11200ab4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
1120041c:	e0bffe03 	ldbu	r2,-8(fp)
11200420:	10803fcc 	andi	r2,r2,255
11200424:	100d883a 	mov	r6,r2
11200428:	e17ffd17 	ldw	r5,-12(fp)
1120042c:	e13ffc17 	ldw	r4,-16(fp)
11200430:	1200bb80 	call	11200bb8 <i2c_write>
11200434:	1000011e 	bne	r2,zero,1120043c <I2C_Read+0x5c>
        bSuccess = FALSE;
11200438:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
1120043c:	e0bffb17 	ldw	r2,-20(fp)
11200440:	10000726 	beq	r2,zero,11200460 <I2C_Read+0x80>
11200444:	e0bfff03 	ldbu	r2,-4(fp)
11200448:	100d883a 	mov	r6,r2
1120044c:	e17ffd17 	ldw	r5,-12(fp)
11200450:	e13ffc17 	ldw	r4,-16(fp)
11200454:	1200bb80 	call	11200bb8 <i2c_write>
11200458:	1000011e 	bne	r2,zero,11200460 <I2C_Read+0x80>
        bSuccess = FALSE;
1120045c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
11200460:	e17ffd17 	ldw	r5,-12(fp)
11200464:	e13ffc17 	ldw	r4,-16(fp)
11200468:	1200ab40 	call	11200ab4 <i2c_start>
    DeviceAddr |= 1; // Read
1120046c:	e0bffe03 	ldbu	r2,-8(fp)
11200470:	10800054 	ori	r2,r2,1
11200474:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
11200478:	e0bffb17 	ldw	r2,-20(fp)
1120047c:	10000826 	beq	r2,zero,112004a0 <I2C_Read+0xc0>
11200480:	e0bffe03 	ldbu	r2,-8(fp)
11200484:	10803fcc 	andi	r2,r2,255
11200488:	100d883a 	mov	r6,r2
1120048c:	e17ffd17 	ldw	r5,-12(fp)
11200490:	e13ffc17 	ldw	r4,-16(fp)
11200494:	1200bb80 	call	11200bb8 <i2c_write>
11200498:	1000011e 	bne	r2,zero,112004a0 <I2C_Read+0xc0>
        bSuccess = FALSE;
1120049c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
112004a0:	e0bffb17 	ldw	r2,-20(fp)
112004a4:	10000526 	beq	r2,zero,112004bc <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
112004a8:	000f883a 	mov	r7,zero
112004ac:	e1800217 	ldw	r6,8(fp)
112004b0:	e17ffd17 	ldw	r5,-12(fp)
112004b4:	e13ffc17 	ldw	r4,-16(fp)
112004b8:	1200ce80 	call	11200ce8 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
112004bc:	e17ffd17 	ldw	r5,-12(fp)
112004c0:	e13ffc17 	ldw	r4,-16(fp)
112004c4:	1200b400 	call	11200b40 <i2c_stop>
    
    return bSuccess;
112004c8:	e0bffb17 	ldw	r2,-20(fp)
}
112004cc:	e037883a 	mov	sp,fp
112004d0:	dfc00117 	ldw	ra,4(sp)
112004d4:	df000017 	ldw	fp,0(sp)
112004d8:	dec00204 	addi	sp,sp,8
112004dc:	f800283a 	ret

112004e0 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
112004e0:	defff604 	addi	sp,sp,-40
112004e4:	dfc00915 	stw	ra,36(sp)
112004e8:	df000815 	stw	fp,32(sp)
112004ec:	df000804 	addi	fp,sp,32
112004f0:	e13ffb15 	stw	r4,-20(fp)
112004f4:	e17ffc15 	stw	r5,-16(fp)
112004f8:	3007883a 	mov	r3,r6
112004fc:	e1fffe15 	stw	r7,-8(fp)
11200500:	e0800217 	ldw	r2,8(fp)
11200504:	e0fffd05 	stb	r3,-12(fp)
11200508:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
1120050c:	00800044 	movi	r2,1
11200510:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
11200514:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
11200518:	e17ffc17 	ldw	r5,-16(fp)
1120051c:	e13ffb17 	ldw	r4,-20(fp)
11200520:	1200ab40 	call	11200ab4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
11200524:	e0bffd03 	ldbu	r2,-12(fp)
11200528:	10803fcc 	andi	r2,r2,255
1120052c:	100d883a 	mov	r6,r2
11200530:	e17ffc17 	ldw	r5,-16(fp)
11200534:	e13ffb17 	ldw	r4,-20(fp)
11200538:	1200bb80 	call	11200bb8 <i2c_write>
1120053c:	1000011e 	bne	r2,zero,11200544 <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
11200540:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
11200544:	e0bff917 	ldw	r2,-28(fp)
11200548:	10000726 	beq	r2,zero,11200568 <I2C_MultipleRead+0x88>
1120054c:	e0bffa03 	ldbu	r2,-24(fp)
11200550:	100d883a 	mov	r6,r2
11200554:	e17ffc17 	ldw	r5,-16(fp)
11200558:	e13ffb17 	ldw	r4,-20(fp)
1120055c:	1200bb80 	call	11200bb8 <i2c_write>
11200560:	1000011e 	bne	r2,zero,11200568 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
11200564:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
11200568:	e0bff917 	ldw	r2,-28(fp)
1120056c:	10000326 	beq	r2,zero,1120057c <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
11200570:	e17ffc17 	ldw	r5,-16(fp)
11200574:	e13ffb17 	ldw	r4,-20(fp)
11200578:	1200ab40 	call	11200ab4 <i2c_start>
    DeviceAddr |= 1; // Read
1120057c:	e0bffd03 	ldbu	r2,-12(fp)
11200580:	10800054 	ori	r2,r2,1
11200584:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
11200588:	e0bff917 	ldw	r2,-28(fp)
1120058c:	10000826 	beq	r2,zero,112005b0 <I2C_MultipleRead+0xd0>
11200590:	e0bffd03 	ldbu	r2,-12(fp)
11200594:	10803fcc 	andi	r2,r2,255
11200598:	100d883a 	mov	r6,r2
1120059c:	e17ffc17 	ldw	r5,-16(fp)
112005a0:	e13ffb17 	ldw	r4,-20(fp)
112005a4:	1200bb80 	call	11200bb8 <i2c_write>
112005a8:	1000011e 	bne	r2,zero,112005b0 <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
112005ac:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
112005b0:	e0bff917 	ldw	r2,-28(fp)
112005b4:	10001726 	beq	r2,zero,11200614 <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
112005b8:	e03ff815 	stw	zero,-32(fp)
112005bc:	00001006 	br	11200600 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
112005c0:	e0bff817 	ldw	r2,-32(fp)
112005c4:	e0fffe17 	ldw	r3,-8(fp)
112005c8:	1889883a 	add	r4,r3,r2
112005cc:	e0bfff0b 	ldhu	r2,-4(fp)
112005d0:	10ffffc4 	addi	r3,r2,-1
112005d4:	e0bff817 	ldw	r2,-32(fp)
112005d8:	1884c03a 	cmpne	r2,r3,r2
112005dc:	10803fcc 	andi	r2,r2,255
112005e0:	100f883a 	mov	r7,r2
112005e4:	200d883a 	mov	r6,r4
112005e8:	e17ffc17 	ldw	r5,-16(fp)
112005ec:	e13ffb17 	ldw	r4,-20(fp)
112005f0:	1200ce80 	call	11200ce8 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
112005f4:	e0bff817 	ldw	r2,-32(fp)
112005f8:	10800044 	addi	r2,r2,1
112005fc:	e0bff815 	stw	r2,-32(fp)
11200600:	e0bfff0b 	ldhu	r2,-4(fp)
11200604:	e0fff817 	ldw	r3,-32(fp)
11200608:	1880020e 	bge	r3,r2,11200614 <I2C_MultipleRead+0x134>
1120060c:	e0bff917 	ldw	r2,-28(fp)
11200610:	103feb1e 	bne	r2,zero,112005c0 <__alt_data_end+0xffe805c0>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
11200614:	e17ffc17 	ldw	r5,-16(fp)
11200618:	e13ffb17 	ldw	r4,-20(fp)
1120061c:	1200b400 	call	11200b40 <i2c_stop>
    
    return bSuccess;    
11200620:	e0bff917 	ldw	r2,-28(fp)
    
}
11200624:	e037883a 	mov	sp,fp
11200628:	dfc00117 	ldw	ra,4(sp)
1120062c:	df000017 	ldw	fp,0(sp)
11200630:	dec00204 	addi	sp,sp,8
11200634:	f800283a 	ret

11200638 <I2C_Receive>:

bool I2C_Receive(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 *pControlData){
11200638:	defff904 	addi	sp,sp,-28
1120063c:	dfc00615 	stw	ra,24(sp)
11200640:	df000515 	stw	fp,20(sp)
11200644:	df000504 	addi	fp,sp,20
11200648:	e13ffc15 	stw	r4,-16(fp)
1120064c:	e17ffd15 	stw	r5,-12(fp)
11200650:	3005883a 	mov	r2,r6
11200654:	e1ffff15 	stw	r7,-4(fp)
11200658:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess = TRUE;
1120065c:	00800044 	movi	r2,1
11200660:	e0bffb15 	stw	r2,-20(fp)
    
    i2c_start(clk_base, data_base);  // start
11200664:	e17ffd17 	ldw	r5,-12(fp)
11200668:	e13ffc17 	ldw	r4,-16(fp)
1120066c:	1200ab40 	call	11200ab4 <i2c_start>
    
    DeviceAddr |= 1; // Read
11200670:	e0bffe03 	ldbu	r2,-8(fp)
11200674:	10800054 	ori	r2,r2,1
11200678:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
1120067c:	e0bffb17 	ldw	r2,-20(fp)
11200680:	10000826 	beq	r2,zero,112006a4 <I2C_Receive+0x6c>
11200684:	e0bffe03 	ldbu	r2,-8(fp)
11200688:	10803fcc 	andi	r2,r2,255
1120068c:	100d883a 	mov	r6,r2
11200690:	e17ffd17 	ldw	r5,-12(fp)
11200694:	e13ffc17 	ldw	r4,-16(fp)
11200698:	1200bb80 	call	11200bb8 <i2c_write>
1120069c:	1000011e 	bne	r2,zero,112006a4 <I2C_Receive+0x6c>
        bSuccess = FALSE;
112006a0:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
112006a4:	e0bffb17 	ldw	r2,-20(fp)
112006a8:	10000526 	beq	r2,zero,112006c0 <I2C_Receive+0x88>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
112006ac:	000f883a 	mov	r7,zero
112006b0:	e1bfff17 	ldw	r6,-4(fp)
112006b4:	e17ffd17 	ldw	r5,-12(fp)
112006b8:	e13ffc17 	ldw	r4,-16(fp)
112006bc:	1200ce80 	call	11200ce8 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
112006c0:	e17ffd17 	ldw	r5,-12(fp)
112006c4:	e13ffc17 	ldw	r4,-16(fp)
112006c8:	1200b400 	call	11200b40 <i2c_stop>
    
    return bSuccess;
112006cc:	e0bffb17 	ldw	r2,-20(fp)
}
112006d0:	e037883a 	mov	sp,fp
112006d4:	dfc00117 	ldw	ra,4(sp)
112006d8:	df000017 	ldw	fp,0(sp)
112006dc:	dec00204 	addi	sp,sp,8
112006e0:	f800283a 	ret

112006e4 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
112006e4:	defff704 	addi	sp,sp,-36
112006e8:	dfc00815 	stw	ra,32(sp)
112006ec:	df000715 	stw	fp,28(sp)
112006f0:	df000704 	addi	fp,sp,28
112006f4:	e13ffb15 	stw	r4,-20(fp)
112006f8:	e17ffc15 	stw	r5,-16(fp)
112006fc:	3009883a 	mov	r4,r6
11200700:	3807883a 	mov	r3,r7
11200704:	e0800217 	ldw	r2,8(fp)
11200708:	e13ffd05 	stb	r4,-12(fp)
1120070c:	e0fffe0d 	sth	r3,-8(fp)
11200710:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
11200714:	00800044 	movi	r2,1
11200718:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
1120071c:	e0bffe0b 	ldhu	r2,-8(fp)
11200720:	1004d23a 	srli	r2,r2,8
11200724:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
11200728:	e0bffe0b 	ldhu	r2,-8(fp)
1120072c:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
11200730:	e17ffc17 	ldw	r5,-16(fp)
11200734:	e13ffb17 	ldw	r4,-20(fp)
11200738:	1200ab40 	call	11200ab4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
1120073c:	e0bffd03 	ldbu	r2,-12(fp)
11200740:	10803fcc 	andi	r2,r2,255
11200744:	100d883a 	mov	r6,r2
11200748:	e17ffc17 	ldw	r5,-16(fp)
1120074c:	e13ffb17 	ldw	r4,-20(fp)
11200750:	1200bb80 	call	11200bb8 <i2c_write>
11200754:	1000011e 	bne	r2,zero,1120075c <I2CL_Write+0x78>
        bSuccess = FALSE;
11200758:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
1120075c:	e0bff917 	ldw	r2,-28(fp)
11200760:	10000726 	beq	r2,zero,11200780 <I2CL_Write+0x9c>
11200764:	e0bffa03 	ldbu	r2,-24(fp)
11200768:	100d883a 	mov	r6,r2
1120076c:	e17ffc17 	ldw	r5,-16(fp)
11200770:	e13ffb17 	ldw	r4,-20(fp)
11200774:	1200bb80 	call	11200bb8 <i2c_write>
11200778:	1000011e 	bne	r2,zero,11200780 <I2CL_Write+0x9c>
        bSuccess = FALSE;
1120077c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
11200780:	e0bff917 	ldw	r2,-28(fp)
11200784:	10000726 	beq	r2,zero,112007a4 <I2CL_Write+0xc0>
11200788:	e0bffa43 	ldbu	r2,-23(fp)
1120078c:	100d883a 	mov	r6,r2
11200790:	e17ffc17 	ldw	r5,-16(fp)
11200794:	e13ffb17 	ldw	r4,-20(fp)
11200798:	1200bb80 	call	11200bb8 <i2c_write>
1120079c:	1000011e 	bne	r2,zero,112007a4 <I2CL_Write+0xc0>
        bSuccess = FALSE;
112007a0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
112007a4:	e0bff917 	ldw	r2,-28(fp)
112007a8:	10000726 	beq	r2,zero,112007c8 <I2CL_Write+0xe4>
112007ac:	e0bfff03 	ldbu	r2,-4(fp)
112007b0:	100d883a 	mov	r6,r2
112007b4:	e17ffc17 	ldw	r5,-16(fp)
112007b8:	e13ffb17 	ldw	r4,-20(fp)
112007bc:	1200bb80 	call	11200bb8 <i2c_write>
112007c0:	1000011e 	bne	r2,zero,112007c8 <I2CL_Write+0xe4>
        bSuccess = FALSE;
112007c4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
112007c8:	e17ffc17 	ldw	r5,-16(fp)
112007cc:	e13ffb17 	ldw	r4,-20(fp)
112007d0:	1200b400 	call	11200b40 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
112007d4:	0106d604 	movi	r4,7000
112007d8:	120e50c0 	call	1120e50c <usleep>
    
    return bSuccess;
112007dc:	e0bff917 	ldw	r2,-28(fp)
    
}
112007e0:	e037883a 	mov	sp,fp
112007e4:	dfc00117 	ldw	ra,4(sp)
112007e8:	df000017 	ldw	fp,0(sp)
112007ec:	dec00204 	addi	sp,sp,8
112007f0:	f800283a 	ret

112007f4 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
112007f4:	defff804 	addi	sp,sp,-32
112007f8:	dfc00715 	stw	ra,28(sp)
112007fc:	df000615 	stw	fp,24(sp)
11200800:	df000604 	addi	fp,sp,24
11200804:	e13ffc15 	stw	r4,-16(fp)
11200808:	e17ffd15 	stw	r5,-12(fp)
1120080c:	3007883a 	mov	r3,r6
11200810:	3805883a 	mov	r2,r7
11200814:	e0fffe05 	stb	r3,-8(fp)
11200818:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
1120081c:	00800044 	movi	r2,1
11200820:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
11200824:	e0bfff0b 	ldhu	r2,-4(fp)
11200828:	1004d23a 	srli	r2,r2,8
1120082c:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF; 
11200830:	e0bfff0b 	ldhu	r2,-4(fp)
11200834:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
11200838:	e17ffd17 	ldw	r5,-12(fp)
1120083c:	e13ffc17 	ldw	r4,-16(fp)
11200840:	1200ab40 	call	11200ab4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
11200844:	e0bffe03 	ldbu	r2,-8(fp)
11200848:	10803fcc 	andi	r2,r2,255
1120084c:	100d883a 	mov	r6,r2
11200850:	e17ffd17 	ldw	r5,-12(fp)
11200854:	e13ffc17 	ldw	r4,-16(fp)
11200858:	1200bb80 	call	11200bb8 <i2c_write>
1120085c:	1000011e 	bne	r2,zero,11200864 <I2CL_Read+0x70>
        bSuccess = FALSE;
11200860:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
11200864:	e0bffa17 	ldw	r2,-24(fp)
11200868:	10000726 	beq	r2,zero,11200888 <I2CL_Read+0x94>
1120086c:	e0bffb03 	ldbu	r2,-20(fp)
11200870:	100d883a 	mov	r6,r2
11200874:	e17ffd17 	ldw	r5,-12(fp)
11200878:	e13ffc17 	ldw	r4,-16(fp)
1120087c:	1200bb80 	call	11200bb8 <i2c_write>
11200880:	1000011e 	bne	r2,zero,11200888 <I2CL_Read+0x94>
        bSuccess = FALSE;
11200884:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
11200888:	e0bffa17 	ldw	r2,-24(fp)
1120088c:	10000726 	beq	r2,zero,112008ac <I2CL_Read+0xb8>
11200890:	e0bffb43 	ldbu	r2,-19(fp)
11200894:	100d883a 	mov	r6,r2
11200898:	e17ffd17 	ldw	r5,-12(fp)
1120089c:	e13ffc17 	ldw	r4,-16(fp)
112008a0:	1200bb80 	call	11200bb8 <i2c_write>
112008a4:	1000011e 	bne	r2,zero,112008ac <I2CL_Read+0xb8>
        bSuccess = FALSE;
112008a8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
112008ac:	e17ffd17 	ldw	r5,-12(fp)
112008b0:	e13ffc17 	ldw	r4,-16(fp)
112008b4:	1200ab40 	call	11200ab4 <i2c_start>
    DeviceAddr |= 1; // Read
112008b8:	e0bffe03 	ldbu	r2,-8(fp)
112008bc:	10800054 	ori	r2,r2,1
112008c0:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
112008c4:	e0bffa17 	ldw	r2,-24(fp)
112008c8:	10000826 	beq	r2,zero,112008ec <I2CL_Read+0xf8>
112008cc:	e0bffe03 	ldbu	r2,-8(fp)
112008d0:	10803fcc 	andi	r2,r2,255
112008d4:	100d883a 	mov	r6,r2
112008d8:	e17ffd17 	ldw	r5,-12(fp)
112008dc:	e13ffc17 	ldw	r4,-16(fp)
112008e0:	1200bb80 	call	11200bb8 <i2c_write>
112008e4:	1000011e 	bne	r2,zero,112008ec <I2CL_Read+0xf8>
        bSuccess = FALSE;
112008e8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
112008ec:	e0bffa17 	ldw	r2,-24(fp)
112008f0:	10000526 	beq	r2,zero,11200908 <I2CL_Read+0x114>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
112008f4:	000f883a 	mov	r7,zero
112008f8:	e1800217 	ldw	r6,8(fp)
112008fc:	e17ffd17 	ldw	r5,-12(fp)
11200900:	e13ffc17 	ldw	r4,-16(fp)
11200904:	1200ce80 	call	11200ce8 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
11200908:	e17ffd17 	ldw	r5,-12(fp)
1120090c:	e13ffc17 	ldw	r4,-16(fp)
11200910:	1200b400 	call	11200b40 <i2c_stop>
    
    return bSuccess;    
11200914:	e0bffa17 	ldw	r2,-24(fp)
}
11200918:	e037883a 	mov	sp,fp
1120091c:	dfc00117 	ldw	ra,4(sp)
11200920:	df000017 	ldw	fp,0(sp)
11200924:	dec00204 	addi	sp,sp,8
11200928:	f800283a 	ret

1120092c <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
1120092c:	defff604 	addi	sp,sp,-40
11200930:	dfc00915 	stw	ra,36(sp)
11200934:	df000815 	stw	fp,32(sp)
11200938:	df000804 	addi	fp,sp,32
1120093c:	e13ffb15 	stw	r4,-20(fp)
11200940:	e17ffc15 	stw	r5,-16(fp)
11200944:	3007883a 	mov	r3,r6
11200948:	e1fffe15 	stw	r7,-8(fp)
1120094c:	e0800217 	ldw	r2,8(fp)
11200950:	e0fffd05 	stb	r3,-12(fp)
11200954:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
11200958:	00800044 	movi	r2,1
1120095c:	e0bff915 	stw	r2,-28(fp)
    alt_u8 ControlAddr = 0;
11200960:	e03ffa05 	stb	zero,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
11200964:	e03ffa45 	stb	zero,-23(fp)
    AddrLow  = ControlAddr & 0xFF;     
11200968:	e0bffa03 	ldbu	r2,-24(fp)
1120096c:	e0bffa85 	stb	r2,-22(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
11200970:	e17ffc17 	ldw	r5,-16(fp)
11200974:	e13ffb17 	ldw	r4,-20(fp)
11200978:	1200ab40 	call	11200ab4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
1120097c:	e0bffd03 	ldbu	r2,-12(fp)
11200980:	10803fcc 	andi	r2,r2,255
11200984:	100d883a 	mov	r6,r2
11200988:	e17ffc17 	ldw	r5,-16(fp)
1120098c:	e13ffb17 	ldw	r4,-20(fp)
11200990:	1200bb80 	call	11200bb8 <i2c_write>
11200994:	1000011e 	bne	r2,zero,1120099c <I2CL_MultipleRead+0x70>
        bSuccess = FALSE;
11200998:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
1120099c:	e0bff917 	ldw	r2,-28(fp)
112009a0:	10000726 	beq	r2,zero,112009c0 <I2CL_MultipleRead+0x94>
112009a4:	e0bffa43 	ldbu	r2,-23(fp)
112009a8:	100d883a 	mov	r6,r2
112009ac:	e17ffc17 	ldw	r5,-16(fp)
112009b0:	e13ffb17 	ldw	r4,-20(fp)
112009b4:	1200bb80 	call	11200bb8 <i2c_write>
112009b8:	1000011e 	bne	r2,zero,112009c0 <I2CL_MultipleRead+0x94>
        bSuccess = FALSE;
112009bc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
112009c0:	e0bff917 	ldw	r2,-28(fp)
112009c4:	10000726 	beq	r2,zero,112009e4 <I2CL_MultipleRead+0xb8>
112009c8:	e0bffa83 	ldbu	r2,-22(fp)
112009cc:	100d883a 	mov	r6,r2
112009d0:	e17ffc17 	ldw	r5,-16(fp)
112009d4:	e13ffb17 	ldw	r4,-20(fp)
112009d8:	1200bb80 	call	11200bb8 <i2c_write>
112009dc:	1000011e 	bne	r2,zero,112009e4 <I2CL_MultipleRead+0xb8>
        bSuccess = FALSE;
112009e0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }    
    if (bSuccess)        
112009e4:	e0bff917 	ldw	r2,-28(fp)
112009e8:	10000326 	beq	r2,zero,112009f8 <I2CL_MultipleRead+0xcc>
        i2c_start(clk_base, data_base);  // restart
112009ec:	e17ffc17 	ldw	r5,-16(fp)
112009f0:	e13ffb17 	ldw	r4,-20(fp)
112009f4:	1200ab40 	call	11200ab4 <i2c_start>
    DeviceAddr |= 1; // Read
112009f8:	e0bffd03 	ldbu	r2,-12(fp)
112009fc:	10800054 	ori	r2,r2,1
11200a00:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
11200a04:	e0bff917 	ldw	r2,-28(fp)
11200a08:	10000826 	beq	r2,zero,11200a2c <I2CL_MultipleRead+0x100>
11200a0c:	e0bffd03 	ldbu	r2,-12(fp)
11200a10:	10803fcc 	andi	r2,r2,255
11200a14:	100d883a 	mov	r6,r2
11200a18:	e17ffc17 	ldw	r5,-16(fp)
11200a1c:	e13ffb17 	ldw	r4,-20(fp)
11200a20:	1200bb80 	call	11200bb8 <i2c_write>
11200a24:	1000011e 	bne	r2,zero,11200a2c <I2CL_MultipleRead+0x100>
        bSuccess = FALSE;
11200a28:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
11200a2c:	e0bff917 	ldw	r2,-28(fp)
11200a30:	10001726 	beq	r2,zero,11200a90 <I2CL_MultipleRead+0x164>
        for(i=0;i<len && bSuccess;i++){
11200a34:	e03ff815 	stw	zero,-32(fp)
11200a38:	00001006 	br	11200a7c <I2CL_MultipleRead+0x150>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
11200a3c:	e0bff817 	ldw	r2,-32(fp)
11200a40:	e0fffe17 	ldw	r3,-8(fp)
11200a44:	1889883a 	add	r4,r3,r2
11200a48:	e0bfff0b 	ldhu	r2,-4(fp)
11200a4c:	10ffffc4 	addi	r3,r2,-1
11200a50:	e0bff817 	ldw	r2,-32(fp)
11200a54:	1884c03a 	cmpne	r2,r3,r2
11200a58:	10803fcc 	andi	r2,r2,255
11200a5c:	100f883a 	mov	r7,r2
11200a60:	200d883a 	mov	r6,r4
11200a64:	e17ffc17 	ldw	r5,-16(fp)
11200a68:	e13ffb17 	ldw	r4,-20(fp)
11200a6c:	1200ce80 	call	11200ce8 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
11200a70:	e0bff817 	ldw	r2,-32(fp)
11200a74:	10800044 	addi	r2,r2,1
11200a78:	e0bff815 	stw	r2,-32(fp)
11200a7c:	e0bfff0b 	ldhu	r2,-4(fp)
11200a80:	e0fff817 	ldw	r3,-32(fp)
11200a84:	1880020e 	bge	r3,r2,11200a90 <I2CL_MultipleRead+0x164>
11200a88:	e0bff917 	ldw	r2,-28(fp)
11200a8c:	103feb1e 	bne	r2,zero,11200a3c <__alt_data_end+0xffe80a3c>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
11200a90:	e17ffc17 	ldw	r5,-16(fp)
11200a94:	e13ffb17 	ldw	r4,-20(fp)
11200a98:	1200b400 	call	11200b40 <i2c_stop>
    
    return bSuccess;    
11200a9c:	e0bff917 	ldw	r2,-28(fp)
    
} 
11200aa0:	e037883a 	mov	sp,fp
11200aa4:	dfc00117 	ldw	ra,4(sp)
11200aa8:	df000017 	ldw	fp,0(sp)
11200aac:	dec00204 	addi	sp,sp,8
11200ab0:	f800283a 	ret

11200ab4 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
11200ab4:	defffc04 	addi	sp,sp,-16
11200ab8:	dfc00315 	stw	ra,12(sp)
11200abc:	df000215 	stw	fp,8(sp)
11200ac0:	df000204 	addi	fp,sp,8
11200ac4:	e13ffe15 	stw	r4,-8(fp)
11200ac8:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
11200acc:	e0bfff17 	ldw	r2,-4(fp)
11200ad0:	10800104 	addi	r2,r2,4
11200ad4:	1007883a 	mov	r3,r2
11200ad8:	00800044 	movi	r2,1
11200adc:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
11200ae0:	e0bfff17 	ldw	r2,-4(fp)
11200ae4:	00c00044 	movi	r3,1
11200ae8:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
11200aec:	e0bffe17 	ldw	r2,-8(fp)
11200af0:	00c00044 	movi	r3,1
11200af4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
11200af8:	01000044 	movi	r4,1
11200afc:	120e50c0 	call	1120e50c <usleep>
     
    SDA_LOW(data_base); // data low
11200b00:	e0bfff17 	ldw	r2,-4(fp)
11200b04:	0007883a 	mov	r3,zero
11200b08:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
11200b0c:	01000044 	movi	r4,1
11200b10:	120e50c0 	call	1120e50c <usleep>
    SCL_LOW(clk_base); // clock low
11200b14:	e0bffe17 	ldw	r2,-8(fp)
11200b18:	0007883a 	mov	r3,zero
11200b1c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
11200b20:	01000044 	movi	r4,1
11200b24:	120e50c0 	call	1120e50c <usleep>
}
11200b28:	0001883a 	nop
11200b2c:	e037883a 	mov	sp,fp
11200b30:	dfc00117 	ldw	ra,4(sp)
11200b34:	df000017 	ldw	fp,0(sp)
11200b38:	dec00204 	addi	sp,sp,8
11200b3c:	f800283a 	ret

11200b40 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
11200b40:	defffc04 	addi	sp,sp,-16
11200b44:	dfc00315 	stw	ra,12(sp)
11200b48:	df000215 	stw	fp,8(sp)
11200b4c:	df000204 	addi	fp,sp,8
11200b50:	e13ffe15 	stw	r4,-8(fp)
11200b54:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
11200b58:	e0bfff17 	ldw	r2,-4(fp)
11200b5c:	10800104 	addi	r2,r2,4
11200b60:	1007883a 	mov	r3,r2
11200b64:	00800044 	movi	r2,1
11200b68:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
11200b6c:	e0bfff17 	ldw	r2,-4(fp)
11200b70:	0007883a 	mov	r3,zero
11200b74:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
11200b78:	e0bffe17 	ldw	r2,-8(fp)
11200b7c:	00c00044 	movi	r3,1
11200b80:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
11200b84:	01000044 	movi	r4,1
11200b88:	120e50c0 	call	1120e50c <usleep>
    SDA_HIGH(data_base); // data high
11200b8c:	e0bfff17 	ldw	r2,-4(fp)
11200b90:	00c00044 	movi	r3,1
11200b94:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
11200b98:	01000044 	movi	r4,1
11200b9c:	120e50c0 	call	1120e50c <usleep>
    

    
}
11200ba0:	0001883a 	nop
11200ba4:	e037883a 	mov	sp,fp
11200ba8:	dfc00117 	ldw	ra,4(sp)
11200bac:	df000017 	ldw	fp,0(sp)
11200bb0:	dec00204 	addi	sp,sp,8
11200bb4:	f800283a 	ret

11200bb8 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
11200bb8:	defff804 	addi	sp,sp,-32
11200bbc:	dfc00715 	stw	ra,28(sp)
11200bc0:	df000615 	stw	fp,24(sp)
11200bc4:	df000604 	addi	fp,sp,24
11200bc8:	e13ffd15 	stw	r4,-12(fp)
11200bcc:	e17ffe15 	stw	r5,-8(fp)
11200bd0:	3005883a 	mov	r2,r6
11200bd4:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
11200bd8:	00bfe004 	movi	r2,-128
11200bdc:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
11200be0:	e0bffe17 	ldw	r2,-8(fp)
11200be4:	10800104 	addi	r2,r2,4
11200be8:	1007883a 	mov	r3,r2
11200bec:	00800044 	movi	r2,1
11200bf0:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
11200bf4:	e03ffb15 	stw	zero,-20(fp)
11200bf8:	00001f06 	br	11200c78 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
11200bfc:	e0bffd17 	ldw	r2,-12(fp)
11200c00:	0007883a 	mov	r3,zero
11200c04:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
11200c08:	e0ffff03 	ldbu	r3,-4(fp)
11200c0c:	e0bffa03 	ldbu	r2,-24(fp)
11200c10:	1884703a 	and	r2,r3,r2
11200c14:	10803fcc 	andi	r2,r2,255
11200c18:	10000426 	beq	r2,zero,11200c2c <i2c_write+0x74>
            SDA_HIGH(data_base);
11200c1c:	e0bffe17 	ldw	r2,-8(fp)
11200c20:	00c00044 	movi	r3,1
11200c24:	10c00035 	stwio	r3,0(r2)
11200c28:	00000306 	br	11200c38 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
11200c2c:	e0bffe17 	ldw	r2,-8(fp)
11200c30:	0007883a 	mov	r3,zero
11200c34:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
11200c38:	e0bffa03 	ldbu	r2,-24(fp)
11200c3c:	1004d07a 	srli	r2,r2,1
11200c40:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
11200c44:	e0bffd17 	ldw	r2,-12(fp)
11200c48:	00c00044 	movi	r3,1
11200c4c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
11200c50:	01000044 	movi	r4,1
11200c54:	120e50c0 	call	1120e50c <usleep>
        SCL_LOW(clk_base);
11200c58:	e0bffd17 	ldw	r2,-12(fp)
11200c5c:	0007883a 	mov	r3,zero
11200c60:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
11200c64:	01000044 	movi	r4,1
11200c68:	120e50c0 	call	1120e50c <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
11200c6c:	e0bffb17 	ldw	r2,-20(fp)
11200c70:	10800044 	addi	r2,r2,1
11200c74:	e0bffb15 	stw	r2,-20(fp)
11200c78:	e0bffb17 	ldw	r2,-20(fp)
11200c7c:	10800210 	cmplti	r2,r2,8
11200c80:	103fde1e 	bne	r2,zero,11200bfc <__alt_data_end+0xffe80bfc>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
11200c84:	e0bffe17 	ldw	r2,-8(fp)
11200c88:	10800104 	addi	r2,r2,4
11200c8c:	0007883a 	mov	r3,zero
11200c90:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
11200c94:	e0bffd17 	ldw	r2,-12(fp)
11200c98:	00c00044 	movi	r3,1
11200c9c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
11200ca0:	01000044 	movi	r4,1
11200ca4:	120e50c0 	call	1120e50c <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
11200ca8:	e0bffe17 	ldw	r2,-8(fp)
11200cac:	10800037 	ldwio	r2,0(r2)
11200cb0:	1005003a 	cmpeq	r2,r2,zero
11200cb4:	10803fcc 	andi	r2,r2,255
11200cb8:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
11200cbc:	e0bffd17 	ldw	r2,-12(fp)
11200cc0:	0007883a 	mov	r3,zero
11200cc4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
11200cc8:	01000044 	movi	r4,1
11200ccc:	120e50c0 	call	1120e50c <usleep>
    return bAck;
11200cd0:	e0bffc17 	ldw	r2,-16(fp)
}    
11200cd4:	e037883a 	mov	sp,fp
11200cd8:	dfc00117 	ldw	ra,4(sp)
11200cdc:	df000017 	ldw	fp,0(sp)
11200ce0:	dec00204 	addi	sp,sp,8
11200ce4:	f800283a 	ret

11200ce8 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
11200ce8:	defff804 	addi	sp,sp,-32
11200cec:	dfc00715 	stw	ra,28(sp)
11200cf0:	df000615 	stw	fp,24(sp)
11200cf4:	df000604 	addi	fp,sp,24
11200cf8:	e13ffc15 	stw	r4,-16(fp)
11200cfc:	e17ffd15 	stw	r5,-12(fp)
11200d00:	e1bffe15 	stw	r6,-8(fp)
11200d04:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
11200d08:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
11200d0c:	e0bffd17 	ldw	r2,-12(fp)
11200d10:	10800104 	addi	r2,r2,4
11200d14:	0007883a 	mov	r3,zero
11200d18:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
11200d1c:	e0bffc17 	ldw	r2,-16(fp)
11200d20:	0007883a 	mov	r3,zero
11200d24:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
11200d28:	01000044 	movi	r4,1
11200d2c:	120e50c0 	call	1120e50c <usleep>

    for(i=0;i<8;i++){
11200d30:	e03ffb15 	stw	zero,-20(fp)
11200d34:	00001606 	br	11200d90 <i2c_read+0xa8>
        Data <<= 1;
11200d38:	e0bffa03 	ldbu	r2,-24(fp)
11200d3c:	1085883a 	add	r2,r2,r2
11200d40:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
11200d44:	e0bffc17 	ldw	r2,-16(fp)
11200d48:	00c00044 	movi	r3,1
11200d4c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
11200d50:	01000044 	movi	r4,1
11200d54:	120e50c0 	call	1120e50c <usleep>
        if (SDA_READ(data_base))  // read data   
11200d58:	e0bffd17 	ldw	r2,-12(fp)
11200d5c:	10800037 	ldwio	r2,0(r2)
11200d60:	10000326 	beq	r2,zero,11200d70 <i2c_read+0x88>
            Data |= 0x01;
11200d64:	e0bffa03 	ldbu	r2,-24(fp)
11200d68:	10800054 	ori	r2,r2,1
11200d6c:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
11200d70:	e0bffc17 	ldw	r2,-16(fp)
11200d74:	0007883a 	mov	r3,zero
11200d78:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
11200d7c:	01000044 	movi	r4,1
11200d80:	120e50c0 	call	1120e50c <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
11200d84:	e0bffb17 	ldw	r2,-20(fp)
11200d88:	10800044 	addi	r2,r2,1
11200d8c:	e0bffb15 	stw	r2,-20(fp)
11200d90:	e0bffb17 	ldw	r2,-20(fp)
11200d94:	10800210 	cmplti	r2,r2,8
11200d98:	103fe71e 	bne	r2,zero,11200d38 <__alt_data_end+0xffe80d38>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
11200d9c:	e0bffc17 	ldw	r2,-16(fp)
11200da0:	0007883a 	mov	r3,zero
11200da4:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
11200da8:	e0bffd17 	ldw	r2,-12(fp)
11200dac:	10800104 	addi	r2,r2,4
11200db0:	1007883a 	mov	r3,r2
11200db4:	00800044 	movi	r2,1
11200db8:	18800035 	stwio	r2,0(r3)
    if (bAck)
11200dbc:	e0bfff17 	ldw	r2,-4(fp)
11200dc0:	10000426 	beq	r2,zero,11200dd4 <i2c_read+0xec>
        SDA_LOW(data_base);
11200dc4:	e0bffd17 	ldw	r2,-12(fp)
11200dc8:	0007883a 	mov	r3,zero
11200dcc:	10c00035 	stwio	r3,0(r2)
11200dd0:	00000306 	br	11200de0 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
11200dd4:	e0bffd17 	ldw	r2,-12(fp)
11200dd8:	00c00044 	movi	r3,1
11200ddc:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
11200de0:	e0bffc17 	ldw	r2,-16(fp)
11200de4:	00c00044 	movi	r3,1
11200de8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
11200dec:	01000044 	movi	r4,1
11200df0:	120e50c0 	call	1120e50c <usleep>
    SCL_LOW(clk_base); // clock low
11200df4:	e0bffc17 	ldw	r2,-16(fp)
11200df8:	0007883a 	mov	r3,zero
11200dfc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
11200e00:	01000044 	movi	r4,1
11200e04:	120e50c0 	call	1120e50c <usleep>
    SDA_LOW(data_base);  // data low
11200e08:	e0bffd17 	ldw	r2,-12(fp)
11200e0c:	0007883a 	mov	r3,zero
11200e10:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
11200e14:	01000044 	movi	r4,1
11200e18:	120e50c0 	call	1120e50c <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
11200e1c:	e0bffe17 	ldw	r2,-8(fp)
11200e20:	e0fffa03 	ldbu	r3,-24(fp)
11200e24:	10c00005 	stb	r3,0(r2)
}
11200e28:	0001883a 	nop
11200e2c:	e037883a 	mov	sp,fp
11200e30:	dfc00117 	ldw	ra,4(sp)
11200e34:	df000017 	ldw	fp,0(sp)
11200e38:	dec00204 	addi	sp,sp,8
11200e3c:	f800283a 	ret

11200e40 <LED_Play>:
	bool left_shift;
	alt_u8 led_num;
	alt_u32 avmm_base;
}LED_STATUS;

void LED_Play(LED_STATUS *pStatus){
11200e40:	defffe04 	addi	sp,sp,-8
11200e44:	df000115 	stw	fp,4(sp)
11200e48:	df000104 	addi	fp,sp,4
11200e4c:	e13fff15 	stw	r4,-4(fp)

	IOWR(pStatus->avmm_base, 0x00, ~pStatus->mask);
11200e50:	e0bfff17 	ldw	r2,-4(fp)
11200e54:	10800317 	ldw	r2,12(r2)
11200e58:	1007883a 	mov	r3,r2
11200e5c:	e0bfff17 	ldw	r2,-4(fp)
11200e60:	10800003 	ldbu	r2,0(r2)
11200e64:	10803fcc 	andi	r2,r2,255
11200e68:	0084303a 	nor	r2,zero,r2
11200e6c:	18800035 	stwio	r2,0(r3)

	if (pStatus->left_shift){
11200e70:	e0bfff17 	ldw	r2,-4(fp)
11200e74:	10800117 	ldw	r2,4(r2)
11200e78:	10001b26 	beq	r2,zero,11200ee8 <LED_Play+0xa8>
		pStatus->mask <<= 1;
11200e7c:	e0bfff17 	ldw	r2,-4(fp)
11200e80:	10800003 	ldbu	r2,0(r2)
11200e84:	1085883a 	add	r2,r2,r2
11200e88:	1007883a 	mov	r3,r2
11200e8c:	e0bfff17 	ldw	r2,-4(fp)
11200e90:	10c00005 	stb	r3,0(r2)
		if (pStatus->mask == (0x01 << pStatus->led_num)){
11200e94:	e0bfff17 	ldw	r2,-4(fp)
11200e98:	10800003 	ldbu	r2,0(r2)
11200e9c:	10c03fcc 	andi	r3,r2,255
11200ea0:	e0bfff17 	ldw	r2,-4(fp)
11200ea4:	10800203 	ldbu	r2,8(r2)
11200ea8:	10803fcc 	andi	r2,r2,255
11200eac:	01000044 	movi	r4,1
11200eb0:	2084983a 	sll	r2,r4,r2
11200eb4:	18801d1e 	bne	r3,r2,11200f2c <LED_Play+0xec>
			pStatus->mask = 0x01 << (pStatus->led_num-1);
11200eb8:	e0bfff17 	ldw	r2,-4(fp)
11200ebc:	10800203 	ldbu	r2,8(r2)
11200ec0:	10803fcc 	andi	r2,r2,255
11200ec4:	10bfffc4 	addi	r2,r2,-1
11200ec8:	00c00044 	movi	r3,1
11200ecc:	1884983a 	sll	r2,r3,r2
11200ed0:	1007883a 	mov	r3,r2
11200ed4:	e0bfff17 	ldw	r2,-4(fp)
11200ed8:	10c00005 	stb	r3,0(r2)
			pStatus->left_shift = FALSE;
11200edc:	e0bfff17 	ldw	r2,-4(fp)
11200ee0:	10000115 	stw	zero,4(r2)
		if (pStatus->mask == 0x00){
			pStatus->mask = 0x01;
			pStatus->left_shift = TRUE;
		}
	}
}
11200ee4:	00001106 	br	11200f2c <LED_Play+0xec>
		if (pStatus->mask == (0x01 << pStatus->led_num)){
			pStatus->mask = 0x01 << (pStatus->led_num-1);
			pStatus->left_shift = FALSE;
		}
	}else{
		pStatus->mask >>= 1;
11200ee8:	e0bfff17 	ldw	r2,-4(fp)
11200eec:	10800003 	ldbu	r2,0(r2)
11200ef0:	10803fcc 	andi	r2,r2,255
11200ef4:	1004d07a 	srli	r2,r2,1
11200ef8:	1007883a 	mov	r3,r2
11200efc:	e0bfff17 	ldw	r2,-4(fp)
11200f00:	10c00005 	stb	r3,0(r2)
		if (pStatus->mask == 0x00){
11200f04:	e0bfff17 	ldw	r2,-4(fp)
11200f08:	10800003 	ldbu	r2,0(r2)
11200f0c:	10803fcc 	andi	r2,r2,255
11200f10:	1000061e 	bne	r2,zero,11200f2c <LED_Play+0xec>
			pStatus->mask = 0x01;
11200f14:	e0bfff17 	ldw	r2,-4(fp)
11200f18:	00c00044 	movi	r3,1
11200f1c:	10c00005 	stb	r3,0(r2)
			pStatus->left_shift = TRUE;
11200f20:	e0bfff17 	ldw	r2,-4(fp)
11200f24:	00c00044 	movi	r3,1
11200f28:	10c00115 	stw	r3,4(r2)
		}
	}
}
11200f2c:	0001883a 	nop
11200f30:	e037883a 	mov	sp,fp
11200f34:	df000017 	ldw	fp,0(sp)
11200f38:	dec00104 	addi	sp,sp,4
11200f3c:	f800283a 	ret

11200f40 <TEMPERATURE_Display>:

void TEMPERATURE_Display(void){
11200f40:	defffb04 	addi	sp,sp,-20
11200f44:	dfc00415 	stw	ra,16(sp)
11200f48:	df000315 	stw	fp,12(sp)
11200f4c:	df000304 	addi	fp,sp,12
    bool bPass = FALSE;
11200f50:	e03ffe15 	stw	zero,-8(fp)
    const alt_u8 DeviceAddr = 0x30;
11200f54:	00800c04 	movi	r2,48
11200f58:	e0bfff05 	stb	r2,-4(fp)
    // hex map
    static    unsigned char szMap[] = {
            63, 6, 91, 79, 102, 109, 125, 7,
            127, 111, 119, 124, 57, 94, 121, 113
        };  // 0,1,2,....9, a, b, c, d, e, f
    const alt_u8 negative_id = 0x40;
11200f5c:	00801004 	movi	r2,64
11200f60:	e0bfff45 	stb	r2,-3(fp)

    // read temperature

    bPass = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00, &LocalTemp);
11200f64:	e0bfff03 	ldbu	r2,-4(fp)
11200f68:	10c03fcc 	andi	r3,r2,255
11200f6c:	18c0201c 	xori	r3,r3,128
11200f70:	18ffe004 	addi	r3,r3,-128
11200f74:	e0bfff84 	addi	r2,fp,-2
11200f78:	d8800015 	stw	r2,0(sp)
11200f7c:	000f883a 	mov	r7,zero
11200f80:	180d883a 	mov	r6,r3
11200f84:	01440034 	movhi	r5,4096
11200f88:	29401004 	addi	r5,r5,64
11200f8c:	01040034 	movhi	r4,4096
11200f90:	21001404 	addi	r4,r4,80
11200f94:	12003e00 	call	112003e0 <I2C_Read>
11200f98:	e0bffe15 	stw	r2,-8(fp)
    if (bPass)
11200f9c:	e0bffe17 	ldw	r2,-8(fp)
11200fa0:	10000e26 	beq	r2,zero,11200fdc <TEMPERATURE_Display+0x9c>
        bPass = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01, &RemoteTemp);
11200fa4:	e0bfff03 	ldbu	r2,-4(fp)
11200fa8:	10c03fcc 	andi	r3,r2,255
11200fac:	18c0201c 	xori	r3,r3,128
11200fb0:	18ffe004 	addi	r3,r3,-128
11200fb4:	e0bfffc4 	addi	r2,fp,-1
11200fb8:	d8800015 	stw	r2,0(sp)
11200fbc:	01c00044 	movi	r7,1
11200fc0:	180d883a 	mov	r6,r3
11200fc4:	01440034 	movhi	r5,4096
11200fc8:	29401004 	addi	r5,r5,64
11200fcc:	01040034 	movhi	r4,4096
11200fd0:	21001404 	addi	r4,r4,80
11200fd4:	12003e00 	call	112003e0 <I2C_Read>
11200fd8:	e0bffe15 	stw	r2,-8(fp)

    if (bPass){
11200fdc:	e0bffe17 	ldw	r2,-8(fp)
11200fe0:	10000e26 	beq	r2,zero,1120101c <TEMPERATURE_Display+0xdc>
        printf("FPGA/Board Temperature:%d/%d\r\n", (char)RemoteTemp, (char)LocalTemp);
11200fe4:	e0bfffc3 	ldbu	r2,-1(fp)
11200fe8:	10803fcc 	andi	r2,r2,255
11200fec:	1080201c 	xori	r2,r2,128
11200ff0:	10bfe004 	addi	r2,r2,-128
11200ff4:	e0ffff83 	ldbu	r3,-2(fp)
11200ff8:	18c03fcc 	andi	r3,r3,255
11200ffc:	18c0201c 	xori	r3,r3,128
11201000:	18ffe004 	addi	r3,r3,-128
11201004:	180d883a 	mov	r6,r3
11201008:	100b883a 	mov	r5,r2
1120100c:	01044874 	movhi	r4,4385
11201010:	21012204 	addi	r4,r4,1160
11201014:	12015240 	call	11201524 <printf>
11201018:	00000306 	br	11201028 <TEMPERATURE_Display+0xe8>
    }else{
        printf("Failed to read temperature\r\n");
1120101c:	01044874 	movhi	r4,4385
11201020:	21012a04 	addi	r4,r4,1192
11201024:	12016400 	call	11201640 <puts>
    }

    // display temperature
    if (bPass){
11201028:	e0bffe17 	ldw	r2,-8(fp)
1120102c:	10005e26 	beq	r2,zero,112011a8 <TEMPERATURE_Display+0x268>
    	if (RemoteTemp > 99)
11201030:	e0bfffc3 	ldbu	r2,-1(fp)
11201034:	10803fcc 	andi	r2,r2,255
11201038:	1080201c 	xori	r2,r2,128
1120103c:	10bfe004 	addi	r2,r2,-128
11201040:	10801910 	cmplti	r2,r2,100
11201044:	1000021e 	bne	r2,zero,11201050 <TEMPERATURE_Display+0x110>
    		RemoteTemp = 99;
11201048:	008018c4 	movi	r2,99
1120104c:	e0bfffc5 	stb	r2,-1(fp)
    	if (RemoteTemp >= 0){
11201050:	e0bfffc3 	ldbu	r2,-1(fp)
11201054:	10803fcc 	andi	r2,r2,255
11201058:	1080201c 	xori	r2,r2,128
1120105c:	10bfe004 	addi	r2,r2,-128
11201060:	10002d16 	blt	r2,zero,11201118 <TEMPERATURE_Display+0x1d8>
    		IOWR(HEX0_BASE, 0, ~szMap[RemoteTemp%10]);
11201064:	e0bfffc3 	ldbu	r2,-1(fp)
11201068:	10803fcc 	andi	r2,r2,255
1120106c:	1080201c 	xori	r2,r2,128
11201070:	10bfe004 	addi	r2,r2,-128
11201074:	01400284 	movi	r5,10
11201078:	1009883a 	mov	r4,r2
1120107c:	12013c40 	call	112013c4 <__modsi3>
11201080:	10c03fcc 	andi	r3,r2,255
11201084:	18c0201c 	xori	r3,r3,128
11201088:	18ffe004 	addi	r3,r3,-128
1120108c:	00844874 	movhi	r2,4385
11201090:	10820104 	addi	r2,r2,2052
11201094:	10c5883a 	add	r2,r2,r3
11201098:	10800003 	ldbu	r2,0(r2)
1120109c:	10803fcc 	andi	r2,r2,255
112010a0:	0086303a 	nor	r3,zero,r2
112010a4:	00840034 	movhi	r2,4096
112010a8:	10801804 	addi	r2,r2,96
112010ac:	10c00035 	stwio	r3,0(r2)
    		IOWR(HEX1_BASE, 0, ~szMap[(RemoteTemp/10)%10]);
112010b0:	e0bfffc3 	ldbu	r2,-1(fp)
112010b4:	10803fcc 	andi	r2,r2,255
112010b8:	1080201c 	xori	r2,r2,128
112010bc:	10bfe004 	addi	r2,r2,-128
112010c0:	01400284 	movi	r5,10
112010c4:	1009883a 	mov	r4,r2
112010c8:	12013400 	call	11201340 <__divsi3>
112010cc:	10803fcc 	andi	r2,r2,255
112010d0:	1080201c 	xori	r2,r2,128
112010d4:	10bfe004 	addi	r2,r2,-128
112010d8:	01400284 	movi	r5,10
112010dc:	1009883a 	mov	r4,r2
112010e0:	12013c40 	call	112013c4 <__modsi3>
112010e4:	10c03fcc 	andi	r3,r2,255
112010e8:	18c0201c 	xori	r3,r3,128
112010ec:	18ffe004 	addi	r3,r3,-128
112010f0:	00844874 	movhi	r2,4385
112010f4:	10820104 	addi	r2,r2,2052
112010f8:	10c5883a 	add	r2,r2,r3
112010fc:	10800003 	ldbu	r2,0(r2)
11201100:	10803fcc 	andi	r2,r2,255
11201104:	0086303a 	nor	r3,zero,r2
11201108:	00840034 	movhi	r2,4096
1120110c:	10801c04 	addi	r2,r2,112
11201110:	10c00035 	stwio	r3,0(r2)

    }else{
		IOWR(HEX0_BASE, 0, ~negative_id); // negative
		IOWR(HEX1_BASE, 0, ~negative_id); // negative
    }
}
11201114:	00002e06 	br	112011d0 <TEMPERATURE_Display+0x290>
    		RemoteTemp = 99;
    	if (RemoteTemp >= 0){
    		IOWR(HEX0_BASE, 0, ~szMap[RemoteTemp%10]);
    		IOWR(HEX1_BASE, 0, ~szMap[(RemoteTemp/10)%10]);
    	}else{
    		if (RemoteTemp < -9)
11201118:	e0bfffc3 	ldbu	r2,-1(fp)
1120111c:	10803fcc 	andi	r2,r2,255
11201120:	1080201c 	xori	r2,r2,128
11201124:	10bfe004 	addi	r2,r2,-128
11201128:	10bffdc8 	cmpgei	r2,r2,-9
1120112c:	1000021e 	bne	r2,zero,11201138 <TEMPERATURE_Display+0x1f8>
    			RemoteTemp = -9;
11201130:	00bffdc4 	movi	r2,-9
11201134:	e0bfffc5 	stb	r2,-1(fp)
    		RemoteTemp = -RemoteTemp;
11201138:	e0bfffc3 	ldbu	r2,-1(fp)
1120113c:	0085c83a 	sub	r2,zero,r2
11201140:	e0bfffc5 	stb	r2,-1(fp)

      		IOWR(HEX0_BASE, 0, ~szMap[RemoteTemp%10]);
11201144:	e0bfffc3 	ldbu	r2,-1(fp)
11201148:	10803fcc 	andi	r2,r2,255
1120114c:	1080201c 	xori	r2,r2,128
11201150:	10bfe004 	addi	r2,r2,-128
11201154:	01400284 	movi	r5,10
11201158:	1009883a 	mov	r4,r2
1120115c:	12013c40 	call	112013c4 <__modsi3>
11201160:	10c03fcc 	andi	r3,r2,255
11201164:	18c0201c 	xori	r3,r3,128
11201168:	18ffe004 	addi	r3,r3,-128
1120116c:	00844874 	movhi	r2,4385
11201170:	10820104 	addi	r2,r2,2052
11201174:	10c5883a 	add	r2,r2,r3
11201178:	10800003 	ldbu	r2,0(r2)
1120117c:	10803fcc 	andi	r2,r2,255
11201180:	0086303a 	nor	r3,zero,r2
11201184:	00840034 	movhi	r2,4096
11201188:	10801804 	addi	r2,r2,96
1120118c:	10c00035 	stwio	r3,0(r2)
       		IOWR(HEX1_BASE, 0, ~negative_id); // negative
11201190:	e0bfff43 	ldbu	r2,-3(fp)
11201194:	0086303a 	nor	r3,zero,r2
11201198:	00840034 	movhi	r2,4096
1120119c:	10801c04 	addi	r2,r2,112
112011a0:	10c00035 	stwio	r3,0(r2)

    }else{
		IOWR(HEX0_BASE, 0, ~negative_id); // negative
		IOWR(HEX1_BASE, 0, ~negative_id); // negative
    }
}
112011a4:	00000a06 	br	112011d0 <TEMPERATURE_Display+0x290>
      		IOWR(HEX0_BASE, 0, ~szMap[RemoteTemp%10]);
       		IOWR(HEX1_BASE, 0, ~negative_id); // negative
    	}

    }else{
		IOWR(HEX0_BASE, 0, ~negative_id); // negative
112011a8:	e0bfff43 	ldbu	r2,-3(fp)
112011ac:	0086303a 	nor	r3,zero,r2
112011b0:	00840034 	movhi	r2,4096
112011b4:	10801804 	addi	r2,r2,96
112011b8:	10c00035 	stwio	r3,0(r2)
		IOWR(HEX1_BASE, 0, ~negative_id); // negative
112011bc:	e0bfff43 	ldbu	r2,-3(fp)
112011c0:	0086303a 	nor	r3,zero,r2
112011c4:	00840034 	movhi	r2,4096
112011c8:	10801c04 	addi	r2,r2,112
112011cc:	10c00035 	stwio	r3,0(r2)
    }
}
112011d0:	0001883a 	nop
112011d4:	e037883a 	mov	sp,fp
112011d8:	dfc00117 	ldw	ra,4(sp)
112011dc:	df000017 	ldw	fp,0(sp)
112011e0:	dec00204 	addi	sp,sp,8
112011e4:	f800283a 	ret

112011e8 <DisplayInfo>:


void DisplayInfo(void){
112011e8:	defffc04 	addi	sp,sp,-16
112011ec:	dfc00315 	stw	ra,12(sp)
112011f0:	df000215 	stw	fp,8(sp)
112011f4:	df000204 	addi	fp,sp,8
	alt_u8 *pData = (alt_u8 *)EXT_FLASH_BASE + 0x10000;
112011f8:	00800074 	movhi	r2,1
112011fc:	e0bfff15 	stw	r2,-4(fp)
	int i;
	printf("[Flash]\r\n");
11201200:	01044874 	movhi	r4,4385
11201204:	21013104 	addi	r4,r4,1220
11201208:	12016400 	call	11201640 <puts>
	printf("SN=");
1120120c:	01044874 	movhi	r4,4385
11201210:	21013404 	addi	r4,r4,1232
11201214:	12015240 	call	11201524 <printf>
	for(i=0;i<15;i++)
11201218:	e03ffe15 	stw	zero,-8(fp)
1120121c:	00000a06 	br	11201248 <DisplayInfo+0x60>
		printf("%c", *(pData+i));
11201220:	e0bffe17 	ldw	r2,-8(fp)
11201224:	e0ffff17 	ldw	r3,-4(fp)
11201228:	1885883a 	add	r2,r3,r2
1120122c:	10800003 	ldbu	r2,0(r2)
11201230:	10803fcc 	andi	r2,r2,255
11201234:	1009883a 	mov	r4,r2
11201238:	12015680 	call	11201568 <putchar>
void DisplayInfo(void){
	alt_u8 *pData = (alt_u8 *)EXT_FLASH_BASE + 0x10000;
	int i;
	printf("[Flash]\r\n");
	printf("SN=");
	for(i=0;i<15;i++)
1120123c:	e0bffe17 	ldw	r2,-8(fp)
11201240:	10800044 	addi	r2,r2,1
11201244:	e0bffe15 	stw	r2,-8(fp)
11201248:	e0bffe17 	ldw	r2,-8(fp)
1120124c:	108003d0 	cmplti	r2,r2,15
11201250:	103ff31e 	bne	r2,zero,11201220 <__alt_data_end+0xffe81220>
		printf("%c", *(pData+i));
	printf("\r\n");
11201254:	01044874 	movhi	r4,4385
11201258:	21013504 	addi	r4,r4,1236
1120125c:	12016400 	call	11201640 <puts>
	printf("TERASIC_END\r\n");
11201260:	01044874 	movhi	r4,4385
11201264:	21013604 	addi	r4,r4,1240
11201268:	12016400 	call	11201640 <puts>
}
1120126c:	0001883a 	nop
11201270:	e037883a 	mov	sp,fp
11201274:	dfc00117 	ldw	ra,4(sp)
11201278:	df000017 	ldw	fp,0(sp)
1120127c:	dec00204 	addi	sp,sp,8
11201280:	f800283a 	ret

11201284 <main>:


int main()
{
11201284:	defff204 	addi	sp,sp,-56
11201288:	dfc00d15 	stw	ra,52(sp)
1120128c:	df000c15 	stw	fp,48(sp)
11201290:	df000c04 	addi	fp,sp,48
#if 0
	DisplayInfo();
	return 0;
#endif

	LED_STATUS LED_USER =    {0x01, TRUE, 3, LED_BASE};
11201294:	00800044 	movi	r2,1
11201298:	e0bff405 	stb	r2,-48(fp)
1120129c:	00800044 	movi	r2,1
112012a0:	e0bff515 	stw	r2,-44(fp)
112012a4:	008000c4 	movi	r2,3
112012a8:	e0bff605 	stb	r2,-40(fp)
112012ac:	00840034 	movhi	r2,4096
112012b0:	10800c04 	addi	r2,r2,48
112012b4:	e0bff715 	stw	r2,-36(fp)
	LED_STATUS LED_BRACKET = {0x01, TRUE, 4, LED_BRACKET_BASE};
112012b8:	00800044 	movi	r2,1
112012bc:	e0bff805 	stb	r2,-32(fp)
112012c0:	00800044 	movi	r2,1
112012c4:	e0bff915 	stw	r2,-28(fp)
112012c8:	00800104 	movi	r2,4
112012cc:	e0bffa05 	stb	r2,-24(fp)
112012d0:	00840034 	movhi	r2,4096
112012d4:	10802404 	addi	r2,r2,144
112012d8:	e0bffb15 	stw	r2,-20(fp)
	LED_STATUS LED_RJ45 =    {0x01, TRUE, 2, LED_RJ45_BASE};
112012dc:	00800044 	movi	r2,1
112012e0:	e0bffc05 	stb	r2,-16(fp)
112012e4:	00800044 	movi	r2,1
112012e8:	e0bffd15 	stw	r2,-12(fp)
112012ec:	00800084 	movi	r2,2
112012f0:	e0bffe05 	stb	r2,-8(fp)
112012f4:	00840034 	movhi	r2,4096
112012f8:	10802004 	addi	r2,r2,128
112012fc:	e0bfff15 	stw	r2,-4(fp)

	printf("Terasic - Parallel Flash Loader!\n");
11201300:	01044874 	movhi	r4,4385
11201304:	21013a04 	addi	r4,r4,1256
11201308:	12016400 	call	11201640 <puts>
	while(1){
		// led run
		LED_Play(&LED_USER);
1120130c:	e13ff404 	addi	r4,fp,-48
11201310:	1200e400 	call	11200e40 <LED_Play>
		LED_Play(&LED_BRACKET);
11201314:	e0bff804 	addi	r2,fp,-32
11201318:	1009883a 	mov	r4,r2
1120131c:	1200e400 	call	11200e40 <LED_Play>
		LED_Play(&LED_RJ45);
11201320:	e0bffc04 	addi	r2,fp,-16
11201324:	1009883a 	mov	r4,r2
11201328:	1200e400 	call	11200e40 <LED_Play>

		// show fpga temperature
		TEMPERATURE_Display();
1120132c:	1200f400 	call	11200f40 <TEMPERATURE_Display>

		// delay
		usleep(LED_STAY_DUR);
11201330:	010000b4 	movhi	r4,2
11201334:	21127c04 	addi	r4,r4,18928
11201338:	120e50c0 	call	1120e50c <usleep>

	}
1120133c:	003ff306 	br	1120130c <__alt_data_end+0xffe8130c>

11201340 <__divsi3>:
11201340:	20001b16 	blt	r4,zero,112013b0 <__divsi3+0x70>
11201344:	000f883a 	mov	r7,zero
11201348:	28001616 	blt	r5,zero,112013a4 <__divsi3+0x64>
1120134c:	200d883a 	mov	r6,r4
11201350:	29001a2e 	bgeu	r5,r4,112013bc <__divsi3+0x7c>
11201354:	00800804 	movi	r2,32
11201358:	00c00044 	movi	r3,1
1120135c:	00000106 	br	11201364 <__divsi3+0x24>
11201360:	10000d26 	beq	r2,zero,11201398 <__divsi3+0x58>
11201364:	294b883a 	add	r5,r5,r5
11201368:	10bfffc4 	addi	r2,r2,-1
1120136c:	18c7883a 	add	r3,r3,r3
11201370:	293ffb36 	bltu	r5,r4,11201360 <__alt_data_end+0xffe81360>
11201374:	0005883a 	mov	r2,zero
11201378:	18000726 	beq	r3,zero,11201398 <__divsi3+0x58>
1120137c:	0005883a 	mov	r2,zero
11201380:	31400236 	bltu	r6,r5,1120138c <__divsi3+0x4c>
11201384:	314dc83a 	sub	r6,r6,r5
11201388:	10c4b03a 	or	r2,r2,r3
1120138c:	1806d07a 	srli	r3,r3,1
11201390:	280ad07a 	srli	r5,r5,1
11201394:	183ffa1e 	bne	r3,zero,11201380 <__alt_data_end+0xffe81380>
11201398:	38000126 	beq	r7,zero,112013a0 <__divsi3+0x60>
1120139c:	0085c83a 	sub	r2,zero,r2
112013a0:	f800283a 	ret
112013a4:	014bc83a 	sub	r5,zero,r5
112013a8:	39c0005c 	xori	r7,r7,1
112013ac:	003fe706 	br	1120134c <__alt_data_end+0xffe8134c>
112013b0:	0109c83a 	sub	r4,zero,r4
112013b4:	01c00044 	movi	r7,1
112013b8:	003fe306 	br	11201348 <__alt_data_end+0xffe81348>
112013bc:	00c00044 	movi	r3,1
112013c0:	003fee06 	br	1120137c <__alt_data_end+0xffe8137c>

112013c4 <__modsi3>:
112013c4:	20001716 	blt	r4,zero,11201424 <__modsi3+0x60>
112013c8:	000f883a 	mov	r7,zero
112013cc:	2005883a 	mov	r2,r4
112013d0:	28001216 	blt	r5,zero,1120141c <__modsi3+0x58>
112013d4:	2900162e 	bgeu	r5,r4,11201430 <__modsi3+0x6c>
112013d8:	01800804 	movi	r6,32
112013dc:	00c00044 	movi	r3,1
112013e0:	00000106 	br	112013e8 <__modsi3+0x24>
112013e4:	30000a26 	beq	r6,zero,11201410 <__modsi3+0x4c>
112013e8:	294b883a 	add	r5,r5,r5
112013ec:	31bfffc4 	addi	r6,r6,-1
112013f0:	18c7883a 	add	r3,r3,r3
112013f4:	293ffb36 	bltu	r5,r4,112013e4 <__alt_data_end+0xffe813e4>
112013f8:	18000526 	beq	r3,zero,11201410 <__modsi3+0x4c>
112013fc:	1806d07a 	srli	r3,r3,1
11201400:	11400136 	bltu	r2,r5,11201408 <__modsi3+0x44>
11201404:	1145c83a 	sub	r2,r2,r5
11201408:	280ad07a 	srli	r5,r5,1
1120140c:	183ffb1e 	bne	r3,zero,112013fc <__alt_data_end+0xffe813fc>
11201410:	38000126 	beq	r7,zero,11201418 <__modsi3+0x54>
11201414:	0085c83a 	sub	r2,zero,r2
11201418:	f800283a 	ret
1120141c:	014bc83a 	sub	r5,zero,r5
11201420:	003fec06 	br	112013d4 <__alt_data_end+0xffe813d4>
11201424:	0109c83a 	sub	r4,zero,r4
11201428:	01c00044 	movi	r7,1
1120142c:	003fe706 	br	112013cc <__alt_data_end+0xffe813cc>
11201430:	00c00044 	movi	r3,1
11201434:	003ff106 	br	112013fc <__alt_data_end+0xffe813fc>

11201438 <__udivsi3>:
11201438:	200d883a 	mov	r6,r4
1120143c:	2900152e 	bgeu	r5,r4,11201494 <__udivsi3+0x5c>
11201440:	28001416 	blt	r5,zero,11201494 <__udivsi3+0x5c>
11201444:	00800804 	movi	r2,32
11201448:	00c00044 	movi	r3,1
1120144c:	00000206 	br	11201458 <__udivsi3+0x20>
11201450:	10000e26 	beq	r2,zero,1120148c <__udivsi3+0x54>
11201454:	28000516 	blt	r5,zero,1120146c <__udivsi3+0x34>
11201458:	294b883a 	add	r5,r5,r5
1120145c:	10bfffc4 	addi	r2,r2,-1
11201460:	18c7883a 	add	r3,r3,r3
11201464:	293ffa36 	bltu	r5,r4,11201450 <__alt_data_end+0xffe81450>
11201468:	18000826 	beq	r3,zero,1120148c <__udivsi3+0x54>
1120146c:	0005883a 	mov	r2,zero
11201470:	31400236 	bltu	r6,r5,1120147c <__udivsi3+0x44>
11201474:	314dc83a 	sub	r6,r6,r5
11201478:	10c4b03a 	or	r2,r2,r3
1120147c:	1806d07a 	srli	r3,r3,1
11201480:	280ad07a 	srli	r5,r5,1
11201484:	183ffa1e 	bne	r3,zero,11201470 <__alt_data_end+0xffe81470>
11201488:	f800283a 	ret
1120148c:	0005883a 	mov	r2,zero
11201490:	f800283a 	ret
11201494:	00c00044 	movi	r3,1
11201498:	003ff406 	br	1120146c <__alt_data_end+0xffe8146c>

1120149c <__umodsi3>:
1120149c:	2005883a 	mov	r2,r4
112014a0:	2900122e 	bgeu	r5,r4,112014ec <__umodsi3+0x50>
112014a4:	28001116 	blt	r5,zero,112014ec <__umodsi3+0x50>
112014a8:	01800804 	movi	r6,32
112014ac:	00c00044 	movi	r3,1
112014b0:	00000206 	br	112014bc <__umodsi3+0x20>
112014b4:	30000c26 	beq	r6,zero,112014e8 <__umodsi3+0x4c>
112014b8:	28000516 	blt	r5,zero,112014d0 <__umodsi3+0x34>
112014bc:	294b883a 	add	r5,r5,r5
112014c0:	31bfffc4 	addi	r6,r6,-1
112014c4:	18c7883a 	add	r3,r3,r3
112014c8:	293ffa36 	bltu	r5,r4,112014b4 <__alt_data_end+0xffe814b4>
112014cc:	18000626 	beq	r3,zero,112014e8 <__umodsi3+0x4c>
112014d0:	1806d07a 	srli	r3,r3,1
112014d4:	11400136 	bltu	r2,r5,112014dc <__umodsi3+0x40>
112014d8:	1145c83a 	sub	r2,r2,r5
112014dc:	280ad07a 	srli	r5,r5,1
112014e0:	183ffb1e 	bne	r3,zero,112014d0 <__alt_data_end+0xffe814d0>
112014e4:	f800283a 	ret
112014e8:	f800283a 	ret
112014ec:	00c00044 	movi	r3,1
112014f0:	003ff706 	br	112014d0 <__alt_data_end+0xffe814d0>

112014f4 <_printf_r>:
112014f4:	defffd04 	addi	sp,sp,-12
112014f8:	2805883a 	mov	r2,r5
112014fc:	dfc00015 	stw	ra,0(sp)
11201500:	d9800115 	stw	r6,4(sp)
11201504:	d9c00215 	stw	r7,8(sp)
11201508:	21400217 	ldw	r5,8(r4)
1120150c:	d9c00104 	addi	r7,sp,4
11201510:	100d883a 	mov	r6,r2
11201514:	12016ec0 	call	112016ec <___vfprintf_internal_r>
11201518:	dfc00017 	ldw	ra,0(sp)
1120151c:	dec00304 	addi	sp,sp,12
11201520:	f800283a 	ret

11201524 <printf>:
11201524:	defffc04 	addi	sp,sp,-16
11201528:	dfc00015 	stw	ra,0(sp)
1120152c:	d9400115 	stw	r5,4(sp)
11201530:	d9800215 	stw	r6,8(sp)
11201534:	d9c00315 	stw	r7,12(sp)
11201538:	00844874 	movhi	r2,4385
1120153c:	1088b104 	addi	r2,r2,8900
11201540:	10800017 	ldw	r2,0(r2)
11201544:	200b883a 	mov	r5,r4
11201548:	d9800104 	addi	r6,sp,4
1120154c:	11000217 	ldw	r4,8(r2)
11201550:	12038e40 	call	112038e4 <__vfprintf_internal>
11201554:	dfc00017 	ldw	ra,0(sp)
11201558:	dec00404 	addi	sp,sp,16
1120155c:	f800283a 	ret

11201560 <_putchar_r>:
11201560:	21800217 	ldw	r6,8(r4)
11201564:	12083a81 	jmpi	112083a8 <_putc_r>

11201568 <putchar>:
11201568:	00844874 	movhi	r2,4385
1120156c:	1088b104 	addi	r2,r2,8900
11201570:	200b883a 	mov	r5,r4
11201574:	11000017 	ldw	r4,0(r2)
11201578:	21800217 	ldw	r6,8(r4)
1120157c:	12083a81 	jmpi	112083a8 <_putc_r>

11201580 <_puts_r>:
11201580:	defff604 	addi	sp,sp,-40
11201584:	dc000715 	stw	r16,28(sp)
11201588:	2021883a 	mov	r16,r4
1120158c:	2809883a 	mov	r4,r5
11201590:	dc400815 	stw	r17,32(sp)
11201594:	dfc00915 	stw	ra,36(sp)
11201598:	2823883a 	mov	r17,r5
1120159c:	12016540 	call	11201654 <strlen>
112015a0:	10c00044 	addi	r3,r2,1
112015a4:	d8800115 	stw	r2,4(sp)
112015a8:	00844874 	movhi	r2,4385
112015ac:	10814304 	addi	r2,r2,1292
112015b0:	d8800215 	stw	r2,8(sp)
112015b4:	00800044 	movi	r2,1
112015b8:	d8800315 	stw	r2,12(sp)
112015bc:	00800084 	movi	r2,2
112015c0:	dc400015 	stw	r17,0(sp)
112015c4:	d8c00615 	stw	r3,24(sp)
112015c8:	dec00415 	stw	sp,16(sp)
112015cc:	d8800515 	stw	r2,20(sp)
112015d0:	80000226 	beq	r16,zero,112015dc <_puts_r+0x5c>
112015d4:	80800e17 	ldw	r2,56(r16)
112015d8:	10001426 	beq	r2,zero,1120162c <_puts_r+0xac>
112015dc:	81400217 	ldw	r5,8(r16)
112015e0:	2880030b 	ldhu	r2,12(r5)
112015e4:	10c8000c 	andi	r3,r2,8192
112015e8:	1800061e 	bne	r3,zero,11201604 <_puts_r+0x84>
112015ec:	29001917 	ldw	r4,100(r5)
112015f0:	00f7ffc4 	movi	r3,-8193
112015f4:	10880014 	ori	r2,r2,8192
112015f8:	20c6703a 	and	r3,r4,r3
112015fc:	2880030d 	sth	r2,12(r5)
11201600:	28c01915 	stw	r3,100(r5)
11201604:	d9800404 	addi	r6,sp,16
11201608:	8009883a 	mov	r4,r16
1120160c:	1205e140 	call	11205e14 <__sfvwrite_r>
11201610:	1000091e 	bne	r2,zero,11201638 <_puts_r+0xb8>
11201614:	00800284 	movi	r2,10
11201618:	dfc00917 	ldw	ra,36(sp)
1120161c:	dc400817 	ldw	r17,32(sp)
11201620:	dc000717 	ldw	r16,28(sp)
11201624:	dec00a04 	addi	sp,sp,40
11201628:	f800283a 	ret
1120162c:	8009883a 	mov	r4,r16
11201630:	12059900 	call	11205990 <__sinit>
11201634:	003fe906 	br	112015dc <__alt_data_end+0xffe815dc>
11201638:	00bfffc4 	movi	r2,-1
1120163c:	003ff606 	br	11201618 <__alt_data_end+0xffe81618>

11201640 <puts>:
11201640:	00844874 	movhi	r2,4385
11201644:	1088b104 	addi	r2,r2,8900
11201648:	200b883a 	mov	r5,r4
1120164c:	11000017 	ldw	r4,0(r2)
11201650:	12015801 	jmpi	11201580 <_puts_r>

11201654 <strlen>:
11201654:	208000cc 	andi	r2,r4,3
11201658:	10002026 	beq	r2,zero,112016dc <strlen+0x88>
1120165c:	20800007 	ldb	r2,0(r4)
11201660:	10002026 	beq	r2,zero,112016e4 <strlen+0x90>
11201664:	2005883a 	mov	r2,r4
11201668:	00000206 	br	11201674 <strlen+0x20>
1120166c:	10c00007 	ldb	r3,0(r2)
11201670:	18001826 	beq	r3,zero,112016d4 <strlen+0x80>
11201674:	10800044 	addi	r2,r2,1
11201678:	10c000cc 	andi	r3,r2,3
1120167c:	183ffb1e 	bne	r3,zero,1120166c <__alt_data_end+0xffe8166c>
11201680:	10c00017 	ldw	r3,0(r2)
11201684:	01ffbff4 	movhi	r7,65279
11201688:	39ffbfc4 	addi	r7,r7,-257
1120168c:	00ca303a 	nor	r5,zero,r3
11201690:	01a02074 	movhi	r6,32897
11201694:	19c7883a 	add	r3,r3,r7
11201698:	31a02004 	addi	r6,r6,-32640
1120169c:	1946703a 	and	r3,r3,r5
112016a0:	1986703a 	and	r3,r3,r6
112016a4:	1800091e 	bne	r3,zero,112016cc <strlen+0x78>
112016a8:	10800104 	addi	r2,r2,4
112016ac:	10c00017 	ldw	r3,0(r2)
112016b0:	19cb883a 	add	r5,r3,r7
112016b4:	00c6303a 	nor	r3,zero,r3
112016b8:	28c6703a 	and	r3,r5,r3
112016bc:	1986703a 	and	r3,r3,r6
112016c0:	183ff926 	beq	r3,zero,112016a8 <__alt_data_end+0xffe816a8>
112016c4:	00000106 	br	112016cc <strlen+0x78>
112016c8:	10800044 	addi	r2,r2,1
112016cc:	10c00007 	ldb	r3,0(r2)
112016d0:	183ffd1e 	bne	r3,zero,112016c8 <__alt_data_end+0xffe816c8>
112016d4:	1105c83a 	sub	r2,r2,r4
112016d8:	f800283a 	ret
112016dc:	2005883a 	mov	r2,r4
112016e0:	003fe706 	br	11201680 <__alt_data_end+0xffe81680>
112016e4:	0005883a 	mov	r2,zero
112016e8:	f800283a 	ret

112016ec <___vfprintf_internal_r>:
112016ec:	deffb804 	addi	sp,sp,-288
112016f0:	dfc04715 	stw	ra,284(sp)
112016f4:	ddc04515 	stw	r23,276(sp)
112016f8:	dd404315 	stw	r21,268(sp)
112016fc:	d9002c15 	stw	r4,176(sp)
11201700:	282f883a 	mov	r23,r5
11201704:	302b883a 	mov	r21,r6
11201708:	d9c02d15 	stw	r7,180(sp)
1120170c:	df004615 	stw	fp,280(sp)
11201710:	dd804415 	stw	r22,272(sp)
11201714:	dd004215 	stw	r20,264(sp)
11201718:	dcc04115 	stw	r19,260(sp)
1120171c:	dc804015 	stw	r18,256(sp)
11201720:	dc403f15 	stw	r17,252(sp)
11201724:	dc003e15 	stw	r16,248(sp)
11201728:	12065040 	call	11206504 <_localeconv_r>
1120172c:	10800017 	ldw	r2,0(r2)
11201730:	1009883a 	mov	r4,r2
11201734:	d8803415 	stw	r2,208(sp)
11201738:	12016540 	call	11201654 <strlen>
1120173c:	d8803715 	stw	r2,220(sp)
11201740:	d8802c17 	ldw	r2,176(sp)
11201744:	10000226 	beq	r2,zero,11201750 <___vfprintf_internal_r+0x64>
11201748:	10800e17 	ldw	r2,56(r2)
1120174c:	1000f926 	beq	r2,zero,11201b34 <___vfprintf_internal_r+0x448>
11201750:	b880030b 	ldhu	r2,12(r23)
11201754:	10c8000c 	andi	r3,r2,8192
11201758:	1800061e 	bne	r3,zero,11201774 <___vfprintf_internal_r+0x88>
1120175c:	b9001917 	ldw	r4,100(r23)
11201760:	00f7ffc4 	movi	r3,-8193
11201764:	10880014 	ori	r2,r2,8192
11201768:	20c6703a 	and	r3,r4,r3
1120176c:	b880030d 	sth	r2,12(r23)
11201770:	b8c01915 	stw	r3,100(r23)
11201774:	10c0020c 	andi	r3,r2,8
11201778:	1800c126 	beq	r3,zero,11201a80 <___vfprintf_internal_r+0x394>
1120177c:	b8c00417 	ldw	r3,16(r23)
11201780:	1800bf26 	beq	r3,zero,11201a80 <___vfprintf_internal_r+0x394>
11201784:	1080068c 	andi	r2,r2,26
11201788:	00c00284 	movi	r3,10
1120178c:	10c0c426 	beq	r2,r3,11201aa0 <___vfprintf_internal_r+0x3b4>
11201790:	d8c00404 	addi	r3,sp,16
11201794:	05044874 	movhi	r20,4385
11201798:	d9001e04 	addi	r4,sp,120
1120179c:	a5015484 	addi	r20,r20,1362
112017a0:	d8c01e15 	stw	r3,120(sp)
112017a4:	d8002015 	stw	zero,128(sp)
112017a8:	d8001f15 	stw	zero,124(sp)
112017ac:	d8003315 	stw	zero,204(sp)
112017b0:	d8003615 	stw	zero,216(sp)
112017b4:	d8003815 	stw	zero,224(sp)
112017b8:	1811883a 	mov	r8,r3
112017bc:	d8003915 	stw	zero,228(sp)
112017c0:	d8003a15 	stw	zero,232(sp)
112017c4:	d8002f15 	stw	zero,188(sp)
112017c8:	d9002815 	stw	r4,160(sp)
112017cc:	a8800007 	ldb	r2,0(r21)
112017d0:	10027b26 	beq	r2,zero,112021c0 <___vfprintf_internal_r+0xad4>
112017d4:	00c00944 	movi	r3,37
112017d8:	a821883a 	mov	r16,r21
112017dc:	10c0021e 	bne	r2,r3,112017e8 <___vfprintf_internal_r+0xfc>
112017e0:	00001406 	br	11201834 <___vfprintf_internal_r+0x148>
112017e4:	10c00326 	beq	r2,r3,112017f4 <___vfprintf_internal_r+0x108>
112017e8:	84000044 	addi	r16,r16,1
112017ec:	80800007 	ldb	r2,0(r16)
112017f0:	103ffc1e 	bne	r2,zero,112017e4 <__alt_data_end+0xffe817e4>
112017f4:	8563c83a 	sub	r17,r16,r21
112017f8:	88000e26 	beq	r17,zero,11201834 <___vfprintf_internal_r+0x148>
112017fc:	d8c02017 	ldw	r3,128(sp)
11201800:	d8801f17 	ldw	r2,124(sp)
11201804:	45400015 	stw	r21,0(r8)
11201808:	1c47883a 	add	r3,r3,r17
1120180c:	10800044 	addi	r2,r2,1
11201810:	d8c02015 	stw	r3,128(sp)
11201814:	44400115 	stw	r17,4(r8)
11201818:	d8801f15 	stw	r2,124(sp)
1120181c:	00c001c4 	movi	r3,7
11201820:	1880a716 	blt	r3,r2,11201ac0 <___vfprintf_internal_r+0x3d4>
11201824:	42000204 	addi	r8,r8,8
11201828:	d9402f17 	ldw	r5,188(sp)
1120182c:	2c4b883a 	add	r5,r5,r17
11201830:	d9402f15 	stw	r5,188(sp)
11201834:	80800007 	ldb	r2,0(r16)
11201838:	1000a826 	beq	r2,zero,11201adc <___vfprintf_internal_r+0x3f0>
1120183c:	84400047 	ldb	r17,1(r16)
11201840:	00bfffc4 	movi	r2,-1
11201844:	85400044 	addi	r21,r16,1
11201848:	d8002785 	stb	zero,158(sp)
1120184c:	0007883a 	mov	r3,zero
11201850:	000f883a 	mov	r7,zero
11201854:	d8802915 	stw	r2,164(sp)
11201858:	d8003115 	stw	zero,196(sp)
1120185c:	0025883a 	mov	r18,zero
11201860:	01401604 	movi	r5,88
11201864:	01800244 	movi	r6,9
11201868:	02800a84 	movi	r10,42
1120186c:	02401b04 	movi	r9,108
11201870:	ad400044 	addi	r21,r21,1
11201874:	88bff804 	addi	r2,r17,-32
11201878:	28830436 	bltu	r5,r2,1120248c <___vfprintf_internal_r+0xda0>
1120187c:	100490ba 	slli	r2,r2,2
11201880:	01044834 	movhi	r4,4384
11201884:	21062504 	addi	r4,r4,6292
11201888:	1105883a 	add	r2,r2,r4
1120188c:	10800017 	ldw	r2,0(r2)
11201890:	1000683a 	jmp	r2
11201894:	112023ac 	andhi	r4,r2,32910
11201898:	1120248c 	andi	r4,r2,32914
1120189c:	1120248c 	andi	r4,r2,32914
112018a0:	112023cc 	andi	r4,r2,32911
112018a4:	1120248c 	andi	r4,r2,32914
112018a8:	1120248c 	andi	r4,r2,32914
112018ac:	1120248c 	andi	r4,r2,32914
112018b0:	1120248c 	andi	r4,r2,32914
112018b4:	1120248c 	andi	r4,r2,32914
112018b8:	1120248c 	andi	r4,r2,32914
112018bc:	11201b40 	call	111201b4 <__reset+0xcfe01b4>
112018c0:	112022e8 	cmpgeui	r4,r2,32907
112018c4:	1120248c 	andi	r4,r2,32914
112018c8:	11201a08 	cmpgei	r4,r2,-32664
112018cc:	11201b68 	cmpgeui	r4,r2,32877
112018d0:	1120248c 	andi	r4,r2,32914
112018d4:	11201ba8 	cmpgeui	r4,r2,32878
112018d8:	11201bb4 	orhi	r4,r2,32878
112018dc:	11201bb4 	orhi	r4,r2,32878
112018e0:	11201bb4 	orhi	r4,r2,32878
112018e4:	11201bb4 	orhi	r4,r2,32878
112018e8:	11201bb4 	orhi	r4,r2,32878
112018ec:	11201bb4 	orhi	r4,r2,32878
112018f0:	11201bb4 	orhi	r4,r2,32878
112018f4:	11201bb4 	orhi	r4,r2,32878
112018f8:	11201bb4 	orhi	r4,r2,32878
112018fc:	1120248c 	andi	r4,r2,32914
11201900:	1120248c 	andi	r4,r2,32914
11201904:	1120248c 	andi	r4,r2,32914
11201908:	1120248c 	andi	r4,r2,32914
1120190c:	1120248c 	andi	r4,r2,32914
11201910:	1120248c 	andi	r4,r2,32914
11201914:	1120248c 	andi	r4,r2,32914
11201918:	1120248c 	andi	r4,r2,32914
1120191c:	1120248c 	andi	r4,r2,32914
11201920:	1120248c 	andi	r4,r2,32914
11201924:	11201be8 	cmpgeui	r4,r2,32879
11201928:	11201ca4 	muli	r4,r2,-32654
1120192c:	1120248c 	andi	r4,r2,32914
11201930:	11201ca4 	muli	r4,r2,-32654
11201934:	1120248c 	andi	r4,r2,32914
11201938:	1120248c 	andi	r4,r2,32914
1120193c:	1120248c 	andi	r4,r2,32914
11201940:	1120248c 	andi	r4,r2,32914
11201944:	11201d44 	addi	r4,r2,-32651
11201948:	1120248c 	andi	r4,r2,32914
1120194c:	1120248c 	andi	r4,r2,32914
11201950:	11201d50 	cmplti	r4,r2,-32651
11201954:	1120248c 	andi	r4,r2,32914
11201958:	1120248c 	andi	r4,r2,32914
1120195c:	1120248c 	andi	r4,r2,32914
11201960:	1120248c 	andi	r4,r2,32914
11201964:	1120248c 	andi	r4,r2,32914
11201968:	112021c8 	cmpgei	r4,r2,-32633
1120196c:	1120248c 	andi	r4,r2,32914
11201970:	1120248c 	andi	r4,r2,32914
11201974:	11202228 	cmpgeui	r4,r2,32904
11201978:	1120248c 	andi	r4,r2,32914
1120197c:	1120248c 	andi	r4,r2,32914
11201980:	1120248c 	andi	r4,r2,32914
11201984:	1120248c 	andi	r4,r2,32914
11201988:	1120248c 	andi	r4,r2,32914
1120198c:	1120248c 	andi	r4,r2,32914
11201990:	1120248c 	andi	r4,r2,32914
11201994:	1120248c 	andi	r4,r2,32914
11201998:	1120248c 	andi	r4,r2,32914
1120199c:	1120248c 	andi	r4,r2,32914
112019a0:	11202438 	rdprs	r4,r2,-32624
112019a4:	112023d8 	cmpnei	r4,r2,-32625
112019a8:	11201ca4 	muli	r4,r2,-32654
112019ac:	11201ca4 	muli	r4,r2,-32654
112019b0:	11201ca4 	muli	r4,r2,-32654
112019b4:	112023e8 	cmpgeui	r4,r2,32911
112019b8:	112023d8 	cmpnei	r4,r2,-32625
112019bc:	1120248c 	andi	r4,r2,32914
112019c0:	1120248c 	andi	r4,r2,32914
112019c4:	112023f4 	orhi	r4,r2,32911
112019c8:	1120248c 	andi	r4,r2,32914
112019cc:	11202404 	addi	r4,r2,-32624
112019d0:	112022d8 	cmpnei	r4,r2,-32629
112019d4:	11201a14 	ori	r4,r2,32872
112019d8:	112022f8 	rdprs	r4,r2,-32629
112019dc:	1120248c 	andi	r4,r2,32914
112019e0:	11202304 	addi	r4,r2,-32628
112019e4:	1120248c 	andi	r4,r2,32914
112019e8:	11202360 	cmpeqi	r4,r2,-32627
112019ec:	1120248c 	andi	r4,r2,32914
112019f0:	1120248c 	andi	r4,r2,32914
112019f4:	11202370 	cmpltui	r4,r2,32909
112019f8:	d9003117 	ldw	r4,196(sp)
112019fc:	d8802d15 	stw	r2,180(sp)
11201a00:	0109c83a 	sub	r4,zero,r4
11201a04:	d9003115 	stw	r4,196(sp)
11201a08:	94800114 	ori	r18,r18,4
11201a0c:	ac400007 	ldb	r17,0(r21)
11201a10:	003f9706 	br	11201870 <__alt_data_end+0xffe81870>
11201a14:	00800c04 	movi	r2,48
11201a18:	d9002d17 	ldw	r4,180(sp)
11201a1c:	d9402917 	ldw	r5,164(sp)
11201a20:	d8802705 	stb	r2,156(sp)
11201a24:	00801e04 	movi	r2,120
11201a28:	d8802745 	stb	r2,157(sp)
11201a2c:	d8002785 	stb	zero,158(sp)
11201a30:	20c00104 	addi	r3,r4,4
11201a34:	24c00017 	ldw	r19,0(r4)
11201a38:	002d883a 	mov	r22,zero
11201a3c:	90800094 	ori	r2,r18,2
11201a40:	28029a16 	blt	r5,zero,112024ac <___vfprintf_internal_r+0xdc0>
11201a44:	00bfdfc4 	movi	r2,-129
11201a48:	90a4703a 	and	r18,r18,r2
11201a4c:	d8c02d15 	stw	r3,180(sp)
11201a50:	94800094 	ori	r18,r18,2
11201a54:	9802871e 	bne	r19,zero,11202474 <___vfprintf_internal_r+0xd88>
11201a58:	00844874 	movhi	r2,4385
11201a5c:	10814d04 	addi	r2,r2,1332
11201a60:	d8803915 	stw	r2,228(sp)
11201a64:	04401e04 	movi	r17,120
11201a68:	d8802917 	ldw	r2,164(sp)
11201a6c:	0039883a 	mov	fp,zero
11201a70:	1001e926 	beq	r2,zero,11202218 <___vfprintf_internal_r+0xb2c>
11201a74:	0027883a 	mov	r19,zero
11201a78:	002d883a 	mov	r22,zero
11201a7c:	00020506 	br	11202294 <___vfprintf_internal_r+0xba8>
11201a80:	d9002c17 	ldw	r4,176(sp)
11201a84:	b80b883a 	mov	r5,r23
11201a88:	12039bc0 	call	112039bc <__swsetup_r>
11201a8c:	1005ac1e 	bne	r2,zero,11203140 <___vfprintf_internal_r+0x1a54>
11201a90:	b880030b 	ldhu	r2,12(r23)
11201a94:	00c00284 	movi	r3,10
11201a98:	1080068c 	andi	r2,r2,26
11201a9c:	10ff3c1e 	bne	r2,r3,11201790 <__alt_data_end+0xffe81790>
11201aa0:	b880038f 	ldh	r2,14(r23)
11201aa4:	103f3a16 	blt	r2,zero,11201790 <__alt_data_end+0xffe81790>
11201aa8:	d9c02d17 	ldw	r7,180(sp)
11201aac:	d9002c17 	ldw	r4,176(sp)
11201ab0:	a80d883a 	mov	r6,r21
11201ab4:	b80b883a 	mov	r5,r23
11201ab8:	12039000 	call	11203900 <__sbprintf>
11201abc:	00001106 	br	11201b04 <___vfprintf_internal_r+0x418>
11201ac0:	d9002c17 	ldw	r4,176(sp)
11201ac4:	d9801e04 	addi	r6,sp,120
11201ac8:	b80b883a 	mov	r5,r23
11201acc:	1208e500 	call	11208e50 <__sprint_r>
11201ad0:	1000081e 	bne	r2,zero,11201af4 <___vfprintf_internal_r+0x408>
11201ad4:	da000404 	addi	r8,sp,16
11201ad8:	003f5306 	br	11201828 <__alt_data_end+0xffe81828>
11201adc:	d8802017 	ldw	r2,128(sp)
11201ae0:	10000426 	beq	r2,zero,11201af4 <___vfprintf_internal_r+0x408>
11201ae4:	d9002c17 	ldw	r4,176(sp)
11201ae8:	d9801e04 	addi	r6,sp,120
11201aec:	b80b883a 	mov	r5,r23
11201af0:	1208e500 	call	11208e50 <__sprint_r>
11201af4:	b880030b 	ldhu	r2,12(r23)
11201af8:	1080100c 	andi	r2,r2,64
11201afc:	1005901e 	bne	r2,zero,11203140 <___vfprintf_internal_r+0x1a54>
11201b00:	d8802f17 	ldw	r2,188(sp)
11201b04:	dfc04717 	ldw	ra,284(sp)
11201b08:	df004617 	ldw	fp,280(sp)
11201b0c:	ddc04517 	ldw	r23,276(sp)
11201b10:	dd804417 	ldw	r22,272(sp)
11201b14:	dd404317 	ldw	r21,268(sp)
11201b18:	dd004217 	ldw	r20,264(sp)
11201b1c:	dcc04117 	ldw	r19,260(sp)
11201b20:	dc804017 	ldw	r18,256(sp)
11201b24:	dc403f17 	ldw	r17,252(sp)
11201b28:	dc003e17 	ldw	r16,248(sp)
11201b2c:	dec04804 	addi	sp,sp,288
11201b30:	f800283a 	ret
11201b34:	d9002c17 	ldw	r4,176(sp)
11201b38:	12059900 	call	11205990 <__sinit>
11201b3c:	003f0406 	br	11201750 <__alt_data_end+0xffe81750>
11201b40:	d8802d17 	ldw	r2,180(sp)
11201b44:	d9002d17 	ldw	r4,180(sp)
11201b48:	10800017 	ldw	r2,0(r2)
11201b4c:	d8803115 	stw	r2,196(sp)
11201b50:	20800104 	addi	r2,r4,4
11201b54:	d9003117 	ldw	r4,196(sp)
11201b58:	203fa716 	blt	r4,zero,112019f8 <__alt_data_end+0xffe819f8>
11201b5c:	d8802d15 	stw	r2,180(sp)
11201b60:	ac400007 	ldb	r17,0(r21)
11201b64:	003f4206 	br	11201870 <__alt_data_end+0xffe81870>
11201b68:	ac400007 	ldb	r17,0(r21)
11201b6c:	aac00044 	addi	r11,r21,1
11201b70:	8a872826 	beq	r17,r10,11203814 <___vfprintf_internal_r+0x2128>
11201b74:	88bff404 	addi	r2,r17,-48
11201b78:	0009883a 	mov	r4,zero
11201b7c:	30867d36 	bltu	r6,r2,11203574 <___vfprintf_internal_r+0x1e88>
11201b80:	5c400007 	ldb	r17,0(r11)
11201b84:	210002a4 	muli	r4,r4,10
11201b88:	5d400044 	addi	r21,r11,1
11201b8c:	a817883a 	mov	r11,r21
11201b90:	2089883a 	add	r4,r4,r2
11201b94:	88bff404 	addi	r2,r17,-48
11201b98:	30bff92e 	bgeu	r6,r2,11201b80 <__alt_data_end+0xffe81b80>
11201b9c:	2005c916 	blt	r4,zero,112032c4 <___vfprintf_internal_r+0x1bd8>
11201ba0:	d9002915 	stw	r4,164(sp)
11201ba4:	003f3306 	br	11201874 <__alt_data_end+0xffe81874>
11201ba8:	94802014 	ori	r18,r18,128
11201bac:	ac400007 	ldb	r17,0(r21)
11201bb0:	003f2f06 	br	11201870 <__alt_data_end+0xffe81870>
11201bb4:	a809883a 	mov	r4,r21
11201bb8:	d8003115 	stw	zero,196(sp)
11201bbc:	88bff404 	addi	r2,r17,-48
11201bc0:	0017883a 	mov	r11,zero
11201bc4:	24400007 	ldb	r17,0(r4)
11201bc8:	5ac002a4 	muli	r11,r11,10
11201bcc:	ad400044 	addi	r21,r21,1
11201bd0:	a809883a 	mov	r4,r21
11201bd4:	12d7883a 	add	r11,r2,r11
11201bd8:	88bff404 	addi	r2,r17,-48
11201bdc:	30bff92e 	bgeu	r6,r2,11201bc4 <__alt_data_end+0xffe81bc4>
11201be0:	dac03115 	stw	r11,196(sp)
11201be4:	003f2306 	br	11201874 <__alt_data_end+0xffe81874>
11201be8:	18c03fcc 	andi	r3,r3,255
11201bec:	18072b1e 	bne	r3,zero,1120389c <___vfprintf_internal_r+0x21b0>
11201bf0:	94800414 	ori	r18,r18,16
11201bf4:	9080080c 	andi	r2,r18,32
11201bf8:	10037b26 	beq	r2,zero,112029e8 <___vfprintf_internal_r+0x12fc>
11201bfc:	d9402d17 	ldw	r5,180(sp)
11201c00:	28800117 	ldw	r2,4(r5)
11201c04:	2cc00017 	ldw	r19,0(r5)
11201c08:	29400204 	addi	r5,r5,8
11201c0c:	d9402d15 	stw	r5,180(sp)
11201c10:	102d883a 	mov	r22,r2
11201c14:	10044b16 	blt	r2,zero,11202d44 <___vfprintf_internal_r+0x1658>
11201c18:	d9402917 	ldw	r5,164(sp)
11201c1c:	df002783 	ldbu	fp,158(sp)
11201c20:	2803bc16 	blt	r5,zero,11202b14 <___vfprintf_internal_r+0x1428>
11201c24:	00ffdfc4 	movi	r3,-129
11201c28:	9d84b03a 	or	r2,r19,r22
11201c2c:	90e4703a 	and	r18,r18,r3
11201c30:	10017726 	beq	r2,zero,11202210 <___vfprintf_internal_r+0xb24>
11201c34:	b0038326 	beq	r22,zero,11202a44 <___vfprintf_internal_r+0x1358>
11201c38:	dc402a15 	stw	r17,168(sp)
11201c3c:	dc001e04 	addi	r16,sp,120
11201c40:	b023883a 	mov	r17,r22
11201c44:	402d883a 	mov	r22,r8
11201c48:	9809883a 	mov	r4,r19
11201c4c:	880b883a 	mov	r5,r17
11201c50:	01800284 	movi	r6,10
11201c54:	000f883a 	mov	r7,zero
11201c58:	120b2480 	call	1120b248 <__umoddi3>
11201c5c:	10800c04 	addi	r2,r2,48
11201c60:	843fffc4 	addi	r16,r16,-1
11201c64:	9809883a 	mov	r4,r19
11201c68:	880b883a 	mov	r5,r17
11201c6c:	80800005 	stb	r2,0(r16)
11201c70:	01800284 	movi	r6,10
11201c74:	000f883a 	mov	r7,zero
11201c78:	120acd00 	call	1120acd0 <__udivdi3>
11201c7c:	1027883a 	mov	r19,r2
11201c80:	10c4b03a 	or	r2,r2,r3
11201c84:	1823883a 	mov	r17,r3
11201c88:	103fef1e 	bne	r2,zero,11201c48 <__alt_data_end+0xffe81c48>
11201c8c:	d8c02817 	ldw	r3,160(sp)
11201c90:	dc402a17 	ldw	r17,168(sp)
11201c94:	b011883a 	mov	r8,r22
11201c98:	1c07c83a 	sub	r3,r3,r16
11201c9c:	d8c02e15 	stw	r3,184(sp)
11201ca0:	00005906 	br	11201e08 <___vfprintf_internal_r+0x71c>
11201ca4:	18c03fcc 	andi	r3,r3,255
11201ca8:	1806fa1e 	bne	r3,zero,11203894 <___vfprintf_internal_r+0x21a8>
11201cac:	9080020c 	andi	r2,r18,8
11201cb0:	10048a26 	beq	r2,zero,11202edc <___vfprintf_internal_r+0x17f0>
11201cb4:	d8c02d17 	ldw	r3,180(sp)
11201cb8:	d9002d17 	ldw	r4,180(sp)
11201cbc:	d9402d17 	ldw	r5,180(sp)
11201cc0:	18c00017 	ldw	r3,0(r3)
11201cc4:	21000117 	ldw	r4,4(r4)
11201cc8:	29400204 	addi	r5,r5,8
11201ccc:	d8c03615 	stw	r3,216(sp)
11201cd0:	d9003815 	stw	r4,224(sp)
11201cd4:	d9402d15 	stw	r5,180(sp)
11201cd8:	d9003617 	ldw	r4,216(sp)
11201cdc:	d9403817 	ldw	r5,224(sp)
11201ce0:	da003d15 	stw	r8,244(sp)
11201ce4:	04000044 	movi	r16,1
11201ce8:	1208a740 	call	11208a74 <__fpclassifyd>
11201cec:	da003d17 	ldw	r8,244(sp)
11201cf0:	14041f1e 	bne	r2,r16,11202d70 <___vfprintf_internal_r+0x1684>
11201cf4:	d9003617 	ldw	r4,216(sp)
11201cf8:	d9403817 	ldw	r5,224(sp)
11201cfc:	000d883a 	mov	r6,zero
11201d00:	000f883a 	mov	r7,zero
11201d04:	120ca780 	call	1120ca78 <__ledf2>
11201d08:	da003d17 	ldw	r8,244(sp)
11201d0c:	1005be16 	blt	r2,zero,11203408 <___vfprintf_internal_r+0x1d1c>
11201d10:	df002783 	ldbu	fp,158(sp)
11201d14:	008011c4 	movi	r2,71
11201d18:	1445330e 	bge	r2,r17,112031e8 <___vfprintf_internal_r+0x1afc>
11201d1c:	04044874 	movhi	r16,4385
11201d20:	84014504 	addi	r16,r16,1300
11201d24:	00c000c4 	movi	r3,3
11201d28:	00bfdfc4 	movi	r2,-129
11201d2c:	d8c02a15 	stw	r3,168(sp)
11201d30:	90a4703a 	and	r18,r18,r2
11201d34:	d8c02e15 	stw	r3,184(sp)
11201d38:	d8002915 	stw	zero,164(sp)
11201d3c:	d8003215 	stw	zero,200(sp)
11201d40:	00003706 	br	11201e20 <___vfprintf_internal_r+0x734>
11201d44:	94800214 	ori	r18,r18,8
11201d48:	ac400007 	ldb	r17,0(r21)
11201d4c:	003ec806 	br	11201870 <__alt_data_end+0xffe81870>
11201d50:	18c03fcc 	andi	r3,r3,255
11201d54:	1806db1e 	bne	r3,zero,112038c4 <___vfprintf_internal_r+0x21d8>
11201d58:	94800414 	ori	r18,r18,16
11201d5c:	9080080c 	andi	r2,r18,32
11201d60:	1002d826 	beq	r2,zero,112028c4 <___vfprintf_internal_r+0x11d8>
11201d64:	d9402d17 	ldw	r5,180(sp)
11201d68:	d8c02917 	ldw	r3,164(sp)
11201d6c:	d8002785 	stb	zero,158(sp)
11201d70:	28800204 	addi	r2,r5,8
11201d74:	2cc00017 	ldw	r19,0(r5)
11201d78:	2d800117 	ldw	r22,4(r5)
11201d7c:	18048f16 	blt	r3,zero,11202fbc <___vfprintf_internal_r+0x18d0>
11201d80:	013fdfc4 	movi	r4,-129
11201d84:	9d86b03a 	or	r3,r19,r22
11201d88:	d8802d15 	stw	r2,180(sp)
11201d8c:	9124703a 	and	r18,r18,r4
11201d90:	1802d91e 	bne	r3,zero,112028f8 <___vfprintf_internal_r+0x120c>
11201d94:	d8c02917 	ldw	r3,164(sp)
11201d98:	0039883a 	mov	fp,zero
11201d9c:	1805c326 	beq	r3,zero,112034ac <___vfprintf_internal_r+0x1dc0>
11201da0:	0027883a 	mov	r19,zero
11201da4:	002d883a 	mov	r22,zero
11201da8:	dc001e04 	addi	r16,sp,120
11201dac:	9806d0fa 	srli	r3,r19,3
11201db0:	b008977a 	slli	r4,r22,29
11201db4:	b02cd0fa 	srli	r22,r22,3
11201db8:	9cc001cc 	andi	r19,r19,7
11201dbc:	98800c04 	addi	r2,r19,48
11201dc0:	843fffc4 	addi	r16,r16,-1
11201dc4:	20e6b03a 	or	r19,r4,r3
11201dc8:	80800005 	stb	r2,0(r16)
11201dcc:	9d86b03a 	or	r3,r19,r22
11201dd0:	183ff61e 	bne	r3,zero,11201dac <__alt_data_end+0xffe81dac>
11201dd4:	90c0004c 	andi	r3,r18,1
11201dd8:	18013b26 	beq	r3,zero,112022c8 <___vfprintf_internal_r+0xbdc>
11201ddc:	10803fcc 	andi	r2,r2,255
11201de0:	1080201c 	xori	r2,r2,128
11201de4:	10bfe004 	addi	r2,r2,-128
11201de8:	00c00c04 	movi	r3,48
11201dec:	10c13626 	beq	r2,r3,112022c8 <___vfprintf_internal_r+0xbdc>
11201df0:	80ffffc5 	stb	r3,-1(r16)
11201df4:	d8c02817 	ldw	r3,160(sp)
11201df8:	80bfffc4 	addi	r2,r16,-1
11201dfc:	1021883a 	mov	r16,r2
11201e00:	1887c83a 	sub	r3,r3,r2
11201e04:	d8c02e15 	stw	r3,184(sp)
11201e08:	d8802e17 	ldw	r2,184(sp)
11201e0c:	d9002917 	ldw	r4,164(sp)
11201e10:	1100010e 	bge	r2,r4,11201e18 <___vfprintf_internal_r+0x72c>
11201e14:	2005883a 	mov	r2,r4
11201e18:	d8802a15 	stw	r2,168(sp)
11201e1c:	d8003215 	stw	zero,200(sp)
11201e20:	e7003fcc 	andi	fp,fp,255
11201e24:	e700201c 	xori	fp,fp,128
11201e28:	e73fe004 	addi	fp,fp,-128
11201e2c:	e0000326 	beq	fp,zero,11201e3c <___vfprintf_internal_r+0x750>
11201e30:	d8c02a17 	ldw	r3,168(sp)
11201e34:	18c00044 	addi	r3,r3,1
11201e38:	d8c02a15 	stw	r3,168(sp)
11201e3c:	90c0008c 	andi	r3,r18,2
11201e40:	d8c02b15 	stw	r3,172(sp)
11201e44:	18000326 	beq	r3,zero,11201e54 <___vfprintf_internal_r+0x768>
11201e48:	d8c02a17 	ldw	r3,168(sp)
11201e4c:	18c00084 	addi	r3,r3,2
11201e50:	d8c02a15 	stw	r3,168(sp)
11201e54:	90c0210c 	andi	r3,r18,132
11201e58:	d8c03015 	stw	r3,192(sp)
11201e5c:	1801a31e 	bne	r3,zero,112024ec <___vfprintf_internal_r+0xe00>
11201e60:	d9003117 	ldw	r4,196(sp)
11201e64:	d8c02a17 	ldw	r3,168(sp)
11201e68:	20e7c83a 	sub	r19,r4,r3
11201e6c:	04c19f0e 	bge	zero,r19,112024ec <___vfprintf_internal_r+0xe00>
11201e70:	02400404 	movi	r9,16
11201e74:	d8c02017 	ldw	r3,128(sp)
11201e78:	d8801f17 	ldw	r2,124(sp)
11201e7c:	4cc50d0e 	bge	r9,r19,112032b4 <___vfprintf_internal_r+0x1bc8>
11201e80:	01444874 	movhi	r5,4385
11201e84:	29415884 	addi	r5,r5,1378
11201e88:	dc403b15 	stw	r17,236(sp)
11201e8c:	d9403515 	stw	r5,212(sp)
11201e90:	9823883a 	mov	r17,r19
11201e94:	482d883a 	mov	r22,r9
11201e98:	9027883a 	mov	r19,r18
11201e9c:	070001c4 	movi	fp,7
11201ea0:	8025883a 	mov	r18,r16
11201ea4:	dc002c17 	ldw	r16,176(sp)
11201ea8:	00000306 	br	11201eb8 <___vfprintf_internal_r+0x7cc>
11201eac:	8c7ffc04 	addi	r17,r17,-16
11201eb0:	42000204 	addi	r8,r8,8
11201eb4:	b440130e 	bge	r22,r17,11201f04 <___vfprintf_internal_r+0x818>
11201eb8:	01044874 	movhi	r4,4385
11201ebc:	18c00404 	addi	r3,r3,16
11201ec0:	10800044 	addi	r2,r2,1
11201ec4:	21015884 	addi	r4,r4,1378
11201ec8:	41000015 	stw	r4,0(r8)
11201ecc:	45800115 	stw	r22,4(r8)
11201ed0:	d8c02015 	stw	r3,128(sp)
11201ed4:	d8801f15 	stw	r2,124(sp)
11201ed8:	e0bff40e 	bge	fp,r2,11201eac <__alt_data_end+0xffe81eac>
11201edc:	d9801e04 	addi	r6,sp,120
11201ee0:	b80b883a 	mov	r5,r23
11201ee4:	8009883a 	mov	r4,r16
11201ee8:	1208e500 	call	11208e50 <__sprint_r>
11201eec:	103f011e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11201ef0:	8c7ffc04 	addi	r17,r17,-16
11201ef4:	d8c02017 	ldw	r3,128(sp)
11201ef8:	d8801f17 	ldw	r2,124(sp)
11201efc:	da000404 	addi	r8,sp,16
11201f00:	b47fed16 	blt	r22,r17,11201eb8 <__alt_data_end+0xffe81eb8>
11201f04:	9021883a 	mov	r16,r18
11201f08:	9825883a 	mov	r18,r19
11201f0c:	8827883a 	mov	r19,r17
11201f10:	dc403b17 	ldw	r17,236(sp)
11201f14:	d9403517 	ldw	r5,212(sp)
11201f18:	98c7883a 	add	r3,r19,r3
11201f1c:	10800044 	addi	r2,r2,1
11201f20:	41400015 	stw	r5,0(r8)
11201f24:	44c00115 	stw	r19,4(r8)
11201f28:	d8c02015 	stw	r3,128(sp)
11201f2c:	d8801f15 	stw	r2,124(sp)
11201f30:	010001c4 	movi	r4,7
11201f34:	2082a316 	blt	r4,r2,112029c4 <___vfprintf_internal_r+0x12d8>
11201f38:	df002787 	ldb	fp,158(sp)
11201f3c:	42000204 	addi	r8,r8,8
11201f40:	e0000c26 	beq	fp,zero,11201f74 <___vfprintf_internal_r+0x888>
11201f44:	d8801f17 	ldw	r2,124(sp)
11201f48:	d9002784 	addi	r4,sp,158
11201f4c:	18c00044 	addi	r3,r3,1
11201f50:	10800044 	addi	r2,r2,1
11201f54:	41000015 	stw	r4,0(r8)
11201f58:	01000044 	movi	r4,1
11201f5c:	41000115 	stw	r4,4(r8)
11201f60:	d8c02015 	stw	r3,128(sp)
11201f64:	d8801f15 	stw	r2,124(sp)
11201f68:	010001c4 	movi	r4,7
11201f6c:	20823c16 	blt	r4,r2,11202860 <___vfprintf_internal_r+0x1174>
11201f70:	42000204 	addi	r8,r8,8
11201f74:	d8802b17 	ldw	r2,172(sp)
11201f78:	10000c26 	beq	r2,zero,11201fac <___vfprintf_internal_r+0x8c0>
11201f7c:	d8801f17 	ldw	r2,124(sp)
11201f80:	d9002704 	addi	r4,sp,156
11201f84:	18c00084 	addi	r3,r3,2
11201f88:	10800044 	addi	r2,r2,1
11201f8c:	41000015 	stw	r4,0(r8)
11201f90:	01000084 	movi	r4,2
11201f94:	41000115 	stw	r4,4(r8)
11201f98:	d8c02015 	stw	r3,128(sp)
11201f9c:	d8801f15 	stw	r2,124(sp)
11201fa0:	010001c4 	movi	r4,7
11201fa4:	20823616 	blt	r4,r2,11202880 <___vfprintf_internal_r+0x1194>
11201fa8:	42000204 	addi	r8,r8,8
11201fac:	d9003017 	ldw	r4,192(sp)
11201fb0:	00802004 	movi	r2,128
11201fb4:	20819926 	beq	r4,r2,1120261c <___vfprintf_internal_r+0xf30>
11201fb8:	d9402917 	ldw	r5,164(sp)
11201fbc:	d8802e17 	ldw	r2,184(sp)
11201fc0:	28adc83a 	sub	r22,r5,r2
11201fc4:	0580310e 	bge	zero,r22,1120208c <___vfprintf_internal_r+0x9a0>
11201fc8:	07000404 	movi	fp,16
11201fcc:	d8801f17 	ldw	r2,124(sp)
11201fd0:	e584140e 	bge	fp,r22,11203024 <___vfprintf_internal_r+0x1938>
11201fd4:	01444874 	movhi	r5,4385
11201fd8:	29415484 	addi	r5,r5,1362
11201fdc:	dc402915 	stw	r17,164(sp)
11201fe0:	d9402b15 	stw	r5,172(sp)
11201fe4:	b023883a 	mov	r17,r22
11201fe8:	04c001c4 	movi	r19,7
11201fec:	a82d883a 	mov	r22,r21
11201ff0:	902b883a 	mov	r21,r18
11201ff4:	8025883a 	mov	r18,r16
11201ff8:	dc002c17 	ldw	r16,176(sp)
11201ffc:	00000306 	br	1120200c <___vfprintf_internal_r+0x920>
11202000:	8c7ffc04 	addi	r17,r17,-16
11202004:	42000204 	addi	r8,r8,8
11202008:	e440110e 	bge	fp,r17,11202050 <___vfprintf_internal_r+0x964>
1120200c:	18c00404 	addi	r3,r3,16
11202010:	10800044 	addi	r2,r2,1
11202014:	45000015 	stw	r20,0(r8)
11202018:	47000115 	stw	fp,4(r8)
1120201c:	d8c02015 	stw	r3,128(sp)
11202020:	d8801f15 	stw	r2,124(sp)
11202024:	98bff60e 	bge	r19,r2,11202000 <__alt_data_end+0xffe82000>
11202028:	d9801e04 	addi	r6,sp,120
1120202c:	b80b883a 	mov	r5,r23
11202030:	8009883a 	mov	r4,r16
11202034:	1208e500 	call	11208e50 <__sprint_r>
11202038:	103eae1e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
1120203c:	8c7ffc04 	addi	r17,r17,-16
11202040:	d8c02017 	ldw	r3,128(sp)
11202044:	d8801f17 	ldw	r2,124(sp)
11202048:	da000404 	addi	r8,sp,16
1120204c:	e47fef16 	blt	fp,r17,1120200c <__alt_data_end+0xffe8200c>
11202050:	9021883a 	mov	r16,r18
11202054:	a825883a 	mov	r18,r21
11202058:	b02b883a 	mov	r21,r22
1120205c:	882d883a 	mov	r22,r17
11202060:	dc402917 	ldw	r17,164(sp)
11202064:	d9002b17 	ldw	r4,172(sp)
11202068:	1d87883a 	add	r3,r3,r22
1120206c:	10800044 	addi	r2,r2,1
11202070:	41000015 	stw	r4,0(r8)
11202074:	45800115 	stw	r22,4(r8)
11202078:	d8c02015 	stw	r3,128(sp)
1120207c:	d8801f15 	stw	r2,124(sp)
11202080:	010001c4 	movi	r4,7
11202084:	2081ee16 	blt	r4,r2,11202840 <___vfprintf_internal_r+0x1154>
11202088:	42000204 	addi	r8,r8,8
1120208c:	9080400c 	andi	r2,r18,256
11202090:	1001181e 	bne	r2,zero,112024f4 <___vfprintf_internal_r+0xe08>
11202094:	d9402e17 	ldw	r5,184(sp)
11202098:	d8801f17 	ldw	r2,124(sp)
1120209c:	44000015 	stw	r16,0(r8)
112020a0:	1947883a 	add	r3,r3,r5
112020a4:	10800044 	addi	r2,r2,1
112020a8:	41400115 	stw	r5,4(r8)
112020ac:	d8c02015 	stw	r3,128(sp)
112020b0:	d8801f15 	stw	r2,124(sp)
112020b4:	010001c4 	movi	r4,7
112020b8:	2081d316 	blt	r4,r2,11202808 <___vfprintf_internal_r+0x111c>
112020bc:	42000204 	addi	r8,r8,8
112020c0:	9480010c 	andi	r18,r18,4
112020c4:	90003226 	beq	r18,zero,11202190 <___vfprintf_internal_r+0xaa4>
112020c8:	d9403117 	ldw	r5,196(sp)
112020cc:	d8802a17 	ldw	r2,168(sp)
112020d0:	28a1c83a 	sub	r16,r5,r2
112020d4:	04002e0e 	bge	zero,r16,11202190 <___vfprintf_internal_r+0xaa4>
112020d8:	04400404 	movi	r17,16
112020dc:	d8801f17 	ldw	r2,124(sp)
112020e0:	8c04a20e 	bge	r17,r16,1120336c <___vfprintf_internal_r+0x1c80>
112020e4:	01444874 	movhi	r5,4385
112020e8:	29415884 	addi	r5,r5,1378
112020ec:	d9403515 	stw	r5,212(sp)
112020f0:	048001c4 	movi	r18,7
112020f4:	dcc02c17 	ldw	r19,176(sp)
112020f8:	00000306 	br	11202108 <___vfprintf_internal_r+0xa1c>
112020fc:	843ffc04 	addi	r16,r16,-16
11202100:	42000204 	addi	r8,r8,8
11202104:	8c00130e 	bge	r17,r16,11202154 <___vfprintf_internal_r+0xa68>
11202108:	01044874 	movhi	r4,4385
1120210c:	18c00404 	addi	r3,r3,16
11202110:	10800044 	addi	r2,r2,1
11202114:	21015884 	addi	r4,r4,1378
11202118:	41000015 	stw	r4,0(r8)
1120211c:	44400115 	stw	r17,4(r8)
11202120:	d8c02015 	stw	r3,128(sp)
11202124:	d8801f15 	stw	r2,124(sp)
11202128:	90bff40e 	bge	r18,r2,112020fc <__alt_data_end+0xffe820fc>
1120212c:	d9801e04 	addi	r6,sp,120
11202130:	b80b883a 	mov	r5,r23
11202134:	9809883a 	mov	r4,r19
11202138:	1208e500 	call	11208e50 <__sprint_r>
1120213c:	103e6d1e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11202140:	843ffc04 	addi	r16,r16,-16
11202144:	d8c02017 	ldw	r3,128(sp)
11202148:	d8801f17 	ldw	r2,124(sp)
1120214c:	da000404 	addi	r8,sp,16
11202150:	8c3fed16 	blt	r17,r16,11202108 <__alt_data_end+0xffe82108>
11202154:	d9403517 	ldw	r5,212(sp)
11202158:	1c07883a 	add	r3,r3,r16
1120215c:	10800044 	addi	r2,r2,1
11202160:	41400015 	stw	r5,0(r8)
11202164:	44000115 	stw	r16,4(r8)
11202168:	d8c02015 	stw	r3,128(sp)
1120216c:	d8801f15 	stw	r2,124(sp)
11202170:	010001c4 	movi	r4,7
11202174:	2080060e 	bge	r4,r2,11202190 <___vfprintf_internal_r+0xaa4>
11202178:	d9002c17 	ldw	r4,176(sp)
1120217c:	d9801e04 	addi	r6,sp,120
11202180:	b80b883a 	mov	r5,r23
11202184:	1208e500 	call	11208e50 <__sprint_r>
11202188:	103e5a1e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
1120218c:	d8c02017 	ldw	r3,128(sp)
11202190:	d8803117 	ldw	r2,196(sp)
11202194:	d9002a17 	ldw	r4,168(sp)
11202198:	1100010e 	bge	r2,r4,112021a0 <___vfprintf_internal_r+0xab4>
1120219c:	2005883a 	mov	r2,r4
112021a0:	d9402f17 	ldw	r5,188(sp)
112021a4:	288b883a 	add	r5,r5,r2
112021a8:	d9402f15 	stw	r5,188(sp)
112021ac:	18019e1e 	bne	r3,zero,11202828 <___vfprintf_internal_r+0x113c>
112021b0:	a8800007 	ldb	r2,0(r21)
112021b4:	d8001f15 	stw	zero,124(sp)
112021b8:	da000404 	addi	r8,sp,16
112021bc:	103d851e 	bne	r2,zero,112017d4 <__alt_data_end+0xffe817d4>
112021c0:	a821883a 	mov	r16,r21
112021c4:	003d9b06 	br	11201834 <__alt_data_end+0xffe81834>
112021c8:	18c03fcc 	andi	r3,r3,255
112021cc:	1805c11e 	bne	r3,zero,112038d4 <___vfprintf_internal_r+0x21e8>
112021d0:	94800414 	ori	r18,r18,16
112021d4:	9080080c 	andi	r2,r18,32
112021d8:	10020c26 	beq	r2,zero,11202a0c <___vfprintf_internal_r+0x1320>
112021dc:	d8802d17 	ldw	r2,180(sp)
112021e0:	d9002917 	ldw	r4,164(sp)
112021e4:	d8002785 	stb	zero,158(sp)
112021e8:	10c00204 	addi	r3,r2,8
112021ec:	14c00017 	ldw	r19,0(r2)
112021f0:	15800117 	ldw	r22,4(r2)
112021f4:	20040f16 	blt	r4,zero,11203234 <___vfprintf_internal_r+0x1b48>
112021f8:	013fdfc4 	movi	r4,-129
112021fc:	9d84b03a 	or	r2,r19,r22
11202200:	d8c02d15 	stw	r3,180(sp)
11202204:	9124703a 	and	r18,r18,r4
11202208:	0039883a 	mov	fp,zero
1120220c:	103e891e 	bne	r2,zero,11201c34 <__alt_data_end+0xffe81c34>
11202210:	d9002917 	ldw	r4,164(sp)
11202214:	2002c11e 	bne	r4,zero,11202d1c <___vfprintf_internal_r+0x1630>
11202218:	d8002915 	stw	zero,164(sp)
1120221c:	d8002e15 	stw	zero,184(sp)
11202220:	dc001e04 	addi	r16,sp,120
11202224:	003ef806 	br	11201e08 <__alt_data_end+0xffe81e08>
11202228:	18c03fcc 	andi	r3,r3,255
1120222c:	18059d1e 	bne	r3,zero,112038a4 <___vfprintf_internal_r+0x21b8>
11202230:	01444874 	movhi	r5,4385
11202234:	29414804 	addi	r5,r5,1312
11202238:	d9403915 	stw	r5,228(sp)
1120223c:	9080080c 	andi	r2,r18,32
11202240:	10005226 	beq	r2,zero,1120238c <___vfprintf_internal_r+0xca0>
11202244:	d8802d17 	ldw	r2,180(sp)
11202248:	14c00017 	ldw	r19,0(r2)
1120224c:	15800117 	ldw	r22,4(r2)
11202250:	10800204 	addi	r2,r2,8
11202254:	d8802d15 	stw	r2,180(sp)
11202258:	9080004c 	andi	r2,r18,1
1120225c:	10019026 	beq	r2,zero,112028a0 <___vfprintf_internal_r+0x11b4>
11202260:	9d84b03a 	or	r2,r19,r22
11202264:	10036926 	beq	r2,zero,1120300c <___vfprintf_internal_r+0x1920>
11202268:	d8c02917 	ldw	r3,164(sp)
1120226c:	00800c04 	movi	r2,48
11202270:	d8802705 	stb	r2,156(sp)
11202274:	dc402745 	stb	r17,157(sp)
11202278:	d8002785 	stb	zero,158(sp)
1120227c:	90800094 	ori	r2,r18,2
11202280:	18045d16 	blt	r3,zero,112033f8 <___vfprintf_internal_r+0x1d0c>
11202284:	00bfdfc4 	movi	r2,-129
11202288:	90a4703a 	and	r18,r18,r2
1120228c:	94800094 	ori	r18,r18,2
11202290:	0039883a 	mov	fp,zero
11202294:	d9003917 	ldw	r4,228(sp)
11202298:	dc001e04 	addi	r16,sp,120
1120229c:	988003cc 	andi	r2,r19,15
112022a0:	b006973a 	slli	r3,r22,28
112022a4:	2085883a 	add	r2,r4,r2
112022a8:	9826d13a 	srli	r19,r19,4
112022ac:	10800003 	ldbu	r2,0(r2)
112022b0:	b02cd13a 	srli	r22,r22,4
112022b4:	843fffc4 	addi	r16,r16,-1
112022b8:	1ce6b03a 	or	r19,r3,r19
112022bc:	80800005 	stb	r2,0(r16)
112022c0:	9d84b03a 	or	r2,r19,r22
112022c4:	103ff51e 	bne	r2,zero,1120229c <__alt_data_end+0xffe8229c>
112022c8:	d8c02817 	ldw	r3,160(sp)
112022cc:	1c07c83a 	sub	r3,r3,r16
112022d0:	d8c02e15 	stw	r3,184(sp)
112022d4:	003ecc06 	br	11201e08 <__alt_data_end+0xffe81e08>
112022d8:	18c03fcc 	andi	r3,r3,255
112022dc:	183e9f26 	beq	r3,zero,11201d5c <__alt_data_end+0xffe81d5c>
112022e0:	d9c02785 	stb	r7,158(sp)
112022e4:	003e9d06 	br	11201d5c <__alt_data_end+0xffe81d5c>
112022e8:	00c00044 	movi	r3,1
112022ec:	01c00ac4 	movi	r7,43
112022f0:	ac400007 	ldb	r17,0(r21)
112022f4:	003d5e06 	br	11201870 <__alt_data_end+0xffe81870>
112022f8:	94800814 	ori	r18,r18,32
112022fc:	ac400007 	ldb	r17,0(r21)
11202300:	003d5b06 	br	11201870 <__alt_data_end+0xffe81870>
11202304:	d8c02d17 	ldw	r3,180(sp)
11202308:	d8002785 	stb	zero,158(sp)
1120230c:	1c000017 	ldw	r16,0(r3)
11202310:	1cc00104 	addi	r19,r3,4
11202314:	80041926 	beq	r16,zero,1120337c <___vfprintf_internal_r+0x1c90>
11202318:	d9002917 	ldw	r4,164(sp)
1120231c:	2003d016 	blt	r4,zero,11203260 <___vfprintf_internal_r+0x1b74>
11202320:	200d883a 	mov	r6,r4
11202324:	000b883a 	mov	r5,zero
11202328:	8009883a 	mov	r4,r16
1120232c:	da003d15 	stw	r8,244(sp)
11202330:	1206efc0 	call	11206efc <memchr>
11202334:	da003d17 	ldw	r8,244(sp)
11202338:	10045426 	beq	r2,zero,1120348c <___vfprintf_internal_r+0x1da0>
1120233c:	1405c83a 	sub	r2,r2,r16
11202340:	d8802e15 	stw	r2,184(sp)
11202344:	1003cc16 	blt	r2,zero,11203278 <___vfprintf_internal_r+0x1b8c>
11202348:	df002783 	ldbu	fp,158(sp)
1120234c:	d8802a15 	stw	r2,168(sp)
11202350:	dcc02d15 	stw	r19,180(sp)
11202354:	d8002915 	stw	zero,164(sp)
11202358:	d8003215 	stw	zero,200(sp)
1120235c:	003eb006 	br	11201e20 <__alt_data_end+0xffe81e20>
11202360:	18c03fcc 	andi	r3,r3,255
11202364:	183f9b26 	beq	r3,zero,112021d4 <__alt_data_end+0xffe821d4>
11202368:	d9c02785 	stb	r7,158(sp)
1120236c:	003f9906 	br	112021d4 <__alt_data_end+0xffe821d4>
11202370:	18c03fcc 	andi	r3,r3,255
11202374:	1805551e 	bne	r3,zero,112038cc <___vfprintf_internal_r+0x21e0>
11202378:	01444874 	movhi	r5,4385
1120237c:	29414d04 	addi	r5,r5,1332
11202380:	d9403915 	stw	r5,228(sp)
11202384:	9080080c 	andi	r2,r18,32
11202388:	103fae1e 	bne	r2,zero,11202244 <__alt_data_end+0xffe82244>
1120238c:	9080040c 	andi	r2,r18,16
11202390:	1002de26 	beq	r2,zero,11202f0c <___vfprintf_internal_r+0x1820>
11202394:	d8c02d17 	ldw	r3,180(sp)
11202398:	002d883a 	mov	r22,zero
1120239c:	1cc00017 	ldw	r19,0(r3)
112023a0:	18c00104 	addi	r3,r3,4
112023a4:	d8c02d15 	stw	r3,180(sp)
112023a8:	003fab06 	br	11202258 <__alt_data_end+0xffe82258>
112023ac:	38803fcc 	andi	r2,r7,255
112023b0:	1080201c 	xori	r2,r2,128
112023b4:	10bfe004 	addi	r2,r2,-128
112023b8:	1002d21e 	bne	r2,zero,11202f04 <___vfprintf_internal_r+0x1818>
112023bc:	00c00044 	movi	r3,1
112023c0:	01c00804 	movi	r7,32
112023c4:	ac400007 	ldb	r17,0(r21)
112023c8:	003d2906 	br	11201870 <__alt_data_end+0xffe81870>
112023cc:	94800054 	ori	r18,r18,1
112023d0:	ac400007 	ldb	r17,0(r21)
112023d4:	003d2606 	br	11201870 <__alt_data_end+0xffe81870>
112023d8:	18c03fcc 	andi	r3,r3,255
112023dc:	183e0526 	beq	r3,zero,11201bf4 <__alt_data_end+0xffe81bf4>
112023e0:	d9c02785 	stb	r7,158(sp)
112023e4:	003e0306 	br	11201bf4 <__alt_data_end+0xffe81bf4>
112023e8:	94801014 	ori	r18,r18,64
112023ec:	ac400007 	ldb	r17,0(r21)
112023f0:	003d1f06 	br	11201870 <__alt_data_end+0xffe81870>
112023f4:	ac400007 	ldb	r17,0(r21)
112023f8:	8a438726 	beq	r17,r9,11203218 <___vfprintf_internal_r+0x1b2c>
112023fc:	94800414 	ori	r18,r18,16
11202400:	003d1b06 	br	11201870 <__alt_data_end+0xffe81870>
11202404:	18c03fcc 	andi	r3,r3,255
11202408:	1805341e 	bne	r3,zero,112038dc <___vfprintf_internal_r+0x21f0>
1120240c:	9080080c 	andi	r2,r18,32
11202410:	1002cd26 	beq	r2,zero,11202f48 <___vfprintf_internal_r+0x185c>
11202414:	d9402d17 	ldw	r5,180(sp)
11202418:	d9002f17 	ldw	r4,188(sp)
1120241c:	28800017 	ldw	r2,0(r5)
11202420:	2007d7fa 	srai	r3,r4,31
11202424:	29400104 	addi	r5,r5,4
11202428:	d9402d15 	stw	r5,180(sp)
1120242c:	11000015 	stw	r4,0(r2)
11202430:	10c00115 	stw	r3,4(r2)
11202434:	003ce506 	br	112017cc <__alt_data_end+0xffe817cc>
11202438:	d8c02d17 	ldw	r3,180(sp)
1120243c:	d9002d17 	ldw	r4,180(sp)
11202440:	d8002785 	stb	zero,158(sp)
11202444:	18800017 	ldw	r2,0(r3)
11202448:	21000104 	addi	r4,r4,4
1120244c:	00c00044 	movi	r3,1
11202450:	d8c02a15 	stw	r3,168(sp)
11202454:	d8801405 	stb	r2,80(sp)
11202458:	d9002d15 	stw	r4,180(sp)
1120245c:	d8c02e15 	stw	r3,184(sp)
11202460:	d8002915 	stw	zero,164(sp)
11202464:	d8003215 	stw	zero,200(sp)
11202468:	dc001404 	addi	r16,sp,80
1120246c:	0039883a 	mov	fp,zero
11202470:	003e7206 	br	11201e3c <__alt_data_end+0xffe81e3c>
11202474:	01044874 	movhi	r4,4385
11202478:	21014d04 	addi	r4,r4,1332
1120247c:	0039883a 	mov	fp,zero
11202480:	d9003915 	stw	r4,228(sp)
11202484:	04401e04 	movi	r17,120
11202488:	003f8206 	br	11202294 <__alt_data_end+0xffe82294>
1120248c:	18c03fcc 	andi	r3,r3,255
11202490:	1805061e 	bne	r3,zero,112038ac <___vfprintf_internal_r+0x21c0>
11202494:	883d9126 	beq	r17,zero,11201adc <__alt_data_end+0xffe81adc>
11202498:	00c00044 	movi	r3,1
1120249c:	d8c02a15 	stw	r3,168(sp)
112024a0:	dc401405 	stb	r17,80(sp)
112024a4:	d8002785 	stb	zero,158(sp)
112024a8:	003fec06 	br	1120245c <__alt_data_end+0xffe8245c>
112024ac:	01444874 	movhi	r5,4385
112024b0:	29414d04 	addi	r5,r5,1332
112024b4:	d9403915 	stw	r5,228(sp)
112024b8:	d8c02d15 	stw	r3,180(sp)
112024bc:	1025883a 	mov	r18,r2
112024c0:	04401e04 	movi	r17,120
112024c4:	9d84b03a 	or	r2,r19,r22
112024c8:	1000fc1e 	bne	r2,zero,112028bc <___vfprintf_internal_r+0x11d0>
112024cc:	0039883a 	mov	fp,zero
112024d0:	00800084 	movi	r2,2
112024d4:	10803fcc 	andi	r2,r2,255
112024d8:	00c00044 	movi	r3,1
112024dc:	10c20f26 	beq	r2,r3,11202d1c <___vfprintf_internal_r+0x1630>
112024e0:	00c00084 	movi	r3,2
112024e4:	10fd6326 	beq	r2,r3,11201a74 <__alt_data_end+0xffe81a74>
112024e8:	003e2d06 	br	11201da0 <__alt_data_end+0xffe81da0>
112024ec:	d8c02017 	ldw	r3,128(sp)
112024f0:	003e9306 	br	11201f40 <__alt_data_end+0xffe81f40>
112024f4:	00801944 	movi	r2,101
112024f8:	14407e0e 	bge	r2,r17,112026f4 <___vfprintf_internal_r+0x1008>
112024fc:	d9003617 	ldw	r4,216(sp)
11202500:	d9403817 	ldw	r5,224(sp)
11202504:	000d883a 	mov	r6,zero
11202508:	000f883a 	mov	r7,zero
1120250c:	d8c03c15 	stw	r3,240(sp)
11202510:	da003d15 	stw	r8,244(sp)
11202514:	120c9140 	call	1120c914 <__eqdf2>
11202518:	d8c03c17 	ldw	r3,240(sp)
1120251c:	da003d17 	ldw	r8,244(sp)
11202520:	1000f71e 	bne	r2,zero,11202900 <___vfprintf_internal_r+0x1214>
11202524:	d8801f17 	ldw	r2,124(sp)
11202528:	01044874 	movhi	r4,4385
1120252c:	21015404 	addi	r4,r4,1360
11202530:	18c00044 	addi	r3,r3,1
11202534:	10800044 	addi	r2,r2,1
11202538:	41000015 	stw	r4,0(r8)
1120253c:	01000044 	movi	r4,1
11202540:	41000115 	stw	r4,4(r8)
11202544:	d8c02015 	stw	r3,128(sp)
11202548:	d8801f15 	stw	r2,124(sp)
1120254c:	010001c4 	movi	r4,7
11202550:	2082b816 	blt	r4,r2,11203034 <___vfprintf_internal_r+0x1948>
11202554:	42000204 	addi	r8,r8,8
11202558:	d8802617 	ldw	r2,152(sp)
1120255c:	d9403317 	ldw	r5,204(sp)
11202560:	11400216 	blt	r2,r5,1120256c <___vfprintf_internal_r+0xe80>
11202564:	9080004c 	andi	r2,r18,1
11202568:	103ed526 	beq	r2,zero,112020c0 <__alt_data_end+0xffe820c0>
1120256c:	d8803717 	ldw	r2,220(sp)
11202570:	d9003417 	ldw	r4,208(sp)
11202574:	d9403717 	ldw	r5,220(sp)
11202578:	1887883a 	add	r3,r3,r2
1120257c:	d8801f17 	ldw	r2,124(sp)
11202580:	41000015 	stw	r4,0(r8)
11202584:	41400115 	stw	r5,4(r8)
11202588:	10800044 	addi	r2,r2,1
1120258c:	d8c02015 	stw	r3,128(sp)
11202590:	d8801f15 	stw	r2,124(sp)
11202594:	010001c4 	movi	r4,7
11202598:	20832916 	blt	r4,r2,11203240 <___vfprintf_internal_r+0x1b54>
1120259c:	42000204 	addi	r8,r8,8
112025a0:	d8803317 	ldw	r2,204(sp)
112025a4:	143fffc4 	addi	r16,r2,-1
112025a8:	043ec50e 	bge	zero,r16,112020c0 <__alt_data_end+0xffe820c0>
112025ac:	04400404 	movi	r17,16
112025b0:	d8801f17 	ldw	r2,124(sp)
112025b4:	8c00880e 	bge	r17,r16,112027d8 <___vfprintf_internal_r+0x10ec>
112025b8:	01444874 	movhi	r5,4385
112025bc:	29415484 	addi	r5,r5,1362
112025c0:	d9402b15 	stw	r5,172(sp)
112025c4:	058001c4 	movi	r22,7
112025c8:	dcc02c17 	ldw	r19,176(sp)
112025cc:	00000306 	br	112025dc <___vfprintf_internal_r+0xef0>
112025d0:	42000204 	addi	r8,r8,8
112025d4:	843ffc04 	addi	r16,r16,-16
112025d8:	8c00820e 	bge	r17,r16,112027e4 <___vfprintf_internal_r+0x10f8>
112025dc:	18c00404 	addi	r3,r3,16
112025e0:	10800044 	addi	r2,r2,1
112025e4:	45000015 	stw	r20,0(r8)
112025e8:	44400115 	stw	r17,4(r8)
112025ec:	d8c02015 	stw	r3,128(sp)
112025f0:	d8801f15 	stw	r2,124(sp)
112025f4:	b0bff60e 	bge	r22,r2,112025d0 <__alt_data_end+0xffe825d0>
112025f8:	d9801e04 	addi	r6,sp,120
112025fc:	b80b883a 	mov	r5,r23
11202600:	9809883a 	mov	r4,r19
11202604:	1208e500 	call	11208e50 <__sprint_r>
11202608:	103d3a1e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
1120260c:	d8c02017 	ldw	r3,128(sp)
11202610:	d8801f17 	ldw	r2,124(sp)
11202614:	da000404 	addi	r8,sp,16
11202618:	003fee06 	br	112025d4 <__alt_data_end+0xffe825d4>
1120261c:	d9403117 	ldw	r5,196(sp)
11202620:	d8802a17 	ldw	r2,168(sp)
11202624:	28adc83a 	sub	r22,r5,r2
11202628:	05be630e 	bge	zero,r22,11201fb8 <__alt_data_end+0xffe81fb8>
1120262c:	07000404 	movi	fp,16
11202630:	d8801f17 	ldw	r2,124(sp)
11202634:	e5838f0e 	bge	fp,r22,11203474 <___vfprintf_internal_r+0x1d88>
11202638:	01444874 	movhi	r5,4385
1120263c:	29415484 	addi	r5,r5,1362
11202640:	dc403015 	stw	r17,192(sp)
11202644:	d9402b15 	stw	r5,172(sp)
11202648:	b023883a 	mov	r17,r22
1120264c:	04c001c4 	movi	r19,7
11202650:	a82d883a 	mov	r22,r21
11202654:	902b883a 	mov	r21,r18
11202658:	8025883a 	mov	r18,r16
1120265c:	dc002c17 	ldw	r16,176(sp)
11202660:	00000306 	br	11202670 <___vfprintf_internal_r+0xf84>
11202664:	8c7ffc04 	addi	r17,r17,-16
11202668:	42000204 	addi	r8,r8,8
1120266c:	e440110e 	bge	fp,r17,112026b4 <___vfprintf_internal_r+0xfc8>
11202670:	18c00404 	addi	r3,r3,16
11202674:	10800044 	addi	r2,r2,1
11202678:	45000015 	stw	r20,0(r8)
1120267c:	47000115 	stw	fp,4(r8)
11202680:	d8c02015 	stw	r3,128(sp)
11202684:	d8801f15 	stw	r2,124(sp)
11202688:	98bff60e 	bge	r19,r2,11202664 <__alt_data_end+0xffe82664>
1120268c:	d9801e04 	addi	r6,sp,120
11202690:	b80b883a 	mov	r5,r23
11202694:	8009883a 	mov	r4,r16
11202698:	1208e500 	call	11208e50 <__sprint_r>
1120269c:	103d151e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
112026a0:	8c7ffc04 	addi	r17,r17,-16
112026a4:	d8c02017 	ldw	r3,128(sp)
112026a8:	d8801f17 	ldw	r2,124(sp)
112026ac:	da000404 	addi	r8,sp,16
112026b0:	e47fef16 	blt	fp,r17,11202670 <__alt_data_end+0xffe82670>
112026b4:	9021883a 	mov	r16,r18
112026b8:	a825883a 	mov	r18,r21
112026bc:	b02b883a 	mov	r21,r22
112026c0:	882d883a 	mov	r22,r17
112026c4:	dc403017 	ldw	r17,192(sp)
112026c8:	d9002b17 	ldw	r4,172(sp)
112026cc:	1d87883a 	add	r3,r3,r22
112026d0:	10800044 	addi	r2,r2,1
112026d4:	41000015 	stw	r4,0(r8)
112026d8:	45800115 	stw	r22,4(r8)
112026dc:	d8c02015 	stw	r3,128(sp)
112026e0:	d8801f15 	stw	r2,124(sp)
112026e4:	010001c4 	movi	r4,7
112026e8:	20818e16 	blt	r4,r2,11202d24 <___vfprintf_internal_r+0x1638>
112026ec:	42000204 	addi	r8,r8,8
112026f0:	003e3106 	br	11201fb8 <__alt_data_end+0xffe81fb8>
112026f4:	d9403317 	ldw	r5,204(sp)
112026f8:	00800044 	movi	r2,1
112026fc:	18c00044 	addi	r3,r3,1
11202700:	1141530e 	bge	r2,r5,11202c50 <___vfprintf_internal_r+0x1564>
11202704:	dc401f17 	ldw	r17,124(sp)
11202708:	00800044 	movi	r2,1
1120270c:	40800115 	stw	r2,4(r8)
11202710:	8c400044 	addi	r17,r17,1
11202714:	44000015 	stw	r16,0(r8)
11202718:	d8c02015 	stw	r3,128(sp)
1120271c:	dc401f15 	stw	r17,124(sp)
11202720:	008001c4 	movi	r2,7
11202724:	14416b16 	blt	r2,r17,11202cd4 <___vfprintf_internal_r+0x15e8>
11202728:	42000204 	addi	r8,r8,8
1120272c:	d8803717 	ldw	r2,220(sp)
11202730:	d9003417 	ldw	r4,208(sp)
11202734:	8c400044 	addi	r17,r17,1
11202738:	10c7883a 	add	r3,r2,r3
1120273c:	40800115 	stw	r2,4(r8)
11202740:	41000015 	stw	r4,0(r8)
11202744:	d8c02015 	stw	r3,128(sp)
11202748:	dc401f15 	stw	r17,124(sp)
1120274c:	008001c4 	movi	r2,7
11202750:	14416916 	blt	r2,r17,11202cf8 <___vfprintf_internal_r+0x160c>
11202754:	45800204 	addi	r22,r8,8
11202758:	d9003617 	ldw	r4,216(sp)
1120275c:	d9403817 	ldw	r5,224(sp)
11202760:	000d883a 	mov	r6,zero
11202764:	000f883a 	mov	r7,zero
11202768:	d8c03c15 	stw	r3,240(sp)
1120276c:	120c9140 	call	1120c914 <__eqdf2>
11202770:	d8c03c17 	ldw	r3,240(sp)
11202774:	1000bc26 	beq	r2,zero,11202a68 <___vfprintf_internal_r+0x137c>
11202778:	d9403317 	ldw	r5,204(sp)
1120277c:	84000044 	addi	r16,r16,1
11202780:	8c400044 	addi	r17,r17,1
11202784:	28bfffc4 	addi	r2,r5,-1
11202788:	1887883a 	add	r3,r3,r2
1120278c:	b0800115 	stw	r2,4(r22)
11202790:	b4000015 	stw	r16,0(r22)
11202794:	d8c02015 	stw	r3,128(sp)
11202798:	dc401f15 	stw	r17,124(sp)
1120279c:	008001c4 	movi	r2,7
112027a0:	14414316 	blt	r2,r17,11202cb0 <___vfprintf_internal_r+0x15c4>
112027a4:	b5800204 	addi	r22,r22,8
112027a8:	d9003a17 	ldw	r4,232(sp)
112027ac:	df0022c4 	addi	fp,sp,139
112027b0:	8c400044 	addi	r17,r17,1
112027b4:	20c7883a 	add	r3,r4,r3
112027b8:	b7000015 	stw	fp,0(r22)
112027bc:	b1000115 	stw	r4,4(r22)
112027c0:	d8c02015 	stw	r3,128(sp)
112027c4:	dc401f15 	stw	r17,124(sp)
112027c8:	008001c4 	movi	r2,7
112027cc:	14400e16 	blt	r2,r17,11202808 <___vfprintf_internal_r+0x111c>
112027d0:	b2000204 	addi	r8,r22,8
112027d4:	003e3a06 	br	112020c0 <__alt_data_end+0xffe820c0>
112027d8:	01044874 	movhi	r4,4385
112027dc:	21015484 	addi	r4,r4,1362
112027e0:	d9002b15 	stw	r4,172(sp)
112027e4:	d9002b17 	ldw	r4,172(sp)
112027e8:	1c07883a 	add	r3,r3,r16
112027ec:	44000115 	stw	r16,4(r8)
112027f0:	41000015 	stw	r4,0(r8)
112027f4:	10800044 	addi	r2,r2,1
112027f8:	d8c02015 	stw	r3,128(sp)
112027fc:	d8801f15 	stw	r2,124(sp)
11202800:	010001c4 	movi	r4,7
11202804:	20be2d0e 	bge	r4,r2,112020bc <__alt_data_end+0xffe820bc>
11202808:	d9002c17 	ldw	r4,176(sp)
1120280c:	d9801e04 	addi	r6,sp,120
11202810:	b80b883a 	mov	r5,r23
11202814:	1208e500 	call	11208e50 <__sprint_r>
11202818:	103cb61e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
1120281c:	d8c02017 	ldw	r3,128(sp)
11202820:	da000404 	addi	r8,sp,16
11202824:	003e2606 	br	112020c0 <__alt_data_end+0xffe820c0>
11202828:	d9002c17 	ldw	r4,176(sp)
1120282c:	d9801e04 	addi	r6,sp,120
11202830:	b80b883a 	mov	r5,r23
11202834:	1208e500 	call	11208e50 <__sprint_r>
11202838:	103e5d26 	beq	r2,zero,112021b0 <__alt_data_end+0xffe821b0>
1120283c:	003cad06 	br	11201af4 <__alt_data_end+0xffe81af4>
11202840:	d9002c17 	ldw	r4,176(sp)
11202844:	d9801e04 	addi	r6,sp,120
11202848:	b80b883a 	mov	r5,r23
1120284c:	1208e500 	call	11208e50 <__sprint_r>
11202850:	103ca81e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11202854:	d8c02017 	ldw	r3,128(sp)
11202858:	da000404 	addi	r8,sp,16
1120285c:	003e0b06 	br	1120208c <__alt_data_end+0xffe8208c>
11202860:	d9002c17 	ldw	r4,176(sp)
11202864:	d9801e04 	addi	r6,sp,120
11202868:	b80b883a 	mov	r5,r23
1120286c:	1208e500 	call	11208e50 <__sprint_r>
11202870:	103ca01e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11202874:	d8c02017 	ldw	r3,128(sp)
11202878:	da000404 	addi	r8,sp,16
1120287c:	003dbd06 	br	11201f74 <__alt_data_end+0xffe81f74>
11202880:	d9002c17 	ldw	r4,176(sp)
11202884:	d9801e04 	addi	r6,sp,120
11202888:	b80b883a 	mov	r5,r23
1120288c:	1208e500 	call	11208e50 <__sprint_r>
11202890:	103c981e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11202894:	d8c02017 	ldw	r3,128(sp)
11202898:	da000404 	addi	r8,sp,16
1120289c:	003dc306 	br	11201fac <__alt_data_end+0xffe81fac>
112028a0:	d8802917 	ldw	r2,164(sp)
112028a4:	d8002785 	stb	zero,158(sp)
112028a8:	103f0616 	blt	r2,zero,112024c4 <__alt_data_end+0xffe824c4>
112028ac:	00ffdfc4 	movi	r3,-129
112028b0:	9d84b03a 	or	r2,r19,r22
112028b4:	90e4703a 	and	r18,r18,r3
112028b8:	103c6b26 	beq	r2,zero,11201a68 <__alt_data_end+0xffe81a68>
112028bc:	0039883a 	mov	fp,zero
112028c0:	003e7406 	br	11202294 <__alt_data_end+0xffe82294>
112028c4:	9080040c 	andi	r2,r18,16
112028c8:	1001b326 	beq	r2,zero,11202f98 <___vfprintf_internal_r+0x18ac>
112028cc:	d9002d17 	ldw	r4,180(sp)
112028d0:	d9402917 	ldw	r5,164(sp)
112028d4:	d8002785 	stb	zero,158(sp)
112028d8:	20800104 	addi	r2,r4,4
112028dc:	24c00017 	ldw	r19,0(r4)
112028e0:	002d883a 	mov	r22,zero
112028e4:	2801b516 	blt	r5,zero,11202fbc <___vfprintf_internal_r+0x18d0>
112028e8:	00ffdfc4 	movi	r3,-129
112028ec:	d8802d15 	stw	r2,180(sp)
112028f0:	90e4703a 	and	r18,r18,r3
112028f4:	983d2726 	beq	r19,zero,11201d94 <__alt_data_end+0xffe81d94>
112028f8:	0039883a 	mov	fp,zero
112028fc:	003d2a06 	br	11201da8 <__alt_data_end+0xffe81da8>
11202900:	dc402617 	ldw	r17,152(sp)
11202904:	0441d30e 	bge	zero,r17,11203054 <___vfprintf_internal_r+0x1968>
11202908:	dc403217 	ldw	r17,200(sp)
1120290c:	d8803317 	ldw	r2,204(sp)
11202910:	1440010e 	bge	r2,r17,11202918 <___vfprintf_internal_r+0x122c>
11202914:	1023883a 	mov	r17,r2
11202918:	04400a0e 	bge	zero,r17,11202944 <___vfprintf_internal_r+0x1258>
1120291c:	d8801f17 	ldw	r2,124(sp)
11202920:	1c47883a 	add	r3,r3,r17
11202924:	44000015 	stw	r16,0(r8)
11202928:	10800044 	addi	r2,r2,1
1120292c:	44400115 	stw	r17,4(r8)
11202930:	d8c02015 	stw	r3,128(sp)
11202934:	d8801f15 	stw	r2,124(sp)
11202938:	010001c4 	movi	r4,7
1120293c:	20826516 	blt	r4,r2,112032d4 <___vfprintf_internal_r+0x1be8>
11202940:	42000204 	addi	r8,r8,8
11202944:	88026116 	blt	r17,zero,112032cc <___vfprintf_internal_r+0x1be0>
11202948:	d9003217 	ldw	r4,200(sp)
1120294c:	2463c83a 	sub	r17,r4,r17
11202950:	04407b0e 	bge	zero,r17,11202b40 <___vfprintf_internal_r+0x1454>
11202954:	05800404 	movi	r22,16
11202958:	d8801f17 	ldw	r2,124(sp)
1120295c:	b4419d0e 	bge	r22,r17,11202fd4 <___vfprintf_internal_r+0x18e8>
11202960:	01044874 	movhi	r4,4385
11202964:	21015484 	addi	r4,r4,1362
11202968:	d9002b15 	stw	r4,172(sp)
1120296c:	070001c4 	movi	fp,7
11202970:	dcc02c17 	ldw	r19,176(sp)
11202974:	00000306 	br	11202984 <___vfprintf_internal_r+0x1298>
11202978:	42000204 	addi	r8,r8,8
1120297c:	8c7ffc04 	addi	r17,r17,-16
11202980:	b441970e 	bge	r22,r17,11202fe0 <___vfprintf_internal_r+0x18f4>
11202984:	18c00404 	addi	r3,r3,16
11202988:	10800044 	addi	r2,r2,1
1120298c:	45000015 	stw	r20,0(r8)
11202990:	45800115 	stw	r22,4(r8)
11202994:	d8c02015 	stw	r3,128(sp)
11202998:	d8801f15 	stw	r2,124(sp)
1120299c:	e0bff60e 	bge	fp,r2,11202978 <__alt_data_end+0xffe82978>
112029a0:	d9801e04 	addi	r6,sp,120
112029a4:	b80b883a 	mov	r5,r23
112029a8:	9809883a 	mov	r4,r19
112029ac:	1208e500 	call	11208e50 <__sprint_r>
112029b0:	103c501e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
112029b4:	d8c02017 	ldw	r3,128(sp)
112029b8:	d8801f17 	ldw	r2,124(sp)
112029bc:	da000404 	addi	r8,sp,16
112029c0:	003fee06 	br	1120297c <__alt_data_end+0xffe8297c>
112029c4:	d9002c17 	ldw	r4,176(sp)
112029c8:	d9801e04 	addi	r6,sp,120
112029cc:	b80b883a 	mov	r5,r23
112029d0:	1208e500 	call	11208e50 <__sprint_r>
112029d4:	103c471e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
112029d8:	d8c02017 	ldw	r3,128(sp)
112029dc:	df002787 	ldb	fp,158(sp)
112029e0:	da000404 	addi	r8,sp,16
112029e4:	003d5606 	br	11201f40 <__alt_data_end+0xffe81f40>
112029e8:	9080040c 	andi	r2,r18,16
112029ec:	10016126 	beq	r2,zero,11202f74 <___vfprintf_internal_r+0x1888>
112029f0:	d8802d17 	ldw	r2,180(sp)
112029f4:	14c00017 	ldw	r19,0(r2)
112029f8:	10800104 	addi	r2,r2,4
112029fc:	d8802d15 	stw	r2,180(sp)
11202a00:	982dd7fa 	srai	r22,r19,31
11202a04:	b005883a 	mov	r2,r22
11202a08:	003c8206 	br	11201c14 <__alt_data_end+0xffe81c14>
11202a0c:	9080040c 	andi	r2,r18,16
11202a10:	10003526 	beq	r2,zero,11202ae8 <___vfprintf_internal_r+0x13fc>
11202a14:	d9402d17 	ldw	r5,180(sp)
11202a18:	d8c02917 	ldw	r3,164(sp)
11202a1c:	d8002785 	stb	zero,158(sp)
11202a20:	28800104 	addi	r2,r5,4
11202a24:	2cc00017 	ldw	r19,0(r5)
11202a28:	002d883a 	mov	r22,zero
11202a2c:	18003716 	blt	r3,zero,11202b0c <___vfprintf_internal_r+0x1420>
11202a30:	00ffdfc4 	movi	r3,-129
11202a34:	d8802d15 	stw	r2,180(sp)
11202a38:	90e4703a 	and	r18,r18,r3
11202a3c:	0039883a 	mov	fp,zero
11202a40:	983df326 	beq	r19,zero,11202210 <__alt_data_end+0xffe82210>
11202a44:	00800244 	movi	r2,9
11202a48:	14fc7b36 	bltu	r2,r19,11201c38 <__alt_data_end+0xffe81c38>
11202a4c:	d8c02817 	ldw	r3,160(sp)
11202a50:	dc001dc4 	addi	r16,sp,119
11202a54:	9cc00c04 	addi	r19,r19,48
11202a58:	1c07c83a 	sub	r3,r3,r16
11202a5c:	dcc01dc5 	stb	r19,119(sp)
11202a60:	d8c02e15 	stw	r3,184(sp)
11202a64:	003ce806 	br	11201e08 <__alt_data_end+0xffe81e08>
11202a68:	d8803317 	ldw	r2,204(sp)
11202a6c:	143fffc4 	addi	r16,r2,-1
11202a70:	043f4d0e 	bge	zero,r16,112027a8 <__alt_data_end+0xffe827a8>
11202a74:	07000404 	movi	fp,16
11202a78:	e400810e 	bge	fp,r16,11202c80 <___vfprintf_internal_r+0x1594>
11202a7c:	01444874 	movhi	r5,4385
11202a80:	29415484 	addi	r5,r5,1362
11202a84:	d9402b15 	stw	r5,172(sp)
11202a88:	01c001c4 	movi	r7,7
11202a8c:	dcc02c17 	ldw	r19,176(sp)
11202a90:	00000306 	br	11202aa0 <___vfprintf_internal_r+0x13b4>
11202a94:	b5800204 	addi	r22,r22,8
11202a98:	843ffc04 	addi	r16,r16,-16
11202a9c:	e4007b0e 	bge	fp,r16,11202c8c <___vfprintf_internal_r+0x15a0>
11202aa0:	18c00404 	addi	r3,r3,16
11202aa4:	8c400044 	addi	r17,r17,1
11202aa8:	b5000015 	stw	r20,0(r22)
11202aac:	b7000115 	stw	fp,4(r22)
11202ab0:	d8c02015 	stw	r3,128(sp)
11202ab4:	dc401f15 	stw	r17,124(sp)
11202ab8:	3c7ff60e 	bge	r7,r17,11202a94 <__alt_data_end+0xffe82a94>
11202abc:	d9801e04 	addi	r6,sp,120
11202ac0:	b80b883a 	mov	r5,r23
11202ac4:	9809883a 	mov	r4,r19
11202ac8:	d9c03c15 	stw	r7,240(sp)
11202acc:	1208e500 	call	11208e50 <__sprint_r>
11202ad0:	d9c03c17 	ldw	r7,240(sp)
11202ad4:	103c071e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11202ad8:	d8c02017 	ldw	r3,128(sp)
11202adc:	dc401f17 	ldw	r17,124(sp)
11202ae0:	dd800404 	addi	r22,sp,16
11202ae4:	003fec06 	br	11202a98 <__alt_data_end+0xffe82a98>
11202ae8:	9080100c 	andi	r2,r18,64
11202aec:	d8002785 	stb	zero,158(sp)
11202af0:	10010e26 	beq	r2,zero,11202f2c <___vfprintf_internal_r+0x1840>
11202af4:	d9002d17 	ldw	r4,180(sp)
11202af8:	d9402917 	ldw	r5,164(sp)
11202afc:	002d883a 	mov	r22,zero
11202b00:	20800104 	addi	r2,r4,4
11202b04:	24c0000b 	ldhu	r19,0(r4)
11202b08:	283fc90e 	bge	r5,zero,11202a30 <__alt_data_end+0xffe82a30>
11202b0c:	d8802d15 	stw	r2,180(sp)
11202b10:	0039883a 	mov	fp,zero
11202b14:	9d84b03a 	or	r2,r19,r22
11202b18:	103c461e 	bne	r2,zero,11201c34 <__alt_data_end+0xffe81c34>
11202b1c:	00800044 	movi	r2,1
11202b20:	003e6c06 	br	112024d4 <__alt_data_end+0xffe824d4>
11202b24:	d9002c17 	ldw	r4,176(sp)
11202b28:	d9801e04 	addi	r6,sp,120
11202b2c:	b80b883a 	mov	r5,r23
11202b30:	1208e500 	call	11208e50 <__sprint_r>
11202b34:	103bef1e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11202b38:	d8c02017 	ldw	r3,128(sp)
11202b3c:	da000404 	addi	r8,sp,16
11202b40:	d9003217 	ldw	r4,200(sp)
11202b44:	d8802617 	ldw	r2,152(sp)
11202b48:	d9403317 	ldw	r5,204(sp)
11202b4c:	8123883a 	add	r17,r16,r4
11202b50:	11400216 	blt	r2,r5,11202b5c <___vfprintf_internal_r+0x1470>
11202b54:	9100004c 	andi	r4,r18,1
11202b58:	20000d26 	beq	r4,zero,11202b90 <___vfprintf_internal_r+0x14a4>
11202b5c:	d9003717 	ldw	r4,220(sp)
11202b60:	d9403417 	ldw	r5,208(sp)
11202b64:	1907883a 	add	r3,r3,r4
11202b68:	d9001f17 	ldw	r4,124(sp)
11202b6c:	41400015 	stw	r5,0(r8)
11202b70:	d9403717 	ldw	r5,220(sp)
11202b74:	21000044 	addi	r4,r4,1
11202b78:	d8c02015 	stw	r3,128(sp)
11202b7c:	41400115 	stw	r5,4(r8)
11202b80:	d9001f15 	stw	r4,124(sp)
11202b84:	014001c4 	movi	r5,7
11202b88:	2901e816 	blt	r5,r4,1120332c <___vfprintf_internal_r+0x1c40>
11202b8c:	42000204 	addi	r8,r8,8
11202b90:	d9003317 	ldw	r4,204(sp)
11202b94:	8121883a 	add	r16,r16,r4
11202b98:	2085c83a 	sub	r2,r4,r2
11202b9c:	8461c83a 	sub	r16,r16,r17
11202ba0:	1400010e 	bge	r2,r16,11202ba8 <___vfprintf_internal_r+0x14bc>
11202ba4:	1021883a 	mov	r16,r2
11202ba8:	04000a0e 	bge	zero,r16,11202bd4 <___vfprintf_internal_r+0x14e8>
11202bac:	d9001f17 	ldw	r4,124(sp)
11202bb0:	1c07883a 	add	r3,r3,r16
11202bb4:	44400015 	stw	r17,0(r8)
11202bb8:	21000044 	addi	r4,r4,1
11202bbc:	44000115 	stw	r16,4(r8)
11202bc0:	d8c02015 	stw	r3,128(sp)
11202bc4:	d9001f15 	stw	r4,124(sp)
11202bc8:	014001c4 	movi	r5,7
11202bcc:	2901fb16 	blt	r5,r4,112033bc <___vfprintf_internal_r+0x1cd0>
11202bd0:	42000204 	addi	r8,r8,8
11202bd4:	8001f716 	blt	r16,zero,112033b4 <___vfprintf_internal_r+0x1cc8>
11202bd8:	1421c83a 	sub	r16,r2,r16
11202bdc:	043d380e 	bge	zero,r16,112020c0 <__alt_data_end+0xffe820c0>
11202be0:	04400404 	movi	r17,16
11202be4:	d8801f17 	ldw	r2,124(sp)
11202be8:	8c3efb0e 	bge	r17,r16,112027d8 <__alt_data_end+0xffe827d8>
11202bec:	01444874 	movhi	r5,4385
11202bf0:	29415484 	addi	r5,r5,1362
11202bf4:	d9402b15 	stw	r5,172(sp)
11202bf8:	058001c4 	movi	r22,7
11202bfc:	dcc02c17 	ldw	r19,176(sp)
11202c00:	00000306 	br	11202c10 <___vfprintf_internal_r+0x1524>
11202c04:	42000204 	addi	r8,r8,8
11202c08:	843ffc04 	addi	r16,r16,-16
11202c0c:	8c3ef50e 	bge	r17,r16,112027e4 <__alt_data_end+0xffe827e4>
11202c10:	18c00404 	addi	r3,r3,16
11202c14:	10800044 	addi	r2,r2,1
11202c18:	45000015 	stw	r20,0(r8)
11202c1c:	44400115 	stw	r17,4(r8)
11202c20:	d8c02015 	stw	r3,128(sp)
11202c24:	d8801f15 	stw	r2,124(sp)
11202c28:	b0bff60e 	bge	r22,r2,11202c04 <__alt_data_end+0xffe82c04>
11202c2c:	d9801e04 	addi	r6,sp,120
11202c30:	b80b883a 	mov	r5,r23
11202c34:	9809883a 	mov	r4,r19
11202c38:	1208e500 	call	11208e50 <__sprint_r>
11202c3c:	103bad1e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11202c40:	d8c02017 	ldw	r3,128(sp)
11202c44:	d8801f17 	ldw	r2,124(sp)
11202c48:	da000404 	addi	r8,sp,16
11202c4c:	003fee06 	br	11202c08 <__alt_data_end+0xffe82c08>
11202c50:	9088703a 	and	r4,r18,r2
11202c54:	203eab1e 	bne	r4,zero,11202704 <__alt_data_end+0xffe82704>
11202c58:	dc401f17 	ldw	r17,124(sp)
11202c5c:	40800115 	stw	r2,4(r8)
11202c60:	44000015 	stw	r16,0(r8)
11202c64:	8c400044 	addi	r17,r17,1
11202c68:	d8c02015 	stw	r3,128(sp)
11202c6c:	dc401f15 	stw	r17,124(sp)
11202c70:	008001c4 	movi	r2,7
11202c74:	14400e16 	blt	r2,r17,11202cb0 <___vfprintf_internal_r+0x15c4>
11202c78:	45800204 	addi	r22,r8,8
11202c7c:	003eca06 	br	112027a8 <__alt_data_end+0xffe827a8>
11202c80:	01044874 	movhi	r4,4385
11202c84:	21015484 	addi	r4,r4,1362
11202c88:	d9002b15 	stw	r4,172(sp)
11202c8c:	d8802b17 	ldw	r2,172(sp)
11202c90:	1c07883a 	add	r3,r3,r16
11202c94:	8c400044 	addi	r17,r17,1
11202c98:	b0800015 	stw	r2,0(r22)
11202c9c:	b4000115 	stw	r16,4(r22)
11202ca0:	d8c02015 	stw	r3,128(sp)
11202ca4:	dc401f15 	stw	r17,124(sp)
11202ca8:	008001c4 	movi	r2,7
11202cac:	147ebd0e 	bge	r2,r17,112027a4 <__alt_data_end+0xffe827a4>
11202cb0:	d9002c17 	ldw	r4,176(sp)
11202cb4:	d9801e04 	addi	r6,sp,120
11202cb8:	b80b883a 	mov	r5,r23
11202cbc:	1208e500 	call	11208e50 <__sprint_r>
11202cc0:	103b8c1e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11202cc4:	d8c02017 	ldw	r3,128(sp)
11202cc8:	dc401f17 	ldw	r17,124(sp)
11202ccc:	dd800404 	addi	r22,sp,16
11202cd0:	003eb506 	br	112027a8 <__alt_data_end+0xffe827a8>
11202cd4:	d9002c17 	ldw	r4,176(sp)
11202cd8:	d9801e04 	addi	r6,sp,120
11202cdc:	b80b883a 	mov	r5,r23
11202ce0:	1208e500 	call	11208e50 <__sprint_r>
11202ce4:	103b831e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11202ce8:	d8c02017 	ldw	r3,128(sp)
11202cec:	dc401f17 	ldw	r17,124(sp)
11202cf0:	da000404 	addi	r8,sp,16
11202cf4:	003e8d06 	br	1120272c <__alt_data_end+0xffe8272c>
11202cf8:	d9002c17 	ldw	r4,176(sp)
11202cfc:	d9801e04 	addi	r6,sp,120
11202d00:	b80b883a 	mov	r5,r23
11202d04:	1208e500 	call	11208e50 <__sprint_r>
11202d08:	103b7a1e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11202d0c:	d8c02017 	ldw	r3,128(sp)
11202d10:	dc401f17 	ldw	r17,124(sp)
11202d14:	dd800404 	addi	r22,sp,16
11202d18:	003e8f06 	br	11202758 <__alt_data_end+0xffe82758>
11202d1c:	0027883a 	mov	r19,zero
11202d20:	003f4a06 	br	11202a4c <__alt_data_end+0xffe82a4c>
11202d24:	d9002c17 	ldw	r4,176(sp)
11202d28:	d9801e04 	addi	r6,sp,120
11202d2c:	b80b883a 	mov	r5,r23
11202d30:	1208e500 	call	11208e50 <__sprint_r>
11202d34:	103b6f1e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11202d38:	d8c02017 	ldw	r3,128(sp)
11202d3c:	da000404 	addi	r8,sp,16
11202d40:	003c9d06 	br	11201fb8 <__alt_data_end+0xffe81fb8>
11202d44:	04e7c83a 	sub	r19,zero,r19
11202d48:	9804c03a 	cmpne	r2,r19,zero
11202d4c:	05adc83a 	sub	r22,zero,r22
11202d50:	b0adc83a 	sub	r22,r22,r2
11202d54:	d8802917 	ldw	r2,164(sp)
11202d58:	07000b44 	movi	fp,45
11202d5c:	df002785 	stb	fp,158(sp)
11202d60:	10017b16 	blt	r2,zero,11203350 <___vfprintf_internal_r+0x1c64>
11202d64:	00bfdfc4 	movi	r2,-129
11202d68:	90a4703a 	and	r18,r18,r2
11202d6c:	003bb106 	br	11201c34 <__alt_data_end+0xffe81c34>
11202d70:	d9003617 	ldw	r4,216(sp)
11202d74:	d9403817 	ldw	r5,224(sp)
11202d78:	da003d15 	stw	r8,244(sp)
11202d7c:	1208a740 	call	11208a74 <__fpclassifyd>
11202d80:	da003d17 	ldw	r8,244(sp)
11202d84:	1000f026 	beq	r2,zero,11203148 <___vfprintf_internal_r+0x1a5c>
11202d88:	d9002917 	ldw	r4,164(sp)
11202d8c:	05bff7c4 	movi	r22,-33
11202d90:	00bfffc4 	movi	r2,-1
11202d94:	8dac703a 	and	r22,r17,r22
11202d98:	20820026 	beq	r4,r2,1120359c <___vfprintf_internal_r+0x1eb0>
11202d9c:	008011c4 	movi	r2,71
11202da0:	b081f726 	beq	r22,r2,11203580 <___vfprintf_internal_r+0x1e94>
11202da4:	d9003817 	ldw	r4,224(sp)
11202da8:	90c04014 	ori	r3,r18,256
11202dac:	d8c02b15 	stw	r3,172(sp)
11202db0:	20021516 	blt	r4,zero,11203608 <___vfprintf_internal_r+0x1f1c>
11202db4:	dcc03817 	ldw	r19,224(sp)
11202db8:	d8002a05 	stb	zero,168(sp)
11202dbc:	00801984 	movi	r2,102
11202dc0:	8881f926 	beq	r17,r2,112035a8 <___vfprintf_internal_r+0x1ebc>
11202dc4:	00801184 	movi	r2,70
11202dc8:	88821c26 	beq	r17,r2,1120363c <___vfprintf_internal_r+0x1f50>
11202dcc:	00801144 	movi	r2,69
11202dd0:	b081ef26 	beq	r22,r2,11203590 <___vfprintf_internal_r+0x1ea4>
11202dd4:	d8c02917 	ldw	r3,164(sp)
11202dd8:	d8802104 	addi	r2,sp,132
11202ddc:	d8800315 	stw	r2,12(sp)
11202de0:	d9403617 	ldw	r5,216(sp)
11202de4:	d8802504 	addi	r2,sp,148
11202de8:	d9002c17 	ldw	r4,176(sp)
11202dec:	d8800215 	stw	r2,8(sp)
11202df0:	d8802604 	addi	r2,sp,152
11202df4:	d8c00015 	stw	r3,0(sp)
11202df8:	d8800115 	stw	r2,4(sp)
11202dfc:	01c00084 	movi	r7,2
11202e00:	980d883a 	mov	r6,r19
11202e04:	d8c03c15 	stw	r3,240(sp)
11202e08:	da003d15 	stw	r8,244(sp)
11202e0c:	1203d100 	call	11203d10 <_dtoa_r>
11202e10:	1021883a 	mov	r16,r2
11202e14:	008019c4 	movi	r2,103
11202e18:	d8c03c17 	ldw	r3,240(sp)
11202e1c:	da003d17 	ldw	r8,244(sp)
11202e20:	88817126 	beq	r17,r2,112033e8 <___vfprintf_internal_r+0x1cfc>
11202e24:	008011c4 	movi	r2,71
11202e28:	88829226 	beq	r17,r2,11203874 <___vfprintf_internal_r+0x2188>
11202e2c:	80f9883a 	add	fp,r16,r3
11202e30:	d9003617 	ldw	r4,216(sp)
11202e34:	000d883a 	mov	r6,zero
11202e38:	000f883a 	mov	r7,zero
11202e3c:	980b883a 	mov	r5,r19
11202e40:	da003d15 	stw	r8,244(sp)
11202e44:	120c9140 	call	1120c914 <__eqdf2>
11202e48:	da003d17 	ldw	r8,244(sp)
11202e4c:	10018d26 	beq	r2,zero,11203484 <___vfprintf_internal_r+0x1d98>
11202e50:	d8802117 	ldw	r2,132(sp)
11202e54:	1700062e 	bgeu	r2,fp,11202e70 <___vfprintf_internal_r+0x1784>
11202e58:	01000c04 	movi	r4,48
11202e5c:	10c00044 	addi	r3,r2,1
11202e60:	d8c02115 	stw	r3,132(sp)
11202e64:	11000005 	stb	r4,0(r2)
11202e68:	d8802117 	ldw	r2,132(sp)
11202e6c:	173ffb36 	bltu	r2,fp,11202e5c <__alt_data_end+0xffe82e5c>
11202e70:	1405c83a 	sub	r2,r2,r16
11202e74:	d8803315 	stw	r2,204(sp)
11202e78:	008011c4 	movi	r2,71
11202e7c:	b0817626 	beq	r22,r2,11203458 <___vfprintf_internal_r+0x1d6c>
11202e80:	00801944 	movi	r2,101
11202e84:	1442810e 	bge	r2,r17,1120388c <___vfprintf_internal_r+0x21a0>
11202e88:	d8c02617 	ldw	r3,152(sp)
11202e8c:	00801984 	movi	r2,102
11202e90:	d8c03215 	stw	r3,200(sp)
11202e94:	8881fe26 	beq	r17,r2,11203690 <___vfprintf_internal_r+0x1fa4>
11202e98:	d8c03217 	ldw	r3,200(sp)
11202e9c:	d9003317 	ldw	r4,204(sp)
11202ea0:	1901dd16 	blt	r3,r4,11203618 <___vfprintf_internal_r+0x1f2c>
11202ea4:	9480004c 	andi	r18,r18,1
11202ea8:	90022b1e 	bne	r18,zero,11203758 <___vfprintf_internal_r+0x206c>
11202eac:	1805883a 	mov	r2,r3
11202eb0:	18028016 	blt	r3,zero,112038b4 <___vfprintf_internal_r+0x21c8>
11202eb4:	d8c03217 	ldw	r3,200(sp)
11202eb8:	044019c4 	movi	r17,103
11202ebc:	d8c02e15 	stw	r3,184(sp)
11202ec0:	df002a07 	ldb	fp,168(sp)
11202ec4:	e001531e 	bne	fp,zero,11203414 <___vfprintf_internal_r+0x1d28>
11202ec8:	df002783 	ldbu	fp,158(sp)
11202ecc:	d8802a15 	stw	r2,168(sp)
11202ed0:	dc802b17 	ldw	r18,172(sp)
11202ed4:	d8002915 	stw	zero,164(sp)
11202ed8:	003bd106 	br	11201e20 <__alt_data_end+0xffe81e20>
11202edc:	d8802d17 	ldw	r2,180(sp)
11202ee0:	d8c02d17 	ldw	r3,180(sp)
11202ee4:	d9002d17 	ldw	r4,180(sp)
11202ee8:	10800017 	ldw	r2,0(r2)
11202eec:	18c00117 	ldw	r3,4(r3)
11202ef0:	21000204 	addi	r4,r4,8
11202ef4:	d8803615 	stw	r2,216(sp)
11202ef8:	d8c03815 	stw	r3,224(sp)
11202efc:	d9002d15 	stw	r4,180(sp)
11202f00:	003b7506 	br	11201cd8 <__alt_data_end+0xffe81cd8>
11202f04:	ac400007 	ldb	r17,0(r21)
11202f08:	003a5906 	br	11201870 <__alt_data_end+0xffe81870>
11202f0c:	9080100c 	andi	r2,r18,64
11202f10:	1000a826 	beq	r2,zero,112031b4 <___vfprintf_internal_r+0x1ac8>
11202f14:	d9002d17 	ldw	r4,180(sp)
11202f18:	002d883a 	mov	r22,zero
11202f1c:	24c0000b 	ldhu	r19,0(r4)
11202f20:	21000104 	addi	r4,r4,4
11202f24:	d9002d15 	stw	r4,180(sp)
11202f28:	003ccb06 	br	11202258 <__alt_data_end+0xffe82258>
11202f2c:	d8c02d17 	ldw	r3,180(sp)
11202f30:	d9002917 	ldw	r4,164(sp)
11202f34:	002d883a 	mov	r22,zero
11202f38:	18800104 	addi	r2,r3,4
11202f3c:	1cc00017 	ldw	r19,0(r3)
11202f40:	203ebb0e 	bge	r4,zero,11202a30 <__alt_data_end+0xffe82a30>
11202f44:	003ef106 	br	11202b0c <__alt_data_end+0xffe82b0c>
11202f48:	9080040c 	andi	r2,r18,16
11202f4c:	1000921e 	bne	r2,zero,11203198 <___vfprintf_internal_r+0x1aac>
11202f50:	9480100c 	andi	r18,r18,64
11202f54:	90013926 	beq	r18,zero,1120343c <___vfprintf_internal_r+0x1d50>
11202f58:	d9002d17 	ldw	r4,180(sp)
11202f5c:	d9402f17 	ldw	r5,188(sp)
11202f60:	20800017 	ldw	r2,0(r4)
11202f64:	21000104 	addi	r4,r4,4
11202f68:	d9002d15 	stw	r4,180(sp)
11202f6c:	1140000d 	sth	r5,0(r2)
11202f70:	003a1606 	br	112017cc <__alt_data_end+0xffe817cc>
11202f74:	9080100c 	andi	r2,r18,64
11202f78:	10008026 	beq	r2,zero,1120317c <___vfprintf_internal_r+0x1a90>
11202f7c:	d8c02d17 	ldw	r3,180(sp)
11202f80:	1cc0000f 	ldh	r19,0(r3)
11202f84:	18c00104 	addi	r3,r3,4
11202f88:	d8c02d15 	stw	r3,180(sp)
11202f8c:	982dd7fa 	srai	r22,r19,31
11202f90:	b005883a 	mov	r2,r22
11202f94:	003b1f06 	br	11201c14 <__alt_data_end+0xffe81c14>
11202f98:	9080100c 	andi	r2,r18,64
11202f9c:	d8002785 	stb	zero,158(sp)
11202fa0:	10008a1e 	bne	r2,zero,112031cc <___vfprintf_internal_r+0x1ae0>
11202fa4:	d9402d17 	ldw	r5,180(sp)
11202fa8:	d8c02917 	ldw	r3,164(sp)
11202fac:	002d883a 	mov	r22,zero
11202fb0:	28800104 	addi	r2,r5,4
11202fb4:	2cc00017 	ldw	r19,0(r5)
11202fb8:	183e4b0e 	bge	r3,zero,112028e8 <__alt_data_end+0xffe828e8>
11202fbc:	9d86b03a 	or	r3,r19,r22
11202fc0:	d8802d15 	stw	r2,180(sp)
11202fc4:	183e4c1e 	bne	r3,zero,112028f8 <__alt_data_end+0xffe828f8>
11202fc8:	0039883a 	mov	fp,zero
11202fcc:	0005883a 	mov	r2,zero
11202fd0:	003d4006 	br	112024d4 <__alt_data_end+0xffe824d4>
11202fd4:	01444874 	movhi	r5,4385
11202fd8:	29415484 	addi	r5,r5,1362
11202fdc:	d9402b15 	stw	r5,172(sp)
11202fe0:	d9402b17 	ldw	r5,172(sp)
11202fe4:	1c47883a 	add	r3,r3,r17
11202fe8:	10800044 	addi	r2,r2,1
11202fec:	41400015 	stw	r5,0(r8)
11202ff0:	44400115 	stw	r17,4(r8)
11202ff4:	d8c02015 	stw	r3,128(sp)
11202ff8:	d8801f15 	stw	r2,124(sp)
11202ffc:	010001c4 	movi	r4,7
11203000:	20bec816 	blt	r4,r2,11202b24 <__alt_data_end+0xffe82b24>
11203004:	42000204 	addi	r8,r8,8
11203008:	003ecd06 	br	11202b40 <__alt_data_end+0xffe82b40>
1120300c:	d9002917 	ldw	r4,164(sp)
11203010:	d8002785 	stb	zero,158(sp)
11203014:	203d2d16 	blt	r4,zero,112024cc <__alt_data_end+0xffe824cc>
11203018:	00bfdfc4 	movi	r2,-129
1120301c:	90a4703a 	and	r18,r18,r2
11203020:	003a9106 	br	11201a68 <__alt_data_end+0xffe81a68>
11203024:	01044874 	movhi	r4,4385
11203028:	21015484 	addi	r4,r4,1362
1120302c:	d9002b15 	stw	r4,172(sp)
11203030:	003c0c06 	br	11202064 <__alt_data_end+0xffe82064>
11203034:	d9002c17 	ldw	r4,176(sp)
11203038:	d9801e04 	addi	r6,sp,120
1120303c:	b80b883a 	mov	r5,r23
11203040:	1208e500 	call	11208e50 <__sprint_r>
11203044:	103aab1e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11203048:	d8c02017 	ldw	r3,128(sp)
1120304c:	da000404 	addi	r8,sp,16
11203050:	003d4106 	br	11202558 <__alt_data_end+0xffe82558>
11203054:	d8801f17 	ldw	r2,124(sp)
11203058:	01444874 	movhi	r5,4385
1120305c:	01000044 	movi	r4,1
11203060:	18c00044 	addi	r3,r3,1
11203064:	10800044 	addi	r2,r2,1
11203068:	29415404 	addi	r5,r5,1360
1120306c:	41000115 	stw	r4,4(r8)
11203070:	41400015 	stw	r5,0(r8)
11203074:	d8c02015 	stw	r3,128(sp)
11203078:	d8801f15 	stw	r2,124(sp)
1120307c:	010001c4 	movi	r4,7
11203080:	20805c16 	blt	r4,r2,112031f4 <___vfprintf_internal_r+0x1b08>
11203084:	42000204 	addi	r8,r8,8
11203088:	8800041e 	bne	r17,zero,1120309c <___vfprintf_internal_r+0x19b0>
1120308c:	d8803317 	ldw	r2,204(sp)
11203090:	1000021e 	bne	r2,zero,1120309c <___vfprintf_internal_r+0x19b0>
11203094:	9080004c 	andi	r2,r18,1
11203098:	103c0926 	beq	r2,zero,112020c0 <__alt_data_end+0xffe820c0>
1120309c:	d9003717 	ldw	r4,220(sp)
112030a0:	d8801f17 	ldw	r2,124(sp)
112030a4:	d9403417 	ldw	r5,208(sp)
112030a8:	20c7883a 	add	r3,r4,r3
112030ac:	10800044 	addi	r2,r2,1
112030b0:	41000115 	stw	r4,4(r8)
112030b4:	41400015 	stw	r5,0(r8)
112030b8:	d8c02015 	stw	r3,128(sp)
112030bc:	d8801f15 	stw	r2,124(sp)
112030c0:	010001c4 	movi	r4,7
112030c4:	20812116 	blt	r4,r2,1120354c <___vfprintf_internal_r+0x1e60>
112030c8:	42000204 	addi	r8,r8,8
112030cc:	0463c83a 	sub	r17,zero,r17
112030d0:	0440730e 	bge	zero,r17,112032a0 <___vfprintf_internal_r+0x1bb4>
112030d4:	05800404 	movi	r22,16
112030d8:	b440860e 	bge	r22,r17,112032f4 <___vfprintf_internal_r+0x1c08>
112030dc:	01444874 	movhi	r5,4385
112030e0:	29415484 	addi	r5,r5,1362
112030e4:	d9402b15 	stw	r5,172(sp)
112030e8:	070001c4 	movi	fp,7
112030ec:	dcc02c17 	ldw	r19,176(sp)
112030f0:	00000306 	br	11203100 <___vfprintf_internal_r+0x1a14>
112030f4:	42000204 	addi	r8,r8,8
112030f8:	8c7ffc04 	addi	r17,r17,-16
112030fc:	b440800e 	bge	r22,r17,11203300 <___vfprintf_internal_r+0x1c14>
11203100:	18c00404 	addi	r3,r3,16
11203104:	10800044 	addi	r2,r2,1
11203108:	45000015 	stw	r20,0(r8)
1120310c:	45800115 	stw	r22,4(r8)
11203110:	d8c02015 	stw	r3,128(sp)
11203114:	d8801f15 	stw	r2,124(sp)
11203118:	e0bff60e 	bge	fp,r2,112030f4 <__alt_data_end+0xffe830f4>
1120311c:	d9801e04 	addi	r6,sp,120
11203120:	b80b883a 	mov	r5,r23
11203124:	9809883a 	mov	r4,r19
11203128:	1208e500 	call	11208e50 <__sprint_r>
1120312c:	103a711e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11203130:	d8c02017 	ldw	r3,128(sp)
11203134:	d8801f17 	ldw	r2,124(sp)
11203138:	da000404 	addi	r8,sp,16
1120313c:	003fee06 	br	112030f8 <__alt_data_end+0xffe830f8>
11203140:	00bfffc4 	movi	r2,-1
11203144:	003a6f06 	br	11201b04 <__alt_data_end+0xffe81b04>
11203148:	008011c4 	movi	r2,71
1120314c:	1440b816 	blt	r2,r17,11203430 <___vfprintf_internal_r+0x1d44>
11203150:	04044874 	movhi	r16,4385
11203154:	84014604 	addi	r16,r16,1304
11203158:	00c000c4 	movi	r3,3
1120315c:	00bfdfc4 	movi	r2,-129
11203160:	d8c02a15 	stw	r3,168(sp)
11203164:	90a4703a 	and	r18,r18,r2
11203168:	df002783 	ldbu	fp,158(sp)
1120316c:	d8c02e15 	stw	r3,184(sp)
11203170:	d8002915 	stw	zero,164(sp)
11203174:	d8003215 	stw	zero,200(sp)
11203178:	003b2906 	br	11201e20 <__alt_data_end+0xffe81e20>
1120317c:	d9002d17 	ldw	r4,180(sp)
11203180:	24c00017 	ldw	r19,0(r4)
11203184:	21000104 	addi	r4,r4,4
11203188:	d9002d15 	stw	r4,180(sp)
1120318c:	982dd7fa 	srai	r22,r19,31
11203190:	b005883a 	mov	r2,r22
11203194:	003a9f06 	br	11201c14 <__alt_data_end+0xffe81c14>
11203198:	d9402d17 	ldw	r5,180(sp)
1120319c:	d8c02f17 	ldw	r3,188(sp)
112031a0:	28800017 	ldw	r2,0(r5)
112031a4:	29400104 	addi	r5,r5,4
112031a8:	d9402d15 	stw	r5,180(sp)
112031ac:	10c00015 	stw	r3,0(r2)
112031b0:	00398606 	br	112017cc <__alt_data_end+0xffe817cc>
112031b4:	d9402d17 	ldw	r5,180(sp)
112031b8:	002d883a 	mov	r22,zero
112031bc:	2cc00017 	ldw	r19,0(r5)
112031c0:	29400104 	addi	r5,r5,4
112031c4:	d9402d15 	stw	r5,180(sp)
112031c8:	003c2306 	br	11202258 <__alt_data_end+0xffe82258>
112031cc:	d8c02d17 	ldw	r3,180(sp)
112031d0:	d9002917 	ldw	r4,164(sp)
112031d4:	002d883a 	mov	r22,zero
112031d8:	18800104 	addi	r2,r3,4
112031dc:	1cc0000b 	ldhu	r19,0(r3)
112031e0:	203dc10e 	bge	r4,zero,112028e8 <__alt_data_end+0xffe828e8>
112031e4:	003f7506 	br	11202fbc <__alt_data_end+0xffe82fbc>
112031e8:	04044874 	movhi	r16,4385
112031ec:	84014404 	addi	r16,r16,1296
112031f0:	003acc06 	br	11201d24 <__alt_data_end+0xffe81d24>
112031f4:	d9002c17 	ldw	r4,176(sp)
112031f8:	d9801e04 	addi	r6,sp,120
112031fc:	b80b883a 	mov	r5,r23
11203200:	1208e500 	call	11208e50 <__sprint_r>
11203204:	103a3b1e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11203208:	dc402617 	ldw	r17,152(sp)
1120320c:	d8c02017 	ldw	r3,128(sp)
11203210:	da000404 	addi	r8,sp,16
11203214:	003f9c06 	br	11203088 <__alt_data_end+0xffe83088>
11203218:	ac400043 	ldbu	r17,1(r21)
1120321c:	94800814 	ori	r18,r18,32
11203220:	ad400044 	addi	r21,r21,1
11203224:	8c403fcc 	andi	r17,r17,255
11203228:	8c40201c 	xori	r17,r17,128
1120322c:	8c7fe004 	addi	r17,r17,-128
11203230:	00398f06 	br	11201870 <__alt_data_end+0xffe81870>
11203234:	d8c02d15 	stw	r3,180(sp)
11203238:	0039883a 	mov	fp,zero
1120323c:	003e3506 	br	11202b14 <__alt_data_end+0xffe82b14>
11203240:	d9002c17 	ldw	r4,176(sp)
11203244:	d9801e04 	addi	r6,sp,120
11203248:	b80b883a 	mov	r5,r23
1120324c:	1208e500 	call	11208e50 <__sprint_r>
11203250:	103a281e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11203254:	d8c02017 	ldw	r3,128(sp)
11203258:	da000404 	addi	r8,sp,16
1120325c:	003cd006 	br	112025a0 <__alt_data_end+0xffe825a0>
11203260:	8009883a 	mov	r4,r16
11203264:	da003d15 	stw	r8,244(sp)
11203268:	12016540 	call	11201654 <strlen>
1120326c:	d8802e15 	stw	r2,184(sp)
11203270:	da003d17 	ldw	r8,244(sp)
11203274:	103c340e 	bge	r2,zero,11202348 <__alt_data_end+0xffe82348>
11203278:	0005883a 	mov	r2,zero
1120327c:	003c3206 	br	11202348 <__alt_data_end+0xffe82348>
11203280:	d9002c17 	ldw	r4,176(sp)
11203284:	d9801e04 	addi	r6,sp,120
11203288:	b80b883a 	mov	r5,r23
1120328c:	1208e500 	call	11208e50 <__sprint_r>
11203290:	103a181e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11203294:	d8c02017 	ldw	r3,128(sp)
11203298:	d8801f17 	ldw	r2,124(sp)
1120329c:	da000404 	addi	r8,sp,16
112032a0:	d9403317 	ldw	r5,204(sp)
112032a4:	10800044 	addi	r2,r2,1
112032a8:	44000015 	stw	r16,0(r8)
112032ac:	28c7883a 	add	r3,r5,r3
112032b0:	003b7d06 	br	112020a8 <__alt_data_end+0xffe820a8>
112032b4:	01044874 	movhi	r4,4385
112032b8:	21015884 	addi	r4,r4,1378
112032bc:	d9003515 	stw	r4,212(sp)
112032c0:	003b1406 	br	11201f14 <__alt_data_end+0xffe81f14>
112032c4:	013fffc4 	movi	r4,-1
112032c8:	003a3506 	br	11201ba0 <__alt_data_end+0xffe81ba0>
112032cc:	0023883a 	mov	r17,zero
112032d0:	003d9d06 	br	11202948 <__alt_data_end+0xffe82948>
112032d4:	d9002c17 	ldw	r4,176(sp)
112032d8:	d9801e04 	addi	r6,sp,120
112032dc:	b80b883a 	mov	r5,r23
112032e0:	1208e500 	call	11208e50 <__sprint_r>
112032e4:	103a031e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
112032e8:	d8c02017 	ldw	r3,128(sp)
112032ec:	da000404 	addi	r8,sp,16
112032f0:	003d9406 	br	11202944 <__alt_data_end+0xffe82944>
112032f4:	01044874 	movhi	r4,4385
112032f8:	21015484 	addi	r4,r4,1362
112032fc:	d9002b15 	stw	r4,172(sp)
11203300:	d9002b17 	ldw	r4,172(sp)
11203304:	1c47883a 	add	r3,r3,r17
11203308:	10800044 	addi	r2,r2,1
1120330c:	41000015 	stw	r4,0(r8)
11203310:	44400115 	stw	r17,4(r8)
11203314:	d8c02015 	stw	r3,128(sp)
11203318:	d8801f15 	stw	r2,124(sp)
1120331c:	010001c4 	movi	r4,7
11203320:	20bfd716 	blt	r4,r2,11203280 <__alt_data_end+0xffe83280>
11203324:	42000204 	addi	r8,r8,8
11203328:	003fdd06 	br	112032a0 <__alt_data_end+0xffe832a0>
1120332c:	d9002c17 	ldw	r4,176(sp)
11203330:	d9801e04 	addi	r6,sp,120
11203334:	b80b883a 	mov	r5,r23
11203338:	1208e500 	call	11208e50 <__sprint_r>
1120333c:	1039ed1e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11203340:	d8802617 	ldw	r2,152(sp)
11203344:	d8c02017 	ldw	r3,128(sp)
11203348:	da000404 	addi	r8,sp,16
1120334c:	003e1006 	br	11202b90 <__alt_data_end+0xffe82b90>
11203350:	00800044 	movi	r2,1
11203354:	10803fcc 	andi	r2,r2,255
11203358:	00c00044 	movi	r3,1
1120335c:	10fa3526 	beq	r2,r3,11201c34 <__alt_data_end+0xffe81c34>
11203360:	00c00084 	movi	r3,2
11203364:	10fbcb26 	beq	r2,r3,11202294 <__alt_data_end+0xffe82294>
11203368:	003a8f06 	br	11201da8 <__alt_data_end+0xffe81da8>
1120336c:	01044874 	movhi	r4,4385
11203370:	21015884 	addi	r4,r4,1378
11203374:	d9003515 	stw	r4,212(sp)
11203378:	003b7606 	br	11202154 <__alt_data_end+0xffe82154>
1120337c:	d8802917 	ldw	r2,164(sp)
11203380:	00c00184 	movi	r3,6
11203384:	1880012e 	bgeu	r3,r2,1120338c <___vfprintf_internal_r+0x1ca0>
11203388:	1805883a 	mov	r2,r3
1120338c:	d8802e15 	stw	r2,184(sp)
11203390:	1000ef16 	blt	r2,zero,11203750 <___vfprintf_internal_r+0x2064>
11203394:	04044874 	movhi	r16,4385
11203398:	d8802a15 	stw	r2,168(sp)
1120339c:	dcc02d15 	stw	r19,180(sp)
112033a0:	d8002915 	stw	zero,164(sp)
112033a4:	d8003215 	stw	zero,200(sp)
112033a8:	84015204 	addi	r16,r16,1352
112033ac:	0039883a 	mov	fp,zero
112033b0:	003aa206 	br	11201e3c <__alt_data_end+0xffe81e3c>
112033b4:	0021883a 	mov	r16,zero
112033b8:	003e0706 	br	11202bd8 <__alt_data_end+0xffe82bd8>
112033bc:	d9002c17 	ldw	r4,176(sp)
112033c0:	d9801e04 	addi	r6,sp,120
112033c4:	b80b883a 	mov	r5,r23
112033c8:	1208e500 	call	11208e50 <__sprint_r>
112033cc:	1039c91e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
112033d0:	d8802617 	ldw	r2,152(sp)
112033d4:	d9403317 	ldw	r5,204(sp)
112033d8:	d8c02017 	ldw	r3,128(sp)
112033dc:	da000404 	addi	r8,sp,16
112033e0:	2885c83a 	sub	r2,r5,r2
112033e4:	003dfb06 	br	11202bd4 <__alt_data_end+0xffe82bd4>
112033e8:	9080004c 	andi	r2,r18,1
112033ec:	103e8f1e 	bne	r2,zero,11202e2c <__alt_data_end+0xffe82e2c>
112033f0:	d8802117 	ldw	r2,132(sp)
112033f4:	003e9e06 	br	11202e70 <__alt_data_end+0xffe82e70>
112033f8:	1025883a 	mov	r18,r2
112033fc:	0039883a 	mov	fp,zero
11203400:	00800084 	movi	r2,2
11203404:	003fd306 	br	11203354 <__alt_data_end+0xffe83354>
11203408:	07000b44 	movi	fp,45
1120340c:	df002785 	stb	fp,158(sp)
11203410:	003a4006 	br	11201d14 <__alt_data_end+0xffe81d14>
11203414:	00c00b44 	movi	r3,45
11203418:	d8c02785 	stb	r3,158(sp)
1120341c:	d8802a15 	stw	r2,168(sp)
11203420:	dc802b17 	ldw	r18,172(sp)
11203424:	d8002915 	stw	zero,164(sp)
11203428:	07000b44 	movi	fp,45
1120342c:	003a8006 	br	11201e30 <__alt_data_end+0xffe81e30>
11203430:	04044874 	movhi	r16,4385
11203434:	84014704 	addi	r16,r16,1308
11203438:	003f4706 	br	11203158 <__alt_data_end+0xffe83158>
1120343c:	d8c02d17 	ldw	r3,180(sp)
11203440:	d9002f17 	ldw	r4,188(sp)
11203444:	18800017 	ldw	r2,0(r3)
11203448:	18c00104 	addi	r3,r3,4
1120344c:	d8c02d15 	stw	r3,180(sp)
11203450:	11000015 	stw	r4,0(r2)
11203454:	0038dd06 	br	112017cc <__alt_data_end+0xffe817cc>
11203458:	dd802617 	ldw	r22,152(sp)
1120345c:	00bfff44 	movi	r2,-3
11203460:	b0801c16 	blt	r22,r2,112034d4 <___vfprintf_internal_r+0x1de8>
11203464:	d9402917 	ldw	r5,164(sp)
11203468:	2d801a16 	blt	r5,r22,112034d4 <___vfprintf_internal_r+0x1de8>
1120346c:	dd803215 	stw	r22,200(sp)
11203470:	003e8906 	br	11202e98 <__alt_data_end+0xffe82e98>
11203474:	01044874 	movhi	r4,4385
11203478:	21015484 	addi	r4,r4,1362
1120347c:	d9002b15 	stw	r4,172(sp)
11203480:	003c9106 	br	112026c8 <__alt_data_end+0xffe826c8>
11203484:	e005883a 	mov	r2,fp
11203488:	003e7906 	br	11202e70 <__alt_data_end+0xffe82e70>
1120348c:	d9402917 	ldw	r5,164(sp)
11203490:	df002783 	ldbu	fp,158(sp)
11203494:	dcc02d15 	stw	r19,180(sp)
11203498:	d9402a15 	stw	r5,168(sp)
1120349c:	d9402e15 	stw	r5,184(sp)
112034a0:	d8002915 	stw	zero,164(sp)
112034a4:	d8003215 	stw	zero,200(sp)
112034a8:	003a5d06 	br	11201e20 <__alt_data_end+0xffe81e20>
112034ac:	9080004c 	andi	r2,r18,1
112034b0:	0039883a 	mov	fp,zero
112034b4:	10000426 	beq	r2,zero,112034c8 <___vfprintf_internal_r+0x1ddc>
112034b8:	00800c04 	movi	r2,48
112034bc:	dc001dc4 	addi	r16,sp,119
112034c0:	d8801dc5 	stb	r2,119(sp)
112034c4:	003b8006 	br	112022c8 <__alt_data_end+0xffe822c8>
112034c8:	d8002e15 	stw	zero,184(sp)
112034cc:	dc001e04 	addi	r16,sp,120
112034d0:	003a4d06 	br	11201e08 <__alt_data_end+0xffe81e08>
112034d4:	8c7fff84 	addi	r17,r17,-2
112034d8:	b5bfffc4 	addi	r22,r22,-1
112034dc:	dd802615 	stw	r22,152(sp)
112034e0:	dc4022c5 	stb	r17,139(sp)
112034e4:	b000bf16 	blt	r22,zero,112037e4 <___vfprintf_internal_r+0x20f8>
112034e8:	00800ac4 	movi	r2,43
112034ec:	d8802305 	stb	r2,140(sp)
112034f0:	00800244 	movi	r2,9
112034f4:	15807016 	blt	r2,r22,112036b8 <___vfprintf_internal_r+0x1fcc>
112034f8:	00800c04 	movi	r2,48
112034fc:	b5800c04 	addi	r22,r22,48
11203500:	d8802345 	stb	r2,141(sp)
11203504:	dd802385 	stb	r22,142(sp)
11203508:	d88023c4 	addi	r2,sp,143
1120350c:	df0022c4 	addi	fp,sp,139
11203510:	d8c03317 	ldw	r3,204(sp)
11203514:	1739c83a 	sub	fp,r2,fp
11203518:	d9003317 	ldw	r4,204(sp)
1120351c:	e0c7883a 	add	r3,fp,r3
11203520:	df003a15 	stw	fp,232(sp)
11203524:	d8c02e15 	stw	r3,184(sp)
11203528:	00800044 	movi	r2,1
1120352c:	1100b30e 	bge	r2,r4,112037fc <___vfprintf_internal_r+0x2110>
11203530:	d8c02e17 	ldw	r3,184(sp)
11203534:	18c00044 	addi	r3,r3,1
11203538:	d8c02e15 	stw	r3,184(sp)
1120353c:	1805883a 	mov	r2,r3
11203540:	1800ac16 	blt	r3,zero,112037f4 <___vfprintf_internal_r+0x2108>
11203544:	d8003215 	stw	zero,200(sp)
11203548:	003e5d06 	br	11202ec0 <__alt_data_end+0xffe82ec0>
1120354c:	d9002c17 	ldw	r4,176(sp)
11203550:	d9801e04 	addi	r6,sp,120
11203554:	b80b883a 	mov	r5,r23
11203558:	1208e500 	call	11208e50 <__sprint_r>
1120355c:	1039651e 	bne	r2,zero,11201af4 <__alt_data_end+0xffe81af4>
11203560:	dc402617 	ldw	r17,152(sp)
11203564:	d8c02017 	ldw	r3,128(sp)
11203568:	d8801f17 	ldw	r2,124(sp)
1120356c:	da000404 	addi	r8,sp,16
11203570:	003ed606 	br	112030cc <__alt_data_end+0xffe830cc>
11203574:	582b883a 	mov	r21,r11
11203578:	d8002915 	stw	zero,164(sp)
1120357c:	0038bd06 	br	11201874 <__alt_data_end+0xffe81874>
11203580:	d8802917 	ldw	r2,164(sp)
11203584:	103e071e 	bne	r2,zero,11202da4 <__alt_data_end+0xffe82da4>
11203588:	dc002915 	stw	r16,164(sp)
1120358c:	003e0506 	br	11202da4 <__alt_data_end+0xffe82da4>
11203590:	d9002917 	ldw	r4,164(sp)
11203594:	20c00044 	addi	r3,r4,1
11203598:	003e0f06 	br	11202dd8 <__alt_data_end+0xffe82dd8>
1120359c:	01400184 	movi	r5,6
112035a0:	d9402915 	stw	r5,164(sp)
112035a4:	003dff06 	br	11202da4 <__alt_data_end+0xffe82da4>
112035a8:	d8802104 	addi	r2,sp,132
112035ac:	d8800315 	stw	r2,12(sp)
112035b0:	d8802504 	addi	r2,sp,148
112035b4:	d8800215 	stw	r2,8(sp)
112035b8:	d8802604 	addi	r2,sp,152
112035bc:	d8800115 	stw	r2,4(sp)
112035c0:	d8802917 	ldw	r2,164(sp)
112035c4:	d9403617 	ldw	r5,216(sp)
112035c8:	d9002c17 	ldw	r4,176(sp)
112035cc:	d8800015 	stw	r2,0(sp)
112035d0:	01c000c4 	movi	r7,3
112035d4:	980d883a 	mov	r6,r19
112035d8:	da003d15 	stw	r8,244(sp)
112035dc:	1203d100 	call	11203d10 <_dtoa_r>
112035e0:	d8c02917 	ldw	r3,164(sp)
112035e4:	da003d17 	ldw	r8,244(sp)
112035e8:	1021883a 	mov	r16,r2
112035ec:	10f9883a 	add	fp,r2,r3
112035f0:	81000007 	ldb	r4,0(r16)
112035f4:	00800c04 	movi	r2,48
112035f8:	20805e26 	beq	r4,r2,11203774 <___vfprintf_internal_r+0x2088>
112035fc:	d8c02617 	ldw	r3,152(sp)
11203600:	e0f9883a 	add	fp,fp,r3
11203604:	003e0a06 	br	11202e30 <__alt_data_end+0xffe82e30>
11203608:	00c00b44 	movi	r3,45
1120360c:	24e0003c 	xorhi	r19,r4,32768
11203610:	d8c02a05 	stb	r3,168(sp)
11203614:	003de906 	br	11202dbc <__alt_data_end+0xffe82dbc>
11203618:	d8c03217 	ldw	r3,200(sp)
1120361c:	00c07a0e 	bge	zero,r3,11203808 <___vfprintf_internal_r+0x211c>
11203620:	00800044 	movi	r2,1
11203624:	d9003317 	ldw	r4,204(sp)
11203628:	1105883a 	add	r2,r2,r4
1120362c:	d8802e15 	stw	r2,184(sp)
11203630:	10004e16 	blt	r2,zero,1120376c <___vfprintf_internal_r+0x2080>
11203634:	044019c4 	movi	r17,103
11203638:	003e2106 	br	11202ec0 <__alt_data_end+0xffe82ec0>
1120363c:	d9002917 	ldw	r4,164(sp)
11203640:	d8802104 	addi	r2,sp,132
11203644:	d8800315 	stw	r2,12(sp)
11203648:	d9000015 	stw	r4,0(sp)
1120364c:	d8802504 	addi	r2,sp,148
11203650:	d9403617 	ldw	r5,216(sp)
11203654:	d9002c17 	ldw	r4,176(sp)
11203658:	d8800215 	stw	r2,8(sp)
1120365c:	d8802604 	addi	r2,sp,152
11203660:	d8800115 	stw	r2,4(sp)
11203664:	01c000c4 	movi	r7,3
11203668:	980d883a 	mov	r6,r19
1120366c:	da003d15 	stw	r8,244(sp)
11203670:	1203d100 	call	11203d10 <_dtoa_r>
11203674:	d8c02917 	ldw	r3,164(sp)
11203678:	da003d17 	ldw	r8,244(sp)
1120367c:	1021883a 	mov	r16,r2
11203680:	00801184 	movi	r2,70
11203684:	80f9883a 	add	fp,r16,r3
11203688:	88bfd926 	beq	r17,r2,112035f0 <__alt_data_end+0xffe835f0>
1120368c:	003de806 	br	11202e30 <__alt_data_end+0xffe82e30>
11203690:	d9002917 	ldw	r4,164(sp)
11203694:	00c04d0e 	bge	zero,r3,112037cc <___vfprintf_internal_r+0x20e0>
11203698:	2000441e 	bne	r4,zero,112037ac <___vfprintf_internal_r+0x20c0>
1120369c:	9480004c 	andi	r18,r18,1
112036a0:	9000421e 	bne	r18,zero,112037ac <___vfprintf_internal_r+0x20c0>
112036a4:	1805883a 	mov	r2,r3
112036a8:	18007016 	blt	r3,zero,1120386c <___vfprintf_internal_r+0x2180>
112036ac:	d8c03217 	ldw	r3,200(sp)
112036b0:	d8c02e15 	stw	r3,184(sp)
112036b4:	003e0206 	br	11202ec0 <__alt_data_end+0xffe82ec0>
112036b8:	df0022c4 	addi	fp,sp,139
112036bc:	dc002915 	stw	r16,164(sp)
112036c0:	4027883a 	mov	r19,r8
112036c4:	e021883a 	mov	r16,fp
112036c8:	b009883a 	mov	r4,r22
112036cc:	01400284 	movi	r5,10
112036d0:	12013c40 	call	112013c4 <__modsi3>
112036d4:	10800c04 	addi	r2,r2,48
112036d8:	843fffc4 	addi	r16,r16,-1
112036dc:	b009883a 	mov	r4,r22
112036e0:	01400284 	movi	r5,10
112036e4:	80800005 	stb	r2,0(r16)
112036e8:	12013400 	call	11201340 <__divsi3>
112036ec:	102d883a 	mov	r22,r2
112036f0:	00800244 	movi	r2,9
112036f4:	15bff416 	blt	r2,r22,112036c8 <__alt_data_end+0xffe836c8>
112036f8:	9811883a 	mov	r8,r19
112036fc:	b0800c04 	addi	r2,r22,48
11203700:	8027883a 	mov	r19,r16
11203704:	997fffc4 	addi	r5,r19,-1
11203708:	98bfffc5 	stb	r2,-1(r19)
1120370c:	dc002917 	ldw	r16,164(sp)
11203710:	2f006a2e 	bgeu	r5,fp,112038bc <___vfprintf_internal_r+0x21d0>
11203714:	d9c02384 	addi	r7,sp,142
11203718:	3ccfc83a 	sub	r7,r7,r19
1120371c:	d9002344 	addi	r4,sp,141
11203720:	e1cf883a 	add	r7,fp,r7
11203724:	00000106 	br	1120372c <___vfprintf_internal_r+0x2040>
11203728:	28800003 	ldbu	r2,0(r5)
1120372c:	20800005 	stb	r2,0(r4)
11203730:	21000044 	addi	r4,r4,1
11203734:	29400044 	addi	r5,r5,1
11203738:	393ffb1e 	bne	r7,r4,11203728 <__alt_data_end+0xffe83728>
1120373c:	d8802304 	addi	r2,sp,140
11203740:	14c5c83a 	sub	r2,r2,r19
11203744:	d8c02344 	addi	r3,sp,141
11203748:	1885883a 	add	r2,r3,r2
1120374c:	003f7006 	br	11203510 <__alt_data_end+0xffe83510>
11203750:	0005883a 	mov	r2,zero
11203754:	003f0f06 	br	11203394 <__alt_data_end+0xffe83394>
11203758:	d8c03217 	ldw	r3,200(sp)
1120375c:	18c00044 	addi	r3,r3,1
11203760:	d8c02e15 	stw	r3,184(sp)
11203764:	1805883a 	mov	r2,r3
11203768:	183fb20e 	bge	r3,zero,11203634 <__alt_data_end+0xffe83634>
1120376c:	0005883a 	mov	r2,zero
11203770:	003fb006 	br	11203634 <__alt_data_end+0xffe83634>
11203774:	d9003617 	ldw	r4,216(sp)
11203778:	000d883a 	mov	r6,zero
1120377c:	000f883a 	mov	r7,zero
11203780:	980b883a 	mov	r5,r19
11203784:	d8c03c15 	stw	r3,240(sp)
11203788:	da003d15 	stw	r8,244(sp)
1120378c:	120c9140 	call	1120c914 <__eqdf2>
11203790:	d8c03c17 	ldw	r3,240(sp)
11203794:	da003d17 	ldw	r8,244(sp)
11203798:	103f9826 	beq	r2,zero,112035fc <__alt_data_end+0xffe835fc>
1120379c:	00800044 	movi	r2,1
112037a0:	10c7c83a 	sub	r3,r2,r3
112037a4:	d8c02615 	stw	r3,152(sp)
112037a8:	003f9506 	br	11203600 <__alt_data_end+0xffe83600>
112037ac:	d9002917 	ldw	r4,164(sp)
112037b0:	d8c03217 	ldw	r3,200(sp)
112037b4:	20800044 	addi	r2,r4,1
112037b8:	1885883a 	add	r2,r3,r2
112037bc:	d8802e15 	stw	r2,184(sp)
112037c0:	103dbf0e 	bge	r2,zero,11202ec0 <__alt_data_end+0xffe82ec0>
112037c4:	0005883a 	mov	r2,zero
112037c8:	003dbd06 	br	11202ec0 <__alt_data_end+0xffe82ec0>
112037cc:	2000211e 	bne	r4,zero,11203854 <___vfprintf_internal_r+0x2168>
112037d0:	9480004c 	andi	r18,r18,1
112037d4:	90001f1e 	bne	r18,zero,11203854 <___vfprintf_internal_r+0x2168>
112037d8:	00800044 	movi	r2,1
112037dc:	d8802e15 	stw	r2,184(sp)
112037e0:	003db706 	br	11202ec0 <__alt_data_end+0xffe82ec0>
112037e4:	00800b44 	movi	r2,45
112037e8:	05adc83a 	sub	r22,zero,r22
112037ec:	d8802305 	stb	r2,140(sp)
112037f0:	003f3f06 	br	112034f0 <__alt_data_end+0xffe834f0>
112037f4:	0005883a 	mov	r2,zero
112037f8:	003f5206 	br	11203544 <__alt_data_end+0xffe83544>
112037fc:	90a4703a 	and	r18,r18,r2
11203800:	903f4e26 	beq	r18,zero,1120353c <__alt_data_end+0xffe8353c>
11203804:	003f4a06 	br	11203530 <__alt_data_end+0xffe83530>
11203808:	00800084 	movi	r2,2
1120380c:	10c5c83a 	sub	r2,r2,r3
11203810:	003f8406 	br	11203624 <__alt_data_end+0xffe83624>
11203814:	d8802d17 	ldw	r2,180(sp)
11203818:	d9002d17 	ldw	r4,180(sp)
1120381c:	ac400043 	ldbu	r17,1(r21)
11203820:	10800017 	ldw	r2,0(r2)
11203824:	582b883a 	mov	r21,r11
11203828:	d8802915 	stw	r2,164(sp)
1120382c:	20800104 	addi	r2,r4,4
11203830:	d9002917 	ldw	r4,164(sp)
11203834:	d8802d15 	stw	r2,180(sp)
11203838:	203e7a0e 	bge	r4,zero,11203224 <__alt_data_end+0xffe83224>
1120383c:	8c403fcc 	andi	r17,r17,255
11203840:	00bfffc4 	movi	r2,-1
11203844:	8c40201c 	xori	r17,r17,128
11203848:	d8802915 	stw	r2,164(sp)
1120384c:	8c7fe004 	addi	r17,r17,-128
11203850:	00380706 	br	11201870 <__alt_data_end+0xffe81870>
11203854:	d8c02917 	ldw	r3,164(sp)
11203858:	18c00084 	addi	r3,r3,2
1120385c:	d8c02e15 	stw	r3,184(sp)
11203860:	1805883a 	mov	r2,r3
11203864:	183d960e 	bge	r3,zero,11202ec0 <__alt_data_end+0xffe82ec0>
11203868:	003fd606 	br	112037c4 <__alt_data_end+0xffe837c4>
1120386c:	0005883a 	mov	r2,zero
11203870:	003f8e06 	br	112036ac <__alt_data_end+0xffe836ac>
11203874:	9080004c 	andi	r2,r18,1
11203878:	103f811e 	bne	r2,zero,11203680 <__alt_data_end+0xffe83680>
1120387c:	d8802117 	ldw	r2,132(sp)
11203880:	1405c83a 	sub	r2,r2,r16
11203884:	d8803315 	stw	r2,204(sp)
11203888:	b47ef326 	beq	r22,r17,11203458 <__alt_data_end+0xffe83458>
1120388c:	dd802617 	ldw	r22,152(sp)
11203890:	003f1106 	br	112034d8 <__alt_data_end+0xffe834d8>
11203894:	d9c02785 	stb	r7,158(sp)
11203898:	00390406 	br	11201cac <__alt_data_end+0xffe81cac>
1120389c:	d9c02785 	stb	r7,158(sp)
112038a0:	0038d306 	br	11201bf0 <__alt_data_end+0xffe81bf0>
112038a4:	d9c02785 	stb	r7,158(sp)
112038a8:	003a6106 	br	11202230 <__alt_data_end+0xffe82230>
112038ac:	d9c02785 	stb	r7,158(sp)
112038b0:	003af806 	br	11202494 <__alt_data_end+0xffe82494>
112038b4:	0005883a 	mov	r2,zero
112038b8:	003d7e06 	br	11202eb4 <__alt_data_end+0xffe82eb4>
112038bc:	d8802344 	addi	r2,sp,141
112038c0:	003f1306 	br	11203510 <__alt_data_end+0xffe83510>
112038c4:	d9c02785 	stb	r7,158(sp)
112038c8:	00392306 	br	11201d58 <__alt_data_end+0xffe81d58>
112038cc:	d9c02785 	stb	r7,158(sp)
112038d0:	003aa906 	br	11202378 <__alt_data_end+0xffe82378>
112038d4:	d9c02785 	stb	r7,158(sp)
112038d8:	003a3d06 	br	112021d0 <__alt_data_end+0xffe821d0>
112038dc:	d9c02785 	stb	r7,158(sp)
112038e0:	003aca06 	br	1120240c <__alt_data_end+0xffe8240c>

112038e4 <__vfprintf_internal>:
112038e4:	00844874 	movhi	r2,4385
112038e8:	1088b104 	addi	r2,r2,8900
112038ec:	300f883a 	mov	r7,r6
112038f0:	280d883a 	mov	r6,r5
112038f4:	200b883a 	mov	r5,r4
112038f8:	11000017 	ldw	r4,0(r2)
112038fc:	12016ec1 	jmpi	112016ec <___vfprintf_internal_r>

11203900 <__sbprintf>:
11203900:	2880030b 	ldhu	r2,12(r5)
11203904:	2ac01917 	ldw	r11,100(r5)
11203908:	2a80038b 	ldhu	r10,14(r5)
1120390c:	2a400717 	ldw	r9,28(r5)
11203910:	2a000917 	ldw	r8,36(r5)
11203914:	defee204 	addi	sp,sp,-1144
11203918:	00c10004 	movi	r3,1024
1120391c:	dc011a15 	stw	r16,1128(sp)
11203920:	10bfff4c 	andi	r2,r2,65533
11203924:	2821883a 	mov	r16,r5
11203928:	d8cb883a 	add	r5,sp,r3
1120392c:	dc811c15 	stw	r18,1136(sp)
11203930:	dc411b15 	stw	r17,1132(sp)
11203934:	dfc11d15 	stw	ra,1140(sp)
11203938:	2025883a 	mov	r18,r4
1120393c:	d881030d 	sth	r2,1036(sp)
11203940:	dac11915 	stw	r11,1124(sp)
11203944:	da81038d 	sth	r10,1038(sp)
11203948:	da410715 	stw	r9,1052(sp)
1120394c:	da010915 	stw	r8,1060(sp)
11203950:	dec10015 	stw	sp,1024(sp)
11203954:	dec10415 	stw	sp,1040(sp)
11203958:	d8c10215 	stw	r3,1032(sp)
1120395c:	d8c10515 	stw	r3,1044(sp)
11203960:	d8010615 	stw	zero,1048(sp)
11203964:	12016ec0 	call	112016ec <___vfprintf_internal_r>
11203968:	1023883a 	mov	r17,r2
1120396c:	10000416 	blt	r2,zero,11203980 <__sbprintf+0x80>
11203970:	d9410004 	addi	r5,sp,1024
11203974:	9009883a 	mov	r4,r18
11203978:	12055b40 	call	112055b4 <_fflush_r>
1120397c:	10000d1e 	bne	r2,zero,112039b4 <__sbprintf+0xb4>
11203980:	d881030b 	ldhu	r2,1036(sp)
11203984:	1080100c 	andi	r2,r2,64
11203988:	10000326 	beq	r2,zero,11203998 <__sbprintf+0x98>
1120398c:	8080030b 	ldhu	r2,12(r16)
11203990:	10801014 	ori	r2,r2,64
11203994:	8080030d 	sth	r2,12(r16)
11203998:	8805883a 	mov	r2,r17
1120399c:	dfc11d17 	ldw	ra,1140(sp)
112039a0:	dc811c17 	ldw	r18,1136(sp)
112039a4:	dc411b17 	ldw	r17,1132(sp)
112039a8:	dc011a17 	ldw	r16,1128(sp)
112039ac:	dec11e04 	addi	sp,sp,1144
112039b0:	f800283a 	ret
112039b4:	047fffc4 	movi	r17,-1
112039b8:	003ff106 	br	11203980 <__alt_data_end+0xffe83980>

112039bc <__swsetup_r>:
112039bc:	00844874 	movhi	r2,4385
112039c0:	defffd04 	addi	sp,sp,-12
112039c4:	1088b104 	addi	r2,r2,8900
112039c8:	dc400115 	stw	r17,4(sp)
112039cc:	2023883a 	mov	r17,r4
112039d0:	11000017 	ldw	r4,0(r2)
112039d4:	dc000015 	stw	r16,0(sp)
112039d8:	dfc00215 	stw	ra,8(sp)
112039dc:	2821883a 	mov	r16,r5
112039e0:	20000226 	beq	r4,zero,112039ec <__swsetup_r+0x30>
112039e4:	20800e17 	ldw	r2,56(r4)
112039e8:	10003126 	beq	r2,zero,11203ab0 <__swsetup_r+0xf4>
112039ec:	8080030b 	ldhu	r2,12(r16)
112039f0:	10c0020c 	andi	r3,r2,8
112039f4:	1009883a 	mov	r4,r2
112039f8:	18000f26 	beq	r3,zero,11203a38 <__swsetup_r+0x7c>
112039fc:	80c00417 	ldw	r3,16(r16)
11203a00:	18001526 	beq	r3,zero,11203a58 <__swsetup_r+0x9c>
11203a04:	1100004c 	andi	r4,r2,1
11203a08:	20001c1e 	bne	r4,zero,11203a7c <__swsetup_r+0xc0>
11203a0c:	1080008c 	andi	r2,r2,2
11203a10:	1000291e 	bne	r2,zero,11203ab8 <__swsetup_r+0xfc>
11203a14:	80800517 	ldw	r2,20(r16)
11203a18:	80800215 	stw	r2,8(r16)
11203a1c:	18001c26 	beq	r3,zero,11203a90 <__swsetup_r+0xd4>
11203a20:	0005883a 	mov	r2,zero
11203a24:	dfc00217 	ldw	ra,8(sp)
11203a28:	dc400117 	ldw	r17,4(sp)
11203a2c:	dc000017 	ldw	r16,0(sp)
11203a30:	dec00304 	addi	sp,sp,12
11203a34:	f800283a 	ret
11203a38:	2080040c 	andi	r2,r4,16
11203a3c:	10002e26 	beq	r2,zero,11203af8 <__swsetup_r+0x13c>
11203a40:	2080010c 	andi	r2,r4,4
11203a44:	10001e1e 	bne	r2,zero,11203ac0 <__swsetup_r+0x104>
11203a48:	80c00417 	ldw	r3,16(r16)
11203a4c:	20800214 	ori	r2,r4,8
11203a50:	8080030d 	sth	r2,12(r16)
11203a54:	183feb1e 	bne	r3,zero,11203a04 <__alt_data_end+0xffe83a04>
11203a58:	1100a00c 	andi	r4,r2,640
11203a5c:	01408004 	movi	r5,512
11203a60:	217fe826 	beq	r4,r5,11203a04 <__alt_data_end+0xffe83a04>
11203a64:	800b883a 	mov	r5,r16
11203a68:	8809883a 	mov	r4,r17
11203a6c:	12065340 	call	11206534 <__smakebuf_r>
11203a70:	8080030b 	ldhu	r2,12(r16)
11203a74:	80c00417 	ldw	r3,16(r16)
11203a78:	003fe206 	br	11203a04 <__alt_data_end+0xffe83a04>
11203a7c:	80800517 	ldw	r2,20(r16)
11203a80:	80000215 	stw	zero,8(r16)
11203a84:	0085c83a 	sub	r2,zero,r2
11203a88:	80800615 	stw	r2,24(r16)
11203a8c:	183fe41e 	bne	r3,zero,11203a20 <__alt_data_end+0xffe83a20>
11203a90:	80c0030b 	ldhu	r3,12(r16)
11203a94:	0005883a 	mov	r2,zero
11203a98:	1900200c 	andi	r4,r3,128
11203a9c:	203fe126 	beq	r4,zero,11203a24 <__alt_data_end+0xffe83a24>
11203aa0:	18c01014 	ori	r3,r3,64
11203aa4:	80c0030d 	sth	r3,12(r16)
11203aa8:	00bfffc4 	movi	r2,-1
11203aac:	003fdd06 	br	11203a24 <__alt_data_end+0xffe83a24>
11203ab0:	12059900 	call	11205990 <__sinit>
11203ab4:	003fcd06 	br	112039ec <__alt_data_end+0xffe839ec>
11203ab8:	0005883a 	mov	r2,zero
11203abc:	003fd606 	br	11203a18 <__alt_data_end+0xffe83a18>
11203ac0:	81400c17 	ldw	r5,48(r16)
11203ac4:	28000626 	beq	r5,zero,11203ae0 <__swsetup_r+0x124>
11203ac8:	80801004 	addi	r2,r16,64
11203acc:	28800326 	beq	r5,r2,11203adc <__swsetup_r+0x120>
11203ad0:	8809883a 	mov	r4,r17
11203ad4:	1205b040 	call	11205b04 <_free_r>
11203ad8:	8100030b 	ldhu	r4,12(r16)
11203adc:	80000c15 	stw	zero,48(r16)
11203ae0:	80c00417 	ldw	r3,16(r16)
11203ae4:	00bff6c4 	movi	r2,-37
11203ae8:	1108703a 	and	r4,r2,r4
11203aec:	80000115 	stw	zero,4(r16)
11203af0:	80c00015 	stw	r3,0(r16)
11203af4:	003fd506 	br	11203a4c <__alt_data_end+0xffe83a4c>
11203af8:	00800244 	movi	r2,9
11203afc:	88800015 	stw	r2,0(r17)
11203b00:	20801014 	ori	r2,r4,64
11203b04:	8080030d 	sth	r2,12(r16)
11203b08:	00bfffc4 	movi	r2,-1
11203b0c:	003fc506 	br	11203a24 <__alt_data_end+0xffe83a24>

11203b10 <quorem>:
11203b10:	defff704 	addi	sp,sp,-36
11203b14:	dc800215 	stw	r18,8(sp)
11203b18:	20800417 	ldw	r2,16(r4)
11203b1c:	2c800417 	ldw	r18,16(r5)
11203b20:	dfc00815 	stw	ra,32(sp)
11203b24:	ddc00715 	stw	r23,28(sp)
11203b28:	dd800615 	stw	r22,24(sp)
11203b2c:	dd400515 	stw	r21,20(sp)
11203b30:	dd000415 	stw	r20,16(sp)
11203b34:	dcc00315 	stw	r19,12(sp)
11203b38:	dc400115 	stw	r17,4(sp)
11203b3c:	dc000015 	stw	r16,0(sp)
11203b40:	14807116 	blt	r2,r18,11203d08 <quorem+0x1f8>
11203b44:	94bfffc4 	addi	r18,r18,-1
11203b48:	94ad883a 	add	r22,r18,r18
11203b4c:	b5ad883a 	add	r22,r22,r22
11203b50:	2c400504 	addi	r17,r5,20
11203b54:	8da9883a 	add	r20,r17,r22
11203b58:	25400504 	addi	r21,r4,20
11203b5c:	282f883a 	mov	r23,r5
11203b60:	adad883a 	add	r22,r21,r22
11203b64:	a1400017 	ldw	r5,0(r20)
11203b68:	2021883a 	mov	r16,r4
11203b6c:	b1000017 	ldw	r4,0(r22)
11203b70:	29400044 	addi	r5,r5,1
11203b74:	12014380 	call	11201438 <__udivsi3>
11203b78:	1027883a 	mov	r19,r2
11203b7c:	10002c26 	beq	r2,zero,11203c30 <quorem+0x120>
11203b80:	a813883a 	mov	r9,r21
11203b84:	880b883a 	mov	r5,r17
11203b88:	0009883a 	mov	r4,zero
11203b8c:	000d883a 	mov	r6,zero
11203b90:	2a000017 	ldw	r8,0(r5)
11203b94:	49c00017 	ldw	r7,0(r9)
11203b98:	29400104 	addi	r5,r5,4
11203b9c:	40bfffcc 	andi	r2,r8,65535
11203ba0:	14c5383a 	mul	r2,r2,r19
11203ba4:	4010d43a 	srli	r8,r8,16
11203ba8:	38ffffcc 	andi	r3,r7,65535
11203bac:	1105883a 	add	r2,r2,r4
11203bb0:	1008d43a 	srli	r4,r2,16
11203bb4:	44d1383a 	mul	r8,r8,r19
11203bb8:	198d883a 	add	r6,r3,r6
11203bbc:	10ffffcc 	andi	r3,r2,65535
11203bc0:	30c7c83a 	sub	r3,r6,r3
11203bc4:	380ed43a 	srli	r7,r7,16
11203bc8:	4105883a 	add	r2,r8,r4
11203bcc:	180dd43a 	srai	r6,r3,16
11203bd0:	113fffcc 	andi	r4,r2,65535
11203bd4:	390fc83a 	sub	r7,r7,r4
11203bd8:	398d883a 	add	r6,r7,r6
11203bdc:	300e943a 	slli	r7,r6,16
11203be0:	18ffffcc 	andi	r3,r3,65535
11203be4:	1008d43a 	srli	r4,r2,16
11203be8:	38ceb03a 	or	r7,r7,r3
11203bec:	49c00015 	stw	r7,0(r9)
11203bf0:	300dd43a 	srai	r6,r6,16
11203bf4:	4a400104 	addi	r9,r9,4
11203bf8:	a17fe52e 	bgeu	r20,r5,11203b90 <__alt_data_end+0xffe83b90>
11203bfc:	b0800017 	ldw	r2,0(r22)
11203c00:	10000b1e 	bne	r2,zero,11203c30 <quorem+0x120>
11203c04:	b0bfff04 	addi	r2,r22,-4
11203c08:	a880082e 	bgeu	r21,r2,11203c2c <quorem+0x11c>
11203c0c:	b0ffff17 	ldw	r3,-4(r22)
11203c10:	18000326 	beq	r3,zero,11203c20 <quorem+0x110>
11203c14:	00000506 	br	11203c2c <quorem+0x11c>
11203c18:	10c00017 	ldw	r3,0(r2)
11203c1c:	1800031e 	bne	r3,zero,11203c2c <quorem+0x11c>
11203c20:	10bfff04 	addi	r2,r2,-4
11203c24:	94bfffc4 	addi	r18,r18,-1
11203c28:	a8bffb36 	bltu	r21,r2,11203c18 <__alt_data_end+0xffe83c18>
11203c2c:	84800415 	stw	r18,16(r16)
11203c30:	b80b883a 	mov	r5,r23
11203c34:	8009883a 	mov	r4,r16
11203c38:	1207c740 	call	11207c74 <__mcmp>
11203c3c:	10002616 	blt	r2,zero,11203cd8 <quorem+0x1c8>
11203c40:	9cc00044 	addi	r19,r19,1
11203c44:	a805883a 	mov	r2,r21
11203c48:	000b883a 	mov	r5,zero
11203c4c:	11000017 	ldw	r4,0(r2)
11203c50:	89800017 	ldw	r6,0(r17)
11203c54:	10800104 	addi	r2,r2,4
11203c58:	20ffffcc 	andi	r3,r4,65535
11203c5c:	194b883a 	add	r5,r3,r5
11203c60:	30ffffcc 	andi	r3,r6,65535
11203c64:	28c7c83a 	sub	r3,r5,r3
11203c68:	300cd43a 	srli	r6,r6,16
11203c6c:	2008d43a 	srli	r4,r4,16
11203c70:	180bd43a 	srai	r5,r3,16
11203c74:	18ffffcc 	andi	r3,r3,65535
11203c78:	2189c83a 	sub	r4,r4,r6
11203c7c:	2149883a 	add	r4,r4,r5
11203c80:	200c943a 	slli	r6,r4,16
11203c84:	8c400104 	addi	r17,r17,4
11203c88:	200bd43a 	srai	r5,r4,16
11203c8c:	30c6b03a 	or	r3,r6,r3
11203c90:	10ffff15 	stw	r3,-4(r2)
11203c94:	a47fed2e 	bgeu	r20,r17,11203c4c <__alt_data_end+0xffe83c4c>
11203c98:	9485883a 	add	r2,r18,r18
11203c9c:	1085883a 	add	r2,r2,r2
11203ca0:	a887883a 	add	r3,r21,r2
11203ca4:	18800017 	ldw	r2,0(r3)
11203ca8:	10000b1e 	bne	r2,zero,11203cd8 <quorem+0x1c8>
11203cac:	18bfff04 	addi	r2,r3,-4
11203cb0:	a880082e 	bgeu	r21,r2,11203cd4 <quorem+0x1c4>
11203cb4:	18ffff17 	ldw	r3,-4(r3)
11203cb8:	18000326 	beq	r3,zero,11203cc8 <quorem+0x1b8>
11203cbc:	00000506 	br	11203cd4 <quorem+0x1c4>
11203cc0:	10c00017 	ldw	r3,0(r2)
11203cc4:	1800031e 	bne	r3,zero,11203cd4 <quorem+0x1c4>
11203cc8:	10bfff04 	addi	r2,r2,-4
11203ccc:	94bfffc4 	addi	r18,r18,-1
11203cd0:	a8bffb36 	bltu	r21,r2,11203cc0 <__alt_data_end+0xffe83cc0>
11203cd4:	84800415 	stw	r18,16(r16)
11203cd8:	9805883a 	mov	r2,r19
11203cdc:	dfc00817 	ldw	ra,32(sp)
11203ce0:	ddc00717 	ldw	r23,28(sp)
11203ce4:	dd800617 	ldw	r22,24(sp)
11203ce8:	dd400517 	ldw	r21,20(sp)
11203cec:	dd000417 	ldw	r20,16(sp)
11203cf0:	dcc00317 	ldw	r19,12(sp)
11203cf4:	dc800217 	ldw	r18,8(sp)
11203cf8:	dc400117 	ldw	r17,4(sp)
11203cfc:	dc000017 	ldw	r16,0(sp)
11203d00:	dec00904 	addi	sp,sp,36
11203d04:	f800283a 	ret
11203d08:	0005883a 	mov	r2,zero
11203d0c:	003ff306 	br	11203cdc <__alt_data_end+0xffe83cdc>

11203d10 <_dtoa_r>:
11203d10:	20801017 	ldw	r2,64(r4)
11203d14:	deffde04 	addi	sp,sp,-136
11203d18:	df002015 	stw	fp,128(sp)
11203d1c:	dcc01b15 	stw	r19,108(sp)
11203d20:	dc801a15 	stw	r18,104(sp)
11203d24:	dc401915 	stw	r17,100(sp)
11203d28:	dc001815 	stw	r16,96(sp)
11203d2c:	dfc02115 	stw	ra,132(sp)
11203d30:	ddc01f15 	stw	r23,124(sp)
11203d34:	dd801e15 	stw	r22,120(sp)
11203d38:	dd401d15 	stw	r21,116(sp)
11203d3c:	dd001c15 	stw	r20,112(sp)
11203d40:	d9c00315 	stw	r7,12(sp)
11203d44:	2039883a 	mov	fp,r4
11203d48:	3023883a 	mov	r17,r6
11203d4c:	2825883a 	mov	r18,r5
11203d50:	dc002417 	ldw	r16,144(sp)
11203d54:	3027883a 	mov	r19,r6
11203d58:	10000826 	beq	r2,zero,11203d7c <_dtoa_r+0x6c>
11203d5c:	21801117 	ldw	r6,68(r4)
11203d60:	00c00044 	movi	r3,1
11203d64:	100b883a 	mov	r5,r2
11203d68:	1986983a 	sll	r3,r3,r6
11203d6c:	11800115 	stw	r6,4(r2)
11203d70:	10c00215 	stw	r3,8(r2)
11203d74:	12074540 	call	11207454 <_Bfree>
11203d78:	e0001015 	stw	zero,64(fp)
11203d7c:	88002e16 	blt	r17,zero,11203e38 <_dtoa_r+0x128>
11203d80:	80000015 	stw	zero,0(r16)
11203d84:	889ffc2c 	andhi	r2,r17,32752
11203d88:	00dffc34 	movhi	r3,32752
11203d8c:	10c01c26 	beq	r2,r3,11203e00 <_dtoa_r+0xf0>
11203d90:	000d883a 	mov	r6,zero
11203d94:	000f883a 	mov	r7,zero
11203d98:	9009883a 	mov	r4,r18
11203d9c:	980b883a 	mov	r5,r19
11203da0:	120c9140 	call	1120c914 <__eqdf2>
11203da4:	10002b1e 	bne	r2,zero,11203e54 <_dtoa_r+0x144>
11203da8:	d9c02317 	ldw	r7,140(sp)
11203dac:	00800044 	movi	r2,1
11203db0:	38800015 	stw	r2,0(r7)
11203db4:	d8802517 	ldw	r2,148(sp)
11203db8:	10019e26 	beq	r2,zero,11204434 <_dtoa_r+0x724>
11203dbc:	d8c02517 	ldw	r3,148(sp)
11203dc0:	00844874 	movhi	r2,4385
11203dc4:	10815444 	addi	r2,r2,1361
11203dc8:	18800015 	stw	r2,0(r3)
11203dcc:	10bfffc4 	addi	r2,r2,-1
11203dd0:	dfc02117 	ldw	ra,132(sp)
11203dd4:	df002017 	ldw	fp,128(sp)
11203dd8:	ddc01f17 	ldw	r23,124(sp)
11203ddc:	dd801e17 	ldw	r22,120(sp)
11203de0:	dd401d17 	ldw	r21,116(sp)
11203de4:	dd001c17 	ldw	r20,112(sp)
11203de8:	dcc01b17 	ldw	r19,108(sp)
11203dec:	dc801a17 	ldw	r18,104(sp)
11203df0:	dc401917 	ldw	r17,100(sp)
11203df4:	dc001817 	ldw	r16,96(sp)
11203df8:	dec02204 	addi	sp,sp,136
11203dfc:	f800283a 	ret
11203e00:	d8c02317 	ldw	r3,140(sp)
11203e04:	0089c3c4 	movi	r2,9999
11203e08:	18800015 	stw	r2,0(r3)
11203e0c:	90017726 	beq	r18,zero,112043ec <_dtoa_r+0x6dc>
11203e10:	00844874 	movhi	r2,4385
11203e14:	10816004 	addi	r2,r2,1408
11203e18:	d9002517 	ldw	r4,148(sp)
11203e1c:	203fec26 	beq	r4,zero,11203dd0 <__alt_data_end+0xffe83dd0>
11203e20:	10c000c7 	ldb	r3,3(r2)
11203e24:	1801781e 	bne	r3,zero,11204408 <_dtoa_r+0x6f8>
11203e28:	10c000c4 	addi	r3,r2,3
11203e2c:	d9802517 	ldw	r6,148(sp)
11203e30:	30c00015 	stw	r3,0(r6)
11203e34:	003fe606 	br	11203dd0 <__alt_data_end+0xffe83dd0>
11203e38:	04e00034 	movhi	r19,32768
11203e3c:	9cffffc4 	addi	r19,r19,-1
11203e40:	00800044 	movi	r2,1
11203e44:	8ce6703a 	and	r19,r17,r19
11203e48:	80800015 	stw	r2,0(r16)
11203e4c:	9823883a 	mov	r17,r19
11203e50:	003fcc06 	br	11203d84 <__alt_data_end+0xffe83d84>
11203e54:	d8800204 	addi	r2,sp,8
11203e58:	d8800015 	stw	r2,0(sp)
11203e5c:	d9c00104 	addi	r7,sp,4
11203e60:	900b883a 	mov	r5,r18
11203e64:	980d883a 	mov	r6,r19
11203e68:	e009883a 	mov	r4,fp
11203e6c:	8820d53a 	srli	r16,r17,20
11203e70:	12080400 	call	11208040 <__d2b>
11203e74:	d8800915 	stw	r2,36(sp)
11203e78:	8001651e 	bne	r16,zero,11204410 <_dtoa_r+0x700>
11203e7c:	dd800217 	ldw	r22,8(sp)
11203e80:	dc000117 	ldw	r16,4(sp)
11203e84:	00800804 	movi	r2,32
11203e88:	b421883a 	add	r16,r22,r16
11203e8c:	80c10c84 	addi	r3,r16,1074
11203e90:	10c2d10e 	bge	r2,r3,112049d8 <_dtoa_r+0xcc8>
11203e94:	00801004 	movi	r2,64
11203e98:	81010484 	addi	r4,r16,1042
11203e9c:	10c7c83a 	sub	r3,r2,r3
11203ea0:	9108d83a 	srl	r4,r18,r4
11203ea4:	88e2983a 	sll	r17,r17,r3
11203ea8:	2448b03a 	or	r4,r4,r17
11203eac:	120dcdc0 	call	1120dcdc <__floatunsidf>
11203eb0:	017f8434 	movhi	r5,65040
11203eb4:	01800044 	movi	r6,1
11203eb8:	1009883a 	mov	r4,r2
11203ebc:	194b883a 	add	r5,r3,r5
11203ec0:	843fffc4 	addi	r16,r16,-1
11203ec4:	d9801115 	stw	r6,68(sp)
11203ec8:	000d883a 	mov	r6,zero
11203ecc:	01cffe34 	movhi	r7,16376
11203ed0:	120d2840 	call	1120d284 <__subdf3>
11203ed4:	0198dbf4 	movhi	r6,25455
11203ed8:	01cff4f4 	movhi	r7,16339
11203edc:	3190d844 	addi	r6,r6,17249
11203ee0:	39e1e9c4 	addi	r7,r7,-30809
11203ee4:	1009883a 	mov	r4,r2
11203ee8:	180b883a 	mov	r5,r3
11203eec:	120cb6c0 	call	1120cb6c <__muldf3>
11203ef0:	01a2d874 	movhi	r6,35681
11203ef4:	01cff1f4 	movhi	r7,16327
11203ef8:	31b22cc4 	addi	r6,r6,-14157
11203efc:	39e28a04 	addi	r7,r7,-30168
11203f00:	180b883a 	mov	r5,r3
11203f04:	1009883a 	mov	r4,r2
11203f08:	120b7800 	call	1120b780 <__adddf3>
11203f0c:	8009883a 	mov	r4,r16
11203f10:	1029883a 	mov	r20,r2
11203f14:	1823883a 	mov	r17,r3
11203f18:	120dc000 	call	1120dc00 <__floatsidf>
11203f1c:	019427f4 	movhi	r6,20639
11203f20:	01cff4f4 	movhi	r7,16339
11203f24:	319e7ec4 	addi	r6,r6,31227
11203f28:	39d104c4 	addi	r7,r7,17427
11203f2c:	1009883a 	mov	r4,r2
11203f30:	180b883a 	mov	r5,r3
11203f34:	120cb6c0 	call	1120cb6c <__muldf3>
11203f38:	100d883a 	mov	r6,r2
11203f3c:	180f883a 	mov	r7,r3
11203f40:	a009883a 	mov	r4,r20
11203f44:	880b883a 	mov	r5,r17
11203f48:	120b7800 	call	1120b780 <__adddf3>
11203f4c:	1009883a 	mov	r4,r2
11203f50:	180b883a 	mov	r5,r3
11203f54:	1029883a 	mov	r20,r2
11203f58:	1823883a 	mov	r17,r3
11203f5c:	120db800 	call	1120db80 <__fixdfsi>
11203f60:	000d883a 	mov	r6,zero
11203f64:	000f883a 	mov	r7,zero
11203f68:	a009883a 	mov	r4,r20
11203f6c:	880b883a 	mov	r5,r17
11203f70:	d8800515 	stw	r2,20(sp)
11203f74:	120ca780 	call	1120ca78 <__ledf2>
11203f78:	10028716 	blt	r2,zero,11204998 <_dtoa_r+0xc88>
11203f7c:	d8c00517 	ldw	r3,20(sp)
11203f80:	00800584 	movi	r2,22
11203f84:	10c27536 	bltu	r2,r3,1120495c <_dtoa_r+0xc4c>
11203f88:	180490fa 	slli	r2,r3,3
11203f8c:	00c44874 	movhi	r3,4385
11203f90:	18c17c04 	addi	r3,r3,1520
11203f94:	1885883a 	add	r2,r3,r2
11203f98:	11000017 	ldw	r4,0(r2)
11203f9c:	11400117 	ldw	r5,4(r2)
11203fa0:	900d883a 	mov	r6,r18
11203fa4:	980f883a 	mov	r7,r19
11203fa8:	120c99c0 	call	1120c99c <__gedf2>
11203fac:	00828d0e 	bge	zero,r2,112049e4 <_dtoa_r+0xcd4>
11203fb0:	d9000517 	ldw	r4,20(sp)
11203fb4:	d8000e15 	stw	zero,56(sp)
11203fb8:	213fffc4 	addi	r4,r4,-1
11203fbc:	d9000515 	stw	r4,20(sp)
11203fc0:	b42dc83a 	sub	r22,r22,r16
11203fc4:	b5bfffc4 	addi	r22,r22,-1
11203fc8:	b0026f16 	blt	r22,zero,11204988 <_dtoa_r+0xc78>
11203fcc:	d8000815 	stw	zero,32(sp)
11203fd0:	d9c00517 	ldw	r7,20(sp)
11203fd4:	38026416 	blt	r7,zero,11204968 <_dtoa_r+0xc58>
11203fd8:	b1ed883a 	add	r22,r22,r7
11203fdc:	d9c00d15 	stw	r7,52(sp)
11203fe0:	d8000a15 	stw	zero,40(sp)
11203fe4:	d9800317 	ldw	r6,12(sp)
11203fe8:	00800244 	movi	r2,9
11203fec:	11811436 	bltu	r2,r6,11204440 <_dtoa_r+0x730>
11203ff0:	00800144 	movi	r2,5
11203ff4:	1184e10e 	bge	r2,r6,1120537c <_dtoa_r+0x166c>
11203ff8:	31bfff04 	addi	r6,r6,-4
11203ffc:	d9800315 	stw	r6,12(sp)
11204000:	0023883a 	mov	r17,zero
11204004:	d9800317 	ldw	r6,12(sp)
11204008:	008000c4 	movi	r2,3
1120400c:	30836726 	beq	r6,r2,11204dac <_dtoa_r+0x109c>
11204010:	1183410e 	bge	r2,r6,11204d18 <_dtoa_r+0x1008>
11204014:	d9c00317 	ldw	r7,12(sp)
11204018:	00800104 	movi	r2,4
1120401c:	38827c26 	beq	r7,r2,11204a10 <_dtoa_r+0xd00>
11204020:	00800144 	movi	r2,5
11204024:	3884c41e 	bne	r7,r2,11205338 <_dtoa_r+0x1628>
11204028:	00800044 	movi	r2,1
1120402c:	d8800b15 	stw	r2,44(sp)
11204030:	d8c00517 	ldw	r3,20(sp)
11204034:	d9002217 	ldw	r4,136(sp)
11204038:	1907883a 	add	r3,r3,r4
1120403c:	19800044 	addi	r6,r3,1
11204040:	d8c00c15 	stw	r3,48(sp)
11204044:	d9800615 	stw	r6,24(sp)
11204048:	0183a40e 	bge	zero,r6,11204edc <_dtoa_r+0x11cc>
1120404c:	d9800617 	ldw	r6,24(sp)
11204050:	3021883a 	mov	r16,r6
11204054:	e0001115 	stw	zero,68(fp)
11204058:	008005c4 	movi	r2,23
1120405c:	1184c92e 	bgeu	r2,r6,11205384 <_dtoa_r+0x1674>
11204060:	00c00044 	movi	r3,1
11204064:	00800104 	movi	r2,4
11204068:	1085883a 	add	r2,r2,r2
1120406c:	11000504 	addi	r4,r2,20
11204070:	180b883a 	mov	r5,r3
11204074:	18c00044 	addi	r3,r3,1
11204078:	313ffb2e 	bgeu	r6,r4,11204068 <__alt_data_end+0xffe84068>
1120407c:	e1401115 	stw	r5,68(fp)
11204080:	e009883a 	mov	r4,fp
11204084:	12073ac0 	call	112073ac <_Balloc>
11204088:	d8800715 	stw	r2,28(sp)
1120408c:	e0801015 	stw	r2,64(fp)
11204090:	00800384 	movi	r2,14
11204094:	1400f736 	bltu	r2,r16,11204474 <_dtoa_r+0x764>
11204098:	8800f626 	beq	r17,zero,11204474 <_dtoa_r+0x764>
1120409c:	d9c00517 	ldw	r7,20(sp)
112040a0:	01c39a0e 	bge	zero,r7,11204f0c <_dtoa_r+0x11fc>
112040a4:	388003cc 	andi	r2,r7,15
112040a8:	100490fa 	slli	r2,r2,3
112040ac:	382bd13a 	srai	r21,r7,4
112040b0:	00c44874 	movhi	r3,4385
112040b4:	18c17c04 	addi	r3,r3,1520
112040b8:	1885883a 	add	r2,r3,r2
112040bc:	a8c0040c 	andi	r3,r21,16
112040c0:	12400017 	ldw	r9,0(r2)
112040c4:	12000117 	ldw	r8,4(r2)
112040c8:	18037926 	beq	r3,zero,11204eb0 <_dtoa_r+0x11a0>
112040cc:	00844874 	movhi	r2,4385
112040d0:	10817204 	addi	r2,r2,1480
112040d4:	11800817 	ldw	r6,32(r2)
112040d8:	11c00917 	ldw	r7,36(r2)
112040dc:	9009883a 	mov	r4,r18
112040e0:	980b883a 	mov	r5,r19
112040e4:	da001715 	stw	r8,92(sp)
112040e8:	da401615 	stw	r9,88(sp)
112040ec:	120c02c0 	call	1120c02c <__divdf3>
112040f0:	da001717 	ldw	r8,92(sp)
112040f4:	da401617 	ldw	r9,88(sp)
112040f8:	ad4003cc 	andi	r21,r21,15
112040fc:	040000c4 	movi	r16,3
11204100:	1023883a 	mov	r17,r2
11204104:	1829883a 	mov	r20,r3
11204108:	a8001126 	beq	r21,zero,11204150 <_dtoa_r+0x440>
1120410c:	05c44874 	movhi	r23,4385
11204110:	bdc17204 	addi	r23,r23,1480
11204114:	4805883a 	mov	r2,r9
11204118:	4007883a 	mov	r3,r8
1120411c:	a980004c 	andi	r6,r21,1
11204120:	1009883a 	mov	r4,r2
11204124:	a82bd07a 	srai	r21,r21,1
11204128:	180b883a 	mov	r5,r3
1120412c:	30000426 	beq	r6,zero,11204140 <_dtoa_r+0x430>
11204130:	b9800017 	ldw	r6,0(r23)
11204134:	b9c00117 	ldw	r7,4(r23)
11204138:	84000044 	addi	r16,r16,1
1120413c:	120cb6c0 	call	1120cb6c <__muldf3>
11204140:	bdc00204 	addi	r23,r23,8
11204144:	a83ff51e 	bne	r21,zero,1120411c <__alt_data_end+0xffe8411c>
11204148:	1013883a 	mov	r9,r2
1120414c:	1811883a 	mov	r8,r3
11204150:	480d883a 	mov	r6,r9
11204154:	400f883a 	mov	r7,r8
11204158:	8809883a 	mov	r4,r17
1120415c:	a00b883a 	mov	r5,r20
11204160:	120c02c0 	call	1120c02c <__divdf3>
11204164:	d8800f15 	stw	r2,60(sp)
11204168:	d8c01015 	stw	r3,64(sp)
1120416c:	d8c00e17 	ldw	r3,56(sp)
11204170:	18000626 	beq	r3,zero,1120418c <_dtoa_r+0x47c>
11204174:	d9000f17 	ldw	r4,60(sp)
11204178:	d9401017 	ldw	r5,64(sp)
1120417c:	000d883a 	mov	r6,zero
11204180:	01cffc34 	movhi	r7,16368
11204184:	120ca780 	call	1120ca78 <__ledf2>
11204188:	10040b16 	blt	r2,zero,112051b8 <_dtoa_r+0x14a8>
1120418c:	8009883a 	mov	r4,r16
11204190:	120dc000 	call	1120dc00 <__floatsidf>
11204194:	d9800f17 	ldw	r6,60(sp)
11204198:	d9c01017 	ldw	r7,64(sp)
1120419c:	1009883a 	mov	r4,r2
112041a0:	180b883a 	mov	r5,r3
112041a4:	120cb6c0 	call	1120cb6c <__muldf3>
112041a8:	000d883a 	mov	r6,zero
112041ac:	01d00734 	movhi	r7,16412
112041b0:	1009883a 	mov	r4,r2
112041b4:	180b883a 	mov	r5,r3
112041b8:	120b7800 	call	1120b780 <__adddf3>
112041bc:	1021883a 	mov	r16,r2
112041c0:	d8800617 	ldw	r2,24(sp)
112041c4:	047f3034 	movhi	r17,64704
112041c8:	1c63883a 	add	r17,r3,r17
112041cc:	10031826 	beq	r2,zero,11204e30 <_dtoa_r+0x1120>
112041d0:	d8c00517 	ldw	r3,20(sp)
112041d4:	db000617 	ldw	r12,24(sp)
112041d8:	d8c01315 	stw	r3,76(sp)
112041dc:	d9000b17 	ldw	r4,44(sp)
112041e0:	20038f26 	beq	r4,zero,11205020 <_dtoa_r+0x1310>
112041e4:	60bfffc4 	addi	r2,r12,-1
112041e8:	100490fa 	slli	r2,r2,3
112041ec:	00c44874 	movhi	r3,4385
112041f0:	18c17c04 	addi	r3,r3,1520
112041f4:	1885883a 	add	r2,r3,r2
112041f8:	11800017 	ldw	r6,0(r2)
112041fc:	11c00117 	ldw	r7,4(r2)
11204200:	d8800717 	ldw	r2,28(sp)
11204204:	0009883a 	mov	r4,zero
11204208:	014ff834 	movhi	r5,16352
1120420c:	db001615 	stw	r12,88(sp)
11204210:	15c00044 	addi	r23,r2,1
11204214:	120c02c0 	call	1120c02c <__divdf3>
11204218:	800d883a 	mov	r6,r16
1120421c:	880f883a 	mov	r7,r17
11204220:	1009883a 	mov	r4,r2
11204224:	180b883a 	mov	r5,r3
11204228:	120d2840 	call	1120d284 <__subdf3>
1120422c:	d9401017 	ldw	r5,64(sp)
11204230:	d9000f17 	ldw	r4,60(sp)
11204234:	102b883a 	mov	r21,r2
11204238:	d8c01215 	stw	r3,72(sp)
1120423c:	120db800 	call	1120db80 <__fixdfsi>
11204240:	1009883a 	mov	r4,r2
11204244:	1029883a 	mov	r20,r2
11204248:	120dc000 	call	1120dc00 <__floatsidf>
1120424c:	d9000f17 	ldw	r4,60(sp)
11204250:	d9401017 	ldw	r5,64(sp)
11204254:	100d883a 	mov	r6,r2
11204258:	180f883a 	mov	r7,r3
1120425c:	120d2840 	call	1120d284 <__subdf3>
11204260:	1823883a 	mov	r17,r3
11204264:	d8c00717 	ldw	r3,28(sp)
11204268:	d9401217 	ldw	r5,72(sp)
1120426c:	a2000c04 	addi	r8,r20,48
11204270:	1021883a 	mov	r16,r2
11204274:	1a000005 	stb	r8,0(r3)
11204278:	800d883a 	mov	r6,r16
1120427c:	880f883a 	mov	r7,r17
11204280:	a809883a 	mov	r4,r21
11204284:	4029883a 	mov	r20,r8
11204288:	120c99c0 	call	1120c99c <__gedf2>
1120428c:	00841d16 	blt	zero,r2,11205304 <_dtoa_r+0x15f4>
11204290:	800d883a 	mov	r6,r16
11204294:	880f883a 	mov	r7,r17
11204298:	0009883a 	mov	r4,zero
1120429c:	014ffc34 	movhi	r5,16368
112042a0:	120d2840 	call	1120d284 <__subdf3>
112042a4:	d9401217 	ldw	r5,72(sp)
112042a8:	100d883a 	mov	r6,r2
112042ac:	180f883a 	mov	r7,r3
112042b0:	a809883a 	mov	r4,r21
112042b4:	120c99c0 	call	1120c99c <__gedf2>
112042b8:	db001617 	ldw	r12,88(sp)
112042bc:	00840e16 	blt	zero,r2,112052f8 <_dtoa_r+0x15e8>
112042c0:	00800044 	movi	r2,1
112042c4:	13006b0e 	bge	r2,r12,11204474 <_dtoa_r+0x764>
112042c8:	d9000717 	ldw	r4,28(sp)
112042cc:	dd800f15 	stw	r22,60(sp)
112042d0:	dcc01015 	stw	r19,64(sp)
112042d4:	2319883a 	add	r12,r4,r12
112042d8:	dcc01217 	ldw	r19,72(sp)
112042dc:	602d883a 	mov	r22,r12
112042e0:	dc801215 	stw	r18,72(sp)
112042e4:	b825883a 	mov	r18,r23
112042e8:	00000906 	br	11204310 <_dtoa_r+0x600>
112042ec:	120d2840 	call	1120d284 <__subdf3>
112042f0:	a80d883a 	mov	r6,r21
112042f4:	980f883a 	mov	r7,r19
112042f8:	1009883a 	mov	r4,r2
112042fc:	180b883a 	mov	r5,r3
11204300:	120ca780 	call	1120ca78 <__ledf2>
11204304:	1003e816 	blt	r2,zero,112052a8 <_dtoa_r+0x1598>
11204308:	b825883a 	mov	r18,r23
1120430c:	bd83e926 	beq	r23,r22,112052b4 <_dtoa_r+0x15a4>
11204310:	a809883a 	mov	r4,r21
11204314:	980b883a 	mov	r5,r19
11204318:	000d883a 	mov	r6,zero
1120431c:	01d00934 	movhi	r7,16420
11204320:	120cb6c0 	call	1120cb6c <__muldf3>
11204324:	000d883a 	mov	r6,zero
11204328:	01d00934 	movhi	r7,16420
1120432c:	8009883a 	mov	r4,r16
11204330:	880b883a 	mov	r5,r17
11204334:	102b883a 	mov	r21,r2
11204338:	1827883a 	mov	r19,r3
1120433c:	120cb6c0 	call	1120cb6c <__muldf3>
11204340:	180b883a 	mov	r5,r3
11204344:	1009883a 	mov	r4,r2
11204348:	1821883a 	mov	r16,r3
1120434c:	1023883a 	mov	r17,r2
11204350:	120db800 	call	1120db80 <__fixdfsi>
11204354:	1009883a 	mov	r4,r2
11204358:	1029883a 	mov	r20,r2
1120435c:	120dc000 	call	1120dc00 <__floatsidf>
11204360:	8809883a 	mov	r4,r17
11204364:	800b883a 	mov	r5,r16
11204368:	100d883a 	mov	r6,r2
1120436c:	180f883a 	mov	r7,r3
11204370:	120d2840 	call	1120d284 <__subdf3>
11204374:	a5000c04 	addi	r20,r20,48
11204378:	a80d883a 	mov	r6,r21
1120437c:	980f883a 	mov	r7,r19
11204380:	1009883a 	mov	r4,r2
11204384:	180b883a 	mov	r5,r3
11204388:	95000005 	stb	r20,0(r18)
1120438c:	1021883a 	mov	r16,r2
11204390:	1823883a 	mov	r17,r3
11204394:	120ca780 	call	1120ca78 <__ledf2>
11204398:	bdc00044 	addi	r23,r23,1
1120439c:	800d883a 	mov	r6,r16
112043a0:	880f883a 	mov	r7,r17
112043a4:	0009883a 	mov	r4,zero
112043a8:	014ffc34 	movhi	r5,16368
112043ac:	103fcf0e 	bge	r2,zero,112042ec <__alt_data_end+0xffe842ec>
112043b0:	d8c01317 	ldw	r3,76(sp)
112043b4:	d8c00515 	stw	r3,20(sp)
112043b8:	d9400917 	ldw	r5,36(sp)
112043bc:	e009883a 	mov	r4,fp
112043c0:	12074540 	call	11207454 <_Bfree>
112043c4:	d9000517 	ldw	r4,20(sp)
112043c8:	d9802317 	ldw	r6,140(sp)
112043cc:	d9c02517 	ldw	r7,148(sp)
112043d0:	b8000005 	stb	zero,0(r23)
112043d4:	20800044 	addi	r2,r4,1
112043d8:	30800015 	stw	r2,0(r6)
112043dc:	3802aa26 	beq	r7,zero,11204e88 <_dtoa_r+0x1178>
112043e0:	3dc00015 	stw	r23,0(r7)
112043e4:	d8800717 	ldw	r2,28(sp)
112043e8:	003e7906 	br	11203dd0 <__alt_data_end+0xffe83dd0>
112043ec:	00800434 	movhi	r2,16
112043f0:	10bfffc4 	addi	r2,r2,-1
112043f4:	88a2703a 	and	r17,r17,r2
112043f8:	883e851e 	bne	r17,zero,11203e10 <__alt_data_end+0xffe83e10>
112043fc:	00844874 	movhi	r2,4385
11204400:	10815d04 	addi	r2,r2,1396
11204404:	003e8406 	br	11203e18 <__alt_data_end+0xffe83e18>
11204408:	10c00204 	addi	r3,r2,8
1120440c:	003e8706 	br	11203e2c <__alt_data_end+0xffe83e2c>
11204410:	01400434 	movhi	r5,16
11204414:	297fffc4 	addi	r5,r5,-1
11204418:	994a703a 	and	r5,r19,r5
1120441c:	9009883a 	mov	r4,r18
11204420:	843f0044 	addi	r16,r16,-1023
11204424:	294ffc34 	orhi	r5,r5,16368
11204428:	dd800217 	ldw	r22,8(sp)
1120442c:	d8001115 	stw	zero,68(sp)
11204430:	003ea506 	br	11203ec8 <__alt_data_end+0xffe83ec8>
11204434:	00844874 	movhi	r2,4385
11204438:	10815404 	addi	r2,r2,1360
1120443c:	003e6406 	br	11203dd0 <__alt_data_end+0xffe83dd0>
11204440:	e0001115 	stw	zero,68(fp)
11204444:	000b883a 	mov	r5,zero
11204448:	e009883a 	mov	r4,fp
1120444c:	12073ac0 	call	112073ac <_Balloc>
11204450:	01bfffc4 	movi	r6,-1
11204454:	01c00044 	movi	r7,1
11204458:	d8800715 	stw	r2,28(sp)
1120445c:	d9800c15 	stw	r6,48(sp)
11204460:	e0801015 	stw	r2,64(fp)
11204464:	d8000315 	stw	zero,12(sp)
11204468:	d9c00b15 	stw	r7,44(sp)
1120446c:	d9800615 	stw	r6,24(sp)
11204470:	d8002215 	stw	zero,136(sp)
11204474:	d8800117 	ldw	r2,4(sp)
11204478:	10008916 	blt	r2,zero,112046a0 <_dtoa_r+0x990>
1120447c:	d9000517 	ldw	r4,20(sp)
11204480:	00c00384 	movi	r3,14
11204484:	19008616 	blt	r3,r4,112046a0 <_dtoa_r+0x990>
11204488:	200490fa 	slli	r2,r4,3
1120448c:	00c44874 	movhi	r3,4385
11204490:	d9802217 	ldw	r6,136(sp)
11204494:	18c17c04 	addi	r3,r3,1520
11204498:	1885883a 	add	r2,r3,r2
1120449c:	14000017 	ldw	r16,0(r2)
112044a0:	14400117 	ldw	r17,4(r2)
112044a4:	30016316 	blt	r6,zero,11204a34 <_dtoa_r+0xd24>
112044a8:	800d883a 	mov	r6,r16
112044ac:	880f883a 	mov	r7,r17
112044b0:	9009883a 	mov	r4,r18
112044b4:	980b883a 	mov	r5,r19
112044b8:	120c02c0 	call	1120c02c <__divdf3>
112044bc:	180b883a 	mov	r5,r3
112044c0:	1009883a 	mov	r4,r2
112044c4:	120db800 	call	1120db80 <__fixdfsi>
112044c8:	1009883a 	mov	r4,r2
112044cc:	102b883a 	mov	r21,r2
112044d0:	120dc000 	call	1120dc00 <__floatsidf>
112044d4:	800d883a 	mov	r6,r16
112044d8:	880f883a 	mov	r7,r17
112044dc:	1009883a 	mov	r4,r2
112044e0:	180b883a 	mov	r5,r3
112044e4:	120cb6c0 	call	1120cb6c <__muldf3>
112044e8:	100d883a 	mov	r6,r2
112044ec:	180f883a 	mov	r7,r3
112044f0:	9009883a 	mov	r4,r18
112044f4:	980b883a 	mov	r5,r19
112044f8:	120d2840 	call	1120d284 <__subdf3>
112044fc:	d9c00717 	ldw	r7,28(sp)
11204500:	1009883a 	mov	r4,r2
11204504:	a8800c04 	addi	r2,r21,48
11204508:	38800005 	stb	r2,0(r7)
1120450c:	3dc00044 	addi	r23,r7,1
11204510:	d9c00617 	ldw	r7,24(sp)
11204514:	01800044 	movi	r6,1
11204518:	180b883a 	mov	r5,r3
1120451c:	2005883a 	mov	r2,r4
11204520:	39803826 	beq	r7,r6,11204604 <_dtoa_r+0x8f4>
11204524:	000d883a 	mov	r6,zero
11204528:	01d00934 	movhi	r7,16420
1120452c:	120cb6c0 	call	1120cb6c <__muldf3>
11204530:	000d883a 	mov	r6,zero
11204534:	000f883a 	mov	r7,zero
11204538:	1009883a 	mov	r4,r2
1120453c:	180b883a 	mov	r5,r3
11204540:	1025883a 	mov	r18,r2
11204544:	1827883a 	mov	r19,r3
11204548:	120c9140 	call	1120c914 <__eqdf2>
1120454c:	103f9a26 	beq	r2,zero,112043b8 <__alt_data_end+0xffe843b8>
11204550:	d9c00617 	ldw	r7,24(sp)
11204554:	d8c00717 	ldw	r3,28(sp)
11204558:	b829883a 	mov	r20,r23
1120455c:	38bfffc4 	addi	r2,r7,-1
11204560:	18ad883a 	add	r22,r3,r2
11204564:	00000a06 	br	11204590 <_dtoa_r+0x880>
11204568:	120cb6c0 	call	1120cb6c <__muldf3>
1120456c:	000d883a 	mov	r6,zero
11204570:	000f883a 	mov	r7,zero
11204574:	1009883a 	mov	r4,r2
11204578:	180b883a 	mov	r5,r3
1120457c:	1025883a 	mov	r18,r2
11204580:	1827883a 	mov	r19,r3
11204584:	b829883a 	mov	r20,r23
11204588:	120c9140 	call	1120c914 <__eqdf2>
1120458c:	103f8a26 	beq	r2,zero,112043b8 <__alt_data_end+0xffe843b8>
11204590:	800d883a 	mov	r6,r16
11204594:	880f883a 	mov	r7,r17
11204598:	9009883a 	mov	r4,r18
1120459c:	980b883a 	mov	r5,r19
112045a0:	120c02c0 	call	1120c02c <__divdf3>
112045a4:	180b883a 	mov	r5,r3
112045a8:	1009883a 	mov	r4,r2
112045ac:	120db800 	call	1120db80 <__fixdfsi>
112045b0:	1009883a 	mov	r4,r2
112045b4:	102b883a 	mov	r21,r2
112045b8:	120dc000 	call	1120dc00 <__floatsidf>
112045bc:	800d883a 	mov	r6,r16
112045c0:	880f883a 	mov	r7,r17
112045c4:	1009883a 	mov	r4,r2
112045c8:	180b883a 	mov	r5,r3
112045cc:	120cb6c0 	call	1120cb6c <__muldf3>
112045d0:	100d883a 	mov	r6,r2
112045d4:	180f883a 	mov	r7,r3
112045d8:	9009883a 	mov	r4,r18
112045dc:	980b883a 	mov	r5,r19
112045e0:	120d2840 	call	1120d284 <__subdf3>
112045e4:	aa000c04 	addi	r8,r21,48
112045e8:	a2000005 	stb	r8,0(r20)
112045ec:	000d883a 	mov	r6,zero
112045f0:	01d00934 	movhi	r7,16420
112045f4:	1009883a 	mov	r4,r2
112045f8:	180b883a 	mov	r5,r3
112045fc:	a5c00044 	addi	r23,r20,1
11204600:	b53fd91e 	bne	r22,r20,11204568 <__alt_data_end+0xffe84568>
11204604:	100d883a 	mov	r6,r2
11204608:	180f883a 	mov	r7,r3
1120460c:	1009883a 	mov	r4,r2
11204610:	180b883a 	mov	r5,r3
11204614:	120b7800 	call	1120b780 <__adddf3>
11204618:	100d883a 	mov	r6,r2
1120461c:	180f883a 	mov	r7,r3
11204620:	8009883a 	mov	r4,r16
11204624:	880b883a 	mov	r5,r17
11204628:	1027883a 	mov	r19,r2
1120462c:	1825883a 	mov	r18,r3
11204630:	120ca780 	call	1120ca78 <__ledf2>
11204634:	10000816 	blt	r2,zero,11204658 <_dtoa_r+0x948>
11204638:	980d883a 	mov	r6,r19
1120463c:	900f883a 	mov	r7,r18
11204640:	8009883a 	mov	r4,r16
11204644:	880b883a 	mov	r5,r17
11204648:	120c9140 	call	1120c914 <__eqdf2>
1120464c:	103f5a1e 	bne	r2,zero,112043b8 <__alt_data_end+0xffe843b8>
11204650:	ad40004c 	andi	r21,r21,1
11204654:	a83f5826 	beq	r21,zero,112043b8 <__alt_data_end+0xffe843b8>
11204658:	bd3fffc3 	ldbu	r20,-1(r23)
1120465c:	b8bfffc4 	addi	r2,r23,-1
11204660:	1007883a 	mov	r3,r2
11204664:	01400e44 	movi	r5,57
11204668:	d9800717 	ldw	r6,28(sp)
1120466c:	00000506 	br	11204684 <_dtoa_r+0x974>
11204670:	18ffffc4 	addi	r3,r3,-1
11204674:	11824726 	beq	r2,r6,11204f94 <_dtoa_r+0x1284>
11204678:	1d000003 	ldbu	r20,0(r3)
1120467c:	102f883a 	mov	r23,r2
11204680:	10bfffc4 	addi	r2,r2,-1
11204684:	a1003fcc 	andi	r4,r20,255
11204688:	2100201c 	xori	r4,r4,128
1120468c:	213fe004 	addi	r4,r4,-128
11204690:	217ff726 	beq	r4,r5,11204670 <__alt_data_end+0xffe84670>
11204694:	a2000044 	addi	r8,r20,1
11204698:	12000005 	stb	r8,0(r2)
1120469c:	003f4606 	br	112043b8 <__alt_data_end+0xffe843b8>
112046a0:	d9000b17 	ldw	r4,44(sp)
112046a4:	2000c826 	beq	r4,zero,112049c8 <_dtoa_r+0xcb8>
112046a8:	d9800317 	ldw	r6,12(sp)
112046ac:	00c00044 	movi	r3,1
112046b0:	1980f90e 	bge	r3,r6,11204a98 <_dtoa_r+0xd88>
112046b4:	d8800617 	ldw	r2,24(sp)
112046b8:	d8c00a17 	ldw	r3,40(sp)
112046bc:	157fffc4 	addi	r21,r2,-1
112046c0:	1d41f316 	blt	r3,r21,11204e90 <_dtoa_r+0x1180>
112046c4:	1d6bc83a 	sub	r21,r3,r21
112046c8:	d9c00617 	ldw	r7,24(sp)
112046cc:	3802aa16 	blt	r7,zero,11205178 <_dtoa_r+0x1468>
112046d0:	dd000817 	ldw	r20,32(sp)
112046d4:	d8800617 	ldw	r2,24(sp)
112046d8:	d8c00817 	ldw	r3,32(sp)
112046dc:	01400044 	movi	r5,1
112046e0:	e009883a 	mov	r4,fp
112046e4:	1887883a 	add	r3,r3,r2
112046e8:	d8c00815 	stw	r3,32(sp)
112046ec:	b0ad883a 	add	r22,r22,r2
112046f0:	12077b80 	call	112077b8 <__i2b>
112046f4:	1023883a 	mov	r17,r2
112046f8:	a0000826 	beq	r20,zero,1120471c <_dtoa_r+0xa0c>
112046fc:	0580070e 	bge	zero,r22,1120471c <_dtoa_r+0xa0c>
11204700:	a005883a 	mov	r2,r20
11204704:	b500b916 	blt	r22,r20,112049ec <_dtoa_r+0xcdc>
11204708:	d9000817 	ldw	r4,32(sp)
1120470c:	a0a9c83a 	sub	r20,r20,r2
11204710:	b0adc83a 	sub	r22,r22,r2
11204714:	2089c83a 	sub	r4,r4,r2
11204718:	d9000815 	stw	r4,32(sp)
1120471c:	d9800a17 	ldw	r6,40(sp)
11204720:	0181810e 	bge	zero,r6,11204d28 <_dtoa_r+0x1018>
11204724:	d9c00b17 	ldw	r7,44(sp)
11204728:	3800b326 	beq	r7,zero,112049f8 <_dtoa_r+0xce8>
1120472c:	a800b226 	beq	r21,zero,112049f8 <_dtoa_r+0xce8>
11204730:	880b883a 	mov	r5,r17
11204734:	a80d883a 	mov	r6,r21
11204738:	e009883a 	mov	r4,fp
1120473c:	12079ec0 	call	112079ec <__pow5mult>
11204740:	d9800917 	ldw	r6,36(sp)
11204744:	100b883a 	mov	r5,r2
11204748:	e009883a 	mov	r4,fp
1120474c:	1023883a 	mov	r17,r2
11204750:	12077f40 	call	112077f4 <__multiply>
11204754:	1021883a 	mov	r16,r2
11204758:	d8800a17 	ldw	r2,40(sp)
1120475c:	d9400917 	ldw	r5,36(sp)
11204760:	e009883a 	mov	r4,fp
11204764:	1545c83a 	sub	r2,r2,r21
11204768:	d8800a15 	stw	r2,40(sp)
1120476c:	12074540 	call	11207454 <_Bfree>
11204770:	d8c00a17 	ldw	r3,40(sp)
11204774:	18009f1e 	bne	r3,zero,112049f4 <_dtoa_r+0xce4>
11204778:	05c00044 	movi	r23,1
1120477c:	e009883a 	mov	r4,fp
11204780:	b80b883a 	mov	r5,r23
11204784:	12077b80 	call	112077b8 <__i2b>
11204788:	d9000d17 	ldw	r4,52(sp)
1120478c:	102b883a 	mov	r21,r2
11204790:	2000ce26 	beq	r4,zero,11204acc <_dtoa_r+0xdbc>
11204794:	200d883a 	mov	r6,r4
11204798:	100b883a 	mov	r5,r2
1120479c:	e009883a 	mov	r4,fp
112047a0:	12079ec0 	call	112079ec <__pow5mult>
112047a4:	d9800317 	ldw	r6,12(sp)
112047a8:	102b883a 	mov	r21,r2
112047ac:	b981810e 	bge	r23,r6,11204db4 <_dtoa_r+0x10a4>
112047b0:	0027883a 	mov	r19,zero
112047b4:	a8800417 	ldw	r2,16(r21)
112047b8:	05c00804 	movi	r23,32
112047bc:	10800104 	addi	r2,r2,4
112047c0:	1085883a 	add	r2,r2,r2
112047c4:	1085883a 	add	r2,r2,r2
112047c8:	a885883a 	add	r2,r21,r2
112047cc:	11000017 	ldw	r4,0(r2)
112047d0:	12076a00 	call	112076a0 <__hi0bits>
112047d4:	b885c83a 	sub	r2,r23,r2
112047d8:	1585883a 	add	r2,r2,r22
112047dc:	108007cc 	andi	r2,r2,31
112047e0:	1000b326 	beq	r2,zero,11204ab0 <_dtoa_r+0xda0>
112047e4:	00c00804 	movi	r3,32
112047e8:	1887c83a 	sub	r3,r3,r2
112047ec:	01000104 	movi	r4,4
112047f0:	20c2cd0e 	bge	r4,r3,11205328 <_dtoa_r+0x1618>
112047f4:	00c00704 	movi	r3,28
112047f8:	1885c83a 	sub	r2,r3,r2
112047fc:	d8c00817 	ldw	r3,32(sp)
11204800:	a0a9883a 	add	r20,r20,r2
11204804:	b0ad883a 	add	r22,r22,r2
11204808:	1887883a 	add	r3,r3,r2
1120480c:	d8c00815 	stw	r3,32(sp)
11204810:	d9800817 	ldw	r6,32(sp)
11204814:	0180040e 	bge	zero,r6,11204828 <_dtoa_r+0xb18>
11204818:	800b883a 	mov	r5,r16
1120481c:	e009883a 	mov	r4,fp
11204820:	1207b2c0 	call	11207b2c <__lshift>
11204824:	1021883a 	mov	r16,r2
11204828:	0580050e 	bge	zero,r22,11204840 <_dtoa_r+0xb30>
1120482c:	a80b883a 	mov	r5,r21
11204830:	b00d883a 	mov	r6,r22
11204834:	e009883a 	mov	r4,fp
11204838:	1207b2c0 	call	11207b2c <__lshift>
1120483c:	102b883a 	mov	r21,r2
11204840:	d9c00e17 	ldw	r7,56(sp)
11204844:	3801211e 	bne	r7,zero,11204ccc <_dtoa_r+0xfbc>
11204848:	d9800617 	ldw	r6,24(sp)
1120484c:	0181380e 	bge	zero,r6,11204d30 <_dtoa_r+0x1020>
11204850:	d8c00b17 	ldw	r3,44(sp)
11204854:	1800ab1e 	bne	r3,zero,11204b04 <_dtoa_r+0xdf4>
11204858:	dc800717 	ldw	r18,28(sp)
1120485c:	dcc00617 	ldw	r19,24(sp)
11204860:	9029883a 	mov	r20,r18
11204864:	00000206 	br	11204870 <_dtoa_r+0xb60>
11204868:	120747c0 	call	1120747c <__multadd>
1120486c:	1021883a 	mov	r16,r2
11204870:	a80b883a 	mov	r5,r21
11204874:	8009883a 	mov	r4,r16
11204878:	1203b100 	call	11203b10 <quorem>
1120487c:	10800c04 	addi	r2,r2,48
11204880:	90800005 	stb	r2,0(r18)
11204884:	94800044 	addi	r18,r18,1
11204888:	9507c83a 	sub	r3,r18,r20
1120488c:	000f883a 	mov	r7,zero
11204890:	01800284 	movi	r6,10
11204894:	800b883a 	mov	r5,r16
11204898:	e009883a 	mov	r4,fp
1120489c:	1cfff216 	blt	r3,r19,11204868 <__alt_data_end+0xffe84868>
112048a0:	1011883a 	mov	r8,r2
112048a4:	d8800617 	ldw	r2,24(sp)
112048a8:	0082370e 	bge	zero,r2,11205188 <_dtoa_r+0x1478>
112048ac:	d9000717 	ldw	r4,28(sp)
112048b0:	0025883a 	mov	r18,zero
112048b4:	20af883a 	add	r23,r4,r2
112048b8:	01800044 	movi	r6,1
112048bc:	800b883a 	mov	r5,r16
112048c0:	e009883a 	mov	r4,fp
112048c4:	da001715 	stw	r8,92(sp)
112048c8:	1207b2c0 	call	11207b2c <__lshift>
112048cc:	a80b883a 	mov	r5,r21
112048d0:	1009883a 	mov	r4,r2
112048d4:	d8800915 	stw	r2,36(sp)
112048d8:	1207c740 	call	11207c74 <__mcmp>
112048dc:	da001717 	ldw	r8,92(sp)
112048e0:	0081800e 	bge	zero,r2,11204ee4 <_dtoa_r+0x11d4>
112048e4:	b93fffc3 	ldbu	r4,-1(r23)
112048e8:	b8bfffc4 	addi	r2,r23,-1
112048ec:	1007883a 	mov	r3,r2
112048f0:	01800e44 	movi	r6,57
112048f4:	d9c00717 	ldw	r7,28(sp)
112048f8:	00000506 	br	11204910 <_dtoa_r+0xc00>
112048fc:	18ffffc4 	addi	r3,r3,-1
11204900:	11c12326 	beq	r2,r7,11204d90 <_dtoa_r+0x1080>
11204904:	19000003 	ldbu	r4,0(r3)
11204908:	102f883a 	mov	r23,r2
1120490c:	10bfffc4 	addi	r2,r2,-1
11204910:	21403fcc 	andi	r5,r4,255
11204914:	2940201c 	xori	r5,r5,128
11204918:	297fe004 	addi	r5,r5,-128
1120491c:	29bff726 	beq	r5,r6,112048fc <__alt_data_end+0xffe848fc>
11204920:	21000044 	addi	r4,r4,1
11204924:	11000005 	stb	r4,0(r2)
11204928:	a80b883a 	mov	r5,r21
1120492c:	e009883a 	mov	r4,fp
11204930:	12074540 	call	11207454 <_Bfree>
11204934:	883ea026 	beq	r17,zero,112043b8 <__alt_data_end+0xffe843b8>
11204938:	90000426 	beq	r18,zero,1120494c <_dtoa_r+0xc3c>
1120493c:	94400326 	beq	r18,r17,1120494c <_dtoa_r+0xc3c>
11204940:	900b883a 	mov	r5,r18
11204944:	e009883a 	mov	r4,fp
11204948:	12074540 	call	11207454 <_Bfree>
1120494c:	880b883a 	mov	r5,r17
11204950:	e009883a 	mov	r4,fp
11204954:	12074540 	call	11207454 <_Bfree>
11204958:	003e9706 	br	112043b8 <__alt_data_end+0xffe843b8>
1120495c:	01800044 	movi	r6,1
11204960:	d9800e15 	stw	r6,56(sp)
11204964:	003d9606 	br	11203fc0 <__alt_data_end+0xffe83fc0>
11204968:	d8800817 	ldw	r2,32(sp)
1120496c:	d8c00517 	ldw	r3,20(sp)
11204970:	d8000d15 	stw	zero,52(sp)
11204974:	10c5c83a 	sub	r2,r2,r3
11204978:	00c9c83a 	sub	r4,zero,r3
1120497c:	d8800815 	stw	r2,32(sp)
11204980:	d9000a15 	stw	r4,40(sp)
11204984:	003d9706 	br	11203fe4 <__alt_data_end+0xffe83fe4>
11204988:	05adc83a 	sub	r22,zero,r22
1120498c:	dd800815 	stw	r22,32(sp)
11204990:	002d883a 	mov	r22,zero
11204994:	003d8e06 	br	11203fd0 <__alt_data_end+0xffe83fd0>
11204998:	d9000517 	ldw	r4,20(sp)
1120499c:	120dc000 	call	1120dc00 <__floatsidf>
112049a0:	100d883a 	mov	r6,r2
112049a4:	180f883a 	mov	r7,r3
112049a8:	a009883a 	mov	r4,r20
112049ac:	880b883a 	mov	r5,r17
112049b0:	120c9140 	call	1120c914 <__eqdf2>
112049b4:	103d7126 	beq	r2,zero,11203f7c <__alt_data_end+0xffe83f7c>
112049b8:	d9c00517 	ldw	r7,20(sp)
112049bc:	39ffffc4 	addi	r7,r7,-1
112049c0:	d9c00515 	stw	r7,20(sp)
112049c4:	003d6d06 	br	11203f7c <__alt_data_end+0xffe83f7c>
112049c8:	dd400a17 	ldw	r21,40(sp)
112049cc:	dd000817 	ldw	r20,32(sp)
112049d0:	0023883a 	mov	r17,zero
112049d4:	003f4806 	br	112046f8 <__alt_data_end+0xffe846f8>
112049d8:	10e3c83a 	sub	r17,r2,r3
112049dc:	9448983a 	sll	r4,r18,r17
112049e0:	003d3206 	br	11203eac <__alt_data_end+0xffe83eac>
112049e4:	d8000e15 	stw	zero,56(sp)
112049e8:	003d7506 	br	11203fc0 <__alt_data_end+0xffe83fc0>
112049ec:	b005883a 	mov	r2,r22
112049f0:	003f4506 	br	11204708 <__alt_data_end+0xffe84708>
112049f4:	dc000915 	stw	r16,36(sp)
112049f8:	d9800a17 	ldw	r6,40(sp)
112049fc:	d9400917 	ldw	r5,36(sp)
11204a00:	e009883a 	mov	r4,fp
11204a04:	12079ec0 	call	112079ec <__pow5mult>
11204a08:	1021883a 	mov	r16,r2
11204a0c:	003f5a06 	br	11204778 <__alt_data_end+0xffe84778>
11204a10:	01c00044 	movi	r7,1
11204a14:	d9c00b15 	stw	r7,44(sp)
11204a18:	d8802217 	ldw	r2,136(sp)
11204a1c:	0081280e 	bge	zero,r2,11204ec0 <_dtoa_r+0x11b0>
11204a20:	100d883a 	mov	r6,r2
11204a24:	1021883a 	mov	r16,r2
11204a28:	d8800c15 	stw	r2,48(sp)
11204a2c:	d8800615 	stw	r2,24(sp)
11204a30:	003d8806 	br	11204054 <__alt_data_end+0xffe84054>
11204a34:	d8800617 	ldw	r2,24(sp)
11204a38:	00be9b16 	blt	zero,r2,112044a8 <__alt_data_end+0xffe844a8>
11204a3c:	10010f1e 	bne	r2,zero,11204e7c <_dtoa_r+0x116c>
11204a40:	880b883a 	mov	r5,r17
11204a44:	000d883a 	mov	r6,zero
11204a48:	01d00534 	movhi	r7,16404
11204a4c:	8009883a 	mov	r4,r16
11204a50:	120cb6c0 	call	1120cb6c <__muldf3>
11204a54:	900d883a 	mov	r6,r18
11204a58:	980f883a 	mov	r7,r19
11204a5c:	1009883a 	mov	r4,r2
11204a60:	180b883a 	mov	r5,r3
11204a64:	120c99c0 	call	1120c99c <__gedf2>
11204a68:	002b883a 	mov	r21,zero
11204a6c:	0023883a 	mov	r17,zero
11204a70:	1000bf16 	blt	r2,zero,11204d70 <_dtoa_r+0x1060>
11204a74:	d9802217 	ldw	r6,136(sp)
11204a78:	ddc00717 	ldw	r23,28(sp)
11204a7c:	018c303a 	nor	r6,zero,r6
11204a80:	d9800515 	stw	r6,20(sp)
11204a84:	a80b883a 	mov	r5,r21
11204a88:	e009883a 	mov	r4,fp
11204a8c:	12074540 	call	11207454 <_Bfree>
11204a90:	883e4926 	beq	r17,zero,112043b8 <__alt_data_end+0xffe843b8>
11204a94:	003fad06 	br	1120494c <__alt_data_end+0xffe8494c>
11204a98:	d9c01117 	ldw	r7,68(sp)
11204a9c:	3801bc26 	beq	r7,zero,11205190 <_dtoa_r+0x1480>
11204aa0:	10810cc4 	addi	r2,r2,1075
11204aa4:	dd400a17 	ldw	r21,40(sp)
11204aa8:	dd000817 	ldw	r20,32(sp)
11204aac:	003f0a06 	br	112046d8 <__alt_data_end+0xffe846d8>
11204ab0:	00800704 	movi	r2,28
11204ab4:	d9000817 	ldw	r4,32(sp)
11204ab8:	a0a9883a 	add	r20,r20,r2
11204abc:	b0ad883a 	add	r22,r22,r2
11204ac0:	2089883a 	add	r4,r4,r2
11204ac4:	d9000815 	stw	r4,32(sp)
11204ac8:	003f5106 	br	11204810 <__alt_data_end+0xffe84810>
11204acc:	d8c00317 	ldw	r3,12(sp)
11204ad0:	b8c1fc0e 	bge	r23,r3,112052c4 <_dtoa_r+0x15b4>
11204ad4:	0027883a 	mov	r19,zero
11204ad8:	b805883a 	mov	r2,r23
11204adc:	003f3e06 	br	112047d8 <__alt_data_end+0xffe847d8>
11204ae0:	880b883a 	mov	r5,r17
11204ae4:	e009883a 	mov	r4,fp
11204ae8:	000f883a 	mov	r7,zero
11204aec:	01800284 	movi	r6,10
11204af0:	120747c0 	call	1120747c <__multadd>
11204af4:	d9000c17 	ldw	r4,48(sp)
11204af8:	1023883a 	mov	r17,r2
11204afc:	0102040e 	bge	zero,r4,11205310 <_dtoa_r+0x1600>
11204b00:	d9000615 	stw	r4,24(sp)
11204b04:	0500050e 	bge	zero,r20,11204b1c <_dtoa_r+0xe0c>
11204b08:	880b883a 	mov	r5,r17
11204b0c:	a00d883a 	mov	r6,r20
11204b10:	e009883a 	mov	r4,fp
11204b14:	1207b2c0 	call	11207b2c <__lshift>
11204b18:	1023883a 	mov	r17,r2
11204b1c:	9801241e 	bne	r19,zero,11204fb0 <_dtoa_r+0x12a0>
11204b20:	8829883a 	mov	r20,r17
11204b24:	d9000617 	ldw	r4,24(sp)
11204b28:	dcc00717 	ldw	r19,28(sp)
11204b2c:	9480004c 	andi	r18,r18,1
11204b30:	20bfffc4 	addi	r2,r4,-1
11204b34:	9885883a 	add	r2,r19,r2
11204b38:	d8800415 	stw	r2,16(sp)
11204b3c:	dc800615 	stw	r18,24(sp)
11204b40:	a80b883a 	mov	r5,r21
11204b44:	8009883a 	mov	r4,r16
11204b48:	1203b100 	call	11203b10 <quorem>
11204b4c:	880b883a 	mov	r5,r17
11204b50:	8009883a 	mov	r4,r16
11204b54:	102f883a 	mov	r23,r2
11204b58:	1207c740 	call	11207c74 <__mcmp>
11204b5c:	a80b883a 	mov	r5,r21
11204b60:	a00d883a 	mov	r6,r20
11204b64:	e009883a 	mov	r4,fp
11204b68:	102d883a 	mov	r22,r2
11204b6c:	1207cd40 	call	11207cd4 <__mdiff>
11204b70:	1007883a 	mov	r3,r2
11204b74:	10800317 	ldw	r2,12(r2)
11204b78:	bc800c04 	addi	r18,r23,48
11204b7c:	180b883a 	mov	r5,r3
11204b80:	10004e1e 	bne	r2,zero,11204cbc <_dtoa_r+0xfac>
11204b84:	8009883a 	mov	r4,r16
11204b88:	d8c01615 	stw	r3,88(sp)
11204b8c:	1207c740 	call	11207c74 <__mcmp>
11204b90:	d8c01617 	ldw	r3,88(sp)
11204b94:	e009883a 	mov	r4,fp
11204b98:	d8801615 	stw	r2,88(sp)
11204b9c:	180b883a 	mov	r5,r3
11204ba0:	12074540 	call	11207454 <_Bfree>
11204ba4:	d8801617 	ldw	r2,88(sp)
11204ba8:	1000041e 	bne	r2,zero,11204bbc <_dtoa_r+0xeac>
11204bac:	d9800317 	ldw	r6,12(sp)
11204bb0:	3000021e 	bne	r6,zero,11204bbc <_dtoa_r+0xeac>
11204bb4:	d8c00617 	ldw	r3,24(sp)
11204bb8:	18003726 	beq	r3,zero,11204c98 <_dtoa_r+0xf88>
11204bbc:	b0002016 	blt	r22,zero,11204c40 <_dtoa_r+0xf30>
11204bc0:	b000041e 	bne	r22,zero,11204bd4 <_dtoa_r+0xec4>
11204bc4:	d9000317 	ldw	r4,12(sp)
11204bc8:	2000021e 	bne	r4,zero,11204bd4 <_dtoa_r+0xec4>
11204bcc:	d8c00617 	ldw	r3,24(sp)
11204bd0:	18001b26 	beq	r3,zero,11204c40 <_dtoa_r+0xf30>
11204bd4:	00810716 	blt	zero,r2,11204ff4 <_dtoa_r+0x12e4>
11204bd8:	d8c00417 	ldw	r3,16(sp)
11204bdc:	9d800044 	addi	r22,r19,1
11204be0:	9c800005 	stb	r18,0(r19)
11204be4:	b02f883a 	mov	r23,r22
11204be8:	98c10626 	beq	r19,r3,11205004 <_dtoa_r+0x12f4>
11204bec:	800b883a 	mov	r5,r16
11204bf0:	000f883a 	mov	r7,zero
11204bf4:	01800284 	movi	r6,10
11204bf8:	e009883a 	mov	r4,fp
11204bfc:	120747c0 	call	1120747c <__multadd>
11204c00:	1021883a 	mov	r16,r2
11204c04:	000f883a 	mov	r7,zero
11204c08:	01800284 	movi	r6,10
11204c0c:	880b883a 	mov	r5,r17
11204c10:	e009883a 	mov	r4,fp
11204c14:	8d002526 	beq	r17,r20,11204cac <_dtoa_r+0xf9c>
11204c18:	120747c0 	call	1120747c <__multadd>
11204c1c:	a00b883a 	mov	r5,r20
11204c20:	000f883a 	mov	r7,zero
11204c24:	01800284 	movi	r6,10
11204c28:	e009883a 	mov	r4,fp
11204c2c:	1023883a 	mov	r17,r2
11204c30:	120747c0 	call	1120747c <__multadd>
11204c34:	1029883a 	mov	r20,r2
11204c38:	b027883a 	mov	r19,r22
11204c3c:	003fc006 	br	11204b40 <__alt_data_end+0xffe84b40>
11204c40:	9011883a 	mov	r8,r18
11204c44:	00800e0e 	bge	zero,r2,11204c80 <_dtoa_r+0xf70>
11204c48:	800b883a 	mov	r5,r16
11204c4c:	01800044 	movi	r6,1
11204c50:	e009883a 	mov	r4,fp
11204c54:	da001715 	stw	r8,92(sp)
11204c58:	1207b2c0 	call	11207b2c <__lshift>
11204c5c:	a80b883a 	mov	r5,r21
11204c60:	1009883a 	mov	r4,r2
11204c64:	1021883a 	mov	r16,r2
11204c68:	1207c740 	call	11207c74 <__mcmp>
11204c6c:	da001717 	ldw	r8,92(sp)
11204c70:	0081960e 	bge	zero,r2,112052cc <_dtoa_r+0x15bc>
11204c74:	00800e44 	movi	r2,57
11204c78:	40817026 	beq	r8,r2,1120523c <_dtoa_r+0x152c>
11204c7c:	ba000c44 	addi	r8,r23,49
11204c80:	8825883a 	mov	r18,r17
11204c84:	9dc00044 	addi	r23,r19,1
11204c88:	9a000005 	stb	r8,0(r19)
11204c8c:	a023883a 	mov	r17,r20
11204c90:	dc000915 	stw	r16,36(sp)
11204c94:	003f2406 	br	11204928 <__alt_data_end+0xffe84928>
11204c98:	00800e44 	movi	r2,57
11204c9c:	9011883a 	mov	r8,r18
11204ca0:	90816626 	beq	r18,r2,1120523c <_dtoa_r+0x152c>
11204ca4:	05bff516 	blt	zero,r22,11204c7c <__alt_data_end+0xffe84c7c>
11204ca8:	003ff506 	br	11204c80 <__alt_data_end+0xffe84c80>
11204cac:	120747c0 	call	1120747c <__multadd>
11204cb0:	1023883a 	mov	r17,r2
11204cb4:	1029883a 	mov	r20,r2
11204cb8:	003fdf06 	br	11204c38 <__alt_data_end+0xffe84c38>
11204cbc:	e009883a 	mov	r4,fp
11204cc0:	12074540 	call	11207454 <_Bfree>
11204cc4:	00800044 	movi	r2,1
11204cc8:	003fbc06 	br	11204bbc <__alt_data_end+0xffe84bbc>
11204ccc:	a80b883a 	mov	r5,r21
11204cd0:	8009883a 	mov	r4,r16
11204cd4:	1207c740 	call	11207c74 <__mcmp>
11204cd8:	103edb0e 	bge	r2,zero,11204848 <__alt_data_end+0xffe84848>
11204cdc:	800b883a 	mov	r5,r16
11204ce0:	000f883a 	mov	r7,zero
11204ce4:	01800284 	movi	r6,10
11204ce8:	e009883a 	mov	r4,fp
11204cec:	120747c0 	call	1120747c <__multadd>
11204cf0:	1021883a 	mov	r16,r2
11204cf4:	d8800517 	ldw	r2,20(sp)
11204cf8:	d8c00b17 	ldw	r3,44(sp)
11204cfc:	10bfffc4 	addi	r2,r2,-1
11204d00:	d8800515 	stw	r2,20(sp)
11204d04:	183f761e 	bne	r3,zero,11204ae0 <__alt_data_end+0xffe84ae0>
11204d08:	d9000c17 	ldw	r4,48(sp)
11204d0c:	0101730e 	bge	zero,r4,112052dc <_dtoa_r+0x15cc>
11204d10:	d9000615 	stw	r4,24(sp)
11204d14:	003ed006 	br	11204858 <__alt_data_end+0xffe84858>
11204d18:	00800084 	movi	r2,2
11204d1c:	3081861e 	bne	r6,r2,11205338 <_dtoa_r+0x1628>
11204d20:	d8000b15 	stw	zero,44(sp)
11204d24:	003f3c06 	br	11204a18 <__alt_data_end+0xffe84a18>
11204d28:	dc000917 	ldw	r16,36(sp)
11204d2c:	003e9206 	br	11204778 <__alt_data_end+0xffe84778>
11204d30:	d9c00317 	ldw	r7,12(sp)
11204d34:	00800084 	movi	r2,2
11204d38:	11fec50e 	bge	r2,r7,11204850 <__alt_data_end+0xffe84850>
11204d3c:	d9000617 	ldw	r4,24(sp)
11204d40:	20013c1e 	bne	r4,zero,11205234 <_dtoa_r+0x1524>
11204d44:	a80b883a 	mov	r5,r21
11204d48:	000f883a 	mov	r7,zero
11204d4c:	01800144 	movi	r6,5
11204d50:	e009883a 	mov	r4,fp
11204d54:	120747c0 	call	1120747c <__multadd>
11204d58:	100b883a 	mov	r5,r2
11204d5c:	8009883a 	mov	r4,r16
11204d60:	102b883a 	mov	r21,r2
11204d64:	1207c740 	call	11207c74 <__mcmp>
11204d68:	dc000915 	stw	r16,36(sp)
11204d6c:	00bf410e 	bge	zero,r2,11204a74 <__alt_data_end+0xffe84a74>
11204d70:	d9c00717 	ldw	r7,28(sp)
11204d74:	00800c44 	movi	r2,49
11204d78:	38800005 	stb	r2,0(r7)
11204d7c:	d8800517 	ldw	r2,20(sp)
11204d80:	3dc00044 	addi	r23,r7,1
11204d84:	10800044 	addi	r2,r2,1
11204d88:	d8800515 	stw	r2,20(sp)
11204d8c:	003f3d06 	br	11204a84 <__alt_data_end+0xffe84a84>
11204d90:	d9800517 	ldw	r6,20(sp)
11204d94:	d9c00717 	ldw	r7,28(sp)
11204d98:	00800c44 	movi	r2,49
11204d9c:	31800044 	addi	r6,r6,1
11204da0:	d9800515 	stw	r6,20(sp)
11204da4:	38800005 	stb	r2,0(r7)
11204da8:	003edf06 	br	11204928 <__alt_data_end+0xffe84928>
11204dac:	d8000b15 	stw	zero,44(sp)
11204db0:	003c9f06 	br	11204030 <__alt_data_end+0xffe84030>
11204db4:	903e7e1e 	bne	r18,zero,112047b0 <__alt_data_end+0xffe847b0>
11204db8:	00800434 	movhi	r2,16
11204dbc:	10bfffc4 	addi	r2,r2,-1
11204dc0:	9884703a 	and	r2,r19,r2
11204dc4:	1000ea1e 	bne	r2,zero,11205170 <_dtoa_r+0x1460>
11204dc8:	9cdffc2c 	andhi	r19,r19,32752
11204dcc:	9800e826 	beq	r19,zero,11205170 <_dtoa_r+0x1460>
11204dd0:	d9c00817 	ldw	r7,32(sp)
11204dd4:	b5800044 	addi	r22,r22,1
11204dd8:	04c00044 	movi	r19,1
11204ddc:	39c00044 	addi	r7,r7,1
11204de0:	d9c00815 	stw	r7,32(sp)
11204de4:	d8800d17 	ldw	r2,52(sp)
11204de8:	103e721e 	bne	r2,zero,112047b4 <__alt_data_end+0xffe847b4>
11204dec:	00800044 	movi	r2,1
11204df0:	003e7906 	br	112047d8 <__alt_data_end+0xffe847d8>
11204df4:	8009883a 	mov	r4,r16
11204df8:	120dc000 	call	1120dc00 <__floatsidf>
11204dfc:	d9800f17 	ldw	r6,60(sp)
11204e00:	d9c01017 	ldw	r7,64(sp)
11204e04:	1009883a 	mov	r4,r2
11204e08:	180b883a 	mov	r5,r3
11204e0c:	120cb6c0 	call	1120cb6c <__muldf3>
11204e10:	000d883a 	mov	r6,zero
11204e14:	01d00734 	movhi	r7,16412
11204e18:	1009883a 	mov	r4,r2
11204e1c:	180b883a 	mov	r5,r3
11204e20:	120b7800 	call	1120b780 <__adddf3>
11204e24:	047f3034 	movhi	r17,64704
11204e28:	1021883a 	mov	r16,r2
11204e2c:	1c63883a 	add	r17,r3,r17
11204e30:	d9000f17 	ldw	r4,60(sp)
11204e34:	d9401017 	ldw	r5,64(sp)
11204e38:	000d883a 	mov	r6,zero
11204e3c:	01d00534 	movhi	r7,16404
11204e40:	120d2840 	call	1120d284 <__subdf3>
11204e44:	800d883a 	mov	r6,r16
11204e48:	880f883a 	mov	r7,r17
11204e4c:	1009883a 	mov	r4,r2
11204e50:	180b883a 	mov	r5,r3
11204e54:	102b883a 	mov	r21,r2
11204e58:	1829883a 	mov	r20,r3
11204e5c:	120c99c0 	call	1120c99c <__gedf2>
11204e60:	00806c16 	blt	zero,r2,11205014 <_dtoa_r+0x1304>
11204e64:	89e0003c 	xorhi	r7,r17,32768
11204e68:	800d883a 	mov	r6,r16
11204e6c:	a809883a 	mov	r4,r21
11204e70:	a00b883a 	mov	r5,r20
11204e74:	120ca780 	call	1120ca78 <__ledf2>
11204e78:	103d7e0e 	bge	r2,zero,11204474 <__alt_data_end+0xffe84474>
11204e7c:	002b883a 	mov	r21,zero
11204e80:	0023883a 	mov	r17,zero
11204e84:	003efb06 	br	11204a74 <__alt_data_end+0xffe84a74>
11204e88:	d8800717 	ldw	r2,28(sp)
11204e8c:	003bd006 	br	11203dd0 <__alt_data_end+0xffe83dd0>
11204e90:	d9000a17 	ldw	r4,40(sp)
11204e94:	d9800d17 	ldw	r6,52(sp)
11204e98:	dd400a15 	stw	r21,40(sp)
11204e9c:	a905c83a 	sub	r2,r21,r4
11204ea0:	308d883a 	add	r6,r6,r2
11204ea4:	d9800d15 	stw	r6,52(sp)
11204ea8:	002b883a 	mov	r21,zero
11204eac:	003e0606 	br	112046c8 <__alt_data_end+0xffe846c8>
11204eb0:	9023883a 	mov	r17,r18
11204eb4:	9829883a 	mov	r20,r19
11204eb8:	04000084 	movi	r16,2
11204ebc:	003c9206 	br	11204108 <__alt_data_end+0xffe84108>
11204ec0:	04000044 	movi	r16,1
11204ec4:	dc000c15 	stw	r16,48(sp)
11204ec8:	dc000615 	stw	r16,24(sp)
11204ecc:	dc002215 	stw	r16,136(sp)
11204ed0:	e0001115 	stw	zero,68(fp)
11204ed4:	000b883a 	mov	r5,zero
11204ed8:	003c6906 	br	11204080 <__alt_data_end+0xffe84080>
11204edc:	3021883a 	mov	r16,r6
11204ee0:	003ffb06 	br	11204ed0 <__alt_data_end+0xffe84ed0>
11204ee4:	1000021e 	bne	r2,zero,11204ef0 <_dtoa_r+0x11e0>
11204ee8:	4200004c 	andi	r8,r8,1
11204eec:	403e7d1e 	bne	r8,zero,112048e4 <__alt_data_end+0xffe848e4>
11204ef0:	01000c04 	movi	r4,48
11204ef4:	00000106 	br	11204efc <_dtoa_r+0x11ec>
11204ef8:	102f883a 	mov	r23,r2
11204efc:	b8bfffc4 	addi	r2,r23,-1
11204f00:	10c00007 	ldb	r3,0(r2)
11204f04:	193ffc26 	beq	r3,r4,11204ef8 <__alt_data_end+0xffe84ef8>
11204f08:	003e8706 	br	11204928 <__alt_data_end+0xffe84928>
11204f0c:	d8800517 	ldw	r2,20(sp)
11204f10:	00a3c83a 	sub	r17,zero,r2
11204f14:	8800a426 	beq	r17,zero,112051a8 <_dtoa_r+0x1498>
11204f18:	888003cc 	andi	r2,r17,15
11204f1c:	100490fa 	slli	r2,r2,3
11204f20:	00c44874 	movhi	r3,4385
11204f24:	18c17c04 	addi	r3,r3,1520
11204f28:	1885883a 	add	r2,r3,r2
11204f2c:	11800017 	ldw	r6,0(r2)
11204f30:	11c00117 	ldw	r7,4(r2)
11204f34:	9009883a 	mov	r4,r18
11204f38:	980b883a 	mov	r5,r19
11204f3c:	8823d13a 	srai	r17,r17,4
11204f40:	120cb6c0 	call	1120cb6c <__muldf3>
11204f44:	d8800f15 	stw	r2,60(sp)
11204f48:	d8c01015 	stw	r3,64(sp)
11204f4c:	8800e826 	beq	r17,zero,112052f0 <_dtoa_r+0x15e0>
11204f50:	05044874 	movhi	r20,4385
11204f54:	a5017204 	addi	r20,r20,1480
11204f58:	04000084 	movi	r16,2
11204f5c:	8980004c 	andi	r6,r17,1
11204f60:	1009883a 	mov	r4,r2
11204f64:	8823d07a 	srai	r17,r17,1
11204f68:	180b883a 	mov	r5,r3
11204f6c:	30000426 	beq	r6,zero,11204f80 <_dtoa_r+0x1270>
11204f70:	a1800017 	ldw	r6,0(r20)
11204f74:	a1c00117 	ldw	r7,4(r20)
11204f78:	84000044 	addi	r16,r16,1
11204f7c:	120cb6c0 	call	1120cb6c <__muldf3>
11204f80:	a5000204 	addi	r20,r20,8
11204f84:	883ff51e 	bne	r17,zero,11204f5c <__alt_data_end+0xffe84f5c>
11204f88:	d8800f15 	stw	r2,60(sp)
11204f8c:	d8c01015 	stw	r3,64(sp)
11204f90:	003c7606 	br	1120416c <__alt_data_end+0xffe8416c>
11204f94:	00c00c04 	movi	r3,48
11204f98:	10c00005 	stb	r3,0(r2)
11204f9c:	d8c00517 	ldw	r3,20(sp)
11204fa0:	bd3fffc3 	ldbu	r20,-1(r23)
11204fa4:	18c00044 	addi	r3,r3,1
11204fa8:	d8c00515 	stw	r3,20(sp)
11204fac:	003db906 	br	11204694 <__alt_data_end+0xffe84694>
11204fb0:	89400117 	ldw	r5,4(r17)
11204fb4:	e009883a 	mov	r4,fp
11204fb8:	12073ac0 	call	112073ac <_Balloc>
11204fbc:	89800417 	ldw	r6,16(r17)
11204fc0:	89400304 	addi	r5,r17,12
11204fc4:	11000304 	addi	r4,r2,12
11204fc8:	31800084 	addi	r6,r6,2
11204fcc:	318d883a 	add	r6,r6,r6
11204fd0:	318d883a 	add	r6,r6,r6
11204fd4:	1027883a 	mov	r19,r2
11204fd8:	1206fe00 	call	11206fe0 <memcpy>
11204fdc:	01800044 	movi	r6,1
11204fe0:	980b883a 	mov	r5,r19
11204fe4:	e009883a 	mov	r4,fp
11204fe8:	1207b2c0 	call	11207b2c <__lshift>
11204fec:	1029883a 	mov	r20,r2
11204ff0:	003ecc06 	br	11204b24 <__alt_data_end+0xffe84b24>
11204ff4:	00800e44 	movi	r2,57
11204ff8:	90809026 	beq	r18,r2,1120523c <_dtoa_r+0x152c>
11204ffc:	92000044 	addi	r8,r18,1
11205000:	003f1f06 	br	11204c80 <__alt_data_end+0xffe84c80>
11205004:	9011883a 	mov	r8,r18
11205008:	8825883a 	mov	r18,r17
1120500c:	a023883a 	mov	r17,r20
11205010:	003e2906 	br	112048b8 <__alt_data_end+0xffe848b8>
11205014:	002b883a 	mov	r21,zero
11205018:	0023883a 	mov	r17,zero
1120501c:	003f5406 	br	11204d70 <__alt_data_end+0xffe84d70>
11205020:	61bfffc4 	addi	r6,r12,-1
11205024:	300490fa 	slli	r2,r6,3
11205028:	00c44874 	movhi	r3,4385
1120502c:	18c17c04 	addi	r3,r3,1520
11205030:	1885883a 	add	r2,r3,r2
11205034:	11000017 	ldw	r4,0(r2)
11205038:	11400117 	ldw	r5,4(r2)
1120503c:	d8800717 	ldw	r2,28(sp)
11205040:	880f883a 	mov	r7,r17
11205044:	d9801215 	stw	r6,72(sp)
11205048:	800d883a 	mov	r6,r16
1120504c:	db001615 	stw	r12,88(sp)
11205050:	15c00044 	addi	r23,r2,1
11205054:	120cb6c0 	call	1120cb6c <__muldf3>
11205058:	d9401017 	ldw	r5,64(sp)
1120505c:	d9000f17 	ldw	r4,60(sp)
11205060:	d8c01515 	stw	r3,84(sp)
11205064:	d8801415 	stw	r2,80(sp)
11205068:	120db800 	call	1120db80 <__fixdfsi>
1120506c:	1009883a 	mov	r4,r2
11205070:	1021883a 	mov	r16,r2
11205074:	120dc000 	call	1120dc00 <__floatsidf>
11205078:	d9000f17 	ldw	r4,60(sp)
1120507c:	d9401017 	ldw	r5,64(sp)
11205080:	100d883a 	mov	r6,r2
11205084:	180f883a 	mov	r7,r3
11205088:	120d2840 	call	1120d284 <__subdf3>
1120508c:	1829883a 	mov	r20,r3
11205090:	d8c00717 	ldw	r3,28(sp)
11205094:	84000c04 	addi	r16,r16,48
11205098:	1023883a 	mov	r17,r2
1120509c:	1c000005 	stb	r16,0(r3)
112050a0:	db001617 	ldw	r12,88(sp)
112050a4:	00800044 	movi	r2,1
112050a8:	60802226 	beq	r12,r2,11205134 <_dtoa_r+0x1424>
112050ac:	d9c00717 	ldw	r7,28(sp)
112050b0:	8805883a 	mov	r2,r17
112050b4:	b82b883a 	mov	r21,r23
112050b8:	3b19883a 	add	r12,r7,r12
112050bc:	6023883a 	mov	r17,r12
112050c0:	a007883a 	mov	r3,r20
112050c4:	dc800f15 	stw	r18,60(sp)
112050c8:	000d883a 	mov	r6,zero
112050cc:	01d00934 	movhi	r7,16420
112050d0:	1009883a 	mov	r4,r2
112050d4:	180b883a 	mov	r5,r3
112050d8:	120cb6c0 	call	1120cb6c <__muldf3>
112050dc:	180b883a 	mov	r5,r3
112050e0:	1009883a 	mov	r4,r2
112050e4:	1829883a 	mov	r20,r3
112050e8:	1025883a 	mov	r18,r2
112050ec:	120db800 	call	1120db80 <__fixdfsi>
112050f0:	1009883a 	mov	r4,r2
112050f4:	1021883a 	mov	r16,r2
112050f8:	120dc000 	call	1120dc00 <__floatsidf>
112050fc:	100d883a 	mov	r6,r2
11205100:	180f883a 	mov	r7,r3
11205104:	9009883a 	mov	r4,r18
11205108:	a00b883a 	mov	r5,r20
1120510c:	84000c04 	addi	r16,r16,48
11205110:	120d2840 	call	1120d284 <__subdf3>
11205114:	ad400044 	addi	r21,r21,1
11205118:	ac3fffc5 	stb	r16,-1(r21)
1120511c:	ac7fea1e 	bne	r21,r17,112050c8 <__alt_data_end+0xffe850c8>
11205120:	1023883a 	mov	r17,r2
11205124:	d8801217 	ldw	r2,72(sp)
11205128:	dc800f17 	ldw	r18,60(sp)
1120512c:	1829883a 	mov	r20,r3
11205130:	b8af883a 	add	r23,r23,r2
11205134:	d9001417 	ldw	r4,80(sp)
11205138:	d9401517 	ldw	r5,84(sp)
1120513c:	000d883a 	mov	r6,zero
11205140:	01cff834 	movhi	r7,16352
11205144:	120b7800 	call	1120b780 <__adddf3>
11205148:	880d883a 	mov	r6,r17
1120514c:	a00f883a 	mov	r7,r20
11205150:	1009883a 	mov	r4,r2
11205154:	180b883a 	mov	r5,r3
11205158:	120ca780 	call	1120ca78 <__ledf2>
1120515c:	10003e0e 	bge	r2,zero,11205258 <_dtoa_r+0x1548>
11205160:	d9001317 	ldw	r4,76(sp)
11205164:	bd3fffc3 	ldbu	r20,-1(r23)
11205168:	d9000515 	stw	r4,20(sp)
1120516c:	003d3b06 	br	1120465c <__alt_data_end+0xffe8465c>
11205170:	0027883a 	mov	r19,zero
11205174:	003f1b06 	br	11204de4 <__alt_data_end+0xffe84de4>
11205178:	d8800817 	ldw	r2,32(sp)
1120517c:	11e9c83a 	sub	r20,r2,r7
11205180:	0005883a 	mov	r2,zero
11205184:	003d5406 	br	112046d8 <__alt_data_end+0xffe846d8>
11205188:	00800044 	movi	r2,1
1120518c:	003dc706 	br	112048ac <__alt_data_end+0xffe848ac>
11205190:	d8c00217 	ldw	r3,8(sp)
11205194:	00800d84 	movi	r2,54
11205198:	dd400a17 	ldw	r21,40(sp)
1120519c:	10c5c83a 	sub	r2,r2,r3
112051a0:	dd000817 	ldw	r20,32(sp)
112051a4:	003d4c06 	br	112046d8 <__alt_data_end+0xffe846d8>
112051a8:	dc800f15 	stw	r18,60(sp)
112051ac:	dcc01015 	stw	r19,64(sp)
112051b0:	04000084 	movi	r16,2
112051b4:	003bed06 	br	1120416c <__alt_data_end+0xffe8416c>
112051b8:	d9000617 	ldw	r4,24(sp)
112051bc:	203f0d26 	beq	r4,zero,11204df4 <__alt_data_end+0xffe84df4>
112051c0:	d9800c17 	ldw	r6,48(sp)
112051c4:	01bcab0e 	bge	zero,r6,11204474 <__alt_data_end+0xffe84474>
112051c8:	d9401017 	ldw	r5,64(sp)
112051cc:	d9000f17 	ldw	r4,60(sp)
112051d0:	000d883a 	mov	r6,zero
112051d4:	01d00934 	movhi	r7,16420
112051d8:	120cb6c0 	call	1120cb6c <__muldf3>
112051dc:	81000044 	addi	r4,r16,1
112051e0:	d8800f15 	stw	r2,60(sp)
112051e4:	d8c01015 	stw	r3,64(sp)
112051e8:	120dc000 	call	1120dc00 <__floatsidf>
112051ec:	d9800f17 	ldw	r6,60(sp)
112051f0:	d9c01017 	ldw	r7,64(sp)
112051f4:	1009883a 	mov	r4,r2
112051f8:	180b883a 	mov	r5,r3
112051fc:	120cb6c0 	call	1120cb6c <__muldf3>
11205200:	01d00734 	movhi	r7,16412
11205204:	000d883a 	mov	r6,zero
11205208:	1009883a 	mov	r4,r2
1120520c:	180b883a 	mov	r5,r3
11205210:	120b7800 	call	1120b780 <__adddf3>
11205214:	d9c00517 	ldw	r7,20(sp)
11205218:	047f3034 	movhi	r17,64704
1120521c:	1021883a 	mov	r16,r2
11205220:	39ffffc4 	addi	r7,r7,-1
11205224:	d9c01315 	stw	r7,76(sp)
11205228:	1c63883a 	add	r17,r3,r17
1120522c:	db000c17 	ldw	r12,48(sp)
11205230:	003bea06 	br	112041dc <__alt_data_end+0xffe841dc>
11205234:	dc000915 	stw	r16,36(sp)
11205238:	003e0e06 	br	11204a74 <__alt_data_end+0xffe84a74>
1120523c:	01000e44 	movi	r4,57
11205240:	8825883a 	mov	r18,r17
11205244:	9dc00044 	addi	r23,r19,1
11205248:	99000005 	stb	r4,0(r19)
1120524c:	a023883a 	mov	r17,r20
11205250:	dc000915 	stw	r16,36(sp)
11205254:	003da406 	br	112048e8 <__alt_data_end+0xffe848e8>
11205258:	d9801417 	ldw	r6,80(sp)
1120525c:	d9c01517 	ldw	r7,84(sp)
11205260:	0009883a 	mov	r4,zero
11205264:	014ff834 	movhi	r5,16352
11205268:	120d2840 	call	1120d284 <__subdf3>
1120526c:	880d883a 	mov	r6,r17
11205270:	a00f883a 	mov	r7,r20
11205274:	1009883a 	mov	r4,r2
11205278:	180b883a 	mov	r5,r3
1120527c:	120c99c0 	call	1120c99c <__gedf2>
11205280:	00bc7c0e 	bge	zero,r2,11204474 <__alt_data_end+0xffe84474>
11205284:	01000c04 	movi	r4,48
11205288:	00000106 	br	11205290 <_dtoa_r+0x1580>
1120528c:	102f883a 	mov	r23,r2
11205290:	b8bfffc4 	addi	r2,r23,-1
11205294:	10c00007 	ldb	r3,0(r2)
11205298:	193ffc26 	beq	r3,r4,1120528c <__alt_data_end+0xffe8528c>
1120529c:	d9801317 	ldw	r6,76(sp)
112052a0:	d9800515 	stw	r6,20(sp)
112052a4:	003c4406 	br	112043b8 <__alt_data_end+0xffe843b8>
112052a8:	d9801317 	ldw	r6,76(sp)
112052ac:	d9800515 	stw	r6,20(sp)
112052b0:	003cea06 	br	1120465c <__alt_data_end+0xffe8465c>
112052b4:	dd800f17 	ldw	r22,60(sp)
112052b8:	dcc01017 	ldw	r19,64(sp)
112052bc:	dc801217 	ldw	r18,72(sp)
112052c0:	003c6c06 	br	11204474 <__alt_data_end+0xffe84474>
112052c4:	903e031e 	bne	r18,zero,11204ad4 <__alt_data_end+0xffe84ad4>
112052c8:	003ebb06 	br	11204db8 <__alt_data_end+0xffe84db8>
112052cc:	103e6c1e 	bne	r2,zero,11204c80 <__alt_data_end+0xffe84c80>
112052d0:	4080004c 	andi	r2,r8,1
112052d4:	103e6a26 	beq	r2,zero,11204c80 <__alt_data_end+0xffe84c80>
112052d8:	003e6606 	br	11204c74 <__alt_data_end+0xffe84c74>
112052dc:	d8c00317 	ldw	r3,12(sp)
112052e0:	00800084 	movi	r2,2
112052e4:	10c02916 	blt	r2,r3,1120538c <_dtoa_r+0x167c>
112052e8:	d9000c17 	ldw	r4,48(sp)
112052ec:	003e8806 	br	11204d10 <__alt_data_end+0xffe84d10>
112052f0:	04000084 	movi	r16,2
112052f4:	003b9d06 	br	1120416c <__alt_data_end+0xffe8416c>
112052f8:	d9001317 	ldw	r4,76(sp)
112052fc:	d9000515 	stw	r4,20(sp)
11205300:	003cd606 	br	1120465c <__alt_data_end+0xffe8465c>
11205304:	d8801317 	ldw	r2,76(sp)
11205308:	d8800515 	stw	r2,20(sp)
1120530c:	003c2a06 	br	112043b8 <__alt_data_end+0xffe843b8>
11205310:	d9800317 	ldw	r6,12(sp)
11205314:	00800084 	movi	r2,2
11205318:	11801516 	blt	r2,r6,11205370 <_dtoa_r+0x1660>
1120531c:	d9c00c17 	ldw	r7,48(sp)
11205320:	d9c00615 	stw	r7,24(sp)
11205324:	003df706 	br	11204b04 <__alt_data_end+0xffe84b04>
11205328:	193d3926 	beq	r3,r4,11204810 <__alt_data_end+0xffe84810>
1120532c:	00c00f04 	movi	r3,60
11205330:	1885c83a 	sub	r2,r3,r2
11205334:	003ddf06 	br	11204ab4 <__alt_data_end+0xffe84ab4>
11205338:	e009883a 	mov	r4,fp
1120533c:	e0001115 	stw	zero,68(fp)
11205340:	000b883a 	mov	r5,zero
11205344:	12073ac0 	call	112073ac <_Balloc>
11205348:	d8800715 	stw	r2,28(sp)
1120534c:	d8c00717 	ldw	r3,28(sp)
11205350:	00bfffc4 	movi	r2,-1
11205354:	01000044 	movi	r4,1
11205358:	d8800c15 	stw	r2,48(sp)
1120535c:	e0c01015 	stw	r3,64(fp)
11205360:	d9000b15 	stw	r4,44(sp)
11205364:	d8800615 	stw	r2,24(sp)
11205368:	d8002215 	stw	zero,136(sp)
1120536c:	003c4106 	br	11204474 <__alt_data_end+0xffe84474>
11205370:	d8c00c17 	ldw	r3,48(sp)
11205374:	d8c00615 	stw	r3,24(sp)
11205378:	003e7006 	br	11204d3c <__alt_data_end+0xffe84d3c>
1120537c:	04400044 	movi	r17,1
11205380:	003b2006 	br	11204004 <__alt_data_end+0xffe84004>
11205384:	000b883a 	mov	r5,zero
11205388:	003b3d06 	br	11204080 <__alt_data_end+0xffe84080>
1120538c:	d8800c17 	ldw	r2,48(sp)
11205390:	d8800615 	stw	r2,24(sp)
11205394:	003e6906 	br	11204d3c <__alt_data_end+0xffe84d3c>

11205398 <__sflush_r>:
11205398:	2880030b 	ldhu	r2,12(r5)
1120539c:	defffb04 	addi	sp,sp,-20
112053a0:	dcc00315 	stw	r19,12(sp)
112053a4:	dc400115 	stw	r17,4(sp)
112053a8:	dfc00415 	stw	ra,16(sp)
112053ac:	dc800215 	stw	r18,8(sp)
112053b0:	dc000015 	stw	r16,0(sp)
112053b4:	10c0020c 	andi	r3,r2,8
112053b8:	2823883a 	mov	r17,r5
112053bc:	2027883a 	mov	r19,r4
112053c0:	1800311e 	bne	r3,zero,11205488 <__sflush_r+0xf0>
112053c4:	28c00117 	ldw	r3,4(r5)
112053c8:	10820014 	ori	r2,r2,2048
112053cc:	2880030d 	sth	r2,12(r5)
112053d0:	00c04b0e 	bge	zero,r3,11205500 <__sflush_r+0x168>
112053d4:	8a000a17 	ldw	r8,40(r17)
112053d8:	40002326 	beq	r8,zero,11205468 <__sflush_r+0xd0>
112053dc:	9c000017 	ldw	r16,0(r19)
112053e0:	10c4000c 	andi	r3,r2,4096
112053e4:	98000015 	stw	zero,0(r19)
112053e8:	18004826 	beq	r3,zero,1120550c <__sflush_r+0x174>
112053ec:	89801417 	ldw	r6,80(r17)
112053f0:	10c0010c 	andi	r3,r2,4
112053f4:	18000626 	beq	r3,zero,11205410 <__sflush_r+0x78>
112053f8:	88c00117 	ldw	r3,4(r17)
112053fc:	88800c17 	ldw	r2,48(r17)
11205400:	30cdc83a 	sub	r6,r6,r3
11205404:	10000226 	beq	r2,zero,11205410 <__sflush_r+0x78>
11205408:	88800f17 	ldw	r2,60(r17)
1120540c:	308dc83a 	sub	r6,r6,r2
11205410:	89400717 	ldw	r5,28(r17)
11205414:	000f883a 	mov	r7,zero
11205418:	9809883a 	mov	r4,r19
1120541c:	403ee83a 	callr	r8
11205420:	00ffffc4 	movi	r3,-1
11205424:	10c04426 	beq	r2,r3,11205538 <__sflush_r+0x1a0>
11205428:	88c0030b 	ldhu	r3,12(r17)
1120542c:	89000417 	ldw	r4,16(r17)
11205430:	88000115 	stw	zero,4(r17)
11205434:	197dffcc 	andi	r5,r3,63487
11205438:	8940030d 	sth	r5,12(r17)
1120543c:	89000015 	stw	r4,0(r17)
11205440:	18c4000c 	andi	r3,r3,4096
11205444:	18002c1e 	bne	r3,zero,112054f8 <__sflush_r+0x160>
11205448:	89400c17 	ldw	r5,48(r17)
1120544c:	9c000015 	stw	r16,0(r19)
11205450:	28000526 	beq	r5,zero,11205468 <__sflush_r+0xd0>
11205454:	88801004 	addi	r2,r17,64
11205458:	28800226 	beq	r5,r2,11205464 <__sflush_r+0xcc>
1120545c:	9809883a 	mov	r4,r19
11205460:	1205b040 	call	11205b04 <_free_r>
11205464:	88000c15 	stw	zero,48(r17)
11205468:	0005883a 	mov	r2,zero
1120546c:	dfc00417 	ldw	ra,16(sp)
11205470:	dcc00317 	ldw	r19,12(sp)
11205474:	dc800217 	ldw	r18,8(sp)
11205478:	dc400117 	ldw	r17,4(sp)
1120547c:	dc000017 	ldw	r16,0(sp)
11205480:	dec00504 	addi	sp,sp,20
11205484:	f800283a 	ret
11205488:	2c800417 	ldw	r18,16(r5)
1120548c:	903ff626 	beq	r18,zero,11205468 <__alt_data_end+0xffe85468>
11205490:	2c000017 	ldw	r16,0(r5)
11205494:	108000cc 	andi	r2,r2,3
11205498:	2c800015 	stw	r18,0(r5)
1120549c:	84a1c83a 	sub	r16,r16,r18
112054a0:	1000131e 	bne	r2,zero,112054f0 <__sflush_r+0x158>
112054a4:	28800517 	ldw	r2,20(r5)
112054a8:	88800215 	stw	r2,8(r17)
112054ac:	04000316 	blt	zero,r16,112054bc <__sflush_r+0x124>
112054b0:	003fed06 	br	11205468 <__alt_data_end+0xffe85468>
112054b4:	90a5883a 	add	r18,r18,r2
112054b8:	043feb0e 	bge	zero,r16,11205468 <__alt_data_end+0xffe85468>
112054bc:	88800917 	ldw	r2,36(r17)
112054c0:	89400717 	ldw	r5,28(r17)
112054c4:	800f883a 	mov	r7,r16
112054c8:	900d883a 	mov	r6,r18
112054cc:	9809883a 	mov	r4,r19
112054d0:	103ee83a 	callr	r2
112054d4:	80a1c83a 	sub	r16,r16,r2
112054d8:	00bff616 	blt	zero,r2,112054b4 <__alt_data_end+0xffe854b4>
112054dc:	88c0030b 	ldhu	r3,12(r17)
112054e0:	00bfffc4 	movi	r2,-1
112054e4:	18c01014 	ori	r3,r3,64
112054e8:	88c0030d 	sth	r3,12(r17)
112054ec:	003fdf06 	br	1120546c <__alt_data_end+0xffe8546c>
112054f0:	0005883a 	mov	r2,zero
112054f4:	003fec06 	br	112054a8 <__alt_data_end+0xffe854a8>
112054f8:	88801415 	stw	r2,80(r17)
112054fc:	003fd206 	br	11205448 <__alt_data_end+0xffe85448>
11205500:	28c00f17 	ldw	r3,60(r5)
11205504:	00ffb316 	blt	zero,r3,112053d4 <__alt_data_end+0xffe853d4>
11205508:	003fd706 	br	11205468 <__alt_data_end+0xffe85468>
1120550c:	89400717 	ldw	r5,28(r17)
11205510:	000d883a 	mov	r6,zero
11205514:	01c00044 	movi	r7,1
11205518:	9809883a 	mov	r4,r19
1120551c:	403ee83a 	callr	r8
11205520:	100d883a 	mov	r6,r2
11205524:	00bfffc4 	movi	r2,-1
11205528:	30801426 	beq	r6,r2,1120557c <__sflush_r+0x1e4>
1120552c:	8880030b 	ldhu	r2,12(r17)
11205530:	8a000a17 	ldw	r8,40(r17)
11205534:	003fae06 	br	112053f0 <__alt_data_end+0xffe853f0>
11205538:	98c00017 	ldw	r3,0(r19)
1120553c:	183fba26 	beq	r3,zero,11205428 <__alt_data_end+0xffe85428>
11205540:	01000744 	movi	r4,29
11205544:	19000626 	beq	r3,r4,11205560 <__sflush_r+0x1c8>
11205548:	01000584 	movi	r4,22
1120554c:	19000426 	beq	r3,r4,11205560 <__sflush_r+0x1c8>
11205550:	88c0030b 	ldhu	r3,12(r17)
11205554:	18c01014 	ori	r3,r3,64
11205558:	88c0030d 	sth	r3,12(r17)
1120555c:	003fc306 	br	1120546c <__alt_data_end+0xffe8546c>
11205560:	8880030b 	ldhu	r2,12(r17)
11205564:	88c00417 	ldw	r3,16(r17)
11205568:	88000115 	stw	zero,4(r17)
1120556c:	10bdffcc 	andi	r2,r2,63487
11205570:	8880030d 	sth	r2,12(r17)
11205574:	88c00015 	stw	r3,0(r17)
11205578:	003fb306 	br	11205448 <__alt_data_end+0xffe85448>
1120557c:	98800017 	ldw	r2,0(r19)
11205580:	103fea26 	beq	r2,zero,1120552c <__alt_data_end+0xffe8552c>
11205584:	00c00744 	movi	r3,29
11205588:	10c00226 	beq	r2,r3,11205594 <__sflush_r+0x1fc>
1120558c:	00c00584 	movi	r3,22
11205590:	10c0031e 	bne	r2,r3,112055a0 <__sflush_r+0x208>
11205594:	9c000015 	stw	r16,0(r19)
11205598:	0005883a 	mov	r2,zero
1120559c:	003fb306 	br	1120546c <__alt_data_end+0xffe8546c>
112055a0:	88c0030b 	ldhu	r3,12(r17)
112055a4:	3005883a 	mov	r2,r6
112055a8:	18c01014 	ori	r3,r3,64
112055ac:	88c0030d 	sth	r3,12(r17)
112055b0:	003fae06 	br	1120546c <__alt_data_end+0xffe8546c>

112055b4 <_fflush_r>:
112055b4:	defffd04 	addi	sp,sp,-12
112055b8:	dc000115 	stw	r16,4(sp)
112055bc:	dfc00215 	stw	ra,8(sp)
112055c0:	2021883a 	mov	r16,r4
112055c4:	20000226 	beq	r4,zero,112055d0 <_fflush_r+0x1c>
112055c8:	20800e17 	ldw	r2,56(r4)
112055cc:	10000c26 	beq	r2,zero,11205600 <_fflush_r+0x4c>
112055d0:	2880030f 	ldh	r2,12(r5)
112055d4:	1000051e 	bne	r2,zero,112055ec <_fflush_r+0x38>
112055d8:	0005883a 	mov	r2,zero
112055dc:	dfc00217 	ldw	ra,8(sp)
112055e0:	dc000117 	ldw	r16,4(sp)
112055e4:	dec00304 	addi	sp,sp,12
112055e8:	f800283a 	ret
112055ec:	8009883a 	mov	r4,r16
112055f0:	dfc00217 	ldw	ra,8(sp)
112055f4:	dc000117 	ldw	r16,4(sp)
112055f8:	dec00304 	addi	sp,sp,12
112055fc:	12053981 	jmpi	11205398 <__sflush_r>
11205600:	d9400015 	stw	r5,0(sp)
11205604:	12059900 	call	11205990 <__sinit>
11205608:	d9400017 	ldw	r5,0(sp)
1120560c:	003ff006 	br	112055d0 <__alt_data_end+0xffe855d0>

11205610 <fflush>:
11205610:	20000526 	beq	r4,zero,11205628 <fflush+0x18>
11205614:	00844874 	movhi	r2,4385
11205618:	1088b104 	addi	r2,r2,8900
1120561c:	200b883a 	mov	r5,r4
11205620:	11000017 	ldw	r4,0(r2)
11205624:	12055b41 	jmpi	112055b4 <_fflush_r>
11205628:	00844874 	movhi	r2,4385
1120562c:	1088b004 	addi	r2,r2,8896
11205630:	11000017 	ldw	r4,0(r2)
11205634:	01444834 	movhi	r5,4384
11205638:	29556d04 	addi	r5,r5,21940
1120563c:	12063941 	jmpi	11206394 <_fwalk_reent>

11205640 <__fp_unlock>:
11205640:	0005883a 	mov	r2,zero
11205644:	f800283a 	ret

11205648 <_cleanup_r>:
11205648:	01444874 	movhi	r5,4385
1120564c:	29699b04 	addi	r5,r5,-22932
11205650:	12063941 	jmpi	11206394 <_fwalk_reent>

11205654 <__sinit.part.1>:
11205654:	defff704 	addi	sp,sp,-36
11205658:	00c44834 	movhi	r3,4384
1120565c:	dfc00815 	stw	ra,32(sp)
11205660:	ddc00715 	stw	r23,28(sp)
11205664:	dd800615 	stw	r22,24(sp)
11205668:	dd400515 	stw	r21,20(sp)
1120566c:	dd000415 	stw	r20,16(sp)
11205670:	dcc00315 	stw	r19,12(sp)
11205674:	dc800215 	stw	r18,8(sp)
11205678:	dc400115 	stw	r17,4(sp)
1120567c:	dc000015 	stw	r16,0(sp)
11205680:	18d59204 	addi	r3,r3,22088
11205684:	24000117 	ldw	r16,4(r4)
11205688:	20c00f15 	stw	r3,60(r4)
1120568c:	2080bb04 	addi	r2,r4,748
11205690:	00c000c4 	movi	r3,3
11205694:	20c0b915 	stw	r3,740(r4)
11205698:	2080ba15 	stw	r2,744(r4)
1120569c:	2000b815 	stw	zero,736(r4)
112056a0:	05c00204 	movi	r23,8
112056a4:	00800104 	movi	r2,4
112056a8:	2025883a 	mov	r18,r4
112056ac:	b80d883a 	mov	r6,r23
112056b0:	81001704 	addi	r4,r16,92
112056b4:	000b883a 	mov	r5,zero
112056b8:	80000015 	stw	zero,0(r16)
112056bc:	80000115 	stw	zero,4(r16)
112056c0:	80000215 	stw	zero,8(r16)
112056c4:	8080030d 	sth	r2,12(r16)
112056c8:	80001915 	stw	zero,100(r16)
112056cc:	8000038d 	sth	zero,14(r16)
112056d0:	80000415 	stw	zero,16(r16)
112056d4:	80000515 	stw	zero,20(r16)
112056d8:	80000615 	stw	zero,24(r16)
112056dc:	12072840 	call	11207284 <memset>
112056e0:	05844874 	movhi	r22,4385
112056e4:	94400217 	ldw	r17,8(r18)
112056e8:	05444874 	movhi	r21,4385
112056ec:	05044874 	movhi	r20,4385
112056f0:	04c44874 	movhi	r19,4385
112056f4:	b5a2cf04 	addi	r22,r22,-29892
112056f8:	ad62e604 	addi	r21,r21,-29800
112056fc:	a5230504 	addi	r20,r20,-29676
11205700:	9ce31c04 	addi	r19,r19,-29584
11205704:	85800815 	stw	r22,32(r16)
11205708:	85400915 	stw	r21,36(r16)
1120570c:	85000a15 	stw	r20,40(r16)
11205710:	84c00b15 	stw	r19,44(r16)
11205714:	84000715 	stw	r16,28(r16)
11205718:	00800284 	movi	r2,10
1120571c:	8880030d 	sth	r2,12(r17)
11205720:	00800044 	movi	r2,1
11205724:	b80d883a 	mov	r6,r23
11205728:	89001704 	addi	r4,r17,92
1120572c:	000b883a 	mov	r5,zero
11205730:	88000015 	stw	zero,0(r17)
11205734:	88000115 	stw	zero,4(r17)
11205738:	88000215 	stw	zero,8(r17)
1120573c:	88001915 	stw	zero,100(r17)
11205740:	8880038d 	sth	r2,14(r17)
11205744:	88000415 	stw	zero,16(r17)
11205748:	88000515 	stw	zero,20(r17)
1120574c:	88000615 	stw	zero,24(r17)
11205750:	12072840 	call	11207284 <memset>
11205754:	94000317 	ldw	r16,12(r18)
11205758:	00800484 	movi	r2,18
1120575c:	8c400715 	stw	r17,28(r17)
11205760:	8d800815 	stw	r22,32(r17)
11205764:	8d400915 	stw	r21,36(r17)
11205768:	8d000a15 	stw	r20,40(r17)
1120576c:	8cc00b15 	stw	r19,44(r17)
11205770:	8080030d 	sth	r2,12(r16)
11205774:	00800084 	movi	r2,2
11205778:	80000015 	stw	zero,0(r16)
1120577c:	80000115 	stw	zero,4(r16)
11205780:	80000215 	stw	zero,8(r16)
11205784:	80001915 	stw	zero,100(r16)
11205788:	8080038d 	sth	r2,14(r16)
1120578c:	80000415 	stw	zero,16(r16)
11205790:	80000515 	stw	zero,20(r16)
11205794:	80000615 	stw	zero,24(r16)
11205798:	b80d883a 	mov	r6,r23
1120579c:	000b883a 	mov	r5,zero
112057a0:	81001704 	addi	r4,r16,92
112057a4:	12072840 	call	11207284 <memset>
112057a8:	00800044 	movi	r2,1
112057ac:	84000715 	stw	r16,28(r16)
112057b0:	85800815 	stw	r22,32(r16)
112057b4:	85400915 	stw	r21,36(r16)
112057b8:	85000a15 	stw	r20,40(r16)
112057bc:	84c00b15 	stw	r19,44(r16)
112057c0:	90800e15 	stw	r2,56(r18)
112057c4:	dfc00817 	ldw	ra,32(sp)
112057c8:	ddc00717 	ldw	r23,28(sp)
112057cc:	dd800617 	ldw	r22,24(sp)
112057d0:	dd400517 	ldw	r21,20(sp)
112057d4:	dd000417 	ldw	r20,16(sp)
112057d8:	dcc00317 	ldw	r19,12(sp)
112057dc:	dc800217 	ldw	r18,8(sp)
112057e0:	dc400117 	ldw	r17,4(sp)
112057e4:	dc000017 	ldw	r16,0(sp)
112057e8:	dec00904 	addi	sp,sp,36
112057ec:	f800283a 	ret

112057f0 <__fp_lock>:
112057f0:	0005883a 	mov	r2,zero
112057f4:	f800283a 	ret

112057f8 <__sfmoreglue>:
112057f8:	defffc04 	addi	sp,sp,-16
112057fc:	dc400115 	stw	r17,4(sp)
11205800:	2c7fffc4 	addi	r17,r5,-1
11205804:	8c401a24 	muli	r17,r17,104
11205808:	dc800215 	stw	r18,8(sp)
1120580c:	2825883a 	mov	r18,r5
11205810:	89401d04 	addi	r5,r17,116
11205814:	dc000015 	stw	r16,0(sp)
11205818:	dfc00315 	stw	ra,12(sp)
1120581c:	12066f00 	call	112066f0 <_malloc_r>
11205820:	1021883a 	mov	r16,r2
11205824:	10000726 	beq	r2,zero,11205844 <__sfmoreglue+0x4c>
11205828:	11000304 	addi	r4,r2,12
1120582c:	10000015 	stw	zero,0(r2)
11205830:	14800115 	stw	r18,4(r2)
11205834:	11000215 	stw	r4,8(r2)
11205838:	89801a04 	addi	r6,r17,104
1120583c:	000b883a 	mov	r5,zero
11205840:	12072840 	call	11207284 <memset>
11205844:	8005883a 	mov	r2,r16
11205848:	dfc00317 	ldw	ra,12(sp)
1120584c:	dc800217 	ldw	r18,8(sp)
11205850:	dc400117 	ldw	r17,4(sp)
11205854:	dc000017 	ldw	r16,0(sp)
11205858:	dec00404 	addi	sp,sp,16
1120585c:	f800283a 	ret

11205860 <__sfp>:
11205860:	defffb04 	addi	sp,sp,-20
11205864:	dc000015 	stw	r16,0(sp)
11205868:	04044874 	movhi	r16,4385
1120586c:	8408b004 	addi	r16,r16,8896
11205870:	dcc00315 	stw	r19,12(sp)
11205874:	2027883a 	mov	r19,r4
11205878:	81000017 	ldw	r4,0(r16)
1120587c:	dfc00415 	stw	ra,16(sp)
11205880:	dc800215 	stw	r18,8(sp)
11205884:	20800e17 	ldw	r2,56(r4)
11205888:	dc400115 	stw	r17,4(sp)
1120588c:	1000021e 	bne	r2,zero,11205898 <__sfp+0x38>
11205890:	12056540 	call	11205654 <__sinit.part.1>
11205894:	81000017 	ldw	r4,0(r16)
11205898:	2480b804 	addi	r18,r4,736
1120589c:	047fffc4 	movi	r17,-1
112058a0:	91000117 	ldw	r4,4(r18)
112058a4:	94000217 	ldw	r16,8(r18)
112058a8:	213fffc4 	addi	r4,r4,-1
112058ac:	20000a16 	blt	r4,zero,112058d8 <__sfp+0x78>
112058b0:	8080030f 	ldh	r2,12(r16)
112058b4:	10000c26 	beq	r2,zero,112058e8 <__sfp+0x88>
112058b8:	80c01d04 	addi	r3,r16,116
112058bc:	00000206 	br	112058c8 <__sfp+0x68>
112058c0:	18bfe60f 	ldh	r2,-104(r3)
112058c4:	10000826 	beq	r2,zero,112058e8 <__sfp+0x88>
112058c8:	213fffc4 	addi	r4,r4,-1
112058cc:	1c3ffd04 	addi	r16,r3,-12
112058d0:	18c01a04 	addi	r3,r3,104
112058d4:	247ffa1e 	bne	r4,r17,112058c0 <__alt_data_end+0xffe858c0>
112058d8:	90800017 	ldw	r2,0(r18)
112058dc:	10001d26 	beq	r2,zero,11205954 <__sfp+0xf4>
112058e0:	1025883a 	mov	r18,r2
112058e4:	003fee06 	br	112058a0 <__alt_data_end+0xffe858a0>
112058e8:	00bfffc4 	movi	r2,-1
112058ec:	8080038d 	sth	r2,14(r16)
112058f0:	00800044 	movi	r2,1
112058f4:	8080030d 	sth	r2,12(r16)
112058f8:	80001915 	stw	zero,100(r16)
112058fc:	80000015 	stw	zero,0(r16)
11205900:	80000215 	stw	zero,8(r16)
11205904:	80000115 	stw	zero,4(r16)
11205908:	80000415 	stw	zero,16(r16)
1120590c:	80000515 	stw	zero,20(r16)
11205910:	80000615 	stw	zero,24(r16)
11205914:	01800204 	movi	r6,8
11205918:	000b883a 	mov	r5,zero
1120591c:	81001704 	addi	r4,r16,92
11205920:	12072840 	call	11207284 <memset>
11205924:	8005883a 	mov	r2,r16
11205928:	80000c15 	stw	zero,48(r16)
1120592c:	80000d15 	stw	zero,52(r16)
11205930:	80001115 	stw	zero,68(r16)
11205934:	80001215 	stw	zero,72(r16)
11205938:	dfc00417 	ldw	ra,16(sp)
1120593c:	dcc00317 	ldw	r19,12(sp)
11205940:	dc800217 	ldw	r18,8(sp)
11205944:	dc400117 	ldw	r17,4(sp)
11205948:	dc000017 	ldw	r16,0(sp)
1120594c:	dec00504 	addi	sp,sp,20
11205950:	f800283a 	ret
11205954:	01400104 	movi	r5,4
11205958:	9809883a 	mov	r4,r19
1120595c:	12057f80 	call	112057f8 <__sfmoreglue>
11205960:	90800015 	stw	r2,0(r18)
11205964:	103fde1e 	bne	r2,zero,112058e0 <__alt_data_end+0xffe858e0>
11205968:	00800304 	movi	r2,12
1120596c:	98800015 	stw	r2,0(r19)
11205970:	0005883a 	mov	r2,zero
11205974:	003ff006 	br	11205938 <__alt_data_end+0xffe85938>

11205978 <_cleanup>:
11205978:	00844874 	movhi	r2,4385
1120597c:	1088b004 	addi	r2,r2,8896
11205980:	11000017 	ldw	r4,0(r2)
11205984:	01444874 	movhi	r5,4385
11205988:	29699b04 	addi	r5,r5,-22932
1120598c:	12063941 	jmpi	11206394 <_fwalk_reent>

11205990 <__sinit>:
11205990:	20800e17 	ldw	r2,56(r4)
11205994:	10000126 	beq	r2,zero,1120599c <__sinit+0xc>
11205998:	f800283a 	ret
1120599c:	12056541 	jmpi	11205654 <__sinit.part.1>

112059a0 <__sfp_lock_acquire>:
112059a0:	f800283a 	ret

112059a4 <__sfp_lock_release>:
112059a4:	f800283a 	ret

112059a8 <__sinit_lock_acquire>:
112059a8:	f800283a 	ret

112059ac <__sinit_lock_release>:
112059ac:	f800283a 	ret

112059b0 <__fp_lock_all>:
112059b0:	00844874 	movhi	r2,4385
112059b4:	1088b104 	addi	r2,r2,8900
112059b8:	11000017 	ldw	r4,0(r2)
112059bc:	01444834 	movhi	r5,4384
112059c0:	2955fc04 	addi	r5,r5,22512
112059c4:	12062d01 	jmpi	112062d0 <_fwalk>

112059c8 <__fp_unlock_all>:
112059c8:	00844874 	movhi	r2,4385
112059cc:	1088b104 	addi	r2,r2,8900
112059d0:	11000017 	ldw	r4,0(r2)
112059d4:	01444834 	movhi	r5,4384
112059d8:	29559004 	addi	r5,r5,22080
112059dc:	12062d01 	jmpi	112062d0 <_fwalk>

112059e0 <_malloc_trim_r>:
112059e0:	defffb04 	addi	sp,sp,-20
112059e4:	dcc00315 	stw	r19,12(sp)
112059e8:	04c44874 	movhi	r19,4385
112059ec:	dc800215 	stw	r18,8(sp)
112059f0:	dc400115 	stw	r17,4(sp)
112059f4:	dc000015 	stw	r16,0(sp)
112059f8:	dfc00415 	stw	ra,16(sp)
112059fc:	2821883a 	mov	r16,r5
11205a00:	9cc32c04 	addi	r19,r19,3248
11205a04:	2025883a 	mov	r18,r4
11205a08:	120e2780 	call	1120e278 <__malloc_lock>
11205a0c:	98800217 	ldw	r2,8(r19)
11205a10:	14400117 	ldw	r17,4(r2)
11205a14:	00bfff04 	movi	r2,-4
11205a18:	88a2703a 	and	r17,r17,r2
11205a1c:	8c21c83a 	sub	r16,r17,r16
11205a20:	8403fbc4 	addi	r16,r16,4079
11205a24:	8020d33a 	srli	r16,r16,12
11205a28:	0083ffc4 	movi	r2,4095
11205a2c:	843fffc4 	addi	r16,r16,-1
11205a30:	8020933a 	slli	r16,r16,12
11205a34:	1400060e 	bge	r2,r16,11205a50 <_malloc_trim_r+0x70>
11205a38:	000b883a 	mov	r5,zero
11205a3c:	9009883a 	mov	r4,r18
11205a40:	1208ae80 	call	11208ae8 <_sbrk_r>
11205a44:	98c00217 	ldw	r3,8(r19)
11205a48:	1c47883a 	add	r3,r3,r17
11205a4c:	10c00a26 	beq	r2,r3,11205a78 <_malloc_trim_r+0x98>
11205a50:	9009883a 	mov	r4,r18
11205a54:	120e29c0 	call	1120e29c <__malloc_unlock>
11205a58:	0005883a 	mov	r2,zero
11205a5c:	dfc00417 	ldw	ra,16(sp)
11205a60:	dcc00317 	ldw	r19,12(sp)
11205a64:	dc800217 	ldw	r18,8(sp)
11205a68:	dc400117 	ldw	r17,4(sp)
11205a6c:	dc000017 	ldw	r16,0(sp)
11205a70:	dec00504 	addi	sp,sp,20
11205a74:	f800283a 	ret
11205a78:	040bc83a 	sub	r5,zero,r16
11205a7c:	9009883a 	mov	r4,r18
11205a80:	1208ae80 	call	11208ae8 <_sbrk_r>
11205a84:	00ffffc4 	movi	r3,-1
11205a88:	10c00d26 	beq	r2,r3,11205ac0 <_malloc_trim_r+0xe0>
11205a8c:	00c44874 	movhi	r3,4385
11205a90:	18c8cd04 	addi	r3,r3,9012
11205a94:	18800017 	ldw	r2,0(r3)
11205a98:	99000217 	ldw	r4,8(r19)
11205a9c:	8c23c83a 	sub	r17,r17,r16
11205aa0:	8c400054 	ori	r17,r17,1
11205aa4:	1421c83a 	sub	r16,r2,r16
11205aa8:	24400115 	stw	r17,4(r4)
11205aac:	9009883a 	mov	r4,r18
11205ab0:	1c000015 	stw	r16,0(r3)
11205ab4:	120e29c0 	call	1120e29c <__malloc_unlock>
11205ab8:	00800044 	movi	r2,1
11205abc:	003fe706 	br	11205a5c <__alt_data_end+0xffe85a5c>
11205ac0:	000b883a 	mov	r5,zero
11205ac4:	9009883a 	mov	r4,r18
11205ac8:	1208ae80 	call	11208ae8 <_sbrk_r>
11205acc:	99000217 	ldw	r4,8(r19)
11205ad0:	014003c4 	movi	r5,15
11205ad4:	1107c83a 	sub	r3,r2,r4
11205ad8:	28ffdd0e 	bge	r5,r3,11205a50 <__alt_data_end+0xffe85a50>
11205adc:	01444874 	movhi	r5,4385
11205ae0:	2948b304 	addi	r5,r5,8908
11205ae4:	29400017 	ldw	r5,0(r5)
11205ae8:	18c00054 	ori	r3,r3,1
11205aec:	20c00115 	stw	r3,4(r4)
11205af0:	00c44874 	movhi	r3,4385
11205af4:	1145c83a 	sub	r2,r2,r5
11205af8:	18c8cd04 	addi	r3,r3,9012
11205afc:	18800015 	stw	r2,0(r3)
11205b00:	003fd306 	br	11205a50 <__alt_data_end+0xffe85a50>

11205b04 <_free_r>:
11205b04:	28004126 	beq	r5,zero,11205c0c <_free_r+0x108>
11205b08:	defffd04 	addi	sp,sp,-12
11205b0c:	dc400115 	stw	r17,4(sp)
11205b10:	dc000015 	stw	r16,0(sp)
11205b14:	2023883a 	mov	r17,r4
11205b18:	2821883a 	mov	r16,r5
11205b1c:	dfc00215 	stw	ra,8(sp)
11205b20:	120e2780 	call	1120e278 <__malloc_lock>
11205b24:	81ffff17 	ldw	r7,-4(r16)
11205b28:	00bfff84 	movi	r2,-2
11205b2c:	01044874 	movhi	r4,4385
11205b30:	81bffe04 	addi	r6,r16,-8
11205b34:	3884703a 	and	r2,r7,r2
11205b38:	21032c04 	addi	r4,r4,3248
11205b3c:	308b883a 	add	r5,r6,r2
11205b40:	2a400117 	ldw	r9,4(r5)
11205b44:	22000217 	ldw	r8,8(r4)
11205b48:	00ffff04 	movi	r3,-4
11205b4c:	48c6703a 	and	r3,r9,r3
11205b50:	2a005726 	beq	r5,r8,11205cb0 <_free_r+0x1ac>
11205b54:	28c00115 	stw	r3,4(r5)
11205b58:	39c0004c 	andi	r7,r7,1
11205b5c:	3800091e 	bne	r7,zero,11205b84 <_free_r+0x80>
11205b60:	823ffe17 	ldw	r8,-8(r16)
11205b64:	22400204 	addi	r9,r4,8
11205b68:	320dc83a 	sub	r6,r6,r8
11205b6c:	31c00217 	ldw	r7,8(r6)
11205b70:	1205883a 	add	r2,r2,r8
11205b74:	3a406526 	beq	r7,r9,11205d0c <_free_r+0x208>
11205b78:	32000317 	ldw	r8,12(r6)
11205b7c:	3a000315 	stw	r8,12(r7)
11205b80:	41c00215 	stw	r7,8(r8)
11205b84:	28cf883a 	add	r7,r5,r3
11205b88:	39c00117 	ldw	r7,4(r7)
11205b8c:	39c0004c 	andi	r7,r7,1
11205b90:	38003a26 	beq	r7,zero,11205c7c <_free_r+0x178>
11205b94:	10c00054 	ori	r3,r2,1
11205b98:	30c00115 	stw	r3,4(r6)
11205b9c:	3087883a 	add	r3,r6,r2
11205ba0:	18800015 	stw	r2,0(r3)
11205ba4:	00c07fc4 	movi	r3,511
11205ba8:	18801936 	bltu	r3,r2,11205c10 <_free_r+0x10c>
11205bac:	1004d0fa 	srli	r2,r2,3
11205bb0:	01c00044 	movi	r7,1
11205bb4:	21400117 	ldw	r5,4(r4)
11205bb8:	10c00044 	addi	r3,r2,1
11205bbc:	18c7883a 	add	r3,r3,r3
11205bc0:	1005d0ba 	srai	r2,r2,2
11205bc4:	18c7883a 	add	r3,r3,r3
11205bc8:	18c7883a 	add	r3,r3,r3
11205bcc:	1907883a 	add	r3,r3,r4
11205bd0:	3884983a 	sll	r2,r7,r2
11205bd4:	19c00017 	ldw	r7,0(r3)
11205bd8:	1a3ffe04 	addi	r8,r3,-8
11205bdc:	1144b03a 	or	r2,r2,r5
11205be0:	32000315 	stw	r8,12(r6)
11205be4:	31c00215 	stw	r7,8(r6)
11205be8:	20800115 	stw	r2,4(r4)
11205bec:	19800015 	stw	r6,0(r3)
11205bf0:	39800315 	stw	r6,12(r7)
11205bf4:	8809883a 	mov	r4,r17
11205bf8:	dfc00217 	ldw	ra,8(sp)
11205bfc:	dc400117 	ldw	r17,4(sp)
11205c00:	dc000017 	ldw	r16,0(sp)
11205c04:	dec00304 	addi	sp,sp,12
11205c08:	120e29c1 	jmpi	1120e29c <__malloc_unlock>
11205c0c:	f800283a 	ret
11205c10:	100ad27a 	srli	r5,r2,9
11205c14:	00c00104 	movi	r3,4
11205c18:	19404a36 	bltu	r3,r5,11205d44 <_free_r+0x240>
11205c1c:	100ad1ba 	srli	r5,r2,6
11205c20:	28c00e44 	addi	r3,r5,57
11205c24:	18c7883a 	add	r3,r3,r3
11205c28:	29400e04 	addi	r5,r5,56
11205c2c:	18c7883a 	add	r3,r3,r3
11205c30:	18c7883a 	add	r3,r3,r3
11205c34:	1909883a 	add	r4,r3,r4
11205c38:	20c00017 	ldw	r3,0(r4)
11205c3c:	01c44874 	movhi	r7,4385
11205c40:	213ffe04 	addi	r4,r4,-8
11205c44:	39c32c04 	addi	r7,r7,3248
11205c48:	20c04426 	beq	r4,r3,11205d5c <_free_r+0x258>
11205c4c:	01ffff04 	movi	r7,-4
11205c50:	19400117 	ldw	r5,4(r3)
11205c54:	29ca703a 	and	r5,r5,r7
11205c58:	1140022e 	bgeu	r2,r5,11205c64 <_free_r+0x160>
11205c5c:	18c00217 	ldw	r3,8(r3)
11205c60:	20fffb1e 	bne	r4,r3,11205c50 <__alt_data_end+0xffe85c50>
11205c64:	19000317 	ldw	r4,12(r3)
11205c68:	31000315 	stw	r4,12(r6)
11205c6c:	30c00215 	stw	r3,8(r6)
11205c70:	21800215 	stw	r6,8(r4)
11205c74:	19800315 	stw	r6,12(r3)
11205c78:	003fde06 	br	11205bf4 <__alt_data_end+0xffe85bf4>
11205c7c:	29c00217 	ldw	r7,8(r5)
11205c80:	10c5883a 	add	r2,r2,r3
11205c84:	00c44874 	movhi	r3,4385
11205c88:	18c32e04 	addi	r3,r3,3256
11205c8c:	38c03b26 	beq	r7,r3,11205d7c <_free_r+0x278>
11205c90:	2a000317 	ldw	r8,12(r5)
11205c94:	11400054 	ori	r5,r2,1
11205c98:	3087883a 	add	r3,r6,r2
11205c9c:	3a000315 	stw	r8,12(r7)
11205ca0:	41c00215 	stw	r7,8(r8)
11205ca4:	31400115 	stw	r5,4(r6)
11205ca8:	18800015 	stw	r2,0(r3)
11205cac:	003fbd06 	br	11205ba4 <__alt_data_end+0xffe85ba4>
11205cb0:	39c0004c 	andi	r7,r7,1
11205cb4:	10c5883a 	add	r2,r2,r3
11205cb8:	3800071e 	bne	r7,zero,11205cd8 <_free_r+0x1d4>
11205cbc:	81fffe17 	ldw	r7,-8(r16)
11205cc0:	31cdc83a 	sub	r6,r6,r7
11205cc4:	30c00317 	ldw	r3,12(r6)
11205cc8:	31400217 	ldw	r5,8(r6)
11205ccc:	11c5883a 	add	r2,r2,r7
11205cd0:	28c00315 	stw	r3,12(r5)
11205cd4:	19400215 	stw	r5,8(r3)
11205cd8:	10c00054 	ori	r3,r2,1
11205cdc:	30c00115 	stw	r3,4(r6)
11205ce0:	00c44874 	movhi	r3,4385
11205ce4:	18c8b404 	addi	r3,r3,8912
11205ce8:	18c00017 	ldw	r3,0(r3)
11205cec:	21800215 	stw	r6,8(r4)
11205cf0:	10ffc036 	bltu	r2,r3,11205bf4 <__alt_data_end+0xffe85bf4>
11205cf4:	00844874 	movhi	r2,4385
11205cf8:	1088c504 	addi	r2,r2,8980
11205cfc:	11400017 	ldw	r5,0(r2)
11205d00:	8809883a 	mov	r4,r17
11205d04:	12059e00 	call	112059e0 <_malloc_trim_r>
11205d08:	003fba06 	br	11205bf4 <__alt_data_end+0xffe85bf4>
11205d0c:	28c9883a 	add	r4,r5,r3
11205d10:	21000117 	ldw	r4,4(r4)
11205d14:	2100004c 	andi	r4,r4,1
11205d18:	2000391e 	bne	r4,zero,11205e00 <_free_r+0x2fc>
11205d1c:	29c00217 	ldw	r7,8(r5)
11205d20:	29000317 	ldw	r4,12(r5)
11205d24:	1885883a 	add	r2,r3,r2
11205d28:	10c00054 	ori	r3,r2,1
11205d2c:	39000315 	stw	r4,12(r7)
11205d30:	21c00215 	stw	r7,8(r4)
11205d34:	30c00115 	stw	r3,4(r6)
11205d38:	308d883a 	add	r6,r6,r2
11205d3c:	30800015 	stw	r2,0(r6)
11205d40:	003fac06 	br	11205bf4 <__alt_data_end+0xffe85bf4>
11205d44:	00c00504 	movi	r3,20
11205d48:	19401536 	bltu	r3,r5,11205da0 <_free_r+0x29c>
11205d4c:	28c01704 	addi	r3,r5,92
11205d50:	18c7883a 	add	r3,r3,r3
11205d54:	294016c4 	addi	r5,r5,91
11205d58:	003fb406 	br	11205c2c <__alt_data_end+0xffe85c2c>
11205d5c:	280bd0ba 	srai	r5,r5,2
11205d60:	00c00044 	movi	r3,1
11205d64:	38800117 	ldw	r2,4(r7)
11205d68:	194a983a 	sll	r5,r3,r5
11205d6c:	2007883a 	mov	r3,r4
11205d70:	2884b03a 	or	r2,r5,r2
11205d74:	38800115 	stw	r2,4(r7)
11205d78:	003fbb06 	br	11205c68 <__alt_data_end+0xffe85c68>
11205d7c:	21800515 	stw	r6,20(r4)
11205d80:	21800415 	stw	r6,16(r4)
11205d84:	10c00054 	ori	r3,r2,1
11205d88:	31c00315 	stw	r7,12(r6)
11205d8c:	31c00215 	stw	r7,8(r6)
11205d90:	30c00115 	stw	r3,4(r6)
11205d94:	308d883a 	add	r6,r6,r2
11205d98:	30800015 	stw	r2,0(r6)
11205d9c:	003f9506 	br	11205bf4 <__alt_data_end+0xffe85bf4>
11205da0:	00c01504 	movi	r3,84
11205da4:	19400536 	bltu	r3,r5,11205dbc <_free_r+0x2b8>
11205da8:	100ad33a 	srli	r5,r2,12
11205dac:	28c01bc4 	addi	r3,r5,111
11205db0:	18c7883a 	add	r3,r3,r3
11205db4:	29401b84 	addi	r5,r5,110
11205db8:	003f9c06 	br	11205c2c <__alt_data_end+0xffe85c2c>
11205dbc:	00c05504 	movi	r3,340
11205dc0:	19400536 	bltu	r3,r5,11205dd8 <_free_r+0x2d4>
11205dc4:	100ad3fa 	srli	r5,r2,15
11205dc8:	28c01e04 	addi	r3,r5,120
11205dcc:	18c7883a 	add	r3,r3,r3
11205dd0:	29401dc4 	addi	r5,r5,119
11205dd4:	003f9506 	br	11205c2c <__alt_data_end+0xffe85c2c>
11205dd8:	00c15504 	movi	r3,1364
11205ddc:	19400536 	bltu	r3,r5,11205df4 <_free_r+0x2f0>
11205de0:	100ad4ba 	srli	r5,r2,18
11205de4:	28c01f44 	addi	r3,r5,125
11205de8:	18c7883a 	add	r3,r3,r3
11205dec:	29401f04 	addi	r5,r5,124
11205df0:	003f8e06 	br	11205c2c <__alt_data_end+0xffe85c2c>
11205df4:	00c03f84 	movi	r3,254
11205df8:	01401f84 	movi	r5,126
11205dfc:	003f8b06 	br	11205c2c <__alt_data_end+0xffe85c2c>
11205e00:	10c00054 	ori	r3,r2,1
11205e04:	30c00115 	stw	r3,4(r6)
11205e08:	308d883a 	add	r6,r6,r2
11205e0c:	30800015 	stw	r2,0(r6)
11205e10:	003f7806 	br	11205bf4 <__alt_data_end+0xffe85bf4>

11205e14 <__sfvwrite_r>:
11205e14:	30800217 	ldw	r2,8(r6)
11205e18:	10006726 	beq	r2,zero,11205fb8 <__sfvwrite_r+0x1a4>
11205e1c:	28c0030b 	ldhu	r3,12(r5)
11205e20:	defff404 	addi	sp,sp,-48
11205e24:	dd400715 	stw	r21,28(sp)
11205e28:	dd000615 	stw	r20,24(sp)
11205e2c:	dc000215 	stw	r16,8(sp)
11205e30:	dfc00b15 	stw	ra,44(sp)
11205e34:	df000a15 	stw	fp,40(sp)
11205e38:	ddc00915 	stw	r23,36(sp)
11205e3c:	dd800815 	stw	r22,32(sp)
11205e40:	dcc00515 	stw	r19,20(sp)
11205e44:	dc800415 	stw	r18,16(sp)
11205e48:	dc400315 	stw	r17,12(sp)
11205e4c:	1880020c 	andi	r2,r3,8
11205e50:	2821883a 	mov	r16,r5
11205e54:	202b883a 	mov	r21,r4
11205e58:	3029883a 	mov	r20,r6
11205e5c:	10002726 	beq	r2,zero,11205efc <__sfvwrite_r+0xe8>
11205e60:	28800417 	ldw	r2,16(r5)
11205e64:	10002526 	beq	r2,zero,11205efc <__sfvwrite_r+0xe8>
11205e68:	1880008c 	andi	r2,r3,2
11205e6c:	a4400017 	ldw	r17,0(r20)
11205e70:	10002a26 	beq	r2,zero,11205f1c <__sfvwrite_r+0x108>
11205e74:	05a00034 	movhi	r22,32768
11205e78:	0027883a 	mov	r19,zero
11205e7c:	0025883a 	mov	r18,zero
11205e80:	b5bf0004 	addi	r22,r22,-1024
11205e84:	980d883a 	mov	r6,r19
11205e88:	a809883a 	mov	r4,r21
11205e8c:	90004626 	beq	r18,zero,11205fa8 <__sfvwrite_r+0x194>
11205e90:	900f883a 	mov	r7,r18
11205e94:	b480022e 	bgeu	r22,r18,11205ea0 <__sfvwrite_r+0x8c>
11205e98:	01e00034 	movhi	r7,32768
11205e9c:	39ff0004 	addi	r7,r7,-1024
11205ea0:	80800917 	ldw	r2,36(r16)
11205ea4:	81400717 	ldw	r5,28(r16)
11205ea8:	103ee83a 	callr	r2
11205eac:	0080570e 	bge	zero,r2,1120600c <__sfvwrite_r+0x1f8>
11205eb0:	a0c00217 	ldw	r3,8(r20)
11205eb4:	98a7883a 	add	r19,r19,r2
11205eb8:	90a5c83a 	sub	r18,r18,r2
11205ebc:	1885c83a 	sub	r2,r3,r2
11205ec0:	a0800215 	stw	r2,8(r20)
11205ec4:	103fef1e 	bne	r2,zero,11205e84 <__alt_data_end+0xffe85e84>
11205ec8:	0005883a 	mov	r2,zero
11205ecc:	dfc00b17 	ldw	ra,44(sp)
11205ed0:	df000a17 	ldw	fp,40(sp)
11205ed4:	ddc00917 	ldw	r23,36(sp)
11205ed8:	dd800817 	ldw	r22,32(sp)
11205edc:	dd400717 	ldw	r21,28(sp)
11205ee0:	dd000617 	ldw	r20,24(sp)
11205ee4:	dcc00517 	ldw	r19,20(sp)
11205ee8:	dc800417 	ldw	r18,16(sp)
11205eec:	dc400317 	ldw	r17,12(sp)
11205ef0:	dc000217 	ldw	r16,8(sp)
11205ef4:	dec00c04 	addi	sp,sp,48
11205ef8:	f800283a 	ret
11205efc:	800b883a 	mov	r5,r16
11205f00:	a809883a 	mov	r4,r21
11205f04:	12039bc0 	call	112039bc <__swsetup_r>
11205f08:	1000eb1e 	bne	r2,zero,112062b8 <__sfvwrite_r+0x4a4>
11205f0c:	80c0030b 	ldhu	r3,12(r16)
11205f10:	a4400017 	ldw	r17,0(r20)
11205f14:	1880008c 	andi	r2,r3,2
11205f18:	103fd61e 	bne	r2,zero,11205e74 <__alt_data_end+0xffe85e74>
11205f1c:	1880004c 	andi	r2,r3,1
11205f20:	10003f1e 	bne	r2,zero,11206020 <__sfvwrite_r+0x20c>
11205f24:	0039883a 	mov	fp,zero
11205f28:	0025883a 	mov	r18,zero
11205f2c:	90001a26 	beq	r18,zero,11205f98 <__sfvwrite_r+0x184>
11205f30:	1880800c 	andi	r2,r3,512
11205f34:	84c00217 	ldw	r19,8(r16)
11205f38:	10002126 	beq	r2,zero,11205fc0 <__sfvwrite_r+0x1ac>
11205f3c:	982f883a 	mov	r23,r19
11205f40:	94c09336 	bltu	r18,r19,11206190 <__sfvwrite_r+0x37c>
11205f44:	1881200c 	andi	r2,r3,1152
11205f48:	10009e1e 	bne	r2,zero,112061c4 <__sfvwrite_r+0x3b0>
11205f4c:	81000017 	ldw	r4,0(r16)
11205f50:	b80d883a 	mov	r6,r23
11205f54:	e00b883a 	mov	r5,fp
11205f58:	12071280 	call	11207128 <memmove>
11205f5c:	80c00217 	ldw	r3,8(r16)
11205f60:	81000017 	ldw	r4,0(r16)
11205f64:	9005883a 	mov	r2,r18
11205f68:	1ce7c83a 	sub	r19,r3,r19
11205f6c:	25cf883a 	add	r7,r4,r23
11205f70:	84c00215 	stw	r19,8(r16)
11205f74:	81c00015 	stw	r7,0(r16)
11205f78:	a0c00217 	ldw	r3,8(r20)
11205f7c:	e0b9883a 	add	fp,fp,r2
11205f80:	90a5c83a 	sub	r18,r18,r2
11205f84:	18a7c83a 	sub	r19,r3,r2
11205f88:	a4c00215 	stw	r19,8(r20)
11205f8c:	983fce26 	beq	r19,zero,11205ec8 <__alt_data_end+0xffe85ec8>
11205f90:	80c0030b 	ldhu	r3,12(r16)
11205f94:	903fe61e 	bne	r18,zero,11205f30 <__alt_data_end+0xffe85f30>
11205f98:	8f000017 	ldw	fp,0(r17)
11205f9c:	8c800117 	ldw	r18,4(r17)
11205fa0:	8c400204 	addi	r17,r17,8
11205fa4:	003fe106 	br	11205f2c <__alt_data_end+0xffe85f2c>
11205fa8:	8cc00017 	ldw	r19,0(r17)
11205fac:	8c800117 	ldw	r18,4(r17)
11205fb0:	8c400204 	addi	r17,r17,8
11205fb4:	003fb306 	br	11205e84 <__alt_data_end+0xffe85e84>
11205fb8:	0005883a 	mov	r2,zero
11205fbc:	f800283a 	ret
11205fc0:	81000017 	ldw	r4,0(r16)
11205fc4:	80800417 	ldw	r2,16(r16)
11205fc8:	11005736 	bltu	r2,r4,11206128 <__sfvwrite_r+0x314>
11205fcc:	85c00517 	ldw	r23,20(r16)
11205fd0:	95c05536 	bltu	r18,r23,11206128 <__sfvwrite_r+0x314>
11205fd4:	00a00034 	movhi	r2,32768
11205fd8:	10bfffc4 	addi	r2,r2,-1
11205fdc:	9009883a 	mov	r4,r18
11205fe0:	1480012e 	bgeu	r2,r18,11205fe8 <__sfvwrite_r+0x1d4>
11205fe4:	1009883a 	mov	r4,r2
11205fe8:	b80b883a 	mov	r5,r23
11205fec:	12013400 	call	11201340 <__divsi3>
11205ff0:	15cf383a 	mul	r7,r2,r23
11205ff4:	81400717 	ldw	r5,28(r16)
11205ff8:	80800917 	ldw	r2,36(r16)
11205ffc:	e00d883a 	mov	r6,fp
11206000:	a809883a 	mov	r4,r21
11206004:	103ee83a 	callr	r2
11206008:	00bfdb16 	blt	zero,r2,11205f78 <__alt_data_end+0xffe85f78>
1120600c:	8080030b 	ldhu	r2,12(r16)
11206010:	10801014 	ori	r2,r2,64
11206014:	8080030d 	sth	r2,12(r16)
11206018:	00bfffc4 	movi	r2,-1
1120601c:	003fab06 	br	11205ecc <__alt_data_end+0xffe85ecc>
11206020:	0027883a 	mov	r19,zero
11206024:	0011883a 	mov	r8,zero
11206028:	0039883a 	mov	fp,zero
1120602c:	0025883a 	mov	r18,zero
11206030:	90001f26 	beq	r18,zero,112060b0 <__sfvwrite_r+0x29c>
11206034:	40005a26 	beq	r8,zero,112061a0 <__sfvwrite_r+0x38c>
11206038:	982d883a 	mov	r22,r19
1120603c:	94c0012e 	bgeu	r18,r19,11206044 <__sfvwrite_r+0x230>
11206040:	902d883a 	mov	r22,r18
11206044:	81000017 	ldw	r4,0(r16)
11206048:	80800417 	ldw	r2,16(r16)
1120604c:	b02f883a 	mov	r23,r22
11206050:	81c00517 	ldw	r7,20(r16)
11206054:	1100032e 	bgeu	r2,r4,11206064 <__sfvwrite_r+0x250>
11206058:	80c00217 	ldw	r3,8(r16)
1120605c:	38c7883a 	add	r3,r7,r3
11206060:	1d801816 	blt	r3,r22,112060c4 <__sfvwrite_r+0x2b0>
11206064:	b1c03e16 	blt	r22,r7,11206160 <__sfvwrite_r+0x34c>
11206068:	80800917 	ldw	r2,36(r16)
1120606c:	81400717 	ldw	r5,28(r16)
11206070:	e00d883a 	mov	r6,fp
11206074:	da000115 	stw	r8,4(sp)
11206078:	a809883a 	mov	r4,r21
1120607c:	103ee83a 	callr	r2
11206080:	102f883a 	mov	r23,r2
11206084:	da000117 	ldw	r8,4(sp)
11206088:	00bfe00e 	bge	zero,r2,1120600c <__alt_data_end+0xffe8600c>
1120608c:	9de7c83a 	sub	r19,r19,r23
11206090:	98001f26 	beq	r19,zero,11206110 <__sfvwrite_r+0x2fc>
11206094:	a0800217 	ldw	r2,8(r20)
11206098:	e5f9883a 	add	fp,fp,r23
1120609c:	95e5c83a 	sub	r18,r18,r23
112060a0:	15efc83a 	sub	r23,r2,r23
112060a4:	a5c00215 	stw	r23,8(r20)
112060a8:	b83f8726 	beq	r23,zero,11205ec8 <__alt_data_end+0xffe85ec8>
112060ac:	903fe11e 	bne	r18,zero,11206034 <__alt_data_end+0xffe86034>
112060b0:	8f000017 	ldw	fp,0(r17)
112060b4:	8c800117 	ldw	r18,4(r17)
112060b8:	0011883a 	mov	r8,zero
112060bc:	8c400204 	addi	r17,r17,8
112060c0:	003fdb06 	br	11206030 <__alt_data_end+0xffe86030>
112060c4:	180d883a 	mov	r6,r3
112060c8:	e00b883a 	mov	r5,fp
112060cc:	da000115 	stw	r8,4(sp)
112060d0:	d8c00015 	stw	r3,0(sp)
112060d4:	12071280 	call	11207128 <memmove>
112060d8:	d8c00017 	ldw	r3,0(sp)
112060dc:	80800017 	ldw	r2,0(r16)
112060e0:	800b883a 	mov	r5,r16
112060e4:	a809883a 	mov	r4,r21
112060e8:	10c5883a 	add	r2,r2,r3
112060ec:	80800015 	stw	r2,0(r16)
112060f0:	d8c00015 	stw	r3,0(sp)
112060f4:	12055b40 	call	112055b4 <_fflush_r>
112060f8:	d8c00017 	ldw	r3,0(sp)
112060fc:	da000117 	ldw	r8,4(sp)
11206100:	103fc21e 	bne	r2,zero,1120600c <__alt_data_end+0xffe8600c>
11206104:	182f883a 	mov	r23,r3
11206108:	9de7c83a 	sub	r19,r19,r23
1120610c:	983fe11e 	bne	r19,zero,11206094 <__alt_data_end+0xffe86094>
11206110:	800b883a 	mov	r5,r16
11206114:	a809883a 	mov	r4,r21
11206118:	12055b40 	call	112055b4 <_fflush_r>
1120611c:	103fbb1e 	bne	r2,zero,1120600c <__alt_data_end+0xffe8600c>
11206120:	0011883a 	mov	r8,zero
11206124:	003fdb06 	br	11206094 <__alt_data_end+0xffe86094>
11206128:	94c0012e 	bgeu	r18,r19,11206130 <__sfvwrite_r+0x31c>
1120612c:	9027883a 	mov	r19,r18
11206130:	980d883a 	mov	r6,r19
11206134:	e00b883a 	mov	r5,fp
11206138:	12071280 	call	11207128 <memmove>
1120613c:	80800217 	ldw	r2,8(r16)
11206140:	80c00017 	ldw	r3,0(r16)
11206144:	14c5c83a 	sub	r2,r2,r19
11206148:	1cc7883a 	add	r3,r3,r19
1120614c:	80800215 	stw	r2,8(r16)
11206150:	80c00015 	stw	r3,0(r16)
11206154:	10004326 	beq	r2,zero,11206264 <__sfvwrite_r+0x450>
11206158:	9805883a 	mov	r2,r19
1120615c:	003f8606 	br	11205f78 <__alt_data_end+0xffe85f78>
11206160:	b00d883a 	mov	r6,r22
11206164:	e00b883a 	mov	r5,fp
11206168:	da000115 	stw	r8,4(sp)
1120616c:	12071280 	call	11207128 <memmove>
11206170:	80800217 	ldw	r2,8(r16)
11206174:	80c00017 	ldw	r3,0(r16)
11206178:	da000117 	ldw	r8,4(sp)
1120617c:	1585c83a 	sub	r2,r2,r22
11206180:	1dad883a 	add	r22,r3,r22
11206184:	80800215 	stw	r2,8(r16)
11206188:	85800015 	stw	r22,0(r16)
1120618c:	003fbf06 	br	1120608c <__alt_data_end+0xffe8608c>
11206190:	81000017 	ldw	r4,0(r16)
11206194:	9027883a 	mov	r19,r18
11206198:	902f883a 	mov	r23,r18
1120619c:	003f6c06 	br	11205f50 <__alt_data_end+0xffe85f50>
112061a0:	900d883a 	mov	r6,r18
112061a4:	01400284 	movi	r5,10
112061a8:	e009883a 	mov	r4,fp
112061ac:	1206efc0 	call	11206efc <memchr>
112061b0:	10003e26 	beq	r2,zero,112062ac <__sfvwrite_r+0x498>
112061b4:	10800044 	addi	r2,r2,1
112061b8:	1727c83a 	sub	r19,r2,fp
112061bc:	02000044 	movi	r8,1
112061c0:	003f9d06 	br	11206038 <__alt_data_end+0xffe86038>
112061c4:	80800517 	ldw	r2,20(r16)
112061c8:	81400417 	ldw	r5,16(r16)
112061cc:	81c00017 	ldw	r7,0(r16)
112061d0:	10a7883a 	add	r19,r2,r2
112061d4:	9885883a 	add	r2,r19,r2
112061d8:	1026d7fa 	srli	r19,r2,31
112061dc:	396dc83a 	sub	r22,r7,r5
112061e0:	b1000044 	addi	r4,r22,1
112061e4:	9885883a 	add	r2,r19,r2
112061e8:	1027d07a 	srai	r19,r2,1
112061ec:	2485883a 	add	r2,r4,r18
112061f0:	980d883a 	mov	r6,r19
112061f4:	9880022e 	bgeu	r19,r2,11206200 <__sfvwrite_r+0x3ec>
112061f8:	1027883a 	mov	r19,r2
112061fc:	100d883a 	mov	r6,r2
11206200:	18c1000c 	andi	r3,r3,1024
11206204:	18001c26 	beq	r3,zero,11206278 <__sfvwrite_r+0x464>
11206208:	300b883a 	mov	r5,r6
1120620c:	a809883a 	mov	r4,r21
11206210:	12066f00 	call	112066f0 <_malloc_r>
11206214:	102f883a 	mov	r23,r2
11206218:	10002926 	beq	r2,zero,112062c0 <__sfvwrite_r+0x4ac>
1120621c:	81400417 	ldw	r5,16(r16)
11206220:	b00d883a 	mov	r6,r22
11206224:	1009883a 	mov	r4,r2
11206228:	1206fe00 	call	11206fe0 <memcpy>
1120622c:	8080030b 	ldhu	r2,12(r16)
11206230:	00fedfc4 	movi	r3,-1153
11206234:	10c4703a 	and	r2,r2,r3
11206238:	10802014 	ori	r2,r2,128
1120623c:	8080030d 	sth	r2,12(r16)
11206240:	bd89883a 	add	r4,r23,r22
11206244:	9d8fc83a 	sub	r7,r19,r22
11206248:	85c00415 	stw	r23,16(r16)
1120624c:	84c00515 	stw	r19,20(r16)
11206250:	81000015 	stw	r4,0(r16)
11206254:	9027883a 	mov	r19,r18
11206258:	81c00215 	stw	r7,8(r16)
1120625c:	902f883a 	mov	r23,r18
11206260:	003f3b06 	br	11205f50 <__alt_data_end+0xffe85f50>
11206264:	800b883a 	mov	r5,r16
11206268:	a809883a 	mov	r4,r21
1120626c:	12055b40 	call	112055b4 <_fflush_r>
11206270:	103fb926 	beq	r2,zero,11206158 <__alt_data_end+0xffe86158>
11206274:	003f6506 	br	1120600c <__alt_data_end+0xffe8600c>
11206278:	a809883a 	mov	r4,r21
1120627c:	12085100 	call	11208510 <_realloc_r>
11206280:	102f883a 	mov	r23,r2
11206284:	103fee1e 	bne	r2,zero,11206240 <__alt_data_end+0xffe86240>
11206288:	81400417 	ldw	r5,16(r16)
1120628c:	a809883a 	mov	r4,r21
11206290:	1205b040 	call	11205b04 <_free_r>
11206294:	8080030b 	ldhu	r2,12(r16)
11206298:	00ffdfc4 	movi	r3,-129
1120629c:	1884703a 	and	r2,r3,r2
112062a0:	00c00304 	movi	r3,12
112062a4:	a8c00015 	stw	r3,0(r21)
112062a8:	003f5906 	br	11206010 <__alt_data_end+0xffe86010>
112062ac:	94c00044 	addi	r19,r18,1
112062b0:	02000044 	movi	r8,1
112062b4:	003f6006 	br	11206038 <__alt_data_end+0xffe86038>
112062b8:	00bfffc4 	movi	r2,-1
112062bc:	003f0306 	br	11205ecc <__alt_data_end+0xffe85ecc>
112062c0:	00800304 	movi	r2,12
112062c4:	a8800015 	stw	r2,0(r21)
112062c8:	8080030b 	ldhu	r2,12(r16)
112062cc:	003f5006 	br	11206010 <__alt_data_end+0xffe86010>

112062d0 <_fwalk>:
112062d0:	defff704 	addi	sp,sp,-36
112062d4:	dd000415 	stw	r20,16(sp)
112062d8:	dfc00815 	stw	ra,32(sp)
112062dc:	ddc00715 	stw	r23,28(sp)
112062e0:	dd800615 	stw	r22,24(sp)
112062e4:	dd400515 	stw	r21,20(sp)
112062e8:	dcc00315 	stw	r19,12(sp)
112062ec:	dc800215 	stw	r18,8(sp)
112062f0:	dc400115 	stw	r17,4(sp)
112062f4:	dc000015 	stw	r16,0(sp)
112062f8:	2500b804 	addi	r20,r4,736
112062fc:	a0002326 	beq	r20,zero,1120638c <_fwalk+0xbc>
11206300:	282b883a 	mov	r21,r5
11206304:	002f883a 	mov	r23,zero
11206308:	05800044 	movi	r22,1
1120630c:	04ffffc4 	movi	r19,-1
11206310:	a4400117 	ldw	r17,4(r20)
11206314:	a4800217 	ldw	r18,8(r20)
11206318:	8c7fffc4 	addi	r17,r17,-1
1120631c:	88000d16 	blt	r17,zero,11206354 <_fwalk+0x84>
11206320:	94000304 	addi	r16,r18,12
11206324:	94800384 	addi	r18,r18,14
11206328:	8080000b 	ldhu	r2,0(r16)
1120632c:	8c7fffc4 	addi	r17,r17,-1
11206330:	813ffd04 	addi	r4,r16,-12
11206334:	b080042e 	bgeu	r22,r2,11206348 <_fwalk+0x78>
11206338:	9080000f 	ldh	r2,0(r18)
1120633c:	14c00226 	beq	r2,r19,11206348 <_fwalk+0x78>
11206340:	a83ee83a 	callr	r21
11206344:	b8aeb03a 	or	r23,r23,r2
11206348:	84001a04 	addi	r16,r16,104
1120634c:	94801a04 	addi	r18,r18,104
11206350:	8cfff51e 	bne	r17,r19,11206328 <__alt_data_end+0xffe86328>
11206354:	a5000017 	ldw	r20,0(r20)
11206358:	a03fed1e 	bne	r20,zero,11206310 <__alt_data_end+0xffe86310>
1120635c:	b805883a 	mov	r2,r23
11206360:	dfc00817 	ldw	ra,32(sp)
11206364:	ddc00717 	ldw	r23,28(sp)
11206368:	dd800617 	ldw	r22,24(sp)
1120636c:	dd400517 	ldw	r21,20(sp)
11206370:	dd000417 	ldw	r20,16(sp)
11206374:	dcc00317 	ldw	r19,12(sp)
11206378:	dc800217 	ldw	r18,8(sp)
1120637c:	dc400117 	ldw	r17,4(sp)
11206380:	dc000017 	ldw	r16,0(sp)
11206384:	dec00904 	addi	sp,sp,36
11206388:	f800283a 	ret
1120638c:	002f883a 	mov	r23,zero
11206390:	003ff206 	br	1120635c <__alt_data_end+0xffe8635c>

11206394 <_fwalk_reent>:
11206394:	defff704 	addi	sp,sp,-36
11206398:	dd000415 	stw	r20,16(sp)
1120639c:	dfc00815 	stw	ra,32(sp)
112063a0:	ddc00715 	stw	r23,28(sp)
112063a4:	dd800615 	stw	r22,24(sp)
112063a8:	dd400515 	stw	r21,20(sp)
112063ac:	dcc00315 	stw	r19,12(sp)
112063b0:	dc800215 	stw	r18,8(sp)
112063b4:	dc400115 	stw	r17,4(sp)
112063b8:	dc000015 	stw	r16,0(sp)
112063bc:	2500b804 	addi	r20,r4,736
112063c0:	a0002326 	beq	r20,zero,11206450 <_fwalk_reent+0xbc>
112063c4:	282b883a 	mov	r21,r5
112063c8:	2027883a 	mov	r19,r4
112063cc:	002f883a 	mov	r23,zero
112063d0:	05800044 	movi	r22,1
112063d4:	04bfffc4 	movi	r18,-1
112063d8:	a4400117 	ldw	r17,4(r20)
112063dc:	a4000217 	ldw	r16,8(r20)
112063e0:	8c7fffc4 	addi	r17,r17,-1
112063e4:	88000c16 	blt	r17,zero,11206418 <_fwalk_reent+0x84>
112063e8:	84000304 	addi	r16,r16,12
112063ec:	8080000b 	ldhu	r2,0(r16)
112063f0:	8c7fffc4 	addi	r17,r17,-1
112063f4:	817ffd04 	addi	r5,r16,-12
112063f8:	b080052e 	bgeu	r22,r2,11206410 <_fwalk_reent+0x7c>
112063fc:	8080008f 	ldh	r2,2(r16)
11206400:	9809883a 	mov	r4,r19
11206404:	14800226 	beq	r2,r18,11206410 <_fwalk_reent+0x7c>
11206408:	a83ee83a 	callr	r21
1120640c:	b8aeb03a 	or	r23,r23,r2
11206410:	84001a04 	addi	r16,r16,104
11206414:	8cbff51e 	bne	r17,r18,112063ec <__alt_data_end+0xffe863ec>
11206418:	a5000017 	ldw	r20,0(r20)
1120641c:	a03fee1e 	bne	r20,zero,112063d8 <__alt_data_end+0xffe863d8>
11206420:	b805883a 	mov	r2,r23
11206424:	dfc00817 	ldw	ra,32(sp)
11206428:	ddc00717 	ldw	r23,28(sp)
1120642c:	dd800617 	ldw	r22,24(sp)
11206430:	dd400517 	ldw	r21,20(sp)
11206434:	dd000417 	ldw	r20,16(sp)
11206438:	dcc00317 	ldw	r19,12(sp)
1120643c:	dc800217 	ldw	r18,8(sp)
11206440:	dc400117 	ldw	r17,4(sp)
11206444:	dc000017 	ldw	r16,0(sp)
11206448:	dec00904 	addi	sp,sp,36
1120644c:	f800283a 	ret
11206450:	002f883a 	mov	r23,zero
11206454:	003ff206 	br	11206420 <__alt_data_end+0xffe86420>

11206458 <_setlocale_r>:
11206458:	30001b26 	beq	r6,zero,112064c8 <_setlocale_r+0x70>
1120645c:	01444874 	movhi	r5,4385
11206460:	defffe04 	addi	sp,sp,-8
11206464:	29416204 	addi	r5,r5,1416
11206468:	3009883a 	mov	r4,r6
1120646c:	dc000015 	stw	r16,0(sp)
11206470:	dfc00115 	stw	ra,4(sp)
11206474:	3021883a 	mov	r16,r6
11206478:	1208c780 	call	11208c78 <strcmp>
1120647c:	1000061e 	bne	r2,zero,11206498 <_setlocale_r+0x40>
11206480:	00844874 	movhi	r2,4385
11206484:	10816104 	addi	r2,r2,1412
11206488:	dfc00117 	ldw	ra,4(sp)
1120648c:	dc000017 	ldw	r16,0(sp)
11206490:	dec00204 	addi	sp,sp,8
11206494:	f800283a 	ret
11206498:	01444874 	movhi	r5,4385
1120649c:	29416104 	addi	r5,r5,1412
112064a0:	8009883a 	mov	r4,r16
112064a4:	1208c780 	call	11208c78 <strcmp>
112064a8:	103ff526 	beq	r2,zero,11206480 <__alt_data_end+0xffe86480>
112064ac:	01444874 	movhi	r5,4385
112064b0:	29414c04 	addi	r5,r5,1328
112064b4:	8009883a 	mov	r4,r16
112064b8:	1208c780 	call	11208c78 <strcmp>
112064bc:	103ff026 	beq	r2,zero,11206480 <__alt_data_end+0xffe86480>
112064c0:	0005883a 	mov	r2,zero
112064c4:	003ff006 	br	11206488 <__alt_data_end+0xffe86488>
112064c8:	00844874 	movhi	r2,4385
112064cc:	10816104 	addi	r2,r2,1412
112064d0:	f800283a 	ret

112064d4 <__locale_charset>:
112064d4:	00844874 	movhi	r2,4385
112064d8:	10831604 	addi	r2,r2,3160
112064dc:	f800283a 	ret

112064e0 <__locale_mb_cur_max>:
112064e0:	00844874 	movhi	r2,4385
112064e4:	1088b204 	addi	r2,r2,8904
112064e8:	10800017 	ldw	r2,0(r2)
112064ec:	f800283a 	ret

112064f0 <__locale_msgcharset>:
112064f0:	00844874 	movhi	r2,4385
112064f4:	10830e04 	addi	r2,r2,3128
112064f8:	f800283a 	ret

112064fc <__locale_cjk_lang>:
112064fc:	0005883a 	mov	r2,zero
11206500:	f800283a 	ret

11206504 <_localeconv_r>:
11206504:	00844874 	movhi	r2,4385
11206508:	10831e04 	addi	r2,r2,3192
1120650c:	f800283a 	ret

11206510 <setlocale>:
11206510:	00844874 	movhi	r2,4385
11206514:	1088b104 	addi	r2,r2,8900
11206518:	280d883a 	mov	r6,r5
1120651c:	200b883a 	mov	r5,r4
11206520:	11000017 	ldw	r4,0(r2)
11206524:	12064581 	jmpi	11206458 <_setlocale_r>

11206528 <localeconv>:
11206528:	00844874 	movhi	r2,4385
1120652c:	10831e04 	addi	r2,r2,3192
11206530:	f800283a 	ret

11206534 <__smakebuf_r>:
11206534:	2880030b 	ldhu	r2,12(r5)
11206538:	10c0008c 	andi	r3,r2,2
1120653c:	1800411e 	bne	r3,zero,11206644 <__smakebuf_r+0x110>
11206540:	deffec04 	addi	sp,sp,-80
11206544:	dc000f15 	stw	r16,60(sp)
11206548:	2821883a 	mov	r16,r5
1120654c:	2940038f 	ldh	r5,14(r5)
11206550:	dc401015 	stw	r17,64(sp)
11206554:	dfc01315 	stw	ra,76(sp)
11206558:	dcc01215 	stw	r19,72(sp)
1120655c:	dc801115 	stw	r18,68(sp)
11206560:	2023883a 	mov	r17,r4
11206564:	28001c16 	blt	r5,zero,112065d8 <__smakebuf_r+0xa4>
11206568:	d80d883a 	mov	r6,sp
1120656c:	120a9780 	call	1120a978 <_fstat_r>
11206570:	10001816 	blt	r2,zero,112065d4 <__smakebuf_r+0xa0>
11206574:	d8800117 	ldw	r2,4(sp)
11206578:	00e00014 	movui	r3,32768
1120657c:	10bc000c 	andi	r2,r2,61440
11206580:	14c80020 	cmpeqi	r19,r2,8192
11206584:	10c03726 	beq	r2,r3,11206664 <__smakebuf_r+0x130>
11206588:	80c0030b 	ldhu	r3,12(r16)
1120658c:	18c20014 	ori	r3,r3,2048
11206590:	80c0030d 	sth	r3,12(r16)
11206594:	00c80004 	movi	r3,8192
11206598:	10c0521e 	bne	r2,r3,112066e4 <__smakebuf_r+0x1b0>
1120659c:	8140038f 	ldh	r5,14(r16)
112065a0:	8809883a 	mov	r4,r17
112065a4:	120a9d40 	call	1120a9d4 <_isatty_r>
112065a8:	10004c26 	beq	r2,zero,112066dc <__smakebuf_r+0x1a8>
112065ac:	8080030b 	ldhu	r2,12(r16)
112065b0:	80c010c4 	addi	r3,r16,67
112065b4:	80c00015 	stw	r3,0(r16)
112065b8:	10800054 	ori	r2,r2,1
112065bc:	8080030d 	sth	r2,12(r16)
112065c0:	00800044 	movi	r2,1
112065c4:	80c00415 	stw	r3,16(r16)
112065c8:	80800515 	stw	r2,20(r16)
112065cc:	04810004 	movi	r18,1024
112065d0:	00000706 	br	112065f0 <__smakebuf_r+0xbc>
112065d4:	8080030b 	ldhu	r2,12(r16)
112065d8:	10c0200c 	andi	r3,r2,128
112065dc:	18001f1e 	bne	r3,zero,1120665c <__smakebuf_r+0x128>
112065e0:	04810004 	movi	r18,1024
112065e4:	10820014 	ori	r2,r2,2048
112065e8:	8080030d 	sth	r2,12(r16)
112065ec:	0027883a 	mov	r19,zero
112065f0:	900b883a 	mov	r5,r18
112065f4:	8809883a 	mov	r4,r17
112065f8:	12066f00 	call	112066f0 <_malloc_r>
112065fc:	10002c26 	beq	r2,zero,112066b0 <__smakebuf_r+0x17c>
11206600:	80c0030b 	ldhu	r3,12(r16)
11206604:	01044834 	movhi	r4,4384
11206608:	21159204 	addi	r4,r4,22088
1120660c:	89000f15 	stw	r4,60(r17)
11206610:	18c02014 	ori	r3,r3,128
11206614:	80c0030d 	sth	r3,12(r16)
11206618:	80800015 	stw	r2,0(r16)
1120661c:	80800415 	stw	r2,16(r16)
11206620:	84800515 	stw	r18,20(r16)
11206624:	98001a1e 	bne	r19,zero,11206690 <__smakebuf_r+0x15c>
11206628:	dfc01317 	ldw	ra,76(sp)
1120662c:	dcc01217 	ldw	r19,72(sp)
11206630:	dc801117 	ldw	r18,68(sp)
11206634:	dc401017 	ldw	r17,64(sp)
11206638:	dc000f17 	ldw	r16,60(sp)
1120663c:	dec01404 	addi	sp,sp,80
11206640:	f800283a 	ret
11206644:	288010c4 	addi	r2,r5,67
11206648:	28800015 	stw	r2,0(r5)
1120664c:	28800415 	stw	r2,16(r5)
11206650:	00800044 	movi	r2,1
11206654:	28800515 	stw	r2,20(r5)
11206658:	f800283a 	ret
1120665c:	04801004 	movi	r18,64
11206660:	003fe006 	br	112065e4 <__alt_data_end+0xffe865e4>
11206664:	81000a17 	ldw	r4,40(r16)
11206668:	00c44874 	movhi	r3,4385
1120666c:	18e30504 	addi	r3,r3,-29676
11206670:	20ffc51e 	bne	r4,r3,11206588 <__alt_data_end+0xffe86588>
11206674:	8080030b 	ldhu	r2,12(r16)
11206678:	04810004 	movi	r18,1024
1120667c:	84801315 	stw	r18,76(r16)
11206680:	1484b03a 	or	r2,r2,r18
11206684:	8080030d 	sth	r2,12(r16)
11206688:	0027883a 	mov	r19,zero
1120668c:	003fd806 	br	112065f0 <__alt_data_end+0xffe865f0>
11206690:	8140038f 	ldh	r5,14(r16)
11206694:	8809883a 	mov	r4,r17
11206698:	120a9d40 	call	1120a9d4 <_isatty_r>
1120669c:	103fe226 	beq	r2,zero,11206628 <__alt_data_end+0xffe86628>
112066a0:	8080030b 	ldhu	r2,12(r16)
112066a4:	10800054 	ori	r2,r2,1
112066a8:	8080030d 	sth	r2,12(r16)
112066ac:	003fde06 	br	11206628 <__alt_data_end+0xffe86628>
112066b0:	8080030b 	ldhu	r2,12(r16)
112066b4:	10c0800c 	andi	r3,r2,512
112066b8:	183fdb1e 	bne	r3,zero,11206628 <__alt_data_end+0xffe86628>
112066bc:	10800094 	ori	r2,r2,2
112066c0:	80c010c4 	addi	r3,r16,67
112066c4:	8080030d 	sth	r2,12(r16)
112066c8:	00800044 	movi	r2,1
112066cc:	80c00015 	stw	r3,0(r16)
112066d0:	80c00415 	stw	r3,16(r16)
112066d4:	80800515 	stw	r2,20(r16)
112066d8:	003fd306 	br	11206628 <__alt_data_end+0xffe86628>
112066dc:	04810004 	movi	r18,1024
112066e0:	003fc306 	br	112065f0 <__alt_data_end+0xffe865f0>
112066e4:	0027883a 	mov	r19,zero
112066e8:	04810004 	movi	r18,1024
112066ec:	003fc006 	br	112065f0 <__alt_data_end+0xffe865f0>

112066f0 <_malloc_r>:
112066f0:	defff504 	addi	sp,sp,-44
112066f4:	dc800315 	stw	r18,12(sp)
112066f8:	dfc00a15 	stw	ra,40(sp)
112066fc:	df000915 	stw	fp,36(sp)
11206700:	ddc00815 	stw	r23,32(sp)
11206704:	dd800715 	stw	r22,28(sp)
11206708:	dd400615 	stw	r21,24(sp)
1120670c:	dd000515 	stw	r20,20(sp)
11206710:	dcc00415 	stw	r19,16(sp)
11206714:	dc400215 	stw	r17,8(sp)
11206718:	dc000115 	stw	r16,4(sp)
1120671c:	288002c4 	addi	r2,r5,11
11206720:	00c00584 	movi	r3,22
11206724:	2025883a 	mov	r18,r4
11206728:	18807f2e 	bgeu	r3,r2,11206928 <_malloc_r+0x238>
1120672c:	047ffe04 	movi	r17,-8
11206730:	1462703a 	and	r17,r2,r17
11206734:	8800a316 	blt	r17,zero,112069c4 <_malloc_r+0x2d4>
11206738:	8940a236 	bltu	r17,r5,112069c4 <_malloc_r+0x2d4>
1120673c:	120e2780 	call	1120e278 <__malloc_lock>
11206740:	00807dc4 	movi	r2,503
11206744:	1441e92e 	bgeu	r2,r17,11206eec <_malloc_r+0x7fc>
11206748:	8804d27a 	srli	r2,r17,9
1120674c:	1000a126 	beq	r2,zero,112069d4 <_malloc_r+0x2e4>
11206750:	00c00104 	movi	r3,4
11206754:	18811e36 	bltu	r3,r2,11206bd0 <_malloc_r+0x4e0>
11206758:	8804d1ba 	srli	r2,r17,6
1120675c:	12000e44 	addi	r8,r2,57
11206760:	11c00e04 	addi	r7,r2,56
11206764:	4209883a 	add	r4,r8,r8
11206768:	04c44874 	movhi	r19,4385
1120676c:	2109883a 	add	r4,r4,r4
11206770:	9cc32c04 	addi	r19,r19,3248
11206774:	2109883a 	add	r4,r4,r4
11206778:	9909883a 	add	r4,r19,r4
1120677c:	24000117 	ldw	r16,4(r4)
11206780:	213ffe04 	addi	r4,r4,-8
11206784:	24009726 	beq	r4,r16,112069e4 <_malloc_r+0x2f4>
11206788:	80800117 	ldw	r2,4(r16)
1120678c:	01bfff04 	movi	r6,-4
11206790:	014003c4 	movi	r5,15
11206794:	1184703a 	and	r2,r2,r6
11206798:	1447c83a 	sub	r3,r2,r17
1120679c:	28c00716 	blt	r5,r3,112067bc <_malloc_r+0xcc>
112067a0:	1800920e 	bge	r3,zero,112069ec <_malloc_r+0x2fc>
112067a4:	84000317 	ldw	r16,12(r16)
112067a8:	24008e26 	beq	r4,r16,112069e4 <_malloc_r+0x2f4>
112067ac:	80800117 	ldw	r2,4(r16)
112067b0:	1184703a 	and	r2,r2,r6
112067b4:	1447c83a 	sub	r3,r2,r17
112067b8:	28fff90e 	bge	r5,r3,112067a0 <__alt_data_end+0xffe867a0>
112067bc:	3809883a 	mov	r4,r7
112067c0:	01844874 	movhi	r6,4385
112067c4:	9c000417 	ldw	r16,16(r19)
112067c8:	31832c04 	addi	r6,r6,3248
112067cc:	32000204 	addi	r8,r6,8
112067d0:	82013426 	beq	r16,r8,11206ca4 <_malloc_r+0x5b4>
112067d4:	80c00117 	ldw	r3,4(r16)
112067d8:	00bfff04 	movi	r2,-4
112067dc:	188e703a 	and	r7,r3,r2
112067e0:	3c45c83a 	sub	r2,r7,r17
112067e4:	00c003c4 	movi	r3,15
112067e8:	18811f16 	blt	r3,r2,11206c68 <_malloc_r+0x578>
112067ec:	32000515 	stw	r8,20(r6)
112067f0:	32000415 	stw	r8,16(r6)
112067f4:	10007f0e 	bge	r2,zero,112069f4 <_malloc_r+0x304>
112067f8:	00807fc4 	movi	r2,511
112067fc:	11c0fd36 	bltu	r2,r7,11206bf4 <_malloc_r+0x504>
11206800:	3806d0fa 	srli	r3,r7,3
11206804:	01c00044 	movi	r7,1
11206808:	30800117 	ldw	r2,4(r6)
1120680c:	19400044 	addi	r5,r3,1
11206810:	294b883a 	add	r5,r5,r5
11206814:	1807d0ba 	srai	r3,r3,2
11206818:	294b883a 	add	r5,r5,r5
1120681c:	294b883a 	add	r5,r5,r5
11206820:	298b883a 	add	r5,r5,r6
11206824:	38c6983a 	sll	r3,r7,r3
11206828:	29c00017 	ldw	r7,0(r5)
1120682c:	2a7ffe04 	addi	r9,r5,-8
11206830:	1886b03a 	or	r3,r3,r2
11206834:	82400315 	stw	r9,12(r16)
11206838:	81c00215 	stw	r7,8(r16)
1120683c:	30c00115 	stw	r3,4(r6)
11206840:	2c000015 	stw	r16,0(r5)
11206844:	3c000315 	stw	r16,12(r7)
11206848:	2005d0ba 	srai	r2,r4,2
1120684c:	01400044 	movi	r5,1
11206850:	288a983a 	sll	r5,r5,r2
11206854:	19406f36 	bltu	r3,r5,11206a14 <_malloc_r+0x324>
11206858:	28c4703a 	and	r2,r5,r3
1120685c:	10000a1e 	bne	r2,zero,11206888 <_malloc_r+0x198>
11206860:	00bfff04 	movi	r2,-4
11206864:	294b883a 	add	r5,r5,r5
11206868:	2088703a 	and	r4,r4,r2
1120686c:	28c4703a 	and	r2,r5,r3
11206870:	21000104 	addi	r4,r4,4
11206874:	1000041e 	bne	r2,zero,11206888 <_malloc_r+0x198>
11206878:	294b883a 	add	r5,r5,r5
1120687c:	28c4703a 	and	r2,r5,r3
11206880:	21000104 	addi	r4,r4,4
11206884:	103ffc26 	beq	r2,zero,11206878 <__alt_data_end+0xffe86878>
11206888:	02bfff04 	movi	r10,-4
1120688c:	024003c4 	movi	r9,15
11206890:	21800044 	addi	r6,r4,1
11206894:	318d883a 	add	r6,r6,r6
11206898:	318d883a 	add	r6,r6,r6
1120689c:	318d883a 	add	r6,r6,r6
112068a0:	998d883a 	add	r6,r19,r6
112068a4:	333ffe04 	addi	r12,r6,-8
112068a8:	2017883a 	mov	r11,r4
112068ac:	31800104 	addi	r6,r6,4
112068b0:	34000017 	ldw	r16,0(r6)
112068b4:	31fffd04 	addi	r7,r6,-12
112068b8:	81c0041e 	bne	r16,r7,112068cc <_malloc_r+0x1dc>
112068bc:	0000fb06 	br	11206cac <_malloc_r+0x5bc>
112068c0:	1801030e 	bge	r3,zero,11206cd0 <_malloc_r+0x5e0>
112068c4:	84000317 	ldw	r16,12(r16)
112068c8:	81c0f826 	beq	r16,r7,11206cac <_malloc_r+0x5bc>
112068cc:	80800117 	ldw	r2,4(r16)
112068d0:	1284703a 	and	r2,r2,r10
112068d4:	1447c83a 	sub	r3,r2,r17
112068d8:	48fff90e 	bge	r9,r3,112068c0 <__alt_data_end+0xffe868c0>
112068dc:	80800317 	ldw	r2,12(r16)
112068e0:	81000217 	ldw	r4,8(r16)
112068e4:	89400054 	ori	r5,r17,1
112068e8:	81400115 	stw	r5,4(r16)
112068ec:	20800315 	stw	r2,12(r4)
112068f0:	11000215 	stw	r4,8(r2)
112068f4:	8463883a 	add	r17,r16,r17
112068f8:	9c400515 	stw	r17,20(r19)
112068fc:	9c400415 	stw	r17,16(r19)
11206900:	18800054 	ori	r2,r3,1
11206904:	88800115 	stw	r2,4(r17)
11206908:	8a000315 	stw	r8,12(r17)
1120690c:	8a000215 	stw	r8,8(r17)
11206910:	88e3883a 	add	r17,r17,r3
11206914:	88c00015 	stw	r3,0(r17)
11206918:	9009883a 	mov	r4,r18
1120691c:	120e29c0 	call	1120e29c <__malloc_unlock>
11206920:	80800204 	addi	r2,r16,8
11206924:	00001b06 	br	11206994 <_malloc_r+0x2a4>
11206928:	04400404 	movi	r17,16
1120692c:	89402536 	bltu	r17,r5,112069c4 <_malloc_r+0x2d4>
11206930:	120e2780 	call	1120e278 <__malloc_lock>
11206934:	00800184 	movi	r2,6
11206938:	01000084 	movi	r4,2
1120693c:	04c44874 	movhi	r19,4385
11206940:	1085883a 	add	r2,r2,r2
11206944:	9cc32c04 	addi	r19,r19,3248
11206948:	1085883a 	add	r2,r2,r2
1120694c:	9885883a 	add	r2,r19,r2
11206950:	14000117 	ldw	r16,4(r2)
11206954:	10fffe04 	addi	r3,r2,-8
11206958:	80c0d926 	beq	r16,r3,11206cc0 <_malloc_r+0x5d0>
1120695c:	80c00117 	ldw	r3,4(r16)
11206960:	81000317 	ldw	r4,12(r16)
11206964:	00bfff04 	movi	r2,-4
11206968:	1884703a 	and	r2,r3,r2
1120696c:	81400217 	ldw	r5,8(r16)
11206970:	8085883a 	add	r2,r16,r2
11206974:	10c00117 	ldw	r3,4(r2)
11206978:	29000315 	stw	r4,12(r5)
1120697c:	21400215 	stw	r5,8(r4)
11206980:	18c00054 	ori	r3,r3,1
11206984:	10c00115 	stw	r3,4(r2)
11206988:	9009883a 	mov	r4,r18
1120698c:	120e29c0 	call	1120e29c <__malloc_unlock>
11206990:	80800204 	addi	r2,r16,8
11206994:	dfc00a17 	ldw	ra,40(sp)
11206998:	df000917 	ldw	fp,36(sp)
1120699c:	ddc00817 	ldw	r23,32(sp)
112069a0:	dd800717 	ldw	r22,28(sp)
112069a4:	dd400617 	ldw	r21,24(sp)
112069a8:	dd000517 	ldw	r20,20(sp)
112069ac:	dcc00417 	ldw	r19,16(sp)
112069b0:	dc800317 	ldw	r18,12(sp)
112069b4:	dc400217 	ldw	r17,8(sp)
112069b8:	dc000117 	ldw	r16,4(sp)
112069bc:	dec00b04 	addi	sp,sp,44
112069c0:	f800283a 	ret
112069c4:	00800304 	movi	r2,12
112069c8:	90800015 	stw	r2,0(r18)
112069cc:	0005883a 	mov	r2,zero
112069d0:	003ff006 	br	11206994 <__alt_data_end+0xffe86994>
112069d4:	01002004 	movi	r4,128
112069d8:	02001004 	movi	r8,64
112069dc:	01c00fc4 	movi	r7,63
112069e0:	003f6106 	br	11206768 <__alt_data_end+0xffe86768>
112069e4:	4009883a 	mov	r4,r8
112069e8:	003f7506 	br	112067c0 <__alt_data_end+0xffe867c0>
112069ec:	81000317 	ldw	r4,12(r16)
112069f0:	003fde06 	br	1120696c <__alt_data_end+0xffe8696c>
112069f4:	81c5883a 	add	r2,r16,r7
112069f8:	11400117 	ldw	r5,4(r2)
112069fc:	9009883a 	mov	r4,r18
11206a00:	29400054 	ori	r5,r5,1
11206a04:	11400115 	stw	r5,4(r2)
11206a08:	120e29c0 	call	1120e29c <__malloc_unlock>
11206a0c:	80800204 	addi	r2,r16,8
11206a10:	003fe006 	br	11206994 <__alt_data_end+0xffe86994>
11206a14:	9c000217 	ldw	r16,8(r19)
11206a18:	00bfff04 	movi	r2,-4
11206a1c:	85800117 	ldw	r22,4(r16)
11206a20:	b0ac703a 	and	r22,r22,r2
11206a24:	b4400336 	bltu	r22,r17,11206a34 <_malloc_r+0x344>
11206a28:	b445c83a 	sub	r2,r22,r17
11206a2c:	00c003c4 	movi	r3,15
11206a30:	18805d16 	blt	r3,r2,11206ba8 <_malloc_r+0x4b8>
11206a34:	05c44874 	movhi	r23,4385
11206a38:	00844874 	movhi	r2,4385
11206a3c:	1088c504 	addi	r2,r2,8980
11206a40:	bdc8b304 	addi	r23,r23,8908
11206a44:	15400017 	ldw	r21,0(r2)
11206a48:	b8c00017 	ldw	r3,0(r23)
11206a4c:	00bfffc4 	movi	r2,-1
11206a50:	858d883a 	add	r6,r16,r22
11206a54:	8d6b883a 	add	r21,r17,r21
11206a58:	1880ea26 	beq	r3,r2,11206e04 <_malloc_r+0x714>
11206a5c:	ad4403c4 	addi	r21,r21,4111
11206a60:	00bc0004 	movi	r2,-4096
11206a64:	a8aa703a 	and	r21,r21,r2
11206a68:	a80b883a 	mov	r5,r21
11206a6c:	9009883a 	mov	r4,r18
11206a70:	d9800015 	stw	r6,0(sp)
11206a74:	1208ae80 	call	11208ae8 <_sbrk_r>
11206a78:	1029883a 	mov	r20,r2
11206a7c:	00bfffc4 	movi	r2,-1
11206a80:	d9800017 	ldw	r6,0(sp)
11206a84:	a080e826 	beq	r20,r2,11206e28 <_malloc_r+0x738>
11206a88:	a180a636 	bltu	r20,r6,11206d24 <_malloc_r+0x634>
11206a8c:	07044874 	movhi	fp,4385
11206a90:	e708cd04 	addi	fp,fp,9012
11206a94:	e0800017 	ldw	r2,0(fp)
11206a98:	a887883a 	add	r3,r21,r2
11206a9c:	e0c00015 	stw	r3,0(fp)
11206aa0:	3500e626 	beq	r6,r20,11206e3c <_malloc_r+0x74c>
11206aa4:	b9000017 	ldw	r4,0(r23)
11206aa8:	00bfffc4 	movi	r2,-1
11206aac:	2080ee26 	beq	r4,r2,11206e68 <_malloc_r+0x778>
11206ab0:	a185c83a 	sub	r2,r20,r6
11206ab4:	10c5883a 	add	r2,r2,r3
11206ab8:	e0800015 	stw	r2,0(fp)
11206abc:	a0c001cc 	andi	r3,r20,7
11206ac0:	1800bc26 	beq	r3,zero,11206db4 <_malloc_r+0x6c4>
11206ac4:	a0e9c83a 	sub	r20,r20,r3
11206ac8:	00840204 	movi	r2,4104
11206acc:	a5000204 	addi	r20,r20,8
11206ad0:	10c7c83a 	sub	r3,r2,r3
11206ad4:	a545883a 	add	r2,r20,r21
11206ad8:	1083ffcc 	andi	r2,r2,4095
11206adc:	18abc83a 	sub	r21,r3,r2
11206ae0:	a80b883a 	mov	r5,r21
11206ae4:	9009883a 	mov	r4,r18
11206ae8:	1208ae80 	call	11208ae8 <_sbrk_r>
11206aec:	00ffffc4 	movi	r3,-1
11206af0:	10c0e126 	beq	r2,r3,11206e78 <_malloc_r+0x788>
11206af4:	1505c83a 	sub	r2,r2,r20
11206af8:	1545883a 	add	r2,r2,r21
11206afc:	10800054 	ori	r2,r2,1
11206b00:	e0c00017 	ldw	r3,0(fp)
11206b04:	9d000215 	stw	r20,8(r19)
11206b08:	a0800115 	stw	r2,4(r20)
11206b0c:	a8c7883a 	add	r3,r21,r3
11206b10:	e0c00015 	stw	r3,0(fp)
11206b14:	84c00e26 	beq	r16,r19,11206b50 <_malloc_r+0x460>
11206b18:	018003c4 	movi	r6,15
11206b1c:	3580a72e 	bgeu	r6,r22,11206dbc <_malloc_r+0x6cc>
11206b20:	81400117 	ldw	r5,4(r16)
11206b24:	013ffe04 	movi	r4,-8
11206b28:	b0bffd04 	addi	r2,r22,-12
11206b2c:	1104703a 	and	r2,r2,r4
11206b30:	2900004c 	andi	r4,r5,1
11206b34:	2088b03a 	or	r4,r4,r2
11206b38:	81000115 	stw	r4,4(r16)
11206b3c:	01400144 	movi	r5,5
11206b40:	8089883a 	add	r4,r16,r2
11206b44:	21400115 	stw	r5,4(r4)
11206b48:	21400215 	stw	r5,8(r4)
11206b4c:	3080cd36 	bltu	r6,r2,11206e84 <_malloc_r+0x794>
11206b50:	00844874 	movhi	r2,4385
11206b54:	1088c404 	addi	r2,r2,8976
11206b58:	11000017 	ldw	r4,0(r2)
11206b5c:	20c0012e 	bgeu	r4,r3,11206b64 <_malloc_r+0x474>
11206b60:	10c00015 	stw	r3,0(r2)
11206b64:	00844874 	movhi	r2,4385
11206b68:	1088c304 	addi	r2,r2,8972
11206b6c:	11000017 	ldw	r4,0(r2)
11206b70:	9c000217 	ldw	r16,8(r19)
11206b74:	20c0012e 	bgeu	r4,r3,11206b7c <_malloc_r+0x48c>
11206b78:	10c00015 	stw	r3,0(r2)
11206b7c:	80c00117 	ldw	r3,4(r16)
11206b80:	00bfff04 	movi	r2,-4
11206b84:	1886703a 	and	r3,r3,r2
11206b88:	1c45c83a 	sub	r2,r3,r17
11206b8c:	1c400236 	bltu	r3,r17,11206b98 <_malloc_r+0x4a8>
11206b90:	00c003c4 	movi	r3,15
11206b94:	18800416 	blt	r3,r2,11206ba8 <_malloc_r+0x4b8>
11206b98:	9009883a 	mov	r4,r18
11206b9c:	120e29c0 	call	1120e29c <__malloc_unlock>
11206ba0:	0005883a 	mov	r2,zero
11206ba4:	003f7b06 	br	11206994 <__alt_data_end+0xffe86994>
11206ba8:	88c00054 	ori	r3,r17,1
11206bac:	80c00115 	stw	r3,4(r16)
11206bb0:	8463883a 	add	r17,r16,r17
11206bb4:	10800054 	ori	r2,r2,1
11206bb8:	9c400215 	stw	r17,8(r19)
11206bbc:	88800115 	stw	r2,4(r17)
11206bc0:	9009883a 	mov	r4,r18
11206bc4:	120e29c0 	call	1120e29c <__malloc_unlock>
11206bc8:	80800204 	addi	r2,r16,8
11206bcc:	003f7106 	br	11206994 <__alt_data_end+0xffe86994>
11206bd0:	00c00504 	movi	r3,20
11206bd4:	18804a2e 	bgeu	r3,r2,11206d00 <_malloc_r+0x610>
11206bd8:	00c01504 	movi	r3,84
11206bdc:	18806e36 	bltu	r3,r2,11206d98 <_malloc_r+0x6a8>
11206be0:	8804d33a 	srli	r2,r17,12
11206be4:	12001bc4 	addi	r8,r2,111
11206be8:	11c01b84 	addi	r7,r2,110
11206bec:	4209883a 	add	r4,r8,r8
11206bf0:	003edd06 	br	11206768 <__alt_data_end+0xffe86768>
11206bf4:	3804d27a 	srli	r2,r7,9
11206bf8:	00c00104 	movi	r3,4
11206bfc:	1880442e 	bgeu	r3,r2,11206d10 <_malloc_r+0x620>
11206c00:	00c00504 	movi	r3,20
11206c04:	18808136 	bltu	r3,r2,11206e0c <_malloc_r+0x71c>
11206c08:	11401704 	addi	r5,r2,92
11206c0c:	10c016c4 	addi	r3,r2,91
11206c10:	294b883a 	add	r5,r5,r5
11206c14:	294b883a 	add	r5,r5,r5
11206c18:	294b883a 	add	r5,r5,r5
11206c1c:	994b883a 	add	r5,r19,r5
11206c20:	28800017 	ldw	r2,0(r5)
11206c24:	01844874 	movhi	r6,4385
11206c28:	297ffe04 	addi	r5,r5,-8
11206c2c:	31832c04 	addi	r6,r6,3248
11206c30:	28806526 	beq	r5,r2,11206dc8 <_malloc_r+0x6d8>
11206c34:	01bfff04 	movi	r6,-4
11206c38:	10c00117 	ldw	r3,4(r2)
11206c3c:	1986703a 	and	r3,r3,r6
11206c40:	38c0022e 	bgeu	r7,r3,11206c4c <_malloc_r+0x55c>
11206c44:	10800217 	ldw	r2,8(r2)
11206c48:	28bffb1e 	bne	r5,r2,11206c38 <__alt_data_end+0xffe86c38>
11206c4c:	11400317 	ldw	r5,12(r2)
11206c50:	98c00117 	ldw	r3,4(r19)
11206c54:	81400315 	stw	r5,12(r16)
11206c58:	80800215 	stw	r2,8(r16)
11206c5c:	2c000215 	stw	r16,8(r5)
11206c60:	14000315 	stw	r16,12(r2)
11206c64:	003ef806 	br	11206848 <__alt_data_end+0xffe86848>
11206c68:	88c00054 	ori	r3,r17,1
11206c6c:	80c00115 	stw	r3,4(r16)
11206c70:	8463883a 	add	r17,r16,r17
11206c74:	34400515 	stw	r17,20(r6)
11206c78:	34400415 	stw	r17,16(r6)
11206c7c:	10c00054 	ori	r3,r2,1
11206c80:	8a000315 	stw	r8,12(r17)
11206c84:	8a000215 	stw	r8,8(r17)
11206c88:	88c00115 	stw	r3,4(r17)
11206c8c:	88a3883a 	add	r17,r17,r2
11206c90:	88800015 	stw	r2,0(r17)
11206c94:	9009883a 	mov	r4,r18
11206c98:	120e29c0 	call	1120e29c <__malloc_unlock>
11206c9c:	80800204 	addi	r2,r16,8
11206ca0:	003f3c06 	br	11206994 <__alt_data_end+0xffe86994>
11206ca4:	30c00117 	ldw	r3,4(r6)
11206ca8:	003ee706 	br	11206848 <__alt_data_end+0xffe86848>
11206cac:	5ac00044 	addi	r11,r11,1
11206cb0:	588000cc 	andi	r2,r11,3
11206cb4:	31800204 	addi	r6,r6,8
11206cb8:	103efd1e 	bne	r2,zero,112068b0 <__alt_data_end+0xffe868b0>
11206cbc:	00002406 	br	11206d50 <_malloc_r+0x660>
11206cc0:	14000317 	ldw	r16,12(r2)
11206cc4:	143f251e 	bne	r2,r16,1120695c <__alt_data_end+0xffe8695c>
11206cc8:	21000084 	addi	r4,r4,2
11206ccc:	003ebc06 	br	112067c0 <__alt_data_end+0xffe867c0>
11206cd0:	8085883a 	add	r2,r16,r2
11206cd4:	10c00117 	ldw	r3,4(r2)
11206cd8:	81000317 	ldw	r4,12(r16)
11206cdc:	81400217 	ldw	r5,8(r16)
11206ce0:	18c00054 	ori	r3,r3,1
11206ce4:	10c00115 	stw	r3,4(r2)
11206ce8:	29000315 	stw	r4,12(r5)
11206cec:	21400215 	stw	r5,8(r4)
11206cf0:	9009883a 	mov	r4,r18
11206cf4:	120e29c0 	call	1120e29c <__malloc_unlock>
11206cf8:	80800204 	addi	r2,r16,8
11206cfc:	003f2506 	br	11206994 <__alt_data_end+0xffe86994>
11206d00:	12001704 	addi	r8,r2,92
11206d04:	11c016c4 	addi	r7,r2,91
11206d08:	4209883a 	add	r4,r8,r8
11206d0c:	003e9606 	br	11206768 <__alt_data_end+0xffe86768>
11206d10:	3804d1ba 	srli	r2,r7,6
11206d14:	11400e44 	addi	r5,r2,57
11206d18:	10c00e04 	addi	r3,r2,56
11206d1c:	294b883a 	add	r5,r5,r5
11206d20:	003fbc06 	br	11206c14 <__alt_data_end+0xffe86c14>
11206d24:	84ff5926 	beq	r16,r19,11206a8c <__alt_data_end+0xffe86a8c>
11206d28:	00844874 	movhi	r2,4385
11206d2c:	10832c04 	addi	r2,r2,3248
11206d30:	14000217 	ldw	r16,8(r2)
11206d34:	00bfff04 	movi	r2,-4
11206d38:	80c00117 	ldw	r3,4(r16)
11206d3c:	1886703a 	and	r3,r3,r2
11206d40:	003f9106 	br	11206b88 <__alt_data_end+0xffe86b88>
11206d44:	60800217 	ldw	r2,8(r12)
11206d48:	213fffc4 	addi	r4,r4,-1
11206d4c:	1300651e 	bne	r2,r12,11206ee4 <_malloc_r+0x7f4>
11206d50:	208000cc 	andi	r2,r4,3
11206d54:	633ffe04 	addi	r12,r12,-8
11206d58:	103ffa1e 	bne	r2,zero,11206d44 <__alt_data_end+0xffe86d44>
11206d5c:	98800117 	ldw	r2,4(r19)
11206d60:	0146303a 	nor	r3,zero,r5
11206d64:	1884703a 	and	r2,r3,r2
11206d68:	98800115 	stw	r2,4(r19)
11206d6c:	294b883a 	add	r5,r5,r5
11206d70:	117f2836 	bltu	r2,r5,11206a14 <__alt_data_end+0xffe86a14>
11206d74:	283f2726 	beq	r5,zero,11206a14 <__alt_data_end+0xffe86a14>
11206d78:	2886703a 	and	r3,r5,r2
11206d7c:	5809883a 	mov	r4,r11
11206d80:	183ec31e 	bne	r3,zero,11206890 <__alt_data_end+0xffe86890>
11206d84:	294b883a 	add	r5,r5,r5
11206d88:	2886703a 	and	r3,r5,r2
11206d8c:	21000104 	addi	r4,r4,4
11206d90:	183ffc26 	beq	r3,zero,11206d84 <__alt_data_end+0xffe86d84>
11206d94:	003ebe06 	br	11206890 <__alt_data_end+0xffe86890>
11206d98:	00c05504 	movi	r3,340
11206d9c:	18801236 	bltu	r3,r2,11206de8 <_malloc_r+0x6f8>
11206da0:	8804d3fa 	srli	r2,r17,15
11206da4:	12001e04 	addi	r8,r2,120
11206da8:	11c01dc4 	addi	r7,r2,119
11206dac:	4209883a 	add	r4,r8,r8
11206db0:	003e6d06 	br	11206768 <__alt_data_end+0xffe86768>
11206db4:	00c40004 	movi	r3,4096
11206db8:	003f4606 	br	11206ad4 <__alt_data_end+0xffe86ad4>
11206dbc:	00800044 	movi	r2,1
11206dc0:	a0800115 	stw	r2,4(r20)
11206dc4:	003f7406 	br	11206b98 <__alt_data_end+0xffe86b98>
11206dc8:	1805d0ba 	srai	r2,r3,2
11206dcc:	01c00044 	movi	r7,1
11206dd0:	30c00117 	ldw	r3,4(r6)
11206dd4:	388e983a 	sll	r7,r7,r2
11206dd8:	2805883a 	mov	r2,r5
11206ddc:	38c6b03a 	or	r3,r7,r3
11206de0:	30c00115 	stw	r3,4(r6)
11206de4:	003f9b06 	br	11206c54 <__alt_data_end+0xffe86c54>
11206de8:	00c15504 	movi	r3,1364
11206dec:	18801a36 	bltu	r3,r2,11206e58 <_malloc_r+0x768>
11206df0:	8804d4ba 	srli	r2,r17,18
11206df4:	12001f44 	addi	r8,r2,125
11206df8:	11c01f04 	addi	r7,r2,124
11206dfc:	4209883a 	add	r4,r8,r8
11206e00:	003e5906 	br	11206768 <__alt_data_end+0xffe86768>
11206e04:	ad400404 	addi	r21,r21,16
11206e08:	003f1706 	br	11206a68 <__alt_data_end+0xffe86a68>
11206e0c:	00c01504 	movi	r3,84
11206e10:	18802336 	bltu	r3,r2,11206ea0 <_malloc_r+0x7b0>
11206e14:	3804d33a 	srli	r2,r7,12
11206e18:	11401bc4 	addi	r5,r2,111
11206e1c:	10c01b84 	addi	r3,r2,110
11206e20:	294b883a 	add	r5,r5,r5
11206e24:	003f7b06 	br	11206c14 <__alt_data_end+0xffe86c14>
11206e28:	9c000217 	ldw	r16,8(r19)
11206e2c:	00bfff04 	movi	r2,-4
11206e30:	80c00117 	ldw	r3,4(r16)
11206e34:	1886703a 	and	r3,r3,r2
11206e38:	003f5306 	br	11206b88 <__alt_data_end+0xffe86b88>
11206e3c:	3083ffcc 	andi	r2,r6,4095
11206e40:	103f181e 	bne	r2,zero,11206aa4 <__alt_data_end+0xffe86aa4>
11206e44:	99000217 	ldw	r4,8(r19)
11206e48:	b545883a 	add	r2,r22,r21
11206e4c:	10800054 	ori	r2,r2,1
11206e50:	20800115 	stw	r2,4(r4)
11206e54:	003f3e06 	br	11206b50 <__alt_data_end+0xffe86b50>
11206e58:	01003f84 	movi	r4,254
11206e5c:	02001fc4 	movi	r8,127
11206e60:	01c01f84 	movi	r7,126
11206e64:	003e4006 	br	11206768 <__alt_data_end+0xffe86768>
11206e68:	00844874 	movhi	r2,4385
11206e6c:	1088b304 	addi	r2,r2,8908
11206e70:	15000015 	stw	r20,0(r2)
11206e74:	003f1106 	br	11206abc <__alt_data_end+0xffe86abc>
11206e78:	00800044 	movi	r2,1
11206e7c:	002b883a 	mov	r21,zero
11206e80:	003f1f06 	br	11206b00 <__alt_data_end+0xffe86b00>
11206e84:	81400204 	addi	r5,r16,8
11206e88:	9009883a 	mov	r4,r18
11206e8c:	1205b040 	call	11205b04 <_free_r>
11206e90:	00844874 	movhi	r2,4385
11206e94:	1088cd04 	addi	r2,r2,9012
11206e98:	10c00017 	ldw	r3,0(r2)
11206e9c:	003f2c06 	br	11206b50 <__alt_data_end+0xffe86b50>
11206ea0:	00c05504 	movi	r3,340
11206ea4:	18800536 	bltu	r3,r2,11206ebc <_malloc_r+0x7cc>
11206ea8:	3804d3fa 	srli	r2,r7,15
11206eac:	11401e04 	addi	r5,r2,120
11206eb0:	10c01dc4 	addi	r3,r2,119
11206eb4:	294b883a 	add	r5,r5,r5
11206eb8:	003f5606 	br	11206c14 <__alt_data_end+0xffe86c14>
11206ebc:	00c15504 	movi	r3,1364
11206ec0:	18800536 	bltu	r3,r2,11206ed8 <_malloc_r+0x7e8>
11206ec4:	3804d4ba 	srli	r2,r7,18
11206ec8:	11401f44 	addi	r5,r2,125
11206ecc:	10c01f04 	addi	r3,r2,124
11206ed0:	294b883a 	add	r5,r5,r5
11206ed4:	003f4f06 	br	11206c14 <__alt_data_end+0xffe86c14>
11206ed8:	01403f84 	movi	r5,254
11206edc:	00c01f84 	movi	r3,126
11206ee0:	003f4c06 	br	11206c14 <__alt_data_end+0xffe86c14>
11206ee4:	98800117 	ldw	r2,4(r19)
11206ee8:	003fa006 	br	11206d6c <__alt_data_end+0xffe86d6c>
11206eec:	8808d0fa 	srli	r4,r17,3
11206ef0:	20800044 	addi	r2,r4,1
11206ef4:	1085883a 	add	r2,r2,r2
11206ef8:	003e9006 	br	1120693c <__alt_data_end+0xffe8693c>

11206efc <memchr>:
11206efc:	208000cc 	andi	r2,r4,3
11206f00:	280f883a 	mov	r7,r5
11206f04:	10003426 	beq	r2,zero,11206fd8 <memchr+0xdc>
11206f08:	30bfffc4 	addi	r2,r6,-1
11206f0c:	30001a26 	beq	r6,zero,11206f78 <memchr+0x7c>
11206f10:	20c00003 	ldbu	r3,0(r4)
11206f14:	29803fcc 	andi	r6,r5,255
11206f18:	30c0051e 	bne	r6,r3,11206f30 <memchr+0x34>
11206f1c:	00001806 	br	11206f80 <memchr+0x84>
11206f20:	10001526 	beq	r2,zero,11206f78 <memchr+0x7c>
11206f24:	20c00003 	ldbu	r3,0(r4)
11206f28:	10bfffc4 	addi	r2,r2,-1
11206f2c:	30c01426 	beq	r6,r3,11206f80 <memchr+0x84>
11206f30:	21000044 	addi	r4,r4,1
11206f34:	20c000cc 	andi	r3,r4,3
11206f38:	183ff91e 	bne	r3,zero,11206f20 <__alt_data_end+0xffe86f20>
11206f3c:	020000c4 	movi	r8,3
11206f40:	40801136 	bltu	r8,r2,11206f88 <memchr+0x8c>
11206f44:	10000c26 	beq	r2,zero,11206f78 <memchr+0x7c>
11206f48:	20c00003 	ldbu	r3,0(r4)
11206f4c:	29403fcc 	andi	r5,r5,255
11206f50:	28c00b26 	beq	r5,r3,11206f80 <memchr+0x84>
11206f54:	20c00044 	addi	r3,r4,1
11206f58:	39803fcc 	andi	r6,r7,255
11206f5c:	2089883a 	add	r4,r4,r2
11206f60:	00000306 	br	11206f70 <memchr+0x74>
11206f64:	18c00044 	addi	r3,r3,1
11206f68:	197fffc3 	ldbu	r5,-1(r3)
11206f6c:	31400526 	beq	r6,r5,11206f84 <memchr+0x88>
11206f70:	1805883a 	mov	r2,r3
11206f74:	20fffb1e 	bne	r4,r3,11206f64 <__alt_data_end+0xffe86f64>
11206f78:	0005883a 	mov	r2,zero
11206f7c:	f800283a 	ret
11206f80:	2005883a 	mov	r2,r4
11206f84:	f800283a 	ret
11206f88:	28c03fcc 	andi	r3,r5,255
11206f8c:	1812923a 	slli	r9,r3,8
11206f90:	02ffbff4 	movhi	r11,65279
11206f94:	02a02074 	movhi	r10,32897
11206f98:	48d2b03a 	or	r9,r9,r3
11206f9c:	4806943a 	slli	r3,r9,16
11206fa0:	5affbfc4 	addi	r11,r11,-257
11206fa4:	52a02004 	addi	r10,r10,-32640
11206fa8:	48d2b03a 	or	r9,r9,r3
11206fac:	20c00017 	ldw	r3,0(r4)
11206fb0:	48c6f03a 	xor	r3,r9,r3
11206fb4:	1acd883a 	add	r6,r3,r11
11206fb8:	00c6303a 	nor	r3,zero,r3
11206fbc:	30c6703a 	and	r3,r6,r3
11206fc0:	1a86703a 	and	r3,r3,r10
11206fc4:	183fe01e 	bne	r3,zero,11206f48 <__alt_data_end+0xffe86f48>
11206fc8:	10bfff04 	addi	r2,r2,-4
11206fcc:	21000104 	addi	r4,r4,4
11206fd0:	40bff636 	bltu	r8,r2,11206fac <__alt_data_end+0xffe86fac>
11206fd4:	003fdb06 	br	11206f44 <__alt_data_end+0xffe86f44>
11206fd8:	3005883a 	mov	r2,r6
11206fdc:	003fd706 	br	11206f3c <__alt_data_end+0xffe86f3c>

11206fe0 <memcpy>:
11206fe0:	defffd04 	addi	sp,sp,-12
11206fe4:	dfc00215 	stw	ra,8(sp)
11206fe8:	dc400115 	stw	r17,4(sp)
11206fec:	dc000015 	stw	r16,0(sp)
11206ff0:	00c003c4 	movi	r3,15
11206ff4:	2005883a 	mov	r2,r4
11206ff8:	1980452e 	bgeu	r3,r6,11207110 <memcpy+0x130>
11206ffc:	2906b03a 	or	r3,r5,r4
11207000:	18c000cc 	andi	r3,r3,3
11207004:	1800441e 	bne	r3,zero,11207118 <memcpy+0x138>
11207008:	347ffc04 	addi	r17,r6,-16
1120700c:	8822d13a 	srli	r17,r17,4
11207010:	28c00104 	addi	r3,r5,4
11207014:	23400104 	addi	r13,r4,4
11207018:	8820913a 	slli	r16,r17,4
1120701c:	2b000204 	addi	r12,r5,8
11207020:	22c00204 	addi	r11,r4,8
11207024:	84000504 	addi	r16,r16,20
11207028:	2a800304 	addi	r10,r5,12
1120702c:	22400304 	addi	r9,r4,12
11207030:	2c21883a 	add	r16,r5,r16
11207034:	2811883a 	mov	r8,r5
11207038:	200f883a 	mov	r7,r4
1120703c:	41000017 	ldw	r4,0(r8)
11207040:	1fc00017 	ldw	ra,0(r3)
11207044:	63c00017 	ldw	r15,0(r12)
11207048:	39000015 	stw	r4,0(r7)
1120704c:	53800017 	ldw	r14,0(r10)
11207050:	6fc00015 	stw	ra,0(r13)
11207054:	5bc00015 	stw	r15,0(r11)
11207058:	4b800015 	stw	r14,0(r9)
1120705c:	18c00404 	addi	r3,r3,16
11207060:	39c00404 	addi	r7,r7,16
11207064:	42000404 	addi	r8,r8,16
11207068:	6b400404 	addi	r13,r13,16
1120706c:	63000404 	addi	r12,r12,16
11207070:	5ac00404 	addi	r11,r11,16
11207074:	52800404 	addi	r10,r10,16
11207078:	4a400404 	addi	r9,r9,16
1120707c:	1c3fef1e 	bne	r3,r16,1120703c <__alt_data_end+0xffe8703c>
11207080:	89c00044 	addi	r7,r17,1
11207084:	380e913a 	slli	r7,r7,4
11207088:	310003cc 	andi	r4,r6,15
1120708c:	02c000c4 	movi	r11,3
11207090:	11c7883a 	add	r3,r2,r7
11207094:	29cb883a 	add	r5,r5,r7
11207098:	5900212e 	bgeu	r11,r4,11207120 <memcpy+0x140>
1120709c:	1813883a 	mov	r9,r3
112070a0:	2811883a 	mov	r8,r5
112070a4:	200f883a 	mov	r7,r4
112070a8:	42800017 	ldw	r10,0(r8)
112070ac:	4a400104 	addi	r9,r9,4
112070b0:	39ffff04 	addi	r7,r7,-4
112070b4:	4abfff15 	stw	r10,-4(r9)
112070b8:	42000104 	addi	r8,r8,4
112070bc:	59fffa36 	bltu	r11,r7,112070a8 <__alt_data_end+0xffe870a8>
112070c0:	213fff04 	addi	r4,r4,-4
112070c4:	2008d0ba 	srli	r4,r4,2
112070c8:	318000cc 	andi	r6,r6,3
112070cc:	21000044 	addi	r4,r4,1
112070d0:	2109883a 	add	r4,r4,r4
112070d4:	2109883a 	add	r4,r4,r4
112070d8:	1907883a 	add	r3,r3,r4
112070dc:	290b883a 	add	r5,r5,r4
112070e0:	30000626 	beq	r6,zero,112070fc <memcpy+0x11c>
112070e4:	198d883a 	add	r6,r3,r6
112070e8:	29c00003 	ldbu	r7,0(r5)
112070ec:	18c00044 	addi	r3,r3,1
112070f0:	29400044 	addi	r5,r5,1
112070f4:	19ffffc5 	stb	r7,-1(r3)
112070f8:	19bffb1e 	bne	r3,r6,112070e8 <__alt_data_end+0xffe870e8>
112070fc:	dfc00217 	ldw	ra,8(sp)
11207100:	dc400117 	ldw	r17,4(sp)
11207104:	dc000017 	ldw	r16,0(sp)
11207108:	dec00304 	addi	sp,sp,12
1120710c:	f800283a 	ret
11207110:	2007883a 	mov	r3,r4
11207114:	003ff206 	br	112070e0 <__alt_data_end+0xffe870e0>
11207118:	2007883a 	mov	r3,r4
1120711c:	003ff106 	br	112070e4 <__alt_data_end+0xffe870e4>
11207120:	200d883a 	mov	r6,r4
11207124:	003fee06 	br	112070e0 <__alt_data_end+0xffe870e0>

11207128 <memmove>:
11207128:	2005883a 	mov	r2,r4
1120712c:	29000b2e 	bgeu	r5,r4,1120715c <memmove+0x34>
11207130:	298f883a 	add	r7,r5,r6
11207134:	21c0092e 	bgeu	r4,r7,1120715c <memmove+0x34>
11207138:	2187883a 	add	r3,r4,r6
1120713c:	198bc83a 	sub	r5,r3,r6
11207140:	30004826 	beq	r6,zero,11207264 <memmove+0x13c>
11207144:	39ffffc4 	addi	r7,r7,-1
11207148:	39000003 	ldbu	r4,0(r7)
1120714c:	18ffffc4 	addi	r3,r3,-1
11207150:	19000005 	stb	r4,0(r3)
11207154:	28fffb1e 	bne	r5,r3,11207144 <__alt_data_end+0xffe87144>
11207158:	f800283a 	ret
1120715c:	00c003c4 	movi	r3,15
11207160:	1980412e 	bgeu	r3,r6,11207268 <memmove+0x140>
11207164:	2886b03a 	or	r3,r5,r2
11207168:	18c000cc 	andi	r3,r3,3
1120716c:	1800401e 	bne	r3,zero,11207270 <memmove+0x148>
11207170:	33fffc04 	addi	r15,r6,-16
11207174:	781ed13a 	srli	r15,r15,4
11207178:	28c00104 	addi	r3,r5,4
1120717c:	13400104 	addi	r13,r2,4
11207180:	781c913a 	slli	r14,r15,4
11207184:	2b000204 	addi	r12,r5,8
11207188:	12c00204 	addi	r11,r2,8
1120718c:	73800504 	addi	r14,r14,20
11207190:	2a800304 	addi	r10,r5,12
11207194:	12400304 	addi	r9,r2,12
11207198:	2b9d883a 	add	r14,r5,r14
1120719c:	2811883a 	mov	r8,r5
112071a0:	100f883a 	mov	r7,r2
112071a4:	41000017 	ldw	r4,0(r8)
112071a8:	39c00404 	addi	r7,r7,16
112071ac:	18c00404 	addi	r3,r3,16
112071b0:	393ffc15 	stw	r4,-16(r7)
112071b4:	193ffc17 	ldw	r4,-16(r3)
112071b8:	6b400404 	addi	r13,r13,16
112071bc:	5ac00404 	addi	r11,r11,16
112071c0:	693ffc15 	stw	r4,-16(r13)
112071c4:	61000017 	ldw	r4,0(r12)
112071c8:	4a400404 	addi	r9,r9,16
112071cc:	42000404 	addi	r8,r8,16
112071d0:	593ffc15 	stw	r4,-16(r11)
112071d4:	51000017 	ldw	r4,0(r10)
112071d8:	63000404 	addi	r12,r12,16
112071dc:	52800404 	addi	r10,r10,16
112071e0:	493ffc15 	stw	r4,-16(r9)
112071e4:	1bbfef1e 	bne	r3,r14,112071a4 <__alt_data_end+0xffe871a4>
112071e8:	79000044 	addi	r4,r15,1
112071ec:	2008913a 	slli	r4,r4,4
112071f0:	328003cc 	andi	r10,r6,15
112071f4:	02c000c4 	movi	r11,3
112071f8:	1107883a 	add	r3,r2,r4
112071fc:	290b883a 	add	r5,r5,r4
11207200:	5a801e2e 	bgeu	r11,r10,1120727c <memmove+0x154>
11207204:	1813883a 	mov	r9,r3
11207208:	2811883a 	mov	r8,r5
1120720c:	500f883a 	mov	r7,r10
11207210:	41000017 	ldw	r4,0(r8)
11207214:	4a400104 	addi	r9,r9,4
11207218:	39ffff04 	addi	r7,r7,-4
1120721c:	493fff15 	stw	r4,-4(r9)
11207220:	42000104 	addi	r8,r8,4
11207224:	59fffa36 	bltu	r11,r7,11207210 <__alt_data_end+0xffe87210>
11207228:	513fff04 	addi	r4,r10,-4
1120722c:	2008d0ba 	srli	r4,r4,2
11207230:	318000cc 	andi	r6,r6,3
11207234:	21000044 	addi	r4,r4,1
11207238:	2109883a 	add	r4,r4,r4
1120723c:	2109883a 	add	r4,r4,r4
11207240:	1907883a 	add	r3,r3,r4
11207244:	290b883a 	add	r5,r5,r4
11207248:	30000b26 	beq	r6,zero,11207278 <memmove+0x150>
1120724c:	198d883a 	add	r6,r3,r6
11207250:	29c00003 	ldbu	r7,0(r5)
11207254:	18c00044 	addi	r3,r3,1
11207258:	29400044 	addi	r5,r5,1
1120725c:	19ffffc5 	stb	r7,-1(r3)
11207260:	19bffb1e 	bne	r3,r6,11207250 <__alt_data_end+0xffe87250>
11207264:	f800283a 	ret
11207268:	1007883a 	mov	r3,r2
1120726c:	003ff606 	br	11207248 <__alt_data_end+0xffe87248>
11207270:	1007883a 	mov	r3,r2
11207274:	003ff506 	br	1120724c <__alt_data_end+0xffe8724c>
11207278:	f800283a 	ret
1120727c:	500d883a 	mov	r6,r10
11207280:	003ff106 	br	11207248 <__alt_data_end+0xffe87248>

11207284 <memset>:
11207284:	20c000cc 	andi	r3,r4,3
11207288:	2005883a 	mov	r2,r4
1120728c:	18004426 	beq	r3,zero,112073a0 <memset+0x11c>
11207290:	31ffffc4 	addi	r7,r6,-1
11207294:	30004026 	beq	r6,zero,11207398 <memset+0x114>
11207298:	2813883a 	mov	r9,r5
1120729c:	200d883a 	mov	r6,r4
112072a0:	2007883a 	mov	r3,r4
112072a4:	00000406 	br	112072b8 <memset+0x34>
112072a8:	3a3fffc4 	addi	r8,r7,-1
112072ac:	31800044 	addi	r6,r6,1
112072b0:	38003926 	beq	r7,zero,11207398 <memset+0x114>
112072b4:	400f883a 	mov	r7,r8
112072b8:	18c00044 	addi	r3,r3,1
112072bc:	32400005 	stb	r9,0(r6)
112072c0:	1a0000cc 	andi	r8,r3,3
112072c4:	403ff81e 	bne	r8,zero,112072a8 <__alt_data_end+0xffe872a8>
112072c8:	010000c4 	movi	r4,3
112072cc:	21c02d2e 	bgeu	r4,r7,11207384 <memset+0x100>
112072d0:	29003fcc 	andi	r4,r5,255
112072d4:	200c923a 	slli	r6,r4,8
112072d8:	3108b03a 	or	r4,r6,r4
112072dc:	200c943a 	slli	r6,r4,16
112072e0:	218cb03a 	or	r6,r4,r6
112072e4:	010003c4 	movi	r4,15
112072e8:	21c0182e 	bgeu	r4,r7,1120734c <memset+0xc8>
112072ec:	3b3ffc04 	addi	r12,r7,-16
112072f0:	6018d13a 	srli	r12,r12,4
112072f4:	1a000104 	addi	r8,r3,4
112072f8:	1ac00204 	addi	r11,r3,8
112072fc:	6008913a 	slli	r4,r12,4
11207300:	1a800304 	addi	r10,r3,12
11207304:	1813883a 	mov	r9,r3
11207308:	21000504 	addi	r4,r4,20
1120730c:	1909883a 	add	r4,r3,r4
11207310:	49800015 	stw	r6,0(r9)
11207314:	41800015 	stw	r6,0(r8)
11207318:	59800015 	stw	r6,0(r11)
1120731c:	51800015 	stw	r6,0(r10)
11207320:	42000404 	addi	r8,r8,16
11207324:	4a400404 	addi	r9,r9,16
11207328:	5ac00404 	addi	r11,r11,16
1120732c:	52800404 	addi	r10,r10,16
11207330:	413ff71e 	bne	r8,r4,11207310 <__alt_data_end+0xffe87310>
11207334:	63000044 	addi	r12,r12,1
11207338:	6018913a 	slli	r12,r12,4
1120733c:	39c003cc 	andi	r7,r7,15
11207340:	010000c4 	movi	r4,3
11207344:	1b07883a 	add	r3,r3,r12
11207348:	21c00e2e 	bgeu	r4,r7,11207384 <memset+0x100>
1120734c:	1813883a 	mov	r9,r3
11207350:	3811883a 	mov	r8,r7
11207354:	010000c4 	movi	r4,3
11207358:	49800015 	stw	r6,0(r9)
1120735c:	423fff04 	addi	r8,r8,-4
11207360:	4a400104 	addi	r9,r9,4
11207364:	223ffc36 	bltu	r4,r8,11207358 <__alt_data_end+0xffe87358>
11207368:	393fff04 	addi	r4,r7,-4
1120736c:	2008d0ba 	srli	r4,r4,2
11207370:	39c000cc 	andi	r7,r7,3
11207374:	21000044 	addi	r4,r4,1
11207378:	2109883a 	add	r4,r4,r4
1120737c:	2109883a 	add	r4,r4,r4
11207380:	1907883a 	add	r3,r3,r4
11207384:	38000526 	beq	r7,zero,1120739c <memset+0x118>
11207388:	19cf883a 	add	r7,r3,r7
1120738c:	19400005 	stb	r5,0(r3)
11207390:	18c00044 	addi	r3,r3,1
11207394:	38fffd1e 	bne	r7,r3,1120738c <__alt_data_end+0xffe8738c>
11207398:	f800283a 	ret
1120739c:	f800283a 	ret
112073a0:	2007883a 	mov	r3,r4
112073a4:	300f883a 	mov	r7,r6
112073a8:	003fc706 	br	112072c8 <__alt_data_end+0xffe872c8>

112073ac <_Balloc>:
112073ac:	20801317 	ldw	r2,76(r4)
112073b0:	defffc04 	addi	sp,sp,-16
112073b4:	dc400115 	stw	r17,4(sp)
112073b8:	dc000015 	stw	r16,0(sp)
112073bc:	dfc00315 	stw	ra,12(sp)
112073c0:	dc800215 	stw	r18,8(sp)
112073c4:	2023883a 	mov	r17,r4
112073c8:	2821883a 	mov	r16,r5
112073cc:	10000f26 	beq	r2,zero,1120740c <_Balloc+0x60>
112073d0:	8407883a 	add	r3,r16,r16
112073d4:	18c7883a 	add	r3,r3,r3
112073d8:	10c7883a 	add	r3,r2,r3
112073dc:	18800017 	ldw	r2,0(r3)
112073e0:	10001126 	beq	r2,zero,11207428 <_Balloc+0x7c>
112073e4:	11000017 	ldw	r4,0(r2)
112073e8:	19000015 	stw	r4,0(r3)
112073ec:	10000415 	stw	zero,16(r2)
112073f0:	10000315 	stw	zero,12(r2)
112073f4:	dfc00317 	ldw	ra,12(sp)
112073f8:	dc800217 	ldw	r18,8(sp)
112073fc:	dc400117 	ldw	r17,4(sp)
11207400:	dc000017 	ldw	r16,0(sp)
11207404:	dec00404 	addi	sp,sp,16
11207408:	f800283a 	ret
1120740c:	01800844 	movi	r6,33
11207410:	01400104 	movi	r5,4
11207414:	120a5a80 	call	1120a5a8 <_calloc_r>
11207418:	88801315 	stw	r2,76(r17)
1120741c:	103fec1e 	bne	r2,zero,112073d0 <__alt_data_end+0xffe873d0>
11207420:	0005883a 	mov	r2,zero
11207424:	003ff306 	br	112073f4 <__alt_data_end+0xffe873f4>
11207428:	01400044 	movi	r5,1
1120742c:	2c24983a 	sll	r18,r5,r16
11207430:	8809883a 	mov	r4,r17
11207434:	91800144 	addi	r6,r18,5
11207438:	318d883a 	add	r6,r6,r6
1120743c:	318d883a 	add	r6,r6,r6
11207440:	120a5a80 	call	1120a5a8 <_calloc_r>
11207444:	103ff626 	beq	r2,zero,11207420 <__alt_data_end+0xffe87420>
11207448:	14000115 	stw	r16,4(r2)
1120744c:	14800215 	stw	r18,8(r2)
11207450:	003fe606 	br	112073ec <__alt_data_end+0xffe873ec>

11207454 <_Bfree>:
11207454:	28000826 	beq	r5,zero,11207478 <_Bfree+0x24>
11207458:	28c00117 	ldw	r3,4(r5)
1120745c:	20801317 	ldw	r2,76(r4)
11207460:	18c7883a 	add	r3,r3,r3
11207464:	18c7883a 	add	r3,r3,r3
11207468:	10c5883a 	add	r2,r2,r3
1120746c:	10c00017 	ldw	r3,0(r2)
11207470:	28c00015 	stw	r3,0(r5)
11207474:	11400015 	stw	r5,0(r2)
11207478:	f800283a 	ret

1120747c <__multadd>:
1120747c:	defffa04 	addi	sp,sp,-24
11207480:	dc800315 	stw	r18,12(sp)
11207484:	dc400215 	stw	r17,8(sp)
11207488:	dc000115 	stw	r16,4(sp)
1120748c:	2823883a 	mov	r17,r5
11207490:	2c000417 	ldw	r16,16(r5)
11207494:	dfc00515 	stw	ra,20(sp)
11207498:	dcc00415 	stw	r19,16(sp)
1120749c:	2025883a 	mov	r18,r4
112074a0:	29400504 	addi	r5,r5,20
112074a4:	0011883a 	mov	r8,zero
112074a8:	28c00017 	ldw	r3,0(r5)
112074ac:	29400104 	addi	r5,r5,4
112074b0:	42000044 	addi	r8,r8,1
112074b4:	18bfffcc 	andi	r2,r3,65535
112074b8:	1185383a 	mul	r2,r2,r6
112074bc:	1806d43a 	srli	r3,r3,16
112074c0:	11cf883a 	add	r7,r2,r7
112074c4:	3808d43a 	srli	r4,r7,16
112074c8:	1987383a 	mul	r3,r3,r6
112074cc:	38bfffcc 	andi	r2,r7,65535
112074d0:	1907883a 	add	r3,r3,r4
112074d4:	1808943a 	slli	r4,r3,16
112074d8:	180ed43a 	srli	r7,r3,16
112074dc:	2085883a 	add	r2,r4,r2
112074e0:	28bfff15 	stw	r2,-4(r5)
112074e4:	443ff016 	blt	r8,r16,112074a8 <__alt_data_end+0xffe874a8>
112074e8:	38000926 	beq	r7,zero,11207510 <__multadd+0x94>
112074ec:	88800217 	ldw	r2,8(r17)
112074f0:	80800f0e 	bge	r16,r2,11207530 <__multadd+0xb4>
112074f4:	80800144 	addi	r2,r16,5
112074f8:	1085883a 	add	r2,r2,r2
112074fc:	1085883a 	add	r2,r2,r2
11207500:	8885883a 	add	r2,r17,r2
11207504:	11c00015 	stw	r7,0(r2)
11207508:	84000044 	addi	r16,r16,1
1120750c:	8c000415 	stw	r16,16(r17)
11207510:	8805883a 	mov	r2,r17
11207514:	dfc00517 	ldw	ra,20(sp)
11207518:	dcc00417 	ldw	r19,16(sp)
1120751c:	dc800317 	ldw	r18,12(sp)
11207520:	dc400217 	ldw	r17,8(sp)
11207524:	dc000117 	ldw	r16,4(sp)
11207528:	dec00604 	addi	sp,sp,24
1120752c:	f800283a 	ret
11207530:	89400117 	ldw	r5,4(r17)
11207534:	9009883a 	mov	r4,r18
11207538:	d9c00015 	stw	r7,0(sp)
1120753c:	29400044 	addi	r5,r5,1
11207540:	12073ac0 	call	112073ac <_Balloc>
11207544:	89800417 	ldw	r6,16(r17)
11207548:	89400304 	addi	r5,r17,12
1120754c:	11000304 	addi	r4,r2,12
11207550:	31800084 	addi	r6,r6,2
11207554:	318d883a 	add	r6,r6,r6
11207558:	318d883a 	add	r6,r6,r6
1120755c:	1027883a 	mov	r19,r2
11207560:	1206fe00 	call	11206fe0 <memcpy>
11207564:	d9c00017 	ldw	r7,0(sp)
11207568:	88000a26 	beq	r17,zero,11207594 <__multadd+0x118>
1120756c:	88c00117 	ldw	r3,4(r17)
11207570:	90801317 	ldw	r2,76(r18)
11207574:	18c7883a 	add	r3,r3,r3
11207578:	18c7883a 	add	r3,r3,r3
1120757c:	10c5883a 	add	r2,r2,r3
11207580:	10c00017 	ldw	r3,0(r2)
11207584:	88c00015 	stw	r3,0(r17)
11207588:	14400015 	stw	r17,0(r2)
1120758c:	9823883a 	mov	r17,r19
11207590:	003fd806 	br	112074f4 <__alt_data_end+0xffe874f4>
11207594:	9823883a 	mov	r17,r19
11207598:	003fd606 	br	112074f4 <__alt_data_end+0xffe874f4>

1120759c <__s2b>:
1120759c:	defff904 	addi	sp,sp,-28
112075a0:	dc400115 	stw	r17,4(sp)
112075a4:	dc000015 	stw	r16,0(sp)
112075a8:	2023883a 	mov	r17,r4
112075ac:	2821883a 	mov	r16,r5
112075b0:	39000204 	addi	r4,r7,8
112075b4:	01400244 	movi	r5,9
112075b8:	dcc00315 	stw	r19,12(sp)
112075bc:	dc800215 	stw	r18,8(sp)
112075c0:	dfc00615 	stw	ra,24(sp)
112075c4:	dd400515 	stw	r21,20(sp)
112075c8:	dd000415 	stw	r20,16(sp)
112075cc:	3825883a 	mov	r18,r7
112075d0:	3027883a 	mov	r19,r6
112075d4:	12013400 	call	11201340 <__divsi3>
112075d8:	00c00044 	movi	r3,1
112075dc:	000b883a 	mov	r5,zero
112075e0:	1880030e 	bge	r3,r2,112075f0 <__s2b+0x54>
112075e4:	18c7883a 	add	r3,r3,r3
112075e8:	29400044 	addi	r5,r5,1
112075ec:	18bffd16 	blt	r3,r2,112075e4 <__alt_data_end+0xffe875e4>
112075f0:	8809883a 	mov	r4,r17
112075f4:	12073ac0 	call	112073ac <_Balloc>
112075f8:	d8c00717 	ldw	r3,28(sp)
112075fc:	10c00515 	stw	r3,20(r2)
11207600:	00c00044 	movi	r3,1
11207604:	10c00415 	stw	r3,16(r2)
11207608:	00c00244 	movi	r3,9
1120760c:	1cc0210e 	bge	r3,r19,11207694 <__s2b+0xf8>
11207610:	80eb883a 	add	r21,r16,r3
11207614:	a829883a 	mov	r20,r21
11207618:	84e1883a 	add	r16,r16,r19
1120761c:	a1c00007 	ldb	r7,0(r20)
11207620:	01800284 	movi	r6,10
11207624:	a5000044 	addi	r20,r20,1
11207628:	100b883a 	mov	r5,r2
1120762c:	39fff404 	addi	r7,r7,-48
11207630:	8809883a 	mov	r4,r17
11207634:	120747c0 	call	1120747c <__multadd>
11207638:	a43ff81e 	bne	r20,r16,1120761c <__alt_data_end+0xffe8761c>
1120763c:	ace1883a 	add	r16,r21,r19
11207640:	843ffe04 	addi	r16,r16,-8
11207644:	9c800a0e 	bge	r19,r18,11207670 <__s2b+0xd4>
11207648:	94e5c83a 	sub	r18,r18,r19
1120764c:	84a5883a 	add	r18,r16,r18
11207650:	81c00007 	ldb	r7,0(r16)
11207654:	01800284 	movi	r6,10
11207658:	84000044 	addi	r16,r16,1
1120765c:	100b883a 	mov	r5,r2
11207660:	39fff404 	addi	r7,r7,-48
11207664:	8809883a 	mov	r4,r17
11207668:	120747c0 	call	1120747c <__multadd>
1120766c:	84bff81e 	bne	r16,r18,11207650 <__alt_data_end+0xffe87650>
11207670:	dfc00617 	ldw	ra,24(sp)
11207674:	dd400517 	ldw	r21,20(sp)
11207678:	dd000417 	ldw	r20,16(sp)
1120767c:	dcc00317 	ldw	r19,12(sp)
11207680:	dc800217 	ldw	r18,8(sp)
11207684:	dc400117 	ldw	r17,4(sp)
11207688:	dc000017 	ldw	r16,0(sp)
1120768c:	dec00704 	addi	sp,sp,28
11207690:	f800283a 	ret
11207694:	84000284 	addi	r16,r16,10
11207698:	1827883a 	mov	r19,r3
1120769c:	003fe906 	br	11207644 <__alt_data_end+0xffe87644>

112076a0 <__hi0bits>:
112076a0:	20bfffec 	andhi	r2,r4,65535
112076a4:	1000141e 	bne	r2,zero,112076f8 <__hi0bits+0x58>
112076a8:	2008943a 	slli	r4,r4,16
112076ac:	00800404 	movi	r2,16
112076b0:	20ffc02c 	andhi	r3,r4,65280
112076b4:	1800021e 	bne	r3,zero,112076c0 <__hi0bits+0x20>
112076b8:	2008923a 	slli	r4,r4,8
112076bc:	10800204 	addi	r2,r2,8
112076c0:	20fc002c 	andhi	r3,r4,61440
112076c4:	1800021e 	bne	r3,zero,112076d0 <__hi0bits+0x30>
112076c8:	2008913a 	slli	r4,r4,4
112076cc:	10800104 	addi	r2,r2,4
112076d0:	20f0002c 	andhi	r3,r4,49152
112076d4:	1800031e 	bne	r3,zero,112076e4 <__hi0bits+0x44>
112076d8:	2109883a 	add	r4,r4,r4
112076dc:	10800084 	addi	r2,r2,2
112076e0:	2109883a 	add	r4,r4,r4
112076e4:	20000316 	blt	r4,zero,112076f4 <__hi0bits+0x54>
112076e8:	2110002c 	andhi	r4,r4,16384
112076ec:	2000041e 	bne	r4,zero,11207700 <__hi0bits+0x60>
112076f0:	00800804 	movi	r2,32
112076f4:	f800283a 	ret
112076f8:	0005883a 	mov	r2,zero
112076fc:	003fec06 	br	112076b0 <__alt_data_end+0xffe876b0>
11207700:	10800044 	addi	r2,r2,1
11207704:	f800283a 	ret

11207708 <__lo0bits>:
11207708:	20c00017 	ldw	r3,0(r4)
1120770c:	188001cc 	andi	r2,r3,7
11207710:	10000826 	beq	r2,zero,11207734 <__lo0bits+0x2c>
11207714:	1880004c 	andi	r2,r3,1
11207718:	1000211e 	bne	r2,zero,112077a0 <__lo0bits+0x98>
1120771c:	1880008c 	andi	r2,r3,2
11207720:	1000211e 	bne	r2,zero,112077a8 <__lo0bits+0xa0>
11207724:	1806d0ba 	srli	r3,r3,2
11207728:	00800084 	movi	r2,2
1120772c:	20c00015 	stw	r3,0(r4)
11207730:	f800283a 	ret
11207734:	18bfffcc 	andi	r2,r3,65535
11207738:	10001326 	beq	r2,zero,11207788 <__lo0bits+0x80>
1120773c:	0005883a 	mov	r2,zero
11207740:	19403fcc 	andi	r5,r3,255
11207744:	2800021e 	bne	r5,zero,11207750 <__lo0bits+0x48>
11207748:	1806d23a 	srli	r3,r3,8
1120774c:	10800204 	addi	r2,r2,8
11207750:	194003cc 	andi	r5,r3,15
11207754:	2800021e 	bne	r5,zero,11207760 <__lo0bits+0x58>
11207758:	1806d13a 	srli	r3,r3,4
1120775c:	10800104 	addi	r2,r2,4
11207760:	194000cc 	andi	r5,r3,3
11207764:	2800021e 	bne	r5,zero,11207770 <__lo0bits+0x68>
11207768:	1806d0ba 	srli	r3,r3,2
1120776c:	10800084 	addi	r2,r2,2
11207770:	1940004c 	andi	r5,r3,1
11207774:	2800081e 	bne	r5,zero,11207798 <__lo0bits+0x90>
11207778:	1806d07a 	srli	r3,r3,1
1120777c:	1800051e 	bne	r3,zero,11207794 <__lo0bits+0x8c>
11207780:	00800804 	movi	r2,32
11207784:	f800283a 	ret
11207788:	1806d43a 	srli	r3,r3,16
1120778c:	00800404 	movi	r2,16
11207790:	003feb06 	br	11207740 <__alt_data_end+0xffe87740>
11207794:	10800044 	addi	r2,r2,1
11207798:	20c00015 	stw	r3,0(r4)
1120779c:	f800283a 	ret
112077a0:	0005883a 	mov	r2,zero
112077a4:	f800283a 	ret
112077a8:	1806d07a 	srli	r3,r3,1
112077ac:	00800044 	movi	r2,1
112077b0:	20c00015 	stw	r3,0(r4)
112077b4:	f800283a 	ret

112077b8 <__i2b>:
112077b8:	defffd04 	addi	sp,sp,-12
112077bc:	dc000015 	stw	r16,0(sp)
112077c0:	04000044 	movi	r16,1
112077c4:	dc400115 	stw	r17,4(sp)
112077c8:	2823883a 	mov	r17,r5
112077cc:	800b883a 	mov	r5,r16
112077d0:	dfc00215 	stw	ra,8(sp)
112077d4:	12073ac0 	call	112073ac <_Balloc>
112077d8:	14400515 	stw	r17,20(r2)
112077dc:	14000415 	stw	r16,16(r2)
112077e0:	dfc00217 	ldw	ra,8(sp)
112077e4:	dc400117 	ldw	r17,4(sp)
112077e8:	dc000017 	ldw	r16,0(sp)
112077ec:	dec00304 	addi	sp,sp,12
112077f0:	f800283a 	ret

112077f4 <__multiply>:
112077f4:	defffa04 	addi	sp,sp,-24
112077f8:	dcc00315 	stw	r19,12(sp)
112077fc:	dc800215 	stw	r18,8(sp)
11207800:	34c00417 	ldw	r19,16(r6)
11207804:	2c800417 	ldw	r18,16(r5)
11207808:	dd000415 	stw	r20,16(sp)
1120780c:	dc400115 	stw	r17,4(sp)
11207810:	dfc00515 	stw	ra,20(sp)
11207814:	dc000015 	stw	r16,0(sp)
11207818:	2829883a 	mov	r20,r5
1120781c:	3023883a 	mov	r17,r6
11207820:	94c0050e 	bge	r18,r19,11207838 <__multiply+0x44>
11207824:	9007883a 	mov	r3,r18
11207828:	3029883a 	mov	r20,r6
1120782c:	9825883a 	mov	r18,r19
11207830:	2823883a 	mov	r17,r5
11207834:	1827883a 	mov	r19,r3
11207838:	a0800217 	ldw	r2,8(r20)
1120783c:	94e1883a 	add	r16,r18,r19
11207840:	a1400117 	ldw	r5,4(r20)
11207844:	1400010e 	bge	r2,r16,1120784c <__multiply+0x58>
11207848:	29400044 	addi	r5,r5,1
1120784c:	12073ac0 	call	112073ac <_Balloc>
11207850:	8415883a 	add	r10,r16,r16
11207854:	12c00504 	addi	r11,r2,20
11207858:	5295883a 	add	r10,r10,r10
1120785c:	5a95883a 	add	r10,r11,r10
11207860:	5807883a 	mov	r3,r11
11207864:	5a80032e 	bgeu	r11,r10,11207874 <__multiply+0x80>
11207868:	18000015 	stw	zero,0(r3)
1120786c:	18c00104 	addi	r3,r3,4
11207870:	1abffd36 	bltu	r3,r10,11207868 <__alt_data_end+0xffe87868>
11207874:	9ce7883a 	add	r19,r19,r19
11207878:	94a5883a 	add	r18,r18,r18
1120787c:	89800504 	addi	r6,r17,20
11207880:	9ce7883a 	add	r19,r19,r19
11207884:	a3400504 	addi	r13,r20,20
11207888:	94a5883a 	add	r18,r18,r18
1120788c:	34d9883a 	add	r12,r6,r19
11207890:	6c93883a 	add	r9,r13,r18
11207894:	3300422e 	bgeu	r6,r12,112079a0 <__multiply+0x1ac>
11207898:	37c00017 	ldw	ra,0(r6)
1120789c:	fbffffcc 	andi	r15,ra,65535
112078a0:	78001b26 	beq	r15,zero,11207910 <__multiply+0x11c>
112078a4:	5811883a 	mov	r8,r11
112078a8:	681d883a 	mov	r14,r13
112078ac:	000f883a 	mov	r7,zero
112078b0:	71000017 	ldw	r4,0(r14)
112078b4:	40c00017 	ldw	r3,0(r8)
112078b8:	73800104 	addi	r14,r14,4
112078bc:	217fffcc 	andi	r5,r4,65535
112078c0:	2bcb383a 	mul	r5,r5,r15
112078c4:	2008d43a 	srli	r4,r4,16
112078c8:	1c7fffcc 	andi	r17,r3,65535
112078cc:	2c4b883a 	add	r5,r5,r17
112078d0:	29cb883a 	add	r5,r5,r7
112078d4:	23c9383a 	mul	r4,r4,r15
112078d8:	1806d43a 	srli	r3,r3,16
112078dc:	280ed43a 	srli	r7,r5,16
112078e0:	297fffcc 	andi	r5,r5,65535
112078e4:	20c7883a 	add	r3,r4,r3
112078e8:	19c7883a 	add	r3,r3,r7
112078ec:	1808943a 	slli	r4,r3,16
112078f0:	4023883a 	mov	r17,r8
112078f4:	180ed43a 	srli	r7,r3,16
112078f8:	214ab03a 	or	r5,r4,r5
112078fc:	41400015 	stw	r5,0(r8)
11207900:	42000104 	addi	r8,r8,4
11207904:	727fea36 	bltu	r14,r9,112078b0 <__alt_data_end+0xffe878b0>
11207908:	89c00115 	stw	r7,4(r17)
1120790c:	37c00017 	ldw	ra,0(r6)
11207910:	f83ed43a 	srli	ra,ra,16
11207914:	f8001f26 	beq	ra,zero,11207994 <__multiply+0x1a0>
11207918:	58c00017 	ldw	r3,0(r11)
1120791c:	681d883a 	mov	r14,r13
11207920:	581f883a 	mov	r15,r11
11207924:	1811883a 	mov	r8,r3
11207928:	5825883a 	mov	r18,r11
1120792c:	000f883a 	mov	r7,zero
11207930:	00000106 	br	11207938 <__multiply+0x144>
11207934:	8825883a 	mov	r18,r17
11207938:	7140000b 	ldhu	r5,0(r14)
1120793c:	4010d43a 	srli	r8,r8,16
11207940:	193fffcc 	andi	r4,r3,65535
11207944:	2fcb383a 	mul	r5,r5,ra
11207948:	7bc00104 	addi	r15,r15,4
1120794c:	73800104 	addi	r14,r14,4
11207950:	2a0b883a 	add	r5,r5,r8
11207954:	29cb883a 	add	r5,r5,r7
11207958:	2806943a 	slli	r3,r5,16
1120795c:	94400104 	addi	r17,r18,4
11207960:	280ad43a 	srli	r5,r5,16
11207964:	1908b03a 	or	r4,r3,r4
11207968:	793fff15 	stw	r4,-4(r15)
1120796c:	70ffff17 	ldw	r3,-4(r14)
11207970:	8a000017 	ldw	r8,0(r17)
11207974:	1806d43a 	srli	r3,r3,16
11207978:	413fffcc 	andi	r4,r8,65535
1120797c:	1fc7383a 	mul	r3,r3,ra
11207980:	1907883a 	add	r3,r3,r4
11207984:	1947883a 	add	r3,r3,r5
11207988:	180ed43a 	srli	r7,r3,16
1120798c:	727fe936 	bltu	r14,r9,11207934 <__alt_data_end+0xffe87934>
11207990:	90c00115 	stw	r3,4(r18)
11207994:	31800104 	addi	r6,r6,4
11207998:	5ac00104 	addi	r11,r11,4
1120799c:	333fbe36 	bltu	r6,r12,11207898 <__alt_data_end+0xffe87898>
112079a0:	0400090e 	bge	zero,r16,112079c8 <__multiply+0x1d4>
112079a4:	50ffff17 	ldw	r3,-4(r10)
112079a8:	52bfff04 	addi	r10,r10,-4
112079ac:	18000326 	beq	r3,zero,112079bc <__multiply+0x1c8>
112079b0:	00000506 	br	112079c8 <__multiply+0x1d4>
112079b4:	50c00017 	ldw	r3,0(r10)
112079b8:	1800031e 	bne	r3,zero,112079c8 <__multiply+0x1d4>
112079bc:	843fffc4 	addi	r16,r16,-1
112079c0:	52bfff04 	addi	r10,r10,-4
112079c4:	803ffb1e 	bne	r16,zero,112079b4 <__alt_data_end+0xffe879b4>
112079c8:	14000415 	stw	r16,16(r2)
112079cc:	dfc00517 	ldw	ra,20(sp)
112079d0:	dd000417 	ldw	r20,16(sp)
112079d4:	dcc00317 	ldw	r19,12(sp)
112079d8:	dc800217 	ldw	r18,8(sp)
112079dc:	dc400117 	ldw	r17,4(sp)
112079e0:	dc000017 	ldw	r16,0(sp)
112079e4:	dec00604 	addi	sp,sp,24
112079e8:	f800283a 	ret

112079ec <__pow5mult>:
112079ec:	defffa04 	addi	sp,sp,-24
112079f0:	dcc00315 	stw	r19,12(sp)
112079f4:	dc000015 	stw	r16,0(sp)
112079f8:	dfc00515 	stw	ra,20(sp)
112079fc:	dd000415 	stw	r20,16(sp)
11207a00:	dc800215 	stw	r18,8(sp)
11207a04:	dc400115 	stw	r17,4(sp)
11207a08:	308000cc 	andi	r2,r6,3
11207a0c:	3021883a 	mov	r16,r6
11207a10:	2027883a 	mov	r19,r4
11207a14:	10002f1e 	bne	r2,zero,11207ad4 <__pow5mult+0xe8>
11207a18:	2825883a 	mov	r18,r5
11207a1c:	8021d0ba 	srai	r16,r16,2
11207a20:	80001a26 	beq	r16,zero,11207a8c <__pow5mult+0xa0>
11207a24:	9c401217 	ldw	r17,72(r19)
11207a28:	8800061e 	bne	r17,zero,11207a44 <__pow5mult+0x58>
11207a2c:	00003406 	br	11207b00 <__pow5mult+0x114>
11207a30:	8021d07a 	srai	r16,r16,1
11207a34:	80001526 	beq	r16,zero,11207a8c <__pow5mult+0xa0>
11207a38:	88800017 	ldw	r2,0(r17)
11207a3c:	10001c26 	beq	r2,zero,11207ab0 <__pow5mult+0xc4>
11207a40:	1023883a 	mov	r17,r2
11207a44:	8080004c 	andi	r2,r16,1
11207a48:	103ff926 	beq	r2,zero,11207a30 <__alt_data_end+0xffe87a30>
11207a4c:	880d883a 	mov	r6,r17
11207a50:	900b883a 	mov	r5,r18
11207a54:	9809883a 	mov	r4,r19
11207a58:	12077f40 	call	112077f4 <__multiply>
11207a5c:	90001b26 	beq	r18,zero,11207acc <__pow5mult+0xe0>
11207a60:	91000117 	ldw	r4,4(r18)
11207a64:	98c01317 	ldw	r3,76(r19)
11207a68:	8021d07a 	srai	r16,r16,1
11207a6c:	2109883a 	add	r4,r4,r4
11207a70:	2109883a 	add	r4,r4,r4
11207a74:	1907883a 	add	r3,r3,r4
11207a78:	19000017 	ldw	r4,0(r3)
11207a7c:	91000015 	stw	r4,0(r18)
11207a80:	1c800015 	stw	r18,0(r3)
11207a84:	1025883a 	mov	r18,r2
11207a88:	803feb1e 	bne	r16,zero,11207a38 <__alt_data_end+0xffe87a38>
11207a8c:	9005883a 	mov	r2,r18
11207a90:	dfc00517 	ldw	ra,20(sp)
11207a94:	dd000417 	ldw	r20,16(sp)
11207a98:	dcc00317 	ldw	r19,12(sp)
11207a9c:	dc800217 	ldw	r18,8(sp)
11207aa0:	dc400117 	ldw	r17,4(sp)
11207aa4:	dc000017 	ldw	r16,0(sp)
11207aa8:	dec00604 	addi	sp,sp,24
11207aac:	f800283a 	ret
11207ab0:	880d883a 	mov	r6,r17
11207ab4:	880b883a 	mov	r5,r17
11207ab8:	9809883a 	mov	r4,r19
11207abc:	12077f40 	call	112077f4 <__multiply>
11207ac0:	88800015 	stw	r2,0(r17)
11207ac4:	10000015 	stw	zero,0(r2)
11207ac8:	003fdd06 	br	11207a40 <__alt_data_end+0xffe87a40>
11207acc:	1025883a 	mov	r18,r2
11207ad0:	003fd706 	br	11207a30 <__alt_data_end+0xffe87a30>
11207ad4:	10bfffc4 	addi	r2,r2,-1
11207ad8:	1085883a 	add	r2,r2,r2
11207adc:	00c44874 	movhi	r3,4385
11207ae0:	18c16504 	addi	r3,r3,1428
11207ae4:	1085883a 	add	r2,r2,r2
11207ae8:	1885883a 	add	r2,r3,r2
11207aec:	11800017 	ldw	r6,0(r2)
11207af0:	000f883a 	mov	r7,zero
11207af4:	120747c0 	call	1120747c <__multadd>
11207af8:	1025883a 	mov	r18,r2
11207afc:	003fc706 	br	11207a1c <__alt_data_end+0xffe87a1c>
11207b00:	05000044 	movi	r20,1
11207b04:	a00b883a 	mov	r5,r20
11207b08:	9809883a 	mov	r4,r19
11207b0c:	12073ac0 	call	112073ac <_Balloc>
11207b10:	1023883a 	mov	r17,r2
11207b14:	00809c44 	movi	r2,625
11207b18:	88800515 	stw	r2,20(r17)
11207b1c:	8d000415 	stw	r20,16(r17)
11207b20:	9c401215 	stw	r17,72(r19)
11207b24:	88000015 	stw	zero,0(r17)
11207b28:	003fc606 	br	11207a44 <__alt_data_end+0xffe87a44>

11207b2c <__lshift>:
11207b2c:	defff904 	addi	sp,sp,-28
11207b30:	dd400515 	stw	r21,20(sp)
11207b34:	dcc00315 	stw	r19,12(sp)
11207b38:	302bd17a 	srai	r21,r6,5
11207b3c:	2cc00417 	ldw	r19,16(r5)
11207b40:	28800217 	ldw	r2,8(r5)
11207b44:	dd000415 	stw	r20,16(sp)
11207b48:	ace7883a 	add	r19,r21,r19
11207b4c:	dc800215 	stw	r18,8(sp)
11207b50:	dc400115 	stw	r17,4(sp)
11207b54:	dc000015 	stw	r16,0(sp)
11207b58:	dfc00615 	stw	ra,24(sp)
11207b5c:	9c000044 	addi	r16,r19,1
11207b60:	2823883a 	mov	r17,r5
11207b64:	3029883a 	mov	r20,r6
11207b68:	2025883a 	mov	r18,r4
11207b6c:	29400117 	ldw	r5,4(r5)
11207b70:	1400030e 	bge	r2,r16,11207b80 <__lshift+0x54>
11207b74:	1085883a 	add	r2,r2,r2
11207b78:	29400044 	addi	r5,r5,1
11207b7c:	143ffd16 	blt	r2,r16,11207b74 <__alt_data_end+0xffe87b74>
11207b80:	9009883a 	mov	r4,r18
11207b84:	12073ac0 	call	112073ac <_Balloc>
11207b88:	10c00504 	addi	r3,r2,20
11207b8c:	0540070e 	bge	zero,r21,11207bac <__lshift+0x80>
11207b90:	ad6b883a 	add	r21,r21,r21
11207b94:	ad6b883a 	add	r21,r21,r21
11207b98:	1809883a 	mov	r4,r3
11207b9c:	1d47883a 	add	r3,r3,r21
11207ba0:	20000015 	stw	zero,0(r4)
11207ba4:	21000104 	addi	r4,r4,4
11207ba8:	193ffd1e 	bne	r3,r4,11207ba0 <__alt_data_end+0xffe87ba0>
11207bac:	8a000417 	ldw	r8,16(r17)
11207bb0:	89000504 	addi	r4,r17,20
11207bb4:	a18007cc 	andi	r6,r20,31
11207bb8:	4211883a 	add	r8,r8,r8
11207bbc:	4211883a 	add	r8,r8,r8
11207bc0:	2211883a 	add	r8,r4,r8
11207bc4:	30002326 	beq	r6,zero,11207c54 <__lshift+0x128>
11207bc8:	02400804 	movi	r9,32
11207bcc:	4993c83a 	sub	r9,r9,r6
11207bd0:	000b883a 	mov	r5,zero
11207bd4:	21c00017 	ldw	r7,0(r4)
11207bd8:	1815883a 	mov	r10,r3
11207bdc:	18c00104 	addi	r3,r3,4
11207be0:	398e983a 	sll	r7,r7,r6
11207be4:	21000104 	addi	r4,r4,4
11207be8:	394ab03a 	or	r5,r7,r5
11207bec:	197fff15 	stw	r5,-4(r3)
11207bf0:	217fff17 	ldw	r5,-4(r4)
11207bf4:	2a4ad83a 	srl	r5,r5,r9
11207bf8:	223ff636 	bltu	r4,r8,11207bd4 <__alt_data_end+0xffe87bd4>
11207bfc:	51400115 	stw	r5,4(r10)
11207c00:	28001a1e 	bne	r5,zero,11207c6c <__lshift+0x140>
11207c04:	843fffc4 	addi	r16,r16,-1
11207c08:	14000415 	stw	r16,16(r2)
11207c0c:	88000826 	beq	r17,zero,11207c30 <__lshift+0x104>
11207c10:	89000117 	ldw	r4,4(r17)
11207c14:	90c01317 	ldw	r3,76(r18)
11207c18:	2109883a 	add	r4,r4,r4
11207c1c:	2109883a 	add	r4,r4,r4
11207c20:	1907883a 	add	r3,r3,r4
11207c24:	19000017 	ldw	r4,0(r3)
11207c28:	89000015 	stw	r4,0(r17)
11207c2c:	1c400015 	stw	r17,0(r3)
11207c30:	dfc00617 	ldw	ra,24(sp)
11207c34:	dd400517 	ldw	r21,20(sp)
11207c38:	dd000417 	ldw	r20,16(sp)
11207c3c:	dcc00317 	ldw	r19,12(sp)
11207c40:	dc800217 	ldw	r18,8(sp)
11207c44:	dc400117 	ldw	r17,4(sp)
11207c48:	dc000017 	ldw	r16,0(sp)
11207c4c:	dec00704 	addi	sp,sp,28
11207c50:	f800283a 	ret
11207c54:	21400017 	ldw	r5,0(r4)
11207c58:	18c00104 	addi	r3,r3,4
11207c5c:	21000104 	addi	r4,r4,4
11207c60:	197fff15 	stw	r5,-4(r3)
11207c64:	223ffb36 	bltu	r4,r8,11207c54 <__alt_data_end+0xffe87c54>
11207c68:	003fe606 	br	11207c04 <__alt_data_end+0xffe87c04>
11207c6c:	9c000084 	addi	r16,r19,2
11207c70:	003fe406 	br	11207c04 <__alt_data_end+0xffe87c04>

11207c74 <__mcmp>:
11207c74:	20800417 	ldw	r2,16(r4)
11207c78:	28c00417 	ldw	r3,16(r5)
11207c7c:	10c5c83a 	sub	r2,r2,r3
11207c80:	1000111e 	bne	r2,zero,11207cc8 <__mcmp+0x54>
11207c84:	18c7883a 	add	r3,r3,r3
11207c88:	18c7883a 	add	r3,r3,r3
11207c8c:	21000504 	addi	r4,r4,20
11207c90:	29400504 	addi	r5,r5,20
11207c94:	20c5883a 	add	r2,r4,r3
11207c98:	28cb883a 	add	r5,r5,r3
11207c9c:	00000106 	br	11207ca4 <__mcmp+0x30>
11207ca0:	20800a2e 	bgeu	r4,r2,11207ccc <__mcmp+0x58>
11207ca4:	10bfff04 	addi	r2,r2,-4
11207ca8:	297fff04 	addi	r5,r5,-4
11207cac:	11800017 	ldw	r6,0(r2)
11207cb0:	28c00017 	ldw	r3,0(r5)
11207cb4:	30fffa26 	beq	r6,r3,11207ca0 <__alt_data_end+0xffe87ca0>
11207cb8:	30c00236 	bltu	r6,r3,11207cc4 <__mcmp+0x50>
11207cbc:	00800044 	movi	r2,1
11207cc0:	f800283a 	ret
11207cc4:	00bfffc4 	movi	r2,-1
11207cc8:	f800283a 	ret
11207ccc:	0005883a 	mov	r2,zero
11207cd0:	f800283a 	ret

11207cd4 <__mdiff>:
11207cd4:	28c00417 	ldw	r3,16(r5)
11207cd8:	30800417 	ldw	r2,16(r6)
11207cdc:	defffa04 	addi	sp,sp,-24
11207ce0:	dcc00315 	stw	r19,12(sp)
11207ce4:	dc800215 	stw	r18,8(sp)
11207ce8:	dfc00515 	stw	ra,20(sp)
11207cec:	dd000415 	stw	r20,16(sp)
11207cf0:	dc400115 	stw	r17,4(sp)
11207cf4:	dc000015 	stw	r16,0(sp)
11207cf8:	1887c83a 	sub	r3,r3,r2
11207cfc:	2825883a 	mov	r18,r5
11207d00:	3027883a 	mov	r19,r6
11207d04:	1800141e 	bne	r3,zero,11207d58 <__mdiff+0x84>
11207d08:	1085883a 	add	r2,r2,r2
11207d0c:	1085883a 	add	r2,r2,r2
11207d10:	2a000504 	addi	r8,r5,20
11207d14:	34000504 	addi	r16,r6,20
11207d18:	4087883a 	add	r3,r8,r2
11207d1c:	8085883a 	add	r2,r16,r2
11207d20:	00000106 	br	11207d28 <__mdiff+0x54>
11207d24:	40c0592e 	bgeu	r8,r3,11207e8c <__mdiff+0x1b8>
11207d28:	18ffff04 	addi	r3,r3,-4
11207d2c:	10bfff04 	addi	r2,r2,-4
11207d30:	19c00017 	ldw	r7,0(r3)
11207d34:	11400017 	ldw	r5,0(r2)
11207d38:	397ffa26 	beq	r7,r5,11207d24 <__alt_data_end+0xffe87d24>
11207d3c:	3940592e 	bgeu	r7,r5,11207ea4 <__mdiff+0x1d0>
11207d40:	9005883a 	mov	r2,r18
11207d44:	4023883a 	mov	r17,r8
11207d48:	9825883a 	mov	r18,r19
11207d4c:	05000044 	movi	r20,1
11207d50:	1027883a 	mov	r19,r2
11207d54:	00000406 	br	11207d68 <__mdiff+0x94>
11207d58:	18005616 	blt	r3,zero,11207eb4 <__mdiff+0x1e0>
11207d5c:	34400504 	addi	r17,r6,20
11207d60:	2c000504 	addi	r16,r5,20
11207d64:	0029883a 	mov	r20,zero
11207d68:	91400117 	ldw	r5,4(r18)
11207d6c:	12073ac0 	call	112073ac <_Balloc>
11207d70:	92400417 	ldw	r9,16(r18)
11207d74:	9b000417 	ldw	r12,16(r19)
11207d78:	12c00504 	addi	r11,r2,20
11207d7c:	4a51883a 	add	r8,r9,r9
11207d80:	6319883a 	add	r12,r12,r12
11207d84:	4211883a 	add	r8,r8,r8
11207d88:	6319883a 	add	r12,r12,r12
11207d8c:	15000315 	stw	r20,12(r2)
11207d90:	8211883a 	add	r8,r16,r8
11207d94:	8b19883a 	add	r12,r17,r12
11207d98:	0007883a 	mov	r3,zero
11207d9c:	81400017 	ldw	r5,0(r16)
11207da0:	89c00017 	ldw	r7,0(r17)
11207da4:	59800104 	addi	r6,r11,4
11207da8:	293fffcc 	andi	r4,r5,65535
11207dac:	20c7883a 	add	r3,r4,r3
11207db0:	393fffcc 	andi	r4,r7,65535
11207db4:	1909c83a 	sub	r4,r3,r4
11207db8:	280ad43a 	srli	r5,r5,16
11207dbc:	380ed43a 	srli	r7,r7,16
11207dc0:	2007d43a 	srai	r3,r4,16
11207dc4:	213fffcc 	andi	r4,r4,65535
11207dc8:	29cbc83a 	sub	r5,r5,r7
11207dcc:	28c7883a 	add	r3,r5,r3
11207dd0:	180a943a 	slli	r5,r3,16
11207dd4:	8c400104 	addi	r17,r17,4
11207dd8:	84000104 	addi	r16,r16,4
11207ddc:	2908b03a 	or	r4,r5,r4
11207de0:	59000015 	stw	r4,0(r11)
11207de4:	1807d43a 	srai	r3,r3,16
11207de8:	3015883a 	mov	r10,r6
11207dec:	3017883a 	mov	r11,r6
11207df0:	8b3fea36 	bltu	r17,r12,11207d9c <__alt_data_end+0xffe87d9c>
11207df4:	8200162e 	bgeu	r16,r8,11207e50 <__mdiff+0x17c>
11207df8:	8017883a 	mov	r11,r16
11207dfc:	59400017 	ldw	r5,0(r11)
11207e00:	31800104 	addi	r6,r6,4
11207e04:	5ac00104 	addi	r11,r11,4
11207e08:	293fffcc 	andi	r4,r5,65535
11207e0c:	20c7883a 	add	r3,r4,r3
11207e10:	280ed43a 	srli	r7,r5,16
11207e14:	180bd43a 	srai	r5,r3,16
11207e18:	193fffcc 	andi	r4,r3,65535
11207e1c:	3947883a 	add	r3,r7,r5
11207e20:	180a943a 	slli	r5,r3,16
11207e24:	1807d43a 	srai	r3,r3,16
11207e28:	2908b03a 	or	r4,r5,r4
11207e2c:	313fff15 	stw	r4,-4(r6)
11207e30:	5a3ff236 	bltu	r11,r8,11207dfc <__alt_data_end+0xffe87dfc>
11207e34:	0406303a 	nor	r3,zero,r16
11207e38:	1a07883a 	add	r3,r3,r8
11207e3c:	1806d0ba 	srli	r3,r3,2
11207e40:	18c00044 	addi	r3,r3,1
11207e44:	18c7883a 	add	r3,r3,r3
11207e48:	18c7883a 	add	r3,r3,r3
11207e4c:	50d5883a 	add	r10,r10,r3
11207e50:	50ffff04 	addi	r3,r10,-4
11207e54:	2000041e 	bne	r4,zero,11207e68 <__mdiff+0x194>
11207e58:	18ffff04 	addi	r3,r3,-4
11207e5c:	19000017 	ldw	r4,0(r3)
11207e60:	4a7fffc4 	addi	r9,r9,-1
11207e64:	203ffc26 	beq	r4,zero,11207e58 <__alt_data_end+0xffe87e58>
11207e68:	12400415 	stw	r9,16(r2)
11207e6c:	dfc00517 	ldw	ra,20(sp)
11207e70:	dd000417 	ldw	r20,16(sp)
11207e74:	dcc00317 	ldw	r19,12(sp)
11207e78:	dc800217 	ldw	r18,8(sp)
11207e7c:	dc400117 	ldw	r17,4(sp)
11207e80:	dc000017 	ldw	r16,0(sp)
11207e84:	dec00604 	addi	sp,sp,24
11207e88:	f800283a 	ret
11207e8c:	000b883a 	mov	r5,zero
11207e90:	12073ac0 	call	112073ac <_Balloc>
11207e94:	00c00044 	movi	r3,1
11207e98:	10c00415 	stw	r3,16(r2)
11207e9c:	10000515 	stw	zero,20(r2)
11207ea0:	003ff206 	br	11207e6c <__alt_data_end+0xffe87e6c>
11207ea4:	8023883a 	mov	r17,r16
11207ea8:	0029883a 	mov	r20,zero
11207eac:	4021883a 	mov	r16,r8
11207eb0:	003fad06 	br	11207d68 <__alt_data_end+0xffe87d68>
11207eb4:	9005883a 	mov	r2,r18
11207eb8:	94400504 	addi	r17,r18,20
11207ebc:	9c000504 	addi	r16,r19,20
11207ec0:	9825883a 	mov	r18,r19
11207ec4:	05000044 	movi	r20,1
11207ec8:	1027883a 	mov	r19,r2
11207ecc:	003fa606 	br	11207d68 <__alt_data_end+0xffe87d68>

11207ed0 <__ulp>:
11207ed0:	295ffc2c 	andhi	r5,r5,32752
11207ed4:	00bf3034 	movhi	r2,64704
11207ed8:	2887883a 	add	r3,r5,r2
11207edc:	00c0020e 	bge	zero,r3,11207ee8 <__ulp+0x18>
11207ee0:	0005883a 	mov	r2,zero
11207ee4:	f800283a 	ret
11207ee8:	00c7c83a 	sub	r3,zero,r3
11207eec:	1807d53a 	srai	r3,r3,20
11207ef0:	008004c4 	movi	r2,19
11207ef4:	10c00b0e 	bge	r2,r3,11207f24 <__ulp+0x54>
11207ef8:	18bffb04 	addi	r2,r3,-20
11207efc:	01000784 	movi	r4,30
11207f00:	0007883a 	mov	r3,zero
11207f04:	20800516 	blt	r4,r2,11207f1c <__ulp+0x4c>
11207f08:	010007c4 	movi	r4,31
11207f0c:	2089c83a 	sub	r4,r4,r2
11207f10:	00800044 	movi	r2,1
11207f14:	1104983a 	sll	r2,r2,r4
11207f18:	f800283a 	ret
11207f1c:	00800044 	movi	r2,1
11207f20:	f800283a 	ret
11207f24:	01400234 	movhi	r5,8
11207f28:	28c7d83a 	sra	r3,r5,r3
11207f2c:	0005883a 	mov	r2,zero
11207f30:	f800283a 	ret

11207f34 <__b2d>:
11207f34:	defffa04 	addi	sp,sp,-24
11207f38:	dc000015 	stw	r16,0(sp)
11207f3c:	24000417 	ldw	r16,16(r4)
11207f40:	dc400115 	stw	r17,4(sp)
11207f44:	24400504 	addi	r17,r4,20
11207f48:	8421883a 	add	r16,r16,r16
11207f4c:	8421883a 	add	r16,r16,r16
11207f50:	8c21883a 	add	r16,r17,r16
11207f54:	dc800215 	stw	r18,8(sp)
11207f58:	84bfff17 	ldw	r18,-4(r16)
11207f5c:	dd000415 	stw	r20,16(sp)
11207f60:	dcc00315 	stw	r19,12(sp)
11207f64:	9009883a 	mov	r4,r18
11207f68:	2829883a 	mov	r20,r5
11207f6c:	dfc00515 	stw	ra,20(sp)
11207f70:	12076a00 	call	112076a0 <__hi0bits>
11207f74:	00c00804 	movi	r3,32
11207f78:	1889c83a 	sub	r4,r3,r2
11207f7c:	a1000015 	stw	r4,0(r20)
11207f80:	01000284 	movi	r4,10
11207f84:	84ffff04 	addi	r19,r16,-4
11207f88:	20801216 	blt	r4,r2,11207fd4 <__b2d+0xa0>
11207f8c:	018002c4 	movi	r6,11
11207f90:	308dc83a 	sub	r6,r6,r2
11207f94:	9186d83a 	srl	r3,r18,r6
11207f98:	18cffc34 	orhi	r3,r3,16368
11207f9c:	8cc0212e 	bgeu	r17,r19,11208024 <__b2d+0xf0>
11207fa0:	813ffe17 	ldw	r4,-8(r16)
11207fa4:	218cd83a 	srl	r6,r4,r6
11207fa8:	10800544 	addi	r2,r2,21
11207fac:	9084983a 	sll	r2,r18,r2
11207fb0:	1184b03a 	or	r2,r2,r6
11207fb4:	dfc00517 	ldw	ra,20(sp)
11207fb8:	dd000417 	ldw	r20,16(sp)
11207fbc:	dcc00317 	ldw	r19,12(sp)
11207fc0:	dc800217 	ldw	r18,8(sp)
11207fc4:	dc400117 	ldw	r17,4(sp)
11207fc8:	dc000017 	ldw	r16,0(sp)
11207fcc:	dec00604 	addi	sp,sp,24
11207fd0:	f800283a 	ret
11207fd4:	8cc00f2e 	bgeu	r17,r19,11208014 <__b2d+0xe0>
11207fd8:	117ffd44 	addi	r5,r2,-11
11207fdc:	80bffe17 	ldw	r2,-8(r16)
11207fe0:	28000e26 	beq	r5,zero,1120801c <__b2d+0xe8>
11207fe4:	1949c83a 	sub	r4,r3,r5
11207fe8:	9164983a 	sll	r18,r18,r5
11207fec:	1106d83a 	srl	r3,r2,r4
11207ff0:	81bffe04 	addi	r6,r16,-8
11207ff4:	948ffc34 	orhi	r18,r18,16368
11207ff8:	90c6b03a 	or	r3,r18,r3
11207ffc:	89800e2e 	bgeu	r17,r6,11208038 <__b2d+0x104>
11208000:	81bffd17 	ldw	r6,-12(r16)
11208004:	1144983a 	sll	r2,r2,r5
11208008:	310ad83a 	srl	r5,r6,r4
1120800c:	2884b03a 	or	r2,r5,r2
11208010:	003fe806 	br	11207fb4 <__alt_data_end+0xffe87fb4>
11208014:	10bffd44 	addi	r2,r2,-11
11208018:	1000041e 	bne	r2,zero,1120802c <__b2d+0xf8>
1120801c:	90cffc34 	orhi	r3,r18,16368
11208020:	003fe406 	br	11207fb4 <__alt_data_end+0xffe87fb4>
11208024:	000d883a 	mov	r6,zero
11208028:	003fdf06 	br	11207fa8 <__alt_data_end+0xffe87fa8>
1120802c:	90a4983a 	sll	r18,r18,r2
11208030:	0005883a 	mov	r2,zero
11208034:	003ff906 	br	1120801c <__alt_data_end+0xffe8801c>
11208038:	1144983a 	sll	r2,r2,r5
1120803c:	003fdd06 	br	11207fb4 <__alt_data_end+0xffe87fb4>

11208040 <__d2b>:
11208040:	defff804 	addi	sp,sp,-32
11208044:	dc000215 	stw	r16,8(sp)
11208048:	3021883a 	mov	r16,r6
1120804c:	dc400315 	stw	r17,12(sp)
11208050:	8022907a 	slli	r17,r16,1
11208054:	dd000615 	stw	r20,24(sp)
11208058:	2829883a 	mov	r20,r5
1120805c:	01400044 	movi	r5,1
11208060:	dcc00515 	stw	r19,20(sp)
11208064:	dc800415 	stw	r18,16(sp)
11208068:	dfc00715 	stw	ra,28(sp)
1120806c:	3825883a 	mov	r18,r7
11208070:	8822d57a 	srli	r17,r17,21
11208074:	12073ac0 	call	112073ac <_Balloc>
11208078:	1027883a 	mov	r19,r2
1120807c:	00800434 	movhi	r2,16
11208080:	10bfffc4 	addi	r2,r2,-1
11208084:	808c703a 	and	r6,r16,r2
11208088:	88000126 	beq	r17,zero,11208090 <__d2b+0x50>
1120808c:	31800434 	orhi	r6,r6,16
11208090:	d9800015 	stw	r6,0(sp)
11208094:	a0002426 	beq	r20,zero,11208128 <__d2b+0xe8>
11208098:	d9000104 	addi	r4,sp,4
1120809c:	dd000115 	stw	r20,4(sp)
112080a0:	12077080 	call	11207708 <__lo0bits>
112080a4:	d8c00017 	ldw	r3,0(sp)
112080a8:	10002f1e 	bne	r2,zero,11208168 <__d2b+0x128>
112080ac:	d9000117 	ldw	r4,4(sp)
112080b0:	99000515 	stw	r4,20(r19)
112080b4:	1821003a 	cmpeq	r16,r3,zero
112080b8:	01000084 	movi	r4,2
112080bc:	2421c83a 	sub	r16,r4,r16
112080c0:	98c00615 	stw	r3,24(r19)
112080c4:	9c000415 	stw	r16,16(r19)
112080c8:	88001f1e 	bne	r17,zero,11208148 <__d2b+0x108>
112080cc:	10bef384 	addi	r2,r2,-1074
112080d0:	90800015 	stw	r2,0(r18)
112080d4:	00900034 	movhi	r2,16384
112080d8:	10bfffc4 	addi	r2,r2,-1
112080dc:	8085883a 	add	r2,r16,r2
112080e0:	1085883a 	add	r2,r2,r2
112080e4:	1085883a 	add	r2,r2,r2
112080e8:	9885883a 	add	r2,r19,r2
112080ec:	11000517 	ldw	r4,20(r2)
112080f0:	8020917a 	slli	r16,r16,5
112080f4:	12076a00 	call	112076a0 <__hi0bits>
112080f8:	d8c00817 	ldw	r3,32(sp)
112080fc:	8085c83a 	sub	r2,r16,r2
11208100:	18800015 	stw	r2,0(r3)
11208104:	9805883a 	mov	r2,r19
11208108:	dfc00717 	ldw	ra,28(sp)
1120810c:	dd000617 	ldw	r20,24(sp)
11208110:	dcc00517 	ldw	r19,20(sp)
11208114:	dc800417 	ldw	r18,16(sp)
11208118:	dc400317 	ldw	r17,12(sp)
1120811c:	dc000217 	ldw	r16,8(sp)
11208120:	dec00804 	addi	sp,sp,32
11208124:	f800283a 	ret
11208128:	d809883a 	mov	r4,sp
1120812c:	12077080 	call	11207708 <__lo0bits>
11208130:	d8c00017 	ldw	r3,0(sp)
11208134:	04000044 	movi	r16,1
11208138:	9c000415 	stw	r16,16(r19)
1120813c:	98c00515 	stw	r3,20(r19)
11208140:	10800804 	addi	r2,r2,32
11208144:	883fe126 	beq	r17,zero,112080cc <__alt_data_end+0xffe880cc>
11208148:	00c00d44 	movi	r3,53
1120814c:	8c7ef344 	addi	r17,r17,-1075
11208150:	88a3883a 	add	r17,r17,r2
11208154:	1885c83a 	sub	r2,r3,r2
11208158:	d8c00817 	ldw	r3,32(sp)
1120815c:	94400015 	stw	r17,0(r18)
11208160:	18800015 	stw	r2,0(r3)
11208164:	003fe706 	br	11208104 <__alt_data_end+0xffe88104>
11208168:	01000804 	movi	r4,32
1120816c:	2089c83a 	sub	r4,r4,r2
11208170:	1908983a 	sll	r4,r3,r4
11208174:	d9400117 	ldw	r5,4(sp)
11208178:	1886d83a 	srl	r3,r3,r2
1120817c:	2148b03a 	or	r4,r4,r5
11208180:	99000515 	stw	r4,20(r19)
11208184:	d8c00015 	stw	r3,0(sp)
11208188:	003fca06 	br	112080b4 <__alt_data_end+0xffe880b4>

1120818c <__ratio>:
1120818c:	defff904 	addi	sp,sp,-28
11208190:	dc400315 	stw	r17,12(sp)
11208194:	2823883a 	mov	r17,r5
11208198:	d9400104 	addi	r5,sp,4
1120819c:	dfc00615 	stw	ra,24(sp)
112081a0:	dcc00515 	stw	r19,20(sp)
112081a4:	dc800415 	stw	r18,16(sp)
112081a8:	2027883a 	mov	r19,r4
112081ac:	dc000215 	stw	r16,8(sp)
112081b0:	1207f340 	call	11207f34 <__b2d>
112081b4:	d80b883a 	mov	r5,sp
112081b8:	8809883a 	mov	r4,r17
112081bc:	1025883a 	mov	r18,r2
112081c0:	1821883a 	mov	r16,r3
112081c4:	1207f340 	call	11207f34 <__b2d>
112081c8:	8a000417 	ldw	r8,16(r17)
112081cc:	99000417 	ldw	r4,16(r19)
112081d0:	d9400117 	ldw	r5,4(sp)
112081d4:	2209c83a 	sub	r4,r4,r8
112081d8:	2010917a 	slli	r8,r4,5
112081dc:	d9000017 	ldw	r4,0(sp)
112081e0:	2909c83a 	sub	r4,r5,r4
112081e4:	4109883a 	add	r4,r8,r4
112081e8:	01000e0e 	bge	zero,r4,11208224 <__ratio+0x98>
112081ec:	2008953a 	slli	r4,r4,20
112081f0:	2421883a 	add	r16,r4,r16
112081f4:	100d883a 	mov	r6,r2
112081f8:	180f883a 	mov	r7,r3
112081fc:	9009883a 	mov	r4,r18
11208200:	800b883a 	mov	r5,r16
11208204:	120c02c0 	call	1120c02c <__divdf3>
11208208:	dfc00617 	ldw	ra,24(sp)
1120820c:	dcc00517 	ldw	r19,20(sp)
11208210:	dc800417 	ldw	r18,16(sp)
11208214:	dc400317 	ldw	r17,12(sp)
11208218:	dc000217 	ldw	r16,8(sp)
1120821c:	dec00704 	addi	sp,sp,28
11208220:	f800283a 	ret
11208224:	2008953a 	slli	r4,r4,20
11208228:	1907c83a 	sub	r3,r3,r4
1120822c:	003ff106 	br	112081f4 <__alt_data_end+0xffe881f4>

11208230 <_mprec_log10>:
11208230:	defffe04 	addi	sp,sp,-8
11208234:	dc000015 	stw	r16,0(sp)
11208238:	dfc00115 	stw	ra,4(sp)
1120823c:	008005c4 	movi	r2,23
11208240:	2021883a 	mov	r16,r4
11208244:	11000d0e 	bge	r2,r4,1120827c <_mprec_log10+0x4c>
11208248:	0005883a 	mov	r2,zero
1120824c:	00cffc34 	movhi	r3,16368
11208250:	843fffc4 	addi	r16,r16,-1
11208254:	000d883a 	mov	r6,zero
11208258:	01d00934 	movhi	r7,16420
1120825c:	1009883a 	mov	r4,r2
11208260:	180b883a 	mov	r5,r3
11208264:	120cb6c0 	call	1120cb6c <__muldf3>
11208268:	803ff91e 	bne	r16,zero,11208250 <__alt_data_end+0xffe88250>
1120826c:	dfc00117 	ldw	ra,4(sp)
11208270:	dc000017 	ldw	r16,0(sp)
11208274:	dec00204 	addi	sp,sp,8
11208278:	f800283a 	ret
1120827c:	202090fa 	slli	r16,r4,3
11208280:	00844874 	movhi	r2,4385
11208284:	10817c04 	addi	r2,r2,1520
11208288:	1421883a 	add	r16,r2,r16
1120828c:	80800017 	ldw	r2,0(r16)
11208290:	80c00117 	ldw	r3,4(r16)
11208294:	dfc00117 	ldw	ra,4(sp)
11208298:	dc000017 	ldw	r16,0(sp)
1120829c:	dec00204 	addi	sp,sp,8
112082a0:	f800283a 	ret

112082a4 <__copybits>:
112082a4:	297fffc4 	addi	r5,r5,-1
112082a8:	280fd17a 	srai	r7,r5,5
112082ac:	30c00417 	ldw	r3,16(r6)
112082b0:	30800504 	addi	r2,r6,20
112082b4:	39c00044 	addi	r7,r7,1
112082b8:	18c7883a 	add	r3,r3,r3
112082bc:	39cf883a 	add	r7,r7,r7
112082c0:	18c7883a 	add	r3,r3,r3
112082c4:	39cf883a 	add	r7,r7,r7
112082c8:	10c7883a 	add	r3,r2,r3
112082cc:	21cf883a 	add	r7,r4,r7
112082d0:	10c00d2e 	bgeu	r2,r3,11208308 <__copybits+0x64>
112082d4:	200b883a 	mov	r5,r4
112082d8:	12000017 	ldw	r8,0(r2)
112082dc:	29400104 	addi	r5,r5,4
112082e0:	10800104 	addi	r2,r2,4
112082e4:	2a3fff15 	stw	r8,-4(r5)
112082e8:	10fffb36 	bltu	r2,r3,112082d8 <__alt_data_end+0xffe882d8>
112082ec:	1985c83a 	sub	r2,r3,r6
112082f0:	10bffac4 	addi	r2,r2,-21
112082f4:	1004d0ba 	srli	r2,r2,2
112082f8:	10800044 	addi	r2,r2,1
112082fc:	1085883a 	add	r2,r2,r2
11208300:	1085883a 	add	r2,r2,r2
11208304:	2089883a 	add	r4,r4,r2
11208308:	21c0032e 	bgeu	r4,r7,11208318 <__copybits+0x74>
1120830c:	20000015 	stw	zero,0(r4)
11208310:	21000104 	addi	r4,r4,4
11208314:	21fffd36 	bltu	r4,r7,1120830c <__alt_data_end+0xffe8830c>
11208318:	f800283a 	ret

1120831c <__any_on>:
1120831c:	20c00417 	ldw	r3,16(r4)
11208320:	2805d17a 	srai	r2,r5,5
11208324:	21000504 	addi	r4,r4,20
11208328:	18800d0e 	bge	r3,r2,11208360 <__any_on+0x44>
1120832c:	18c7883a 	add	r3,r3,r3
11208330:	18c7883a 	add	r3,r3,r3
11208334:	20c7883a 	add	r3,r4,r3
11208338:	20c0192e 	bgeu	r4,r3,112083a0 <__any_on+0x84>
1120833c:	18bfff17 	ldw	r2,-4(r3)
11208340:	18ffff04 	addi	r3,r3,-4
11208344:	1000041e 	bne	r2,zero,11208358 <__any_on+0x3c>
11208348:	20c0142e 	bgeu	r4,r3,1120839c <__any_on+0x80>
1120834c:	18ffff04 	addi	r3,r3,-4
11208350:	19400017 	ldw	r5,0(r3)
11208354:	283ffc26 	beq	r5,zero,11208348 <__alt_data_end+0xffe88348>
11208358:	00800044 	movi	r2,1
1120835c:	f800283a 	ret
11208360:	10c00a0e 	bge	r2,r3,1120838c <__any_on+0x70>
11208364:	1085883a 	add	r2,r2,r2
11208368:	1085883a 	add	r2,r2,r2
1120836c:	294007cc 	andi	r5,r5,31
11208370:	2087883a 	add	r3,r4,r2
11208374:	283ff026 	beq	r5,zero,11208338 <__alt_data_end+0xffe88338>
11208378:	19800017 	ldw	r6,0(r3)
1120837c:	3144d83a 	srl	r2,r6,r5
11208380:	114a983a 	sll	r5,r2,r5
11208384:	317ff41e 	bne	r6,r5,11208358 <__alt_data_end+0xffe88358>
11208388:	003feb06 	br	11208338 <__alt_data_end+0xffe88338>
1120838c:	1085883a 	add	r2,r2,r2
11208390:	1085883a 	add	r2,r2,r2
11208394:	2087883a 	add	r3,r4,r2
11208398:	003fe706 	br	11208338 <__alt_data_end+0xffe88338>
1120839c:	f800283a 	ret
112083a0:	0005883a 	mov	r2,zero
112083a4:	f800283a 	ret

112083a8 <_putc_r>:
112083a8:	defffc04 	addi	sp,sp,-16
112083ac:	dc000215 	stw	r16,8(sp)
112083b0:	dfc00315 	stw	ra,12(sp)
112083b4:	2021883a 	mov	r16,r4
112083b8:	20000226 	beq	r4,zero,112083c4 <_putc_r+0x1c>
112083bc:	20800e17 	ldw	r2,56(r4)
112083c0:	10001b26 	beq	r2,zero,11208430 <_putc_r+0x88>
112083c4:	30800217 	ldw	r2,8(r6)
112083c8:	10bfffc4 	addi	r2,r2,-1
112083cc:	30800215 	stw	r2,8(r6)
112083d0:	10000a16 	blt	r2,zero,112083fc <_putc_r+0x54>
112083d4:	30800017 	ldw	r2,0(r6)
112083d8:	11400005 	stb	r5,0(r2)
112083dc:	30800017 	ldw	r2,0(r6)
112083e0:	10c00044 	addi	r3,r2,1
112083e4:	30c00015 	stw	r3,0(r6)
112083e8:	10800003 	ldbu	r2,0(r2)
112083ec:	dfc00317 	ldw	ra,12(sp)
112083f0:	dc000217 	ldw	r16,8(sp)
112083f4:	dec00404 	addi	sp,sp,16
112083f8:	f800283a 	ret
112083fc:	30c00617 	ldw	r3,24(r6)
11208400:	10c00616 	blt	r2,r3,1120841c <_putc_r+0x74>
11208404:	30800017 	ldw	r2,0(r6)
11208408:	00c00284 	movi	r3,10
1120840c:	11400005 	stb	r5,0(r2)
11208410:	30800017 	ldw	r2,0(r6)
11208414:	11400003 	ldbu	r5,0(r2)
11208418:	28fff11e 	bne	r5,r3,112083e0 <__alt_data_end+0xffe883e0>
1120841c:	8009883a 	mov	r4,r16
11208420:	dfc00317 	ldw	ra,12(sp)
11208424:	dc000217 	ldw	r16,8(sp)
11208428:	dec00404 	addi	sp,sp,16
1120842c:	120a39c1 	jmpi	1120a39c <__swbuf_r>
11208430:	d9400015 	stw	r5,0(sp)
11208434:	d9800115 	stw	r6,4(sp)
11208438:	12059900 	call	11205990 <__sinit>
1120843c:	d9800117 	ldw	r6,4(sp)
11208440:	d9400017 	ldw	r5,0(sp)
11208444:	003fdf06 	br	112083c4 <__alt_data_end+0xffe883c4>

11208448 <putc>:
11208448:	00844874 	movhi	r2,4385
1120844c:	defffc04 	addi	sp,sp,-16
11208450:	1088b104 	addi	r2,r2,8900
11208454:	dc000115 	stw	r16,4(sp)
11208458:	14000017 	ldw	r16,0(r2)
1120845c:	dc400215 	stw	r17,8(sp)
11208460:	dfc00315 	stw	ra,12(sp)
11208464:	2023883a 	mov	r17,r4
11208468:	80000226 	beq	r16,zero,11208474 <putc+0x2c>
1120846c:	80800e17 	ldw	r2,56(r16)
11208470:	10001a26 	beq	r2,zero,112084dc <putc+0x94>
11208474:	28800217 	ldw	r2,8(r5)
11208478:	10bfffc4 	addi	r2,r2,-1
1120847c:	28800215 	stw	r2,8(r5)
11208480:	10000b16 	blt	r2,zero,112084b0 <putc+0x68>
11208484:	28800017 	ldw	r2,0(r5)
11208488:	14400005 	stb	r17,0(r2)
1120848c:	28800017 	ldw	r2,0(r5)
11208490:	10c00044 	addi	r3,r2,1
11208494:	28c00015 	stw	r3,0(r5)
11208498:	10800003 	ldbu	r2,0(r2)
1120849c:	dfc00317 	ldw	ra,12(sp)
112084a0:	dc400217 	ldw	r17,8(sp)
112084a4:	dc000117 	ldw	r16,4(sp)
112084a8:	dec00404 	addi	sp,sp,16
112084ac:	f800283a 	ret
112084b0:	28c00617 	ldw	r3,24(r5)
112084b4:	10c00e16 	blt	r2,r3,112084f0 <putc+0xa8>
112084b8:	28800017 	ldw	r2,0(r5)
112084bc:	01000284 	movi	r4,10
112084c0:	14400005 	stb	r17,0(r2)
112084c4:	28800017 	ldw	r2,0(r5)
112084c8:	10c00003 	ldbu	r3,0(r2)
112084cc:	193ff01e 	bne	r3,r4,11208490 <__alt_data_end+0xffe88490>
112084d0:	280d883a 	mov	r6,r5
112084d4:	180b883a 	mov	r5,r3
112084d8:	00000706 	br	112084f8 <putc+0xb0>
112084dc:	8009883a 	mov	r4,r16
112084e0:	d9400015 	stw	r5,0(sp)
112084e4:	12059900 	call	11205990 <__sinit>
112084e8:	d9400017 	ldw	r5,0(sp)
112084ec:	003fe106 	br	11208474 <__alt_data_end+0xffe88474>
112084f0:	280d883a 	mov	r6,r5
112084f4:	880b883a 	mov	r5,r17
112084f8:	8009883a 	mov	r4,r16
112084fc:	dfc00317 	ldw	ra,12(sp)
11208500:	dc400217 	ldw	r17,8(sp)
11208504:	dc000117 	ldw	r16,4(sp)
11208508:	dec00404 	addi	sp,sp,16
1120850c:	120a39c1 	jmpi	1120a39c <__swbuf_r>

11208510 <_realloc_r>:
11208510:	defff604 	addi	sp,sp,-40
11208514:	dc800215 	stw	r18,8(sp)
11208518:	dfc00915 	stw	ra,36(sp)
1120851c:	df000815 	stw	fp,32(sp)
11208520:	ddc00715 	stw	r23,28(sp)
11208524:	dd800615 	stw	r22,24(sp)
11208528:	dd400515 	stw	r21,20(sp)
1120852c:	dd000415 	stw	r20,16(sp)
11208530:	dcc00315 	stw	r19,12(sp)
11208534:	dc400115 	stw	r17,4(sp)
11208538:	dc000015 	stw	r16,0(sp)
1120853c:	3025883a 	mov	r18,r6
11208540:	2800b726 	beq	r5,zero,11208820 <_realloc_r+0x310>
11208544:	282b883a 	mov	r21,r5
11208548:	2029883a 	mov	r20,r4
1120854c:	120e2780 	call	1120e278 <__malloc_lock>
11208550:	a8bfff17 	ldw	r2,-4(r21)
11208554:	043fff04 	movi	r16,-4
11208558:	90c002c4 	addi	r3,r18,11
1120855c:	01000584 	movi	r4,22
11208560:	acfffe04 	addi	r19,r21,-8
11208564:	1420703a 	and	r16,r2,r16
11208568:	20c0332e 	bgeu	r4,r3,11208638 <_realloc_r+0x128>
1120856c:	047ffe04 	movi	r17,-8
11208570:	1c62703a 	and	r17,r3,r17
11208574:	8807883a 	mov	r3,r17
11208578:	88005816 	blt	r17,zero,112086dc <_realloc_r+0x1cc>
1120857c:	8c805736 	bltu	r17,r18,112086dc <_realloc_r+0x1cc>
11208580:	80c0300e 	bge	r16,r3,11208644 <_realloc_r+0x134>
11208584:	07044874 	movhi	fp,4385
11208588:	e7032c04 	addi	fp,fp,3248
1120858c:	e1c00217 	ldw	r7,8(fp)
11208590:	9c09883a 	add	r4,r19,r16
11208594:	22000117 	ldw	r8,4(r4)
11208598:	21c06326 	beq	r4,r7,11208728 <_realloc_r+0x218>
1120859c:	017fff84 	movi	r5,-2
112085a0:	414a703a 	and	r5,r8,r5
112085a4:	214b883a 	add	r5,r4,r5
112085a8:	29800117 	ldw	r6,4(r5)
112085ac:	3180004c 	andi	r6,r6,1
112085b0:	30003f26 	beq	r6,zero,112086b0 <_realloc_r+0x1a0>
112085b4:	1080004c 	andi	r2,r2,1
112085b8:	10008326 	beq	r2,zero,112087c8 <_realloc_r+0x2b8>
112085bc:	900b883a 	mov	r5,r18
112085c0:	a009883a 	mov	r4,r20
112085c4:	12066f00 	call	112066f0 <_malloc_r>
112085c8:	1025883a 	mov	r18,r2
112085cc:	10011e26 	beq	r2,zero,11208a48 <_realloc_r+0x538>
112085d0:	a93fff17 	ldw	r4,-4(r21)
112085d4:	10fffe04 	addi	r3,r2,-8
112085d8:	00bfff84 	movi	r2,-2
112085dc:	2084703a 	and	r2,r4,r2
112085e0:	9885883a 	add	r2,r19,r2
112085e4:	1880ee26 	beq	r3,r2,112089a0 <_realloc_r+0x490>
112085e8:	81bfff04 	addi	r6,r16,-4
112085ec:	00800904 	movi	r2,36
112085f0:	1180b836 	bltu	r2,r6,112088d4 <_realloc_r+0x3c4>
112085f4:	00c004c4 	movi	r3,19
112085f8:	19809636 	bltu	r3,r6,11208854 <_realloc_r+0x344>
112085fc:	9005883a 	mov	r2,r18
11208600:	a807883a 	mov	r3,r21
11208604:	19000017 	ldw	r4,0(r3)
11208608:	11000015 	stw	r4,0(r2)
1120860c:	19000117 	ldw	r4,4(r3)
11208610:	11000115 	stw	r4,4(r2)
11208614:	18c00217 	ldw	r3,8(r3)
11208618:	10c00215 	stw	r3,8(r2)
1120861c:	a80b883a 	mov	r5,r21
11208620:	a009883a 	mov	r4,r20
11208624:	1205b040 	call	11205b04 <_free_r>
11208628:	a009883a 	mov	r4,r20
1120862c:	120e29c0 	call	1120e29c <__malloc_unlock>
11208630:	9005883a 	mov	r2,r18
11208634:	00001206 	br	11208680 <_realloc_r+0x170>
11208638:	00c00404 	movi	r3,16
1120863c:	1823883a 	mov	r17,r3
11208640:	003fce06 	br	1120857c <__alt_data_end+0xffe8857c>
11208644:	a825883a 	mov	r18,r21
11208648:	8445c83a 	sub	r2,r16,r17
1120864c:	00c003c4 	movi	r3,15
11208650:	18802636 	bltu	r3,r2,112086ec <_realloc_r+0x1dc>
11208654:	99800117 	ldw	r6,4(r19)
11208658:	9c07883a 	add	r3,r19,r16
1120865c:	3180004c 	andi	r6,r6,1
11208660:	3420b03a 	or	r16,r6,r16
11208664:	9c000115 	stw	r16,4(r19)
11208668:	18800117 	ldw	r2,4(r3)
1120866c:	10800054 	ori	r2,r2,1
11208670:	18800115 	stw	r2,4(r3)
11208674:	a009883a 	mov	r4,r20
11208678:	120e29c0 	call	1120e29c <__malloc_unlock>
1120867c:	9005883a 	mov	r2,r18
11208680:	dfc00917 	ldw	ra,36(sp)
11208684:	df000817 	ldw	fp,32(sp)
11208688:	ddc00717 	ldw	r23,28(sp)
1120868c:	dd800617 	ldw	r22,24(sp)
11208690:	dd400517 	ldw	r21,20(sp)
11208694:	dd000417 	ldw	r20,16(sp)
11208698:	dcc00317 	ldw	r19,12(sp)
1120869c:	dc800217 	ldw	r18,8(sp)
112086a0:	dc400117 	ldw	r17,4(sp)
112086a4:	dc000017 	ldw	r16,0(sp)
112086a8:	dec00a04 	addi	sp,sp,40
112086ac:	f800283a 	ret
112086b0:	017fff04 	movi	r5,-4
112086b4:	414a703a 	and	r5,r8,r5
112086b8:	814d883a 	add	r6,r16,r5
112086bc:	30c01f16 	blt	r6,r3,1120873c <_realloc_r+0x22c>
112086c0:	20800317 	ldw	r2,12(r4)
112086c4:	20c00217 	ldw	r3,8(r4)
112086c8:	a825883a 	mov	r18,r21
112086cc:	3021883a 	mov	r16,r6
112086d0:	18800315 	stw	r2,12(r3)
112086d4:	10c00215 	stw	r3,8(r2)
112086d8:	003fdb06 	br	11208648 <__alt_data_end+0xffe88648>
112086dc:	00800304 	movi	r2,12
112086e0:	a0800015 	stw	r2,0(r20)
112086e4:	0005883a 	mov	r2,zero
112086e8:	003fe506 	br	11208680 <__alt_data_end+0xffe88680>
112086ec:	98c00117 	ldw	r3,4(r19)
112086f0:	9c4b883a 	add	r5,r19,r17
112086f4:	11000054 	ori	r4,r2,1
112086f8:	18c0004c 	andi	r3,r3,1
112086fc:	1c62b03a 	or	r17,r3,r17
11208700:	9c400115 	stw	r17,4(r19)
11208704:	29000115 	stw	r4,4(r5)
11208708:	2885883a 	add	r2,r5,r2
1120870c:	10c00117 	ldw	r3,4(r2)
11208710:	29400204 	addi	r5,r5,8
11208714:	a009883a 	mov	r4,r20
11208718:	18c00054 	ori	r3,r3,1
1120871c:	10c00115 	stw	r3,4(r2)
11208720:	1205b040 	call	11205b04 <_free_r>
11208724:	003fd306 	br	11208674 <__alt_data_end+0xffe88674>
11208728:	017fff04 	movi	r5,-4
1120872c:	414a703a 	and	r5,r8,r5
11208730:	89800404 	addi	r6,r17,16
11208734:	8151883a 	add	r8,r16,r5
11208738:	4180590e 	bge	r8,r6,112088a0 <_realloc_r+0x390>
1120873c:	1080004c 	andi	r2,r2,1
11208740:	103f9e1e 	bne	r2,zero,112085bc <__alt_data_end+0xffe885bc>
11208744:	adbffe17 	ldw	r22,-8(r21)
11208748:	00bfff04 	movi	r2,-4
1120874c:	9dadc83a 	sub	r22,r19,r22
11208750:	b1800117 	ldw	r6,4(r22)
11208754:	3084703a 	and	r2,r6,r2
11208758:	20002026 	beq	r4,zero,112087dc <_realloc_r+0x2cc>
1120875c:	80af883a 	add	r23,r16,r2
11208760:	b96f883a 	add	r23,r23,r5
11208764:	21c05f26 	beq	r4,r7,112088e4 <_realloc_r+0x3d4>
11208768:	b8c01c16 	blt	r23,r3,112087dc <_realloc_r+0x2cc>
1120876c:	20800317 	ldw	r2,12(r4)
11208770:	20c00217 	ldw	r3,8(r4)
11208774:	81bfff04 	addi	r6,r16,-4
11208778:	01000904 	movi	r4,36
1120877c:	18800315 	stw	r2,12(r3)
11208780:	10c00215 	stw	r3,8(r2)
11208784:	b0c00217 	ldw	r3,8(r22)
11208788:	b0800317 	ldw	r2,12(r22)
1120878c:	b4800204 	addi	r18,r22,8
11208790:	18800315 	stw	r2,12(r3)
11208794:	10c00215 	stw	r3,8(r2)
11208798:	21801b36 	bltu	r4,r6,11208808 <_realloc_r+0x2f8>
1120879c:	008004c4 	movi	r2,19
112087a0:	1180352e 	bgeu	r2,r6,11208878 <_realloc_r+0x368>
112087a4:	a8800017 	ldw	r2,0(r21)
112087a8:	b0800215 	stw	r2,8(r22)
112087ac:	a8800117 	ldw	r2,4(r21)
112087b0:	b0800315 	stw	r2,12(r22)
112087b4:	008006c4 	movi	r2,27
112087b8:	11807f36 	bltu	r2,r6,112089b8 <_realloc_r+0x4a8>
112087bc:	b0800404 	addi	r2,r22,16
112087c0:	ad400204 	addi	r21,r21,8
112087c4:	00002d06 	br	1120887c <_realloc_r+0x36c>
112087c8:	adbffe17 	ldw	r22,-8(r21)
112087cc:	00bfff04 	movi	r2,-4
112087d0:	9dadc83a 	sub	r22,r19,r22
112087d4:	b1000117 	ldw	r4,4(r22)
112087d8:	2084703a 	and	r2,r4,r2
112087dc:	b03f7726 	beq	r22,zero,112085bc <__alt_data_end+0xffe885bc>
112087e0:	80af883a 	add	r23,r16,r2
112087e4:	b8ff7516 	blt	r23,r3,112085bc <__alt_data_end+0xffe885bc>
112087e8:	b0800317 	ldw	r2,12(r22)
112087ec:	b0c00217 	ldw	r3,8(r22)
112087f0:	81bfff04 	addi	r6,r16,-4
112087f4:	01000904 	movi	r4,36
112087f8:	18800315 	stw	r2,12(r3)
112087fc:	10c00215 	stw	r3,8(r2)
11208800:	b4800204 	addi	r18,r22,8
11208804:	21bfe52e 	bgeu	r4,r6,1120879c <__alt_data_end+0xffe8879c>
11208808:	a80b883a 	mov	r5,r21
1120880c:	9009883a 	mov	r4,r18
11208810:	12071280 	call	11207128 <memmove>
11208814:	b821883a 	mov	r16,r23
11208818:	b027883a 	mov	r19,r22
1120881c:	003f8a06 	br	11208648 <__alt_data_end+0xffe88648>
11208820:	300b883a 	mov	r5,r6
11208824:	dfc00917 	ldw	ra,36(sp)
11208828:	df000817 	ldw	fp,32(sp)
1120882c:	ddc00717 	ldw	r23,28(sp)
11208830:	dd800617 	ldw	r22,24(sp)
11208834:	dd400517 	ldw	r21,20(sp)
11208838:	dd000417 	ldw	r20,16(sp)
1120883c:	dcc00317 	ldw	r19,12(sp)
11208840:	dc800217 	ldw	r18,8(sp)
11208844:	dc400117 	ldw	r17,4(sp)
11208848:	dc000017 	ldw	r16,0(sp)
1120884c:	dec00a04 	addi	sp,sp,40
11208850:	12066f01 	jmpi	112066f0 <_malloc_r>
11208854:	a8c00017 	ldw	r3,0(r21)
11208858:	90c00015 	stw	r3,0(r18)
1120885c:	a8c00117 	ldw	r3,4(r21)
11208860:	90c00115 	stw	r3,4(r18)
11208864:	00c006c4 	movi	r3,27
11208868:	19804536 	bltu	r3,r6,11208980 <_realloc_r+0x470>
1120886c:	90800204 	addi	r2,r18,8
11208870:	a8c00204 	addi	r3,r21,8
11208874:	003f6306 	br	11208604 <__alt_data_end+0xffe88604>
11208878:	9005883a 	mov	r2,r18
1120887c:	a8c00017 	ldw	r3,0(r21)
11208880:	b821883a 	mov	r16,r23
11208884:	b027883a 	mov	r19,r22
11208888:	10c00015 	stw	r3,0(r2)
1120888c:	a8c00117 	ldw	r3,4(r21)
11208890:	10c00115 	stw	r3,4(r2)
11208894:	a8c00217 	ldw	r3,8(r21)
11208898:	10c00215 	stw	r3,8(r2)
1120889c:	003f6a06 	br	11208648 <__alt_data_end+0xffe88648>
112088a0:	9c67883a 	add	r19,r19,r17
112088a4:	4445c83a 	sub	r2,r8,r17
112088a8:	e4c00215 	stw	r19,8(fp)
112088ac:	10800054 	ori	r2,r2,1
112088b0:	98800115 	stw	r2,4(r19)
112088b4:	a8bfff17 	ldw	r2,-4(r21)
112088b8:	a009883a 	mov	r4,r20
112088bc:	1080004c 	andi	r2,r2,1
112088c0:	1462b03a 	or	r17,r2,r17
112088c4:	ac7fff15 	stw	r17,-4(r21)
112088c8:	120e29c0 	call	1120e29c <__malloc_unlock>
112088cc:	a805883a 	mov	r2,r21
112088d0:	003f6b06 	br	11208680 <__alt_data_end+0xffe88680>
112088d4:	a80b883a 	mov	r5,r21
112088d8:	9009883a 	mov	r4,r18
112088dc:	12071280 	call	11207128 <memmove>
112088e0:	003f4e06 	br	1120861c <__alt_data_end+0xffe8861c>
112088e4:	89000404 	addi	r4,r17,16
112088e8:	b93fbc16 	blt	r23,r4,112087dc <__alt_data_end+0xffe887dc>
112088ec:	b0800317 	ldw	r2,12(r22)
112088f0:	b0c00217 	ldw	r3,8(r22)
112088f4:	81bfff04 	addi	r6,r16,-4
112088f8:	01000904 	movi	r4,36
112088fc:	18800315 	stw	r2,12(r3)
11208900:	10c00215 	stw	r3,8(r2)
11208904:	b4800204 	addi	r18,r22,8
11208908:	21804336 	bltu	r4,r6,11208a18 <_realloc_r+0x508>
1120890c:	008004c4 	movi	r2,19
11208910:	11803f2e 	bgeu	r2,r6,11208a10 <_realloc_r+0x500>
11208914:	a8800017 	ldw	r2,0(r21)
11208918:	b0800215 	stw	r2,8(r22)
1120891c:	a8800117 	ldw	r2,4(r21)
11208920:	b0800315 	stw	r2,12(r22)
11208924:	008006c4 	movi	r2,27
11208928:	11803f36 	bltu	r2,r6,11208a28 <_realloc_r+0x518>
1120892c:	b0800404 	addi	r2,r22,16
11208930:	ad400204 	addi	r21,r21,8
11208934:	a8c00017 	ldw	r3,0(r21)
11208938:	10c00015 	stw	r3,0(r2)
1120893c:	a8c00117 	ldw	r3,4(r21)
11208940:	10c00115 	stw	r3,4(r2)
11208944:	a8c00217 	ldw	r3,8(r21)
11208948:	10c00215 	stw	r3,8(r2)
1120894c:	b447883a 	add	r3,r22,r17
11208950:	bc45c83a 	sub	r2,r23,r17
11208954:	e0c00215 	stw	r3,8(fp)
11208958:	10800054 	ori	r2,r2,1
1120895c:	18800115 	stw	r2,4(r3)
11208960:	b0800117 	ldw	r2,4(r22)
11208964:	a009883a 	mov	r4,r20
11208968:	1080004c 	andi	r2,r2,1
1120896c:	1462b03a 	or	r17,r2,r17
11208970:	b4400115 	stw	r17,4(r22)
11208974:	120e29c0 	call	1120e29c <__malloc_unlock>
11208978:	9005883a 	mov	r2,r18
1120897c:	003f4006 	br	11208680 <__alt_data_end+0xffe88680>
11208980:	a8c00217 	ldw	r3,8(r21)
11208984:	90c00215 	stw	r3,8(r18)
11208988:	a8c00317 	ldw	r3,12(r21)
1120898c:	90c00315 	stw	r3,12(r18)
11208990:	30801126 	beq	r6,r2,112089d8 <_realloc_r+0x4c8>
11208994:	90800404 	addi	r2,r18,16
11208998:	a8c00404 	addi	r3,r21,16
1120899c:	003f1906 	br	11208604 <__alt_data_end+0xffe88604>
112089a0:	90ffff17 	ldw	r3,-4(r18)
112089a4:	00bfff04 	movi	r2,-4
112089a8:	a825883a 	mov	r18,r21
112089ac:	1884703a 	and	r2,r3,r2
112089b0:	80a1883a 	add	r16,r16,r2
112089b4:	003f2406 	br	11208648 <__alt_data_end+0xffe88648>
112089b8:	a8800217 	ldw	r2,8(r21)
112089bc:	b0800415 	stw	r2,16(r22)
112089c0:	a8800317 	ldw	r2,12(r21)
112089c4:	b0800515 	stw	r2,20(r22)
112089c8:	31000a26 	beq	r6,r4,112089f4 <_realloc_r+0x4e4>
112089cc:	b0800604 	addi	r2,r22,24
112089d0:	ad400404 	addi	r21,r21,16
112089d4:	003fa906 	br	1120887c <__alt_data_end+0xffe8887c>
112089d8:	a9000417 	ldw	r4,16(r21)
112089dc:	90800604 	addi	r2,r18,24
112089e0:	a8c00604 	addi	r3,r21,24
112089e4:	91000415 	stw	r4,16(r18)
112089e8:	a9000517 	ldw	r4,20(r21)
112089ec:	91000515 	stw	r4,20(r18)
112089f0:	003f0406 	br	11208604 <__alt_data_end+0xffe88604>
112089f4:	a8c00417 	ldw	r3,16(r21)
112089f8:	ad400604 	addi	r21,r21,24
112089fc:	b0800804 	addi	r2,r22,32
11208a00:	b0c00615 	stw	r3,24(r22)
11208a04:	a8ffff17 	ldw	r3,-4(r21)
11208a08:	b0c00715 	stw	r3,28(r22)
11208a0c:	003f9b06 	br	1120887c <__alt_data_end+0xffe8887c>
11208a10:	9005883a 	mov	r2,r18
11208a14:	003fc706 	br	11208934 <__alt_data_end+0xffe88934>
11208a18:	a80b883a 	mov	r5,r21
11208a1c:	9009883a 	mov	r4,r18
11208a20:	12071280 	call	11207128 <memmove>
11208a24:	003fc906 	br	1120894c <__alt_data_end+0xffe8894c>
11208a28:	a8800217 	ldw	r2,8(r21)
11208a2c:	b0800415 	stw	r2,16(r22)
11208a30:	a8800317 	ldw	r2,12(r21)
11208a34:	b0800515 	stw	r2,20(r22)
11208a38:	31000726 	beq	r6,r4,11208a58 <_realloc_r+0x548>
11208a3c:	b0800604 	addi	r2,r22,24
11208a40:	ad400404 	addi	r21,r21,16
11208a44:	003fbb06 	br	11208934 <__alt_data_end+0xffe88934>
11208a48:	a009883a 	mov	r4,r20
11208a4c:	120e29c0 	call	1120e29c <__malloc_unlock>
11208a50:	0005883a 	mov	r2,zero
11208a54:	003f0a06 	br	11208680 <__alt_data_end+0xffe88680>
11208a58:	a8c00417 	ldw	r3,16(r21)
11208a5c:	ad400604 	addi	r21,r21,24
11208a60:	b0800804 	addi	r2,r22,32
11208a64:	b0c00615 	stw	r3,24(r22)
11208a68:	a8ffff17 	ldw	r3,-4(r21)
11208a6c:	b0c00715 	stw	r3,28(r22)
11208a70:	003fb006 	br	11208934 <__alt_data_end+0xffe88934>

11208a74 <__fpclassifyd>:
11208a74:	00a00034 	movhi	r2,32768
11208a78:	10bfffc4 	addi	r2,r2,-1
11208a7c:	2884703a 	and	r2,r5,r2
11208a80:	10000726 	beq	r2,zero,11208aa0 <__fpclassifyd+0x2c>
11208a84:	00fffc34 	movhi	r3,65520
11208a88:	019ff834 	movhi	r6,32736
11208a8c:	28c7883a 	add	r3,r5,r3
11208a90:	31bfffc4 	addi	r6,r6,-1
11208a94:	30c00536 	bltu	r6,r3,11208aac <__fpclassifyd+0x38>
11208a98:	00800104 	movi	r2,4
11208a9c:	f800283a 	ret
11208aa0:	2000021e 	bne	r4,zero,11208aac <__fpclassifyd+0x38>
11208aa4:	00800084 	movi	r2,2
11208aa8:	f800283a 	ret
11208aac:	00dffc34 	movhi	r3,32752
11208ab0:	019ff834 	movhi	r6,32736
11208ab4:	28cb883a 	add	r5,r5,r3
11208ab8:	31bfffc4 	addi	r6,r6,-1
11208abc:	317ff62e 	bgeu	r6,r5,11208a98 <__alt_data_end+0xffe88a98>
11208ac0:	01400434 	movhi	r5,16
11208ac4:	297fffc4 	addi	r5,r5,-1
11208ac8:	28800236 	bltu	r5,r2,11208ad4 <__fpclassifyd+0x60>
11208acc:	008000c4 	movi	r2,3
11208ad0:	f800283a 	ret
11208ad4:	10c00226 	beq	r2,r3,11208ae0 <__fpclassifyd+0x6c>
11208ad8:	0005883a 	mov	r2,zero
11208adc:	f800283a 	ret
11208ae0:	2005003a 	cmpeq	r2,r4,zero
11208ae4:	f800283a 	ret

11208ae8 <_sbrk_r>:
11208ae8:	defffd04 	addi	sp,sp,-12
11208aec:	dc000015 	stw	r16,0(sp)
11208af0:	04044874 	movhi	r16,4385
11208af4:	dc400115 	stw	r17,4(sp)
11208af8:	8408c604 	addi	r16,r16,8984
11208afc:	2023883a 	mov	r17,r4
11208b00:	2809883a 	mov	r4,r5
11208b04:	dfc00215 	stw	ra,8(sp)
11208b08:	80000015 	stw	zero,0(r16)
11208b0c:	120e45c0 	call	1120e45c <sbrk>
11208b10:	00ffffc4 	movi	r3,-1
11208b14:	10c00526 	beq	r2,r3,11208b2c <_sbrk_r+0x44>
11208b18:	dfc00217 	ldw	ra,8(sp)
11208b1c:	dc400117 	ldw	r17,4(sp)
11208b20:	dc000017 	ldw	r16,0(sp)
11208b24:	dec00304 	addi	sp,sp,12
11208b28:	f800283a 	ret
11208b2c:	80c00017 	ldw	r3,0(r16)
11208b30:	183ff926 	beq	r3,zero,11208b18 <__alt_data_end+0xffe88b18>
11208b34:	88c00015 	stw	r3,0(r17)
11208b38:	003ff706 	br	11208b18 <__alt_data_end+0xffe88b18>

11208b3c <__sread>:
11208b3c:	defffe04 	addi	sp,sp,-8
11208b40:	dc000015 	stw	r16,0(sp)
11208b44:	2821883a 	mov	r16,r5
11208b48:	2940038f 	ldh	r5,14(r5)
11208b4c:	dfc00115 	stw	ra,4(sp)
11208b50:	120aa880 	call	1120aa88 <_read_r>
11208b54:	10000716 	blt	r2,zero,11208b74 <__sread+0x38>
11208b58:	80c01417 	ldw	r3,80(r16)
11208b5c:	1887883a 	add	r3,r3,r2
11208b60:	80c01415 	stw	r3,80(r16)
11208b64:	dfc00117 	ldw	ra,4(sp)
11208b68:	dc000017 	ldw	r16,0(sp)
11208b6c:	dec00204 	addi	sp,sp,8
11208b70:	f800283a 	ret
11208b74:	80c0030b 	ldhu	r3,12(r16)
11208b78:	18fbffcc 	andi	r3,r3,61439
11208b7c:	80c0030d 	sth	r3,12(r16)
11208b80:	dfc00117 	ldw	ra,4(sp)
11208b84:	dc000017 	ldw	r16,0(sp)
11208b88:	dec00204 	addi	sp,sp,8
11208b8c:	f800283a 	ret

11208b90 <__seofread>:
11208b90:	0005883a 	mov	r2,zero
11208b94:	f800283a 	ret

11208b98 <__swrite>:
11208b98:	2880030b 	ldhu	r2,12(r5)
11208b9c:	defffb04 	addi	sp,sp,-20
11208ba0:	dcc00315 	stw	r19,12(sp)
11208ba4:	dc800215 	stw	r18,8(sp)
11208ba8:	dc400115 	stw	r17,4(sp)
11208bac:	dc000015 	stw	r16,0(sp)
11208bb0:	dfc00415 	stw	ra,16(sp)
11208bb4:	10c0400c 	andi	r3,r2,256
11208bb8:	2821883a 	mov	r16,r5
11208bbc:	2023883a 	mov	r17,r4
11208bc0:	3025883a 	mov	r18,r6
11208bc4:	3827883a 	mov	r19,r7
11208bc8:	18000526 	beq	r3,zero,11208be0 <__swrite+0x48>
11208bcc:	2940038f 	ldh	r5,14(r5)
11208bd0:	01c00084 	movi	r7,2
11208bd4:	000d883a 	mov	r6,zero
11208bd8:	120aa280 	call	1120aa28 <_lseek_r>
11208bdc:	8080030b 	ldhu	r2,12(r16)
11208be0:	8140038f 	ldh	r5,14(r16)
11208be4:	10bbffcc 	andi	r2,r2,61439
11208be8:	980f883a 	mov	r7,r19
11208bec:	900d883a 	mov	r6,r18
11208bf0:	8809883a 	mov	r4,r17
11208bf4:	8080030d 	sth	r2,12(r16)
11208bf8:	dfc00417 	ldw	ra,16(sp)
11208bfc:	dcc00317 	ldw	r19,12(sp)
11208c00:	dc800217 	ldw	r18,8(sp)
11208c04:	dc400117 	ldw	r17,4(sp)
11208c08:	dc000017 	ldw	r16,0(sp)
11208c0c:	dec00504 	addi	sp,sp,20
11208c10:	120a4f41 	jmpi	1120a4f4 <_write_r>

11208c14 <__sseek>:
11208c14:	defffe04 	addi	sp,sp,-8
11208c18:	dc000015 	stw	r16,0(sp)
11208c1c:	2821883a 	mov	r16,r5
11208c20:	2940038f 	ldh	r5,14(r5)
11208c24:	dfc00115 	stw	ra,4(sp)
11208c28:	120aa280 	call	1120aa28 <_lseek_r>
11208c2c:	00ffffc4 	movi	r3,-1
11208c30:	10c00826 	beq	r2,r3,11208c54 <__sseek+0x40>
11208c34:	80c0030b 	ldhu	r3,12(r16)
11208c38:	80801415 	stw	r2,80(r16)
11208c3c:	18c40014 	ori	r3,r3,4096
11208c40:	80c0030d 	sth	r3,12(r16)
11208c44:	dfc00117 	ldw	ra,4(sp)
11208c48:	dc000017 	ldw	r16,0(sp)
11208c4c:	dec00204 	addi	sp,sp,8
11208c50:	f800283a 	ret
11208c54:	80c0030b 	ldhu	r3,12(r16)
11208c58:	18fbffcc 	andi	r3,r3,61439
11208c5c:	80c0030d 	sth	r3,12(r16)
11208c60:	dfc00117 	ldw	ra,4(sp)
11208c64:	dc000017 	ldw	r16,0(sp)
11208c68:	dec00204 	addi	sp,sp,8
11208c6c:	f800283a 	ret

11208c70 <__sclose>:
11208c70:	2940038f 	ldh	r5,14(r5)
11208c74:	120a5541 	jmpi	1120a554 <_close_r>

11208c78 <strcmp>:
11208c78:	2144b03a 	or	r2,r4,r5
11208c7c:	108000cc 	andi	r2,r2,3
11208c80:	1000171e 	bne	r2,zero,11208ce0 <strcmp+0x68>
11208c84:	20800017 	ldw	r2,0(r4)
11208c88:	28c00017 	ldw	r3,0(r5)
11208c8c:	10c0141e 	bne	r2,r3,11208ce0 <strcmp+0x68>
11208c90:	027fbff4 	movhi	r9,65279
11208c94:	4a7fbfc4 	addi	r9,r9,-257
11208c98:	0086303a 	nor	r3,zero,r2
11208c9c:	02202074 	movhi	r8,32897
11208ca0:	1245883a 	add	r2,r2,r9
11208ca4:	42202004 	addi	r8,r8,-32640
11208ca8:	10c4703a 	and	r2,r2,r3
11208cac:	1204703a 	and	r2,r2,r8
11208cb0:	10000226 	beq	r2,zero,11208cbc <strcmp+0x44>
11208cb4:	00002306 	br	11208d44 <strcmp+0xcc>
11208cb8:	1000221e 	bne	r2,zero,11208d44 <strcmp+0xcc>
11208cbc:	21000104 	addi	r4,r4,4
11208cc0:	20c00017 	ldw	r3,0(r4)
11208cc4:	29400104 	addi	r5,r5,4
11208cc8:	29800017 	ldw	r6,0(r5)
11208ccc:	1a4f883a 	add	r7,r3,r9
11208cd0:	00c4303a 	nor	r2,zero,r3
11208cd4:	3884703a 	and	r2,r7,r2
11208cd8:	1204703a 	and	r2,r2,r8
11208cdc:	19bff626 	beq	r3,r6,11208cb8 <__alt_data_end+0xffe88cb8>
11208ce0:	20800003 	ldbu	r2,0(r4)
11208ce4:	10c03fcc 	andi	r3,r2,255
11208ce8:	18c0201c 	xori	r3,r3,128
11208cec:	18ffe004 	addi	r3,r3,-128
11208cf0:	18000c26 	beq	r3,zero,11208d24 <strcmp+0xac>
11208cf4:	29800007 	ldb	r6,0(r5)
11208cf8:	19800326 	beq	r3,r6,11208d08 <strcmp+0x90>
11208cfc:	00001306 	br	11208d4c <strcmp+0xd4>
11208d00:	29800007 	ldb	r6,0(r5)
11208d04:	11800b1e 	bne	r2,r6,11208d34 <strcmp+0xbc>
11208d08:	21000044 	addi	r4,r4,1
11208d0c:	20c00003 	ldbu	r3,0(r4)
11208d10:	29400044 	addi	r5,r5,1
11208d14:	18803fcc 	andi	r2,r3,255
11208d18:	1080201c 	xori	r2,r2,128
11208d1c:	10bfe004 	addi	r2,r2,-128
11208d20:	103ff71e 	bne	r2,zero,11208d00 <__alt_data_end+0xffe88d00>
11208d24:	0007883a 	mov	r3,zero
11208d28:	28800003 	ldbu	r2,0(r5)
11208d2c:	1885c83a 	sub	r2,r3,r2
11208d30:	f800283a 	ret
11208d34:	28800003 	ldbu	r2,0(r5)
11208d38:	18c03fcc 	andi	r3,r3,255
11208d3c:	1885c83a 	sub	r2,r3,r2
11208d40:	f800283a 	ret
11208d44:	0005883a 	mov	r2,zero
11208d48:	f800283a 	ret
11208d4c:	10c03fcc 	andi	r3,r2,255
11208d50:	003ff506 	br	11208d28 <__alt_data_end+0xffe88d28>

11208d54 <__sprint_r.part.0>:
11208d54:	28801917 	ldw	r2,100(r5)
11208d58:	defff604 	addi	sp,sp,-40
11208d5c:	dd400515 	stw	r21,20(sp)
11208d60:	dfc00915 	stw	ra,36(sp)
11208d64:	df000815 	stw	fp,32(sp)
11208d68:	ddc00715 	stw	r23,28(sp)
11208d6c:	dd800615 	stw	r22,24(sp)
11208d70:	dd000415 	stw	r20,16(sp)
11208d74:	dcc00315 	stw	r19,12(sp)
11208d78:	dc800215 	stw	r18,8(sp)
11208d7c:	dc400115 	stw	r17,4(sp)
11208d80:	dc000015 	stw	r16,0(sp)
11208d84:	1088000c 	andi	r2,r2,8192
11208d88:	302b883a 	mov	r21,r6
11208d8c:	10002e26 	beq	r2,zero,11208e48 <__sprint_r.part.0+0xf4>
11208d90:	30800217 	ldw	r2,8(r6)
11208d94:	35800017 	ldw	r22,0(r6)
11208d98:	10002926 	beq	r2,zero,11208e40 <__sprint_r.part.0+0xec>
11208d9c:	2827883a 	mov	r19,r5
11208da0:	2029883a 	mov	r20,r4
11208da4:	b5c00104 	addi	r23,r22,4
11208da8:	04bfffc4 	movi	r18,-1
11208dac:	bc400017 	ldw	r17,0(r23)
11208db0:	b4000017 	ldw	r16,0(r22)
11208db4:	0039883a 	mov	fp,zero
11208db8:	8822d0ba 	srli	r17,r17,2
11208dbc:	8800031e 	bne	r17,zero,11208dcc <__sprint_r.part.0+0x78>
11208dc0:	00001806 	br	11208e24 <__sprint_r.part.0+0xd0>
11208dc4:	84000104 	addi	r16,r16,4
11208dc8:	8f001526 	beq	r17,fp,11208e20 <__sprint_r.part.0+0xcc>
11208dcc:	81400017 	ldw	r5,0(r16)
11208dd0:	980d883a 	mov	r6,r19
11208dd4:	a009883a 	mov	r4,r20
11208dd8:	120a8d40 	call	1120a8d4 <_fputwc_r>
11208ddc:	e7000044 	addi	fp,fp,1
11208de0:	14bff81e 	bne	r2,r18,11208dc4 <__alt_data_end+0xffe88dc4>
11208de4:	9005883a 	mov	r2,r18
11208de8:	a8000215 	stw	zero,8(r21)
11208dec:	a8000115 	stw	zero,4(r21)
11208df0:	dfc00917 	ldw	ra,36(sp)
11208df4:	df000817 	ldw	fp,32(sp)
11208df8:	ddc00717 	ldw	r23,28(sp)
11208dfc:	dd800617 	ldw	r22,24(sp)
11208e00:	dd400517 	ldw	r21,20(sp)
11208e04:	dd000417 	ldw	r20,16(sp)
11208e08:	dcc00317 	ldw	r19,12(sp)
11208e0c:	dc800217 	ldw	r18,8(sp)
11208e10:	dc400117 	ldw	r17,4(sp)
11208e14:	dc000017 	ldw	r16,0(sp)
11208e18:	dec00a04 	addi	sp,sp,40
11208e1c:	f800283a 	ret
11208e20:	a8800217 	ldw	r2,8(r21)
11208e24:	8c63883a 	add	r17,r17,r17
11208e28:	8c63883a 	add	r17,r17,r17
11208e2c:	1445c83a 	sub	r2,r2,r17
11208e30:	a8800215 	stw	r2,8(r21)
11208e34:	b5800204 	addi	r22,r22,8
11208e38:	bdc00204 	addi	r23,r23,8
11208e3c:	103fdb1e 	bne	r2,zero,11208dac <__alt_data_end+0xffe88dac>
11208e40:	0005883a 	mov	r2,zero
11208e44:	003fe806 	br	11208de8 <__alt_data_end+0xffe88de8>
11208e48:	1205e140 	call	11205e14 <__sfvwrite_r>
11208e4c:	003fe606 	br	11208de8 <__alt_data_end+0xffe88de8>

11208e50 <__sprint_r>:
11208e50:	30c00217 	ldw	r3,8(r6)
11208e54:	18000126 	beq	r3,zero,11208e5c <__sprint_r+0xc>
11208e58:	1208d541 	jmpi	11208d54 <__sprint_r.part.0>
11208e5c:	30000115 	stw	zero,4(r6)
11208e60:	0005883a 	mov	r2,zero
11208e64:	f800283a 	ret

11208e68 <___vfiprintf_internal_r>:
11208e68:	deffc904 	addi	sp,sp,-220
11208e6c:	df003515 	stw	fp,212(sp)
11208e70:	dd003115 	stw	r20,196(sp)
11208e74:	dfc03615 	stw	ra,216(sp)
11208e78:	ddc03415 	stw	r23,208(sp)
11208e7c:	dd803315 	stw	r22,204(sp)
11208e80:	dd403215 	stw	r21,200(sp)
11208e84:	dcc03015 	stw	r19,192(sp)
11208e88:	dc802f15 	stw	r18,188(sp)
11208e8c:	dc402e15 	stw	r17,184(sp)
11208e90:	dc002d15 	stw	r16,180(sp)
11208e94:	d9002015 	stw	r4,128(sp)
11208e98:	d9c02215 	stw	r7,136(sp)
11208e9c:	2829883a 	mov	r20,r5
11208ea0:	3039883a 	mov	fp,r6
11208ea4:	20000226 	beq	r4,zero,11208eb0 <___vfiprintf_internal_r+0x48>
11208ea8:	20800e17 	ldw	r2,56(r4)
11208eac:	1000cf26 	beq	r2,zero,112091ec <___vfiprintf_internal_r+0x384>
11208eb0:	a080030b 	ldhu	r2,12(r20)
11208eb4:	10c8000c 	andi	r3,r2,8192
11208eb8:	1800061e 	bne	r3,zero,11208ed4 <___vfiprintf_internal_r+0x6c>
11208ebc:	a1001917 	ldw	r4,100(r20)
11208ec0:	00f7ffc4 	movi	r3,-8193
11208ec4:	10880014 	ori	r2,r2,8192
11208ec8:	20c6703a 	and	r3,r4,r3
11208ecc:	a080030d 	sth	r2,12(r20)
11208ed0:	a0c01915 	stw	r3,100(r20)
11208ed4:	10c0020c 	andi	r3,r2,8
11208ed8:	1800a926 	beq	r3,zero,11209180 <___vfiprintf_internal_r+0x318>
11208edc:	a0c00417 	ldw	r3,16(r20)
11208ee0:	1800a726 	beq	r3,zero,11209180 <___vfiprintf_internal_r+0x318>
11208ee4:	1080068c 	andi	r2,r2,26
11208ee8:	00c00284 	movi	r3,10
11208eec:	10c0ac26 	beq	r2,r3,112091a0 <___vfiprintf_internal_r+0x338>
11208ef0:	da801a04 	addi	r10,sp,104
11208ef4:	da801e15 	stw	r10,120(sp)
11208ef8:	d8801e17 	ldw	r2,120(sp)
11208efc:	da8019c4 	addi	r10,sp,103
11208f00:	05844874 	movhi	r22,4385
11208f04:	05c44874 	movhi	r23,4385
11208f08:	da801f15 	stw	r10,124(sp)
11208f0c:	1295c83a 	sub	r10,r2,r10
11208f10:	b581b204 	addi	r22,r22,1736
11208f14:	bdc1ae04 	addi	r23,r23,1720
11208f18:	dec01a15 	stw	sp,104(sp)
11208f1c:	d8001c15 	stw	zero,112(sp)
11208f20:	d8001b15 	stw	zero,108(sp)
11208f24:	d8002615 	stw	zero,152(sp)
11208f28:	d8002315 	stw	zero,140(sp)
11208f2c:	da802715 	stw	r10,156(sp)
11208f30:	d811883a 	mov	r8,sp
11208f34:	dd002115 	stw	r20,132(sp)
11208f38:	e021883a 	mov	r16,fp
11208f3c:	80800007 	ldb	r2,0(r16)
11208f40:	1003ea26 	beq	r2,zero,11209eec <___vfiprintf_internal_r+0x1084>
11208f44:	00c00944 	movi	r3,37
11208f48:	8025883a 	mov	r18,r16
11208f4c:	10c0021e 	bne	r2,r3,11208f58 <___vfiprintf_internal_r+0xf0>
11208f50:	00001606 	br	11208fac <___vfiprintf_internal_r+0x144>
11208f54:	10c00326 	beq	r2,r3,11208f64 <___vfiprintf_internal_r+0xfc>
11208f58:	94800044 	addi	r18,r18,1
11208f5c:	90800007 	ldb	r2,0(r18)
11208f60:	103ffc1e 	bne	r2,zero,11208f54 <__alt_data_end+0xffe88f54>
11208f64:	9423c83a 	sub	r17,r18,r16
11208f68:	88001026 	beq	r17,zero,11208fac <___vfiprintf_internal_r+0x144>
11208f6c:	d8c01c17 	ldw	r3,112(sp)
11208f70:	d8801b17 	ldw	r2,108(sp)
11208f74:	44000015 	stw	r16,0(r8)
11208f78:	88c7883a 	add	r3,r17,r3
11208f7c:	10800044 	addi	r2,r2,1
11208f80:	44400115 	stw	r17,4(r8)
11208f84:	d8c01c15 	stw	r3,112(sp)
11208f88:	d8801b15 	stw	r2,108(sp)
11208f8c:	010001c4 	movi	r4,7
11208f90:	2080760e 	bge	r4,r2,1120916c <___vfiprintf_internal_r+0x304>
11208f94:	1803821e 	bne	r3,zero,11209da0 <___vfiprintf_internal_r+0xf38>
11208f98:	da802317 	ldw	r10,140(sp)
11208f9c:	d8001b15 	stw	zero,108(sp)
11208fa0:	d811883a 	mov	r8,sp
11208fa4:	5455883a 	add	r10,r10,r17
11208fa8:	da802315 	stw	r10,140(sp)
11208fac:	90800007 	ldb	r2,0(r18)
11208fb0:	10044626 	beq	r2,zero,1120a0cc <___vfiprintf_internal_r+0x1264>
11208fb4:	90c00047 	ldb	r3,1(r18)
11208fb8:	94000044 	addi	r16,r18,1
11208fbc:	d8001d85 	stb	zero,118(sp)
11208fc0:	0009883a 	mov	r4,zero
11208fc4:	000f883a 	mov	r7,zero
11208fc8:	027fffc4 	movi	r9,-1
11208fcc:	0023883a 	mov	r17,zero
11208fd0:	0029883a 	mov	r20,zero
11208fd4:	01401604 	movi	r5,88
11208fd8:	01800244 	movi	r6,9
11208fdc:	03400a84 	movi	r13,42
11208fe0:	03001b04 	movi	r12,108
11208fe4:	84000044 	addi	r16,r16,1
11208fe8:	18bff804 	addi	r2,r3,-32
11208fec:	28827336 	bltu	r5,r2,112099bc <___vfiprintf_internal_r+0xb54>
11208ff0:	100490ba 	slli	r2,r2,2
11208ff4:	02844874 	movhi	r10,4385
11208ff8:	52a40204 	addi	r10,r10,-28664
11208ffc:	1285883a 	add	r2,r2,r10
11209000:	10800017 	ldw	r2,0(r2)
11209004:	1000683a 	jmp	r2
11209008:	112096f0 	cmpltui	r4,r2,33371
1120900c:	112099bc 	xorhi	r4,r2,33382
11209010:	112099bc 	xorhi	r4,r2,33382
11209014:	11209710 	cmplti	r4,r2,-32164
11209018:	112099bc 	xorhi	r4,r2,33382
1120901c:	112099bc 	xorhi	r4,r2,33382
11209020:	112099bc 	xorhi	r4,r2,33382
11209024:	112099bc 	xorhi	r4,r2,33382
11209028:	112099bc 	xorhi	r4,r2,33382
1120902c:	112099bc 	xorhi	r4,r2,33382
11209030:	112098f8 	rdprs	r4,r2,-32157
11209034:	11209914 	ori	r4,r2,33380
11209038:	112099bc 	xorhi	r4,r2,33382
1120903c:	112091fc 	xorhi	r4,r2,33351
11209040:	11209924 	muli	r4,r2,-32156
11209044:	112099bc 	xorhi	r4,r2,33382
11209048:	1120971c 	xori	r4,r2,33372
1120904c:	11209728 	cmpgeui	r4,r2,33372
11209050:	11209728 	cmpgeui	r4,r2,33372
11209054:	11209728 	cmpgeui	r4,r2,33372
11209058:	11209728 	cmpgeui	r4,r2,33372
1120905c:	11209728 	cmpgeui	r4,r2,33372
11209060:	11209728 	cmpgeui	r4,r2,33372
11209064:	11209728 	cmpgeui	r4,r2,33372
11209068:	11209728 	cmpgeui	r4,r2,33372
1120906c:	11209728 	cmpgeui	r4,r2,33372
11209070:	112099bc 	xorhi	r4,r2,33382
11209074:	112099bc 	xorhi	r4,r2,33382
11209078:	112099bc 	xorhi	r4,r2,33382
1120907c:	112099bc 	xorhi	r4,r2,33382
11209080:	112099bc 	xorhi	r4,r2,33382
11209084:	112099bc 	xorhi	r4,r2,33382
11209088:	112099bc 	xorhi	r4,r2,33382
1120908c:	112099bc 	xorhi	r4,r2,33382
11209090:	112099bc 	xorhi	r4,r2,33382
11209094:	112099bc 	xorhi	r4,r2,33382
11209098:	11209754 	ori	r4,r2,33373
1120909c:	112099bc 	xorhi	r4,r2,33382
112090a0:	112099bc 	xorhi	r4,r2,33382
112090a4:	112099bc 	xorhi	r4,r2,33382
112090a8:	112099bc 	xorhi	r4,r2,33382
112090ac:	112099bc 	xorhi	r4,r2,33382
112090b0:	112099bc 	xorhi	r4,r2,33382
112090b4:	112099bc 	xorhi	r4,r2,33382
112090b8:	112099bc 	xorhi	r4,r2,33382
112090bc:	112099bc 	xorhi	r4,r2,33382
112090c0:	112099bc 	xorhi	r4,r2,33382
112090c4:	1120978c 	andi	r4,r2,33374
112090c8:	112099bc 	xorhi	r4,r2,33382
112090cc:	112099bc 	xorhi	r4,r2,33382
112090d0:	112099bc 	xorhi	r4,r2,33382
112090d4:	112099bc 	xorhi	r4,r2,33382
112090d8:	112099bc 	xorhi	r4,r2,33382
112090dc:	112097e4 	muli	r4,r2,-32161
112090e0:	112099bc 	xorhi	r4,r2,33382
112090e4:	112099bc 	xorhi	r4,r2,33382
112090e8:	11209854 	ori	r4,r2,33377
112090ec:	112099bc 	xorhi	r4,r2,33382
112090f0:	112099bc 	xorhi	r4,r2,33382
112090f4:	112099bc 	xorhi	r4,r2,33382
112090f8:	112099bc 	xorhi	r4,r2,33382
112090fc:	112099bc 	xorhi	r4,r2,33382
11209100:	112099bc 	xorhi	r4,r2,33382
11209104:	112099bc 	xorhi	r4,r2,33382
11209108:	112099bc 	xorhi	r4,r2,33382
1120910c:	112099bc 	xorhi	r4,r2,33382
11209110:	112099bc 	xorhi	r4,r2,33382
11209114:	11209600 	call	11120960 <__reset+0xcfe0960>
11209118:	1120962c 	andhi	r4,r2,33368
1120911c:	112099bc 	xorhi	r4,r2,33382
11209120:	112099bc 	xorhi	r4,r2,33382
11209124:	112099bc 	xorhi	r4,r2,33382
11209128:	11209964 	muli	r4,r2,-32155
1120912c:	1120962c 	andhi	r4,r2,33368
11209130:	112099bc 	xorhi	r4,r2,33382
11209134:	112099bc 	xorhi	r4,r2,33382
11209138:	112094c0 	call	1112094c <__reset+0xcfe094c>
1120913c:	112099bc 	xorhi	r4,r2,33382
11209140:	112094d0 	cmplti	r4,r2,-32173
11209144:	1120950c 	andi	r4,r2,33364
11209148:	11209208 	cmpgei	r4,r2,-32184
1120914c:	112094b4 	orhi	r4,r2,33362
11209150:	112099bc 	xorhi	r4,r2,33382
11209154:	11209890 	cmplti	r4,r2,-32158
11209158:	112099bc 	xorhi	r4,r2,33382
1120915c:	112098e8 	cmpgeui	r4,r2,33379
11209160:	112099bc 	xorhi	r4,r2,33382
11209164:	112099bc 	xorhi	r4,r2,33382
11209168:	112095ac 	andhi	r4,r2,33366
1120916c:	42000204 	addi	r8,r8,8
11209170:	da802317 	ldw	r10,140(sp)
11209174:	5455883a 	add	r10,r10,r17
11209178:	da802315 	stw	r10,140(sp)
1120917c:	003f8b06 	br	11208fac <__alt_data_end+0xffe88fac>
11209180:	d9002017 	ldw	r4,128(sp)
11209184:	a00b883a 	mov	r5,r20
11209188:	12039bc0 	call	112039bc <__swsetup_r>
1120918c:	1003b11e 	bne	r2,zero,1120a054 <___vfiprintf_internal_r+0x11ec>
11209190:	a080030b 	ldhu	r2,12(r20)
11209194:	00c00284 	movi	r3,10
11209198:	1080068c 	andi	r2,r2,26
1120919c:	10ff541e 	bne	r2,r3,11208ef0 <__alt_data_end+0xffe88ef0>
112091a0:	a080038f 	ldh	r2,14(r20)
112091a4:	103f5216 	blt	r2,zero,11208ef0 <__alt_data_end+0xffe88ef0>
112091a8:	d9c02217 	ldw	r7,136(sp)
112091ac:	d9002017 	ldw	r4,128(sp)
112091b0:	e00d883a 	mov	r6,fp
112091b4:	a00b883a 	mov	r5,r20
112091b8:	120a2e00 	call	1120a2e0 <__sbprintf>
112091bc:	dfc03617 	ldw	ra,216(sp)
112091c0:	df003517 	ldw	fp,212(sp)
112091c4:	ddc03417 	ldw	r23,208(sp)
112091c8:	dd803317 	ldw	r22,204(sp)
112091cc:	dd403217 	ldw	r21,200(sp)
112091d0:	dd003117 	ldw	r20,196(sp)
112091d4:	dcc03017 	ldw	r19,192(sp)
112091d8:	dc802f17 	ldw	r18,188(sp)
112091dc:	dc402e17 	ldw	r17,184(sp)
112091e0:	dc002d17 	ldw	r16,180(sp)
112091e4:	dec03704 	addi	sp,sp,220
112091e8:	f800283a 	ret
112091ec:	12059900 	call	11205990 <__sinit>
112091f0:	003f2f06 	br	11208eb0 <__alt_data_end+0xffe88eb0>
112091f4:	0463c83a 	sub	r17,zero,r17
112091f8:	d8802215 	stw	r2,136(sp)
112091fc:	a5000114 	ori	r20,r20,4
11209200:	80c00007 	ldb	r3,0(r16)
11209204:	003f7706 	br	11208fe4 <__alt_data_end+0xffe88fe4>
11209208:	00800c04 	movi	r2,48
1120920c:	da802217 	ldw	r10,136(sp)
11209210:	d8801d05 	stb	r2,116(sp)
11209214:	00801e04 	movi	r2,120
11209218:	d8801d45 	stb	r2,117(sp)
1120921c:	d8001d85 	stb	zero,118(sp)
11209220:	50c00104 	addi	r3,r10,4
11209224:	54800017 	ldw	r18,0(r10)
11209228:	0027883a 	mov	r19,zero
1120922c:	a0800094 	ori	r2,r20,2
11209230:	48030b16 	blt	r9,zero,11209e60 <___vfiprintf_internal_r+0xff8>
11209234:	00bfdfc4 	movi	r2,-129
11209238:	a096703a 	and	r11,r20,r2
1120923c:	d8c02215 	stw	r3,136(sp)
11209240:	5d000094 	ori	r20,r11,2
11209244:	90032b1e 	bne	r18,zero,11209ef4 <___vfiprintf_internal_r+0x108c>
11209248:	00844874 	movhi	r2,4385
1120924c:	10814d04 	addi	r2,r2,1332
11209250:	d8802615 	stw	r2,152(sp)
11209254:	0039883a 	mov	fp,zero
11209258:	48017b1e 	bne	r9,zero,11209848 <___vfiprintf_internal_r+0x9e0>
1120925c:	0013883a 	mov	r9,zero
11209260:	0027883a 	mov	r19,zero
11209264:	dd401a04 	addi	r21,sp,104
11209268:	4825883a 	mov	r18,r9
1120926c:	4cc0010e 	bge	r9,r19,11209274 <___vfiprintf_internal_r+0x40c>
11209270:	9825883a 	mov	r18,r19
11209274:	e7003fcc 	andi	fp,fp,255
11209278:	e700201c 	xori	fp,fp,128
1120927c:	e73fe004 	addi	fp,fp,-128
11209280:	e0000126 	beq	fp,zero,11209288 <___vfiprintf_internal_r+0x420>
11209284:	94800044 	addi	r18,r18,1
11209288:	a380008c 	andi	r14,r20,2
1120928c:	70000126 	beq	r14,zero,11209294 <___vfiprintf_internal_r+0x42c>
11209290:	94800084 	addi	r18,r18,2
11209294:	a700210c 	andi	fp,r20,132
11209298:	e001df1e 	bne	fp,zero,11209a18 <___vfiprintf_internal_r+0xbb0>
1120929c:	8c87c83a 	sub	r3,r17,r18
112092a0:	00c1dd0e 	bge	zero,r3,11209a18 <___vfiprintf_internal_r+0xbb0>
112092a4:	01c00404 	movi	r7,16
112092a8:	d8801c17 	ldw	r2,112(sp)
112092ac:	38c3ad0e 	bge	r7,r3,1120a164 <___vfiprintf_internal_r+0x12fc>
112092b0:	02844874 	movhi	r10,4385
112092b4:	5281b204 	addi	r10,r10,1736
112092b8:	dc002915 	stw	r16,164(sp)
112092bc:	d9801b17 	ldw	r6,108(sp)
112092c0:	da802415 	stw	r10,144(sp)
112092c4:	03c001c4 	movi	r15,7
112092c8:	da402515 	stw	r9,148(sp)
112092cc:	db802815 	stw	r14,160(sp)
112092d0:	1821883a 	mov	r16,r3
112092d4:	00000506 	br	112092ec <___vfiprintf_internal_r+0x484>
112092d8:	31400084 	addi	r5,r6,2
112092dc:	42000204 	addi	r8,r8,8
112092e0:	200d883a 	mov	r6,r4
112092e4:	843ffc04 	addi	r16,r16,-16
112092e8:	3c000d0e 	bge	r7,r16,11209320 <___vfiprintf_internal_r+0x4b8>
112092ec:	10800404 	addi	r2,r2,16
112092f0:	31000044 	addi	r4,r6,1
112092f4:	45800015 	stw	r22,0(r8)
112092f8:	41c00115 	stw	r7,4(r8)
112092fc:	d8801c15 	stw	r2,112(sp)
11209300:	d9001b15 	stw	r4,108(sp)
11209304:	793ff40e 	bge	r15,r4,112092d8 <__alt_data_end+0xffe892d8>
11209308:	1001b51e 	bne	r2,zero,112099e0 <___vfiprintf_internal_r+0xb78>
1120930c:	843ffc04 	addi	r16,r16,-16
11209310:	000d883a 	mov	r6,zero
11209314:	01400044 	movi	r5,1
11209318:	d811883a 	mov	r8,sp
1120931c:	3c3ff316 	blt	r7,r16,112092ec <__alt_data_end+0xffe892ec>
11209320:	8007883a 	mov	r3,r16
11209324:	da402517 	ldw	r9,148(sp)
11209328:	db802817 	ldw	r14,160(sp)
1120932c:	dc002917 	ldw	r16,164(sp)
11209330:	da802417 	ldw	r10,144(sp)
11209334:	1885883a 	add	r2,r3,r2
11209338:	40c00115 	stw	r3,4(r8)
1120933c:	42800015 	stw	r10,0(r8)
11209340:	d8801c15 	stw	r2,112(sp)
11209344:	d9401b15 	stw	r5,108(sp)
11209348:	00c001c4 	movi	r3,7
1120934c:	19426016 	blt	r3,r5,11209cd0 <___vfiprintf_internal_r+0xe68>
11209350:	d8c01d87 	ldb	r3,118(sp)
11209354:	42000204 	addi	r8,r8,8
11209358:	29000044 	addi	r4,r5,1
1120935c:	1801b31e 	bne	r3,zero,11209a2c <___vfiprintf_internal_r+0xbc4>
11209360:	7001c026 	beq	r14,zero,11209a64 <___vfiprintf_internal_r+0xbfc>
11209364:	d8c01d04 	addi	r3,sp,116
11209368:	10800084 	addi	r2,r2,2
1120936c:	40c00015 	stw	r3,0(r8)
11209370:	00c00084 	movi	r3,2
11209374:	40c00115 	stw	r3,4(r8)
11209378:	d8801c15 	stw	r2,112(sp)
1120937c:	d9001b15 	stw	r4,108(sp)
11209380:	00c001c4 	movi	r3,7
11209384:	1902650e 	bge	r3,r4,11209d1c <___vfiprintf_internal_r+0xeb4>
11209388:	10029a1e 	bne	r2,zero,11209df4 <___vfiprintf_internal_r+0xf8c>
1120938c:	00c02004 	movi	r3,128
11209390:	01000044 	movi	r4,1
11209394:	000b883a 	mov	r5,zero
11209398:	d811883a 	mov	r8,sp
1120939c:	e0c1b31e 	bne	fp,r3,11209a6c <___vfiprintf_internal_r+0xc04>
112093a0:	8cb9c83a 	sub	fp,r17,r18
112093a4:	0701b10e 	bge	zero,fp,11209a6c <___vfiprintf_internal_r+0xc04>
112093a8:	01c00404 	movi	r7,16
112093ac:	3f03890e 	bge	r7,fp,1120a1d4 <___vfiprintf_internal_r+0x136c>
112093b0:	00c44874 	movhi	r3,4385
112093b4:	18c1ae04 	addi	r3,r3,1720
112093b8:	d8c02415 	stw	r3,144(sp)
112093bc:	8007883a 	mov	r3,r16
112093c0:	034001c4 	movi	r13,7
112093c4:	e021883a 	mov	r16,fp
112093c8:	da402515 	stw	r9,148(sp)
112093cc:	1839883a 	mov	fp,r3
112093d0:	00000506 	br	112093e8 <___vfiprintf_internal_r+0x580>
112093d4:	29800084 	addi	r6,r5,2
112093d8:	42000204 	addi	r8,r8,8
112093dc:	180b883a 	mov	r5,r3
112093e0:	843ffc04 	addi	r16,r16,-16
112093e4:	3c000d0e 	bge	r7,r16,1120941c <___vfiprintf_internal_r+0x5b4>
112093e8:	10800404 	addi	r2,r2,16
112093ec:	28c00044 	addi	r3,r5,1
112093f0:	45c00015 	stw	r23,0(r8)
112093f4:	41c00115 	stw	r7,4(r8)
112093f8:	d8801c15 	stw	r2,112(sp)
112093fc:	d8c01b15 	stw	r3,108(sp)
11209400:	68fff40e 	bge	r13,r3,112093d4 <__alt_data_end+0xffe893d4>
11209404:	1002241e 	bne	r2,zero,11209c98 <___vfiprintf_internal_r+0xe30>
11209408:	843ffc04 	addi	r16,r16,-16
1120940c:	01800044 	movi	r6,1
11209410:	000b883a 	mov	r5,zero
11209414:	d811883a 	mov	r8,sp
11209418:	3c3ff316 	blt	r7,r16,112093e8 <__alt_data_end+0xffe893e8>
1120941c:	da402517 	ldw	r9,148(sp)
11209420:	e007883a 	mov	r3,fp
11209424:	8039883a 	mov	fp,r16
11209428:	1821883a 	mov	r16,r3
1120942c:	d8c02417 	ldw	r3,144(sp)
11209430:	1705883a 	add	r2,r2,fp
11209434:	47000115 	stw	fp,4(r8)
11209438:	40c00015 	stw	r3,0(r8)
1120943c:	d8801c15 	stw	r2,112(sp)
11209440:	d9801b15 	stw	r6,108(sp)
11209444:	00c001c4 	movi	r3,7
11209448:	19827616 	blt	r3,r6,11209e24 <___vfiprintf_internal_r+0xfbc>
1120944c:	4cf9c83a 	sub	fp,r9,r19
11209450:	42000204 	addi	r8,r8,8
11209454:	31000044 	addi	r4,r6,1
11209458:	300b883a 	mov	r5,r6
1120945c:	07018516 	blt	zero,fp,11209a74 <___vfiprintf_internal_r+0xc0c>
11209460:	9885883a 	add	r2,r19,r2
11209464:	45400015 	stw	r21,0(r8)
11209468:	44c00115 	stw	r19,4(r8)
1120946c:	d8801c15 	stw	r2,112(sp)
11209470:	d9001b15 	stw	r4,108(sp)
11209474:	00c001c4 	movi	r3,7
11209478:	1901dd0e 	bge	r3,r4,11209bf0 <___vfiprintf_internal_r+0xd88>
1120947c:	1002401e 	bne	r2,zero,11209d80 <___vfiprintf_internal_r+0xf18>
11209480:	d8001b15 	stw	zero,108(sp)
11209484:	a2c0010c 	andi	r11,r20,4
11209488:	58000226 	beq	r11,zero,11209494 <___vfiprintf_internal_r+0x62c>
1120948c:	8ca7c83a 	sub	r19,r17,r18
11209490:	04c2f216 	blt	zero,r19,1120a05c <___vfiprintf_internal_r+0x11f4>
11209494:	8c80010e 	bge	r17,r18,1120949c <___vfiprintf_internal_r+0x634>
11209498:	9023883a 	mov	r17,r18
1120949c:	da802317 	ldw	r10,140(sp)
112094a0:	5455883a 	add	r10,r10,r17
112094a4:	da802315 	stw	r10,140(sp)
112094a8:	d8001b15 	stw	zero,108(sp)
112094ac:	d811883a 	mov	r8,sp
112094b0:	003ea206 	br	11208f3c <__alt_data_end+0xffe88f3c>
112094b4:	a5000814 	ori	r20,r20,32
112094b8:	80c00007 	ldb	r3,0(r16)
112094bc:	003ec906 	br	11208fe4 <__alt_data_end+0xffe88fe4>
112094c0:	80c00007 	ldb	r3,0(r16)
112094c4:	1b030926 	beq	r3,r12,1120a0ec <___vfiprintf_internal_r+0x1284>
112094c8:	a5000414 	ori	r20,r20,16
112094cc:	003ec506 	br	11208fe4 <__alt_data_end+0xffe88fe4>
112094d0:	21003fcc 	andi	r4,r4,255
112094d4:	20035e1e 	bne	r4,zero,1120a250 <___vfiprintf_internal_r+0x13e8>
112094d8:	a080080c 	andi	r2,r20,32
112094dc:	1002a526 	beq	r2,zero,11209f74 <___vfiprintf_internal_r+0x110c>
112094e0:	da802217 	ldw	r10,136(sp)
112094e4:	50800017 	ldw	r2,0(r10)
112094e8:	da802317 	ldw	r10,140(sp)
112094ec:	5007d7fa 	srai	r3,r10,31
112094f0:	da802217 	ldw	r10,136(sp)
112094f4:	10c00115 	stw	r3,4(r2)
112094f8:	52800104 	addi	r10,r10,4
112094fc:	da802215 	stw	r10,136(sp)
11209500:	da802317 	ldw	r10,140(sp)
11209504:	12800015 	stw	r10,0(r2)
11209508:	003e8c06 	br	11208f3c <__alt_data_end+0xffe88f3c>
1120950c:	21003fcc 	andi	r4,r4,255
11209510:	2003511e 	bne	r4,zero,1120a258 <___vfiprintf_internal_r+0x13f0>
11209514:	a080080c 	andi	r2,r20,32
11209518:	1000a126 	beq	r2,zero,112097a0 <___vfiprintf_internal_r+0x938>
1120951c:	da802217 	ldw	r10,136(sp)
11209520:	d8001d85 	stb	zero,118(sp)
11209524:	50800204 	addi	r2,r10,8
11209528:	54800017 	ldw	r18,0(r10)
1120952c:	54c00117 	ldw	r19,4(r10)
11209530:	4802b416 	blt	r9,zero,1120a004 <___vfiprintf_internal_r+0x119c>
11209534:	013fdfc4 	movi	r4,-129
11209538:	94c6b03a 	or	r3,r18,r19
1120953c:	d8802215 	stw	r2,136(sp)
11209540:	a128703a 	and	r20,r20,r4
11209544:	1800a226 	beq	r3,zero,112097d0 <___vfiprintf_internal_r+0x968>
11209548:	0039883a 	mov	fp,zero
1120954c:	dd401a04 	addi	r21,sp,104
11209550:	9006d0fa 	srli	r3,r18,3
11209554:	9808977a 	slli	r4,r19,29
11209558:	9826d0fa 	srli	r19,r19,3
1120955c:	948001cc 	andi	r18,r18,7
11209560:	90800c04 	addi	r2,r18,48
11209564:	ad7fffc4 	addi	r21,r21,-1
11209568:	20e4b03a 	or	r18,r4,r3
1120956c:	a8800005 	stb	r2,0(r21)
11209570:	94c6b03a 	or	r3,r18,r19
11209574:	183ff61e 	bne	r3,zero,11209550 <__alt_data_end+0xffe89550>
11209578:	a0c0004c 	andi	r3,r20,1
1120957c:	18005926 	beq	r3,zero,112096e4 <___vfiprintf_internal_r+0x87c>
11209580:	10803fcc 	andi	r2,r2,255
11209584:	1080201c 	xori	r2,r2,128
11209588:	10bfe004 	addi	r2,r2,-128
1120958c:	00c00c04 	movi	r3,48
11209590:	10c05426 	beq	r2,r3,112096e4 <___vfiprintf_internal_r+0x87c>
11209594:	da801e17 	ldw	r10,120(sp)
11209598:	a8bfffc4 	addi	r2,r21,-1
1120959c:	a8ffffc5 	stb	r3,-1(r21)
112095a0:	50a7c83a 	sub	r19,r10,r2
112095a4:	102b883a 	mov	r21,r2
112095a8:	003f2f06 	br	11209268 <__alt_data_end+0xffe89268>
112095ac:	21003fcc 	andi	r4,r4,255
112095b0:	2003421e 	bne	r4,zero,1120a2bc <___vfiprintf_internal_r+0x1454>
112095b4:	00844874 	movhi	r2,4385
112095b8:	10814d04 	addi	r2,r2,1332
112095bc:	d8802615 	stw	r2,152(sp)
112095c0:	a080080c 	andi	r2,r20,32
112095c4:	1000aa26 	beq	r2,zero,11209870 <___vfiprintf_internal_r+0xa08>
112095c8:	da802217 	ldw	r10,136(sp)
112095cc:	54800017 	ldw	r18,0(r10)
112095d0:	54c00117 	ldw	r19,4(r10)
112095d4:	52800204 	addi	r10,r10,8
112095d8:	da802215 	stw	r10,136(sp)
112095dc:	a080004c 	andi	r2,r20,1
112095e0:	1001d226 	beq	r2,zero,11209d2c <___vfiprintf_internal_r+0xec4>
112095e4:	94c4b03a 	or	r2,r18,r19
112095e8:	1002351e 	bne	r2,zero,11209ec0 <___vfiprintf_internal_r+0x1058>
112095ec:	d8001d85 	stb	zero,118(sp)
112095f0:	48022216 	blt	r9,zero,11209e7c <___vfiprintf_internal_r+0x1014>
112095f4:	00bfdfc4 	movi	r2,-129
112095f8:	a0a8703a 	and	r20,r20,r2
112095fc:	003f1506 	br	11209254 <__alt_data_end+0xffe89254>
11209600:	da802217 	ldw	r10,136(sp)
11209604:	04800044 	movi	r18,1
11209608:	d8001d85 	stb	zero,118(sp)
1120960c:	50800017 	ldw	r2,0(r10)
11209610:	52800104 	addi	r10,r10,4
11209614:	da802215 	stw	r10,136(sp)
11209618:	d8801005 	stb	r2,64(sp)
1120961c:	9027883a 	mov	r19,r18
11209620:	dd401004 	addi	r21,sp,64
11209624:	0013883a 	mov	r9,zero
11209628:	003f1706 	br	11209288 <__alt_data_end+0xffe89288>
1120962c:	21003fcc 	andi	r4,r4,255
11209630:	2003201e 	bne	r4,zero,1120a2b4 <___vfiprintf_internal_r+0x144c>
11209634:	a080080c 	andi	r2,r20,32
11209638:	10004b26 	beq	r2,zero,11209768 <___vfiprintf_internal_r+0x900>
1120963c:	da802217 	ldw	r10,136(sp)
11209640:	50800117 	ldw	r2,4(r10)
11209644:	54800017 	ldw	r18,0(r10)
11209648:	52800204 	addi	r10,r10,8
1120964c:	da802215 	stw	r10,136(sp)
11209650:	1027883a 	mov	r19,r2
11209654:	10022c16 	blt	r2,zero,11209f08 <___vfiprintf_internal_r+0x10a0>
11209658:	df001d83 	ldbu	fp,118(sp)
1120965c:	48007216 	blt	r9,zero,11209828 <___vfiprintf_internal_r+0x9c0>
11209660:	00ffdfc4 	movi	r3,-129
11209664:	94c4b03a 	or	r2,r18,r19
11209668:	a0e8703a 	and	r20,r20,r3
1120966c:	1000cc26 	beq	r2,zero,112099a0 <___vfiprintf_internal_r+0xb38>
11209670:	98021026 	beq	r19,zero,11209eb4 <___vfiprintf_internal_r+0x104c>
11209674:	dc402415 	stw	r17,144(sp)
11209678:	dc002515 	stw	r16,148(sp)
1120967c:	9823883a 	mov	r17,r19
11209680:	9021883a 	mov	r16,r18
11209684:	dd401a04 	addi	r21,sp,104
11209688:	4825883a 	mov	r18,r9
1120968c:	4027883a 	mov	r19,r8
11209690:	8009883a 	mov	r4,r16
11209694:	880b883a 	mov	r5,r17
11209698:	01800284 	movi	r6,10
1120969c:	000f883a 	mov	r7,zero
112096a0:	120b2480 	call	1120b248 <__umoddi3>
112096a4:	10800c04 	addi	r2,r2,48
112096a8:	ad7fffc4 	addi	r21,r21,-1
112096ac:	8009883a 	mov	r4,r16
112096b0:	880b883a 	mov	r5,r17
112096b4:	a8800005 	stb	r2,0(r21)
112096b8:	01800284 	movi	r6,10
112096bc:	000f883a 	mov	r7,zero
112096c0:	120acd00 	call	1120acd0 <__udivdi3>
112096c4:	1021883a 	mov	r16,r2
112096c8:	10c4b03a 	or	r2,r2,r3
112096cc:	1823883a 	mov	r17,r3
112096d0:	103fef1e 	bne	r2,zero,11209690 <__alt_data_end+0xffe89690>
112096d4:	dc402417 	ldw	r17,144(sp)
112096d8:	dc002517 	ldw	r16,148(sp)
112096dc:	9013883a 	mov	r9,r18
112096e0:	9811883a 	mov	r8,r19
112096e4:	da801e17 	ldw	r10,120(sp)
112096e8:	5567c83a 	sub	r19,r10,r21
112096ec:	003ede06 	br	11209268 <__alt_data_end+0xffe89268>
112096f0:	38803fcc 	andi	r2,r7,255
112096f4:	1080201c 	xori	r2,r2,128
112096f8:	10bfe004 	addi	r2,r2,-128
112096fc:	1002371e 	bne	r2,zero,11209fdc <___vfiprintf_internal_r+0x1174>
11209700:	01000044 	movi	r4,1
11209704:	01c00804 	movi	r7,32
11209708:	80c00007 	ldb	r3,0(r16)
1120970c:	003e3506 	br	11208fe4 <__alt_data_end+0xffe88fe4>
11209710:	a5000054 	ori	r20,r20,1
11209714:	80c00007 	ldb	r3,0(r16)
11209718:	003e3206 	br	11208fe4 <__alt_data_end+0xffe88fe4>
1120971c:	a5002014 	ori	r20,r20,128
11209720:	80c00007 	ldb	r3,0(r16)
11209724:	003e2f06 	br	11208fe4 <__alt_data_end+0xffe88fe4>
11209728:	8015883a 	mov	r10,r16
1120972c:	0023883a 	mov	r17,zero
11209730:	18bff404 	addi	r2,r3,-48
11209734:	50c00007 	ldb	r3,0(r10)
11209738:	8c4002a4 	muli	r17,r17,10
1120973c:	84000044 	addi	r16,r16,1
11209740:	8015883a 	mov	r10,r16
11209744:	1463883a 	add	r17,r2,r17
11209748:	18bff404 	addi	r2,r3,-48
1120974c:	30bff92e 	bgeu	r6,r2,11209734 <__alt_data_end+0xffe89734>
11209750:	003e2506 	br	11208fe8 <__alt_data_end+0xffe88fe8>
11209754:	21003fcc 	andi	r4,r4,255
11209758:	2002d41e 	bne	r4,zero,1120a2ac <___vfiprintf_internal_r+0x1444>
1120975c:	a5000414 	ori	r20,r20,16
11209760:	a080080c 	andi	r2,r20,32
11209764:	103fb51e 	bne	r2,zero,1120963c <__alt_data_end+0xffe8963c>
11209768:	a080040c 	andi	r2,r20,16
1120976c:	1001f826 	beq	r2,zero,11209f50 <___vfiprintf_internal_r+0x10e8>
11209770:	da802217 	ldw	r10,136(sp)
11209774:	54800017 	ldw	r18,0(r10)
11209778:	52800104 	addi	r10,r10,4
1120977c:	da802215 	stw	r10,136(sp)
11209780:	9027d7fa 	srai	r19,r18,31
11209784:	9805883a 	mov	r2,r19
11209788:	003fb206 	br	11209654 <__alt_data_end+0xffe89654>
1120978c:	21003fcc 	andi	r4,r4,255
11209790:	2002c41e 	bne	r4,zero,1120a2a4 <___vfiprintf_internal_r+0x143c>
11209794:	a5000414 	ori	r20,r20,16
11209798:	a080080c 	andi	r2,r20,32
1120979c:	103f5f1e 	bne	r2,zero,1120951c <__alt_data_end+0xffe8951c>
112097a0:	a080040c 	andi	r2,r20,16
112097a4:	10020f26 	beq	r2,zero,11209fe4 <___vfiprintf_internal_r+0x117c>
112097a8:	da802217 	ldw	r10,136(sp)
112097ac:	d8001d85 	stb	zero,118(sp)
112097b0:	0027883a 	mov	r19,zero
112097b4:	50800104 	addi	r2,r10,4
112097b8:	54800017 	ldw	r18,0(r10)
112097bc:	48021116 	blt	r9,zero,1120a004 <___vfiprintf_internal_r+0x119c>
112097c0:	00ffdfc4 	movi	r3,-129
112097c4:	d8802215 	stw	r2,136(sp)
112097c8:	a0e8703a 	and	r20,r20,r3
112097cc:	903f5e1e 	bne	r18,zero,11209548 <__alt_data_end+0xffe89548>
112097d0:	0039883a 	mov	fp,zero
112097d4:	4802a626 	beq	r9,zero,1120a270 <___vfiprintf_internal_r+0x1408>
112097d8:	0025883a 	mov	r18,zero
112097dc:	0027883a 	mov	r19,zero
112097e0:	003f5a06 	br	1120954c <__alt_data_end+0xffe8954c>
112097e4:	21003fcc 	andi	r4,r4,255
112097e8:	20029f1e 	bne	r4,zero,1120a268 <___vfiprintf_internal_r+0x1400>
112097ec:	a5000414 	ori	r20,r20,16
112097f0:	a080080c 	andi	r2,r20,32
112097f4:	10005e1e 	bne	r2,zero,11209970 <___vfiprintf_internal_r+0xb08>
112097f8:	a080040c 	andi	r2,r20,16
112097fc:	1001a21e 	bne	r2,zero,11209e88 <___vfiprintf_internal_r+0x1020>
11209800:	a080100c 	andi	r2,r20,64
11209804:	d8001d85 	stb	zero,118(sp)
11209808:	da802217 	ldw	r10,136(sp)
1120980c:	1002231e 	bne	r2,zero,1120a09c <___vfiprintf_internal_r+0x1234>
11209810:	50800104 	addi	r2,r10,4
11209814:	54800017 	ldw	r18,0(r10)
11209818:	0027883a 	mov	r19,zero
1120981c:	4801a00e 	bge	r9,zero,11209ea0 <___vfiprintf_internal_r+0x1038>
11209820:	d8802215 	stw	r2,136(sp)
11209824:	0039883a 	mov	fp,zero
11209828:	94c4b03a 	or	r2,r18,r19
1120982c:	103f901e 	bne	r2,zero,11209670 <__alt_data_end+0xffe89670>
11209830:	00800044 	movi	r2,1
11209834:	10803fcc 	andi	r2,r2,255
11209838:	00c00044 	movi	r3,1
1120983c:	10c05926 	beq	r2,r3,112099a4 <___vfiprintf_internal_r+0xb3c>
11209840:	00c00084 	movi	r3,2
11209844:	10ffe41e 	bne	r2,r3,112097d8 <__alt_data_end+0xffe897d8>
11209848:	0025883a 	mov	r18,zero
1120984c:	0027883a 	mov	r19,zero
11209850:	00013d06 	br	11209d48 <___vfiprintf_internal_r+0xee0>
11209854:	21003fcc 	andi	r4,r4,255
11209858:	2002811e 	bne	r4,zero,1120a260 <___vfiprintf_internal_r+0x13f8>
1120985c:	00844874 	movhi	r2,4385
11209860:	10814804 	addi	r2,r2,1312
11209864:	d8802615 	stw	r2,152(sp)
11209868:	a080080c 	andi	r2,r20,32
1120986c:	103f561e 	bne	r2,zero,112095c8 <__alt_data_end+0xffe895c8>
11209870:	a080040c 	andi	r2,r20,16
11209874:	1001d126 	beq	r2,zero,11209fbc <___vfiprintf_internal_r+0x1154>
11209878:	da802217 	ldw	r10,136(sp)
1120987c:	0027883a 	mov	r19,zero
11209880:	54800017 	ldw	r18,0(r10)
11209884:	52800104 	addi	r10,r10,4
11209888:	da802215 	stw	r10,136(sp)
1120988c:	003f5306 	br	112095dc <__alt_data_end+0xffe895dc>
11209890:	da802217 	ldw	r10,136(sp)
11209894:	d8001d85 	stb	zero,118(sp)
11209898:	55400017 	ldw	r21,0(r10)
1120989c:	50c00104 	addi	r3,r10,4
112098a0:	a8024226 	beq	r21,zero,1120a1ac <___vfiprintf_internal_r+0x1344>
112098a4:	48021816 	blt	r9,zero,1120a108 <___vfiprintf_internal_r+0x12a0>
112098a8:	480d883a 	mov	r6,r9
112098ac:	000b883a 	mov	r5,zero
112098b0:	a809883a 	mov	r4,r21
112098b4:	d8c02a15 	stw	r3,168(sp)
112098b8:	da002b15 	stw	r8,172(sp)
112098bc:	da402c15 	stw	r9,176(sp)
112098c0:	1206efc0 	call	11206efc <memchr>
112098c4:	d8c02a17 	ldw	r3,168(sp)
112098c8:	da002b17 	ldw	r8,172(sp)
112098cc:	da402c17 	ldw	r9,176(sp)
112098d0:	10024826 	beq	r2,zero,1120a1f4 <___vfiprintf_internal_r+0x138c>
112098d4:	1567c83a 	sub	r19,r2,r21
112098d8:	df001d83 	ldbu	fp,118(sp)
112098dc:	d8c02215 	stw	r3,136(sp)
112098e0:	0013883a 	mov	r9,zero
112098e4:	003e6006 	br	11209268 <__alt_data_end+0xffe89268>
112098e8:	21003fcc 	andi	r4,r4,255
112098ec:	203fc026 	beq	r4,zero,112097f0 <__alt_data_end+0xffe897f0>
112098f0:	d9c01d85 	stb	r7,118(sp)
112098f4:	003fbe06 	br	112097f0 <__alt_data_end+0xffe897f0>
112098f8:	da802217 	ldw	r10,136(sp)
112098fc:	54400017 	ldw	r17,0(r10)
11209900:	50800104 	addi	r2,r10,4
11209904:	883e3b16 	blt	r17,zero,112091f4 <__alt_data_end+0xffe891f4>
11209908:	d8802215 	stw	r2,136(sp)
1120990c:	80c00007 	ldb	r3,0(r16)
11209910:	003db406 	br	11208fe4 <__alt_data_end+0xffe88fe4>
11209914:	01000044 	movi	r4,1
11209918:	01c00ac4 	movi	r7,43
1120991c:	80c00007 	ldb	r3,0(r16)
11209920:	003db006 	br	11208fe4 <__alt_data_end+0xffe88fe4>
11209924:	80c00007 	ldb	r3,0(r16)
11209928:	82800044 	addi	r10,r16,1
1120992c:	1b423c26 	beq	r3,r13,1120a220 <___vfiprintf_internal_r+0x13b8>
11209930:	18bff404 	addi	r2,r3,-48
11209934:	0013883a 	mov	r9,zero
11209938:	30822b36 	bltu	r6,r2,1120a1e8 <___vfiprintf_internal_r+0x1380>
1120993c:	50c00007 	ldb	r3,0(r10)
11209940:	4a4002a4 	muli	r9,r9,10
11209944:	54000044 	addi	r16,r10,1
11209948:	8015883a 	mov	r10,r16
1120994c:	4893883a 	add	r9,r9,r2
11209950:	18bff404 	addi	r2,r3,-48
11209954:	30bff92e 	bgeu	r6,r2,1120993c <__alt_data_end+0xffe8993c>
11209958:	483da30e 	bge	r9,zero,11208fe8 <__alt_data_end+0xffe88fe8>
1120995c:	027fffc4 	movi	r9,-1
11209960:	003da106 	br	11208fe8 <__alt_data_end+0xffe88fe8>
11209964:	a5001014 	ori	r20,r20,64
11209968:	80c00007 	ldb	r3,0(r16)
1120996c:	003d9d06 	br	11208fe4 <__alt_data_end+0xffe88fe4>
11209970:	da802217 	ldw	r10,136(sp)
11209974:	d8001d85 	stb	zero,118(sp)
11209978:	50c00204 	addi	r3,r10,8
1120997c:	54800017 	ldw	r18,0(r10)
11209980:	54c00117 	ldw	r19,4(r10)
11209984:	4801ca16 	blt	r9,zero,1120a0b0 <___vfiprintf_internal_r+0x1248>
11209988:	013fdfc4 	movi	r4,-129
1120998c:	94c4b03a 	or	r2,r18,r19
11209990:	d8c02215 	stw	r3,136(sp)
11209994:	a128703a 	and	r20,r20,r4
11209998:	0039883a 	mov	fp,zero
1120999c:	103f341e 	bne	r2,zero,11209670 <__alt_data_end+0xffe89670>
112099a0:	483e2e26 	beq	r9,zero,1120925c <__alt_data_end+0xffe8925c>
112099a4:	0025883a 	mov	r18,zero
112099a8:	94800c04 	addi	r18,r18,48
112099ac:	dc8019c5 	stb	r18,103(sp)
112099b0:	dcc02717 	ldw	r19,156(sp)
112099b4:	dd4019c4 	addi	r21,sp,103
112099b8:	003e2b06 	br	11209268 <__alt_data_end+0xffe89268>
112099bc:	21003fcc 	andi	r4,r4,255
112099c0:	2002361e 	bne	r4,zero,1120a29c <___vfiprintf_internal_r+0x1434>
112099c4:	1801c126 	beq	r3,zero,1120a0cc <___vfiprintf_internal_r+0x1264>
112099c8:	04800044 	movi	r18,1
112099cc:	d8c01005 	stb	r3,64(sp)
112099d0:	d8001d85 	stb	zero,118(sp)
112099d4:	9027883a 	mov	r19,r18
112099d8:	dd401004 	addi	r21,sp,64
112099dc:	003f1106 	br	11209624 <__alt_data_end+0xffe89624>
112099e0:	d9402117 	ldw	r5,132(sp)
112099e4:	d9002017 	ldw	r4,128(sp)
112099e8:	d9801a04 	addi	r6,sp,104
112099ec:	d9c02b15 	stw	r7,172(sp)
112099f0:	dbc02a15 	stw	r15,168(sp)
112099f4:	1208d540 	call	11208d54 <__sprint_r.part.0>
112099f8:	d9c02b17 	ldw	r7,172(sp)
112099fc:	dbc02a17 	ldw	r15,168(sp)
11209a00:	10006d1e 	bne	r2,zero,11209bb8 <___vfiprintf_internal_r+0xd50>
11209a04:	d9801b17 	ldw	r6,108(sp)
11209a08:	d8801c17 	ldw	r2,112(sp)
11209a0c:	d811883a 	mov	r8,sp
11209a10:	31400044 	addi	r5,r6,1
11209a14:	003e3306 	br	112092e4 <__alt_data_end+0xffe892e4>
11209a18:	d9401b17 	ldw	r5,108(sp)
11209a1c:	d8801c17 	ldw	r2,112(sp)
11209a20:	29000044 	addi	r4,r5,1
11209a24:	d8c01d87 	ldb	r3,118(sp)
11209a28:	183e4d26 	beq	r3,zero,11209360 <__alt_data_end+0xffe89360>
11209a2c:	00c00044 	movi	r3,1
11209a30:	d9401d84 	addi	r5,sp,118
11209a34:	10c5883a 	add	r2,r2,r3
11209a38:	41400015 	stw	r5,0(r8)
11209a3c:	40c00115 	stw	r3,4(r8)
11209a40:	d8801c15 	stw	r2,112(sp)
11209a44:	d9001b15 	stw	r4,108(sp)
11209a48:	014001c4 	movi	r5,7
11209a4c:	2900a90e 	bge	r5,r4,11209cf4 <___vfiprintf_internal_r+0xe8c>
11209a50:	1000da1e 	bne	r2,zero,11209dbc <___vfiprintf_internal_r+0xf54>
11209a54:	7000ab1e 	bne	r14,zero,11209d04 <___vfiprintf_internal_r+0xe9c>
11209a58:	000b883a 	mov	r5,zero
11209a5c:	1809883a 	mov	r4,r3
11209a60:	d811883a 	mov	r8,sp
11209a64:	00c02004 	movi	r3,128
11209a68:	e0fe4d26 	beq	fp,r3,112093a0 <__alt_data_end+0xffe893a0>
11209a6c:	4cf9c83a 	sub	fp,r9,r19
11209a70:	073e7b0e 	bge	zero,fp,11209460 <__alt_data_end+0xffe89460>
11209a74:	01c00404 	movi	r7,16
11209a78:	3f01900e 	bge	r7,fp,1120a0bc <___vfiprintf_internal_r+0x1254>
11209a7c:	00c44874 	movhi	r3,4385
11209a80:	18c1ae04 	addi	r3,r3,1720
11209a84:	d8c02415 	stw	r3,144(sp)
11209a88:	034001c4 	movi	r13,7
11209a8c:	00000506 	br	11209aa4 <___vfiprintf_internal_r+0xc3c>
11209a90:	29000084 	addi	r4,r5,2
11209a94:	42000204 	addi	r8,r8,8
11209a98:	180b883a 	mov	r5,r3
11209a9c:	e73ffc04 	addi	fp,fp,-16
11209aa0:	3f000d0e 	bge	r7,fp,11209ad8 <___vfiprintf_internal_r+0xc70>
11209aa4:	10800404 	addi	r2,r2,16
11209aa8:	28c00044 	addi	r3,r5,1
11209aac:	45c00015 	stw	r23,0(r8)
11209ab0:	41c00115 	stw	r7,4(r8)
11209ab4:	d8801c15 	stw	r2,112(sp)
11209ab8:	d8c01b15 	stw	r3,108(sp)
11209abc:	68fff40e 	bge	r13,r3,11209a90 <__alt_data_end+0xffe89a90>
11209ac0:	1000101e 	bne	r2,zero,11209b04 <___vfiprintf_internal_r+0xc9c>
11209ac4:	e73ffc04 	addi	fp,fp,-16
11209ac8:	01000044 	movi	r4,1
11209acc:	000b883a 	mov	r5,zero
11209ad0:	d811883a 	mov	r8,sp
11209ad4:	3f3ff316 	blt	r7,fp,11209aa4 <__alt_data_end+0xffe89aa4>
11209ad8:	da802417 	ldw	r10,144(sp)
11209adc:	1705883a 	add	r2,r2,fp
11209ae0:	47000115 	stw	fp,4(r8)
11209ae4:	42800015 	stw	r10,0(r8)
11209ae8:	d8801c15 	stw	r2,112(sp)
11209aec:	d9001b15 	stw	r4,108(sp)
11209af0:	00c001c4 	movi	r3,7
11209af4:	19003616 	blt	r3,r4,11209bd0 <___vfiprintf_internal_r+0xd68>
11209af8:	42000204 	addi	r8,r8,8
11209afc:	21000044 	addi	r4,r4,1
11209b00:	003e5706 	br	11209460 <__alt_data_end+0xffe89460>
11209b04:	d9402117 	ldw	r5,132(sp)
11209b08:	d9002017 	ldw	r4,128(sp)
11209b0c:	d9801a04 	addi	r6,sp,104
11209b10:	d9c02b15 	stw	r7,172(sp)
11209b14:	db402a15 	stw	r13,168(sp)
11209b18:	1208d540 	call	11208d54 <__sprint_r.part.0>
11209b1c:	d9c02b17 	ldw	r7,172(sp)
11209b20:	db402a17 	ldw	r13,168(sp)
11209b24:	1000241e 	bne	r2,zero,11209bb8 <___vfiprintf_internal_r+0xd50>
11209b28:	d9401b17 	ldw	r5,108(sp)
11209b2c:	d8801c17 	ldw	r2,112(sp)
11209b30:	d811883a 	mov	r8,sp
11209b34:	29000044 	addi	r4,r5,1
11209b38:	003fd806 	br	11209a9c <__alt_data_end+0xffe89a9c>
11209b3c:	d9401b17 	ldw	r5,108(sp)
11209b40:	00c44874 	movhi	r3,4385
11209b44:	18c1b204 	addi	r3,r3,1736
11209b48:	d8c02415 	stw	r3,144(sp)
11209b4c:	29400044 	addi	r5,r5,1
11209b50:	d8c02417 	ldw	r3,144(sp)
11209b54:	14c5883a 	add	r2,r2,r19
11209b58:	44c00115 	stw	r19,4(r8)
11209b5c:	40c00015 	stw	r3,0(r8)
11209b60:	d8801c15 	stw	r2,112(sp)
11209b64:	d9401b15 	stw	r5,108(sp)
11209b68:	00c001c4 	movi	r3,7
11209b6c:	1940070e 	bge	r3,r5,11209b8c <___vfiprintf_internal_r+0xd24>
11209b70:	103e4826 	beq	r2,zero,11209494 <__alt_data_end+0xffe89494>
11209b74:	d9402117 	ldw	r5,132(sp)
11209b78:	d9002017 	ldw	r4,128(sp)
11209b7c:	d9801a04 	addi	r6,sp,104
11209b80:	1208d540 	call	11208d54 <__sprint_r.part.0>
11209b84:	10000c1e 	bne	r2,zero,11209bb8 <___vfiprintf_internal_r+0xd50>
11209b88:	d8801c17 	ldw	r2,112(sp)
11209b8c:	8c80010e 	bge	r17,r18,11209b94 <___vfiprintf_internal_r+0xd2c>
11209b90:	9023883a 	mov	r17,r18
11209b94:	da802317 	ldw	r10,140(sp)
11209b98:	5455883a 	add	r10,r10,r17
11209b9c:	da802315 	stw	r10,140(sp)
11209ba0:	103e4126 	beq	r2,zero,112094a8 <__alt_data_end+0xffe894a8>
11209ba4:	d9402117 	ldw	r5,132(sp)
11209ba8:	d9002017 	ldw	r4,128(sp)
11209bac:	d9801a04 	addi	r6,sp,104
11209bb0:	1208d540 	call	11208d54 <__sprint_r.part.0>
11209bb4:	103e3c26 	beq	r2,zero,112094a8 <__alt_data_end+0xffe894a8>
11209bb8:	dd002117 	ldw	r20,132(sp)
11209bbc:	a080030b 	ldhu	r2,12(r20)
11209bc0:	1080100c 	andi	r2,r2,64
11209bc4:	1001231e 	bne	r2,zero,1120a054 <___vfiprintf_internal_r+0x11ec>
11209bc8:	d8802317 	ldw	r2,140(sp)
11209bcc:	003d7b06 	br	112091bc <__alt_data_end+0xffe891bc>
11209bd0:	1000991e 	bne	r2,zero,11209e38 <___vfiprintf_internal_r+0xfd0>
11209bd4:	00c00044 	movi	r3,1
11209bd8:	9805883a 	mov	r2,r19
11209bdc:	dd400015 	stw	r21,0(sp)
11209be0:	dcc00115 	stw	r19,4(sp)
11209be4:	dcc01c15 	stw	r19,112(sp)
11209be8:	d8c01b15 	stw	r3,108(sp)
11209bec:	d811883a 	mov	r8,sp
11209bf0:	42000204 	addi	r8,r8,8
11209bf4:	a2c0010c 	andi	r11,r20,4
11209bf8:	583fe426 	beq	r11,zero,11209b8c <__alt_data_end+0xffe89b8c>
11209bfc:	8ca7c83a 	sub	r19,r17,r18
11209c00:	04ffe20e 	bge	zero,r19,11209b8c <__alt_data_end+0xffe89b8c>
11209c04:	01c00404 	movi	r7,16
11209c08:	3cffcc0e 	bge	r7,r19,11209b3c <__alt_data_end+0xffe89b3c>
11209c0c:	02844874 	movhi	r10,4385
11209c10:	5281b204 	addi	r10,r10,1736
11209c14:	d9001b17 	ldw	r4,108(sp)
11209c18:	da802415 	stw	r10,144(sp)
11209c1c:	382b883a 	mov	r21,r7
11209c20:	050001c4 	movi	r20,7
11209c24:	df002017 	ldw	fp,128(sp)
11209c28:	00000506 	br	11209c40 <___vfiprintf_internal_r+0xdd8>
11209c2c:	21400084 	addi	r5,r4,2
11209c30:	42000204 	addi	r8,r8,8
11209c34:	1809883a 	mov	r4,r3
11209c38:	9cfffc04 	addi	r19,r19,-16
11209c3c:	acffc40e 	bge	r21,r19,11209b50 <__alt_data_end+0xffe89b50>
11209c40:	10800404 	addi	r2,r2,16
11209c44:	20c00044 	addi	r3,r4,1
11209c48:	45800015 	stw	r22,0(r8)
11209c4c:	45400115 	stw	r21,4(r8)
11209c50:	d8801c15 	stw	r2,112(sp)
11209c54:	d8c01b15 	stw	r3,108(sp)
11209c58:	a0fff40e 	bge	r20,r3,11209c2c <__alt_data_end+0xffe89c2c>
11209c5c:	1000041e 	bne	r2,zero,11209c70 <___vfiprintf_internal_r+0xe08>
11209c60:	01400044 	movi	r5,1
11209c64:	0009883a 	mov	r4,zero
11209c68:	d811883a 	mov	r8,sp
11209c6c:	003ff206 	br	11209c38 <__alt_data_end+0xffe89c38>
11209c70:	d9402117 	ldw	r5,132(sp)
11209c74:	d9801a04 	addi	r6,sp,104
11209c78:	e009883a 	mov	r4,fp
11209c7c:	1208d540 	call	11208d54 <__sprint_r.part.0>
11209c80:	103fcd1e 	bne	r2,zero,11209bb8 <__alt_data_end+0xffe89bb8>
11209c84:	d9001b17 	ldw	r4,108(sp)
11209c88:	d8801c17 	ldw	r2,112(sp)
11209c8c:	d811883a 	mov	r8,sp
11209c90:	21400044 	addi	r5,r4,1
11209c94:	003fe806 	br	11209c38 <__alt_data_end+0xffe89c38>
11209c98:	d9402117 	ldw	r5,132(sp)
11209c9c:	d9002017 	ldw	r4,128(sp)
11209ca0:	d9801a04 	addi	r6,sp,104
11209ca4:	d9c02b15 	stw	r7,172(sp)
11209ca8:	db402a15 	stw	r13,168(sp)
11209cac:	1208d540 	call	11208d54 <__sprint_r.part.0>
11209cb0:	d9c02b17 	ldw	r7,172(sp)
11209cb4:	db402a17 	ldw	r13,168(sp)
11209cb8:	103fbf1e 	bne	r2,zero,11209bb8 <__alt_data_end+0xffe89bb8>
11209cbc:	d9401b17 	ldw	r5,108(sp)
11209cc0:	d8801c17 	ldw	r2,112(sp)
11209cc4:	d811883a 	mov	r8,sp
11209cc8:	29800044 	addi	r6,r5,1
11209ccc:	003dc406 	br	112093e0 <__alt_data_end+0xffe893e0>
11209cd0:	1000d21e 	bne	r2,zero,1120a01c <___vfiprintf_internal_r+0x11b4>
11209cd4:	d8c01d87 	ldb	r3,118(sp)
11209cd8:	18009526 	beq	r3,zero,11209f30 <___vfiprintf_internal_r+0x10c8>
11209cdc:	00800044 	movi	r2,1
11209ce0:	d8c01d84 	addi	r3,sp,118
11209ce4:	1009883a 	mov	r4,r2
11209ce8:	d8c00015 	stw	r3,0(sp)
11209cec:	d8800115 	stw	r2,4(sp)
11209cf0:	d811883a 	mov	r8,sp
11209cf4:	200b883a 	mov	r5,r4
11209cf8:	42000204 	addi	r8,r8,8
11209cfc:	21000044 	addi	r4,r4,1
11209d00:	003d9706 	br	11209360 <__alt_data_end+0xffe89360>
11209d04:	d9001d04 	addi	r4,sp,116
11209d08:	00800084 	movi	r2,2
11209d0c:	d9000015 	stw	r4,0(sp)
11209d10:	d8800115 	stw	r2,4(sp)
11209d14:	1809883a 	mov	r4,r3
11209d18:	d811883a 	mov	r8,sp
11209d1c:	200b883a 	mov	r5,r4
11209d20:	42000204 	addi	r8,r8,8
11209d24:	21000044 	addi	r4,r4,1
11209d28:	003f4e06 	br	11209a64 <__alt_data_end+0xffe89a64>
11209d2c:	d8001d85 	stb	zero,118(sp)
11209d30:	48005016 	blt	r9,zero,11209e74 <___vfiprintf_internal_r+0x100c>
11209d34:	00ffdfc4 	movi	r3,-129
11209d38:	94c4b03a 	or	r2,r18,r19
11209d3c:	a0e8703a 	and	r20,r20,r3
11209d40:	103d4426 	beq	r2,zero,11209254 <__alt_data_end+0xffe89254>
11209d44:	0039883a 	mov	fp,zero
11209d48:	d9002617 	ldw	r4,152(sp)
11209d4c:	dd401a04 	addi	r21,sp,104
11209d50:	908003cc 	andi	r2,r18,15
11209d54:	9806973a 	slli	r3,r19,28
11209d58:	2085883a 	add	r2,r4,r2
11209d5c:	9024d13a 	srli	r18,r18,4
11209d60:	10800003 	ldbu	r2,0(r2)
11209d64:	9826d13a 	srli	r19,r19,4
11209d68:	ad7fffc4 	addi	r21,r21,-1
11209d6c:	1ca4b03a 	or	r18,r3,r18
11209d70:	a8800005 	stb	r2,0(r21)
11209d74:	94c4b03a 	or	r2,r18,r19
11209d78:	103ff51e 	bne	r2,zero,11209d50 <__alt_data_end+0xffe89d50>
11209d7c:	003e5906 	br	112096e4 <__alt_data_end+0xffe896e4>
11209d80:	d9402117 	ldw	r5,132(sp)
11209d84:	d9002017 	ldw	r4,128(sp)
11209d88:	d9801a04 	addi	r6,sp,104
11209d8c:	1208d540 	call	11208d54 <__sprint_r.part.0>
11209d90:	103f891e 	bne	r2,zero,11209bb8 <__alt_data_end+0xffe89bb8>
11209d94:	d8801c17 	ldw	r2,112(sp)
11209d98:	d811883a 	mov	r8,sp
11209d9c:	003f9506 	br	11209bf4 <__alt_data_end+0xffe89bf4>
11209da0:	d9402117 	ldw	r5,132(sp)
11209da4:	d9002017 	ldw	r4,128(sp)
11209da8:	d9801a04 	addi	r6,sp,104
11209dac:	1208d540 	call	11208d54 <__sprint_r.part.0>
11209db0:	103f811e 	bne	r2,zero,11209bb8 <__alt_data_end+0xffe89bb8>
11209db4:	d811883a 	mov	r8,sp
11209db8:	003ced06 	br	11209170 <__alt_data_end+0xffe89170>
11209dbc:	d9402117 	ldw	r5,132(sp)
11209dc0:	d9002017 	ldw	r4,128(sp)
11209dc4:	d9801a04 	addi	r6,sp,104
11209dc8:	da402c15 	stw	r9,176(sp)
11209dcc:	db802a15 	stw	r14,168(sp)
11209dd0:	1208d540 	call	11208d54 <__sprint_r.part.0>
11209dd4:	da402c17 	ldw	r9,176(sp)
11209dd8:	db802a17 	ldw	r14,168(sp)
11209ddc:	103f761e 	bne	r2,zero,11209bb8 <__alt_data_end+0xffe89bb8>
11209de0:	d9401b17 	ldw	r5,108(sp)
11209de4:	d8801c17 	ldw	r2,112(sp)
11209de8:	d811883a 	mov	r8,sp
11209dec:	29000044 	addi	r4,r5,1
11209df0:	003d5b06 	br	11209360 <__alt_data_end+0xffe89360>
11209df4:	d9402117 	ldw	r5,132(sp)
11209df8:	d9002017 	ldw	r4,128(sp)
11209dfc:	d9801a04 	addi	r6,sp,104
11209e00:	da402c15 	stw	r9,176(sp)
11209e04:	1208d540 	call	11208d54 <__sprint_r.part.0>
11209e08:	da402c17 	ldw	r9,176(sp)
11209e0c:	103f6a1e 	bne	r2,zero,11209bb8 <__alt_data_end+0xffe89bb8>
11209e10:	d9401b17 	ldw	r5,108(sp)
11209e14:	d8801c17 	ldw	r2,112(sp)
11209e18:	d811883a 	mov	r8,sp
11209e1c:	29000044 	addi	r4,r5,1
11209e20:	003f1006 	br	11209a64 <__alt_data_end+0xffe89a64>
11209e24:	1000c31e 	bne	r2,zero,1120a134 <___vfiprintf_internal_r+0x12cc>
11209e28:	01000044 	movi	r4,1
11209e2c:	000b883a 	mov	r5,zero
11209e30:	d811883a 	mov	r8,sp
11209e34:	003f0d06 	br	11209a6c <__alt_data_end+0xffe89a6c>
11209e38:	d9402117 	ldw	r5,132(sp)
11209e3c:	d9002017 	ldw	r4,128(sp)
11209e40:	d9801a04 	addi	r6,sp,104
11209e44:	1208d540 	call	11208d54 <__sprint_r.part.0>
11209e48:	103f5b1e 	bne	r2,zero,11209bb8 <__alt_data_end+0xffe89bb8>
11209e4c:	d9001b17 	ldw	r4,108(sp)
11209e50:	d8801c17 	ldw	r2,112(sp)
11209e54:	d811883a 	mov	r8,sp
11209e58:	21000044 	addi	r4,r4,1
11209e5c:	003d8006 	br	11209460 <__alt_data_end+0xffe89460>
11209e60:	01044874 	movhi	r4,4385
11209e64:	21014d04 	addi	r4,r4,1332
11209e68:	d9002615 	stw	r4,152(sp)
11209e6c:	d8c02215 	stw	r3,136(sp)
11209e70:	1029883a 	mov	r20,r2
11209e74:	94c4b03a 	or	r2,r18,r19
11209e78:	103fb21e 	bne	r2,zero,11209d44 <__alt_data_end+0xffe89d44>
11209e7c:	0039883a 	mov	fp,zero
11209e80:	00800084 	movi	r2,2
11209e84:	003e6b06 	br	11209834 <__alt_data_end+0xffe89834>
11209e88:	da802217 	ldw	r10,136(sp)
11209e8c:	d8001d85 	stb	zero,118(sp)
11209e90:	0027883a 	mov	r19,zero
11209e94:	50800104 	addi	r2,r10,4
11209e98:	54800017 	ldw	r18,0(r10)
11209e9c:	483e6016 	blt	r9,zero,11209820 <__alt_data_end+0xffe89820>
11209ea0:	00ffdfc4 	movi	r3,-129
11209ea4:	d8802215 	stw	r2,136(sp)
11209ea8:	a0e8703a 	and	r20,r20,r3
11209eac:	0039883a 	mov	fp,zero
11209eb0:	903ebb26 	beq	r18,zero,112099a0 <__alt_data_end+0xffe899a0>
11209eb4:	00800244 	movi	r2,9
11209eb8:	14bdee36 	bltu	r2,r18,11209674 <__alt_data_end+0xffe89674>
11209ebc:	003eba06 	br	112099a8 <__alt_data_end+0xffe899a8>
11209ec0:	00800c04 	movi	r2,48
11209ec4:	d8c01d45 	stb	r3,117(sp)
11209ec8:	d8801d05 	stb	r2,116(sp)
11209ecc:	d8001d85 	stb	zero,118(sp)
11209ed0:	a0c00094 	ori	r3,r20,2
11209ed4:	4800a916 	blt	r9,zero,1120a17c <___vfiprintf_internal_r+0x1314>
11209ed8:	00bfdfc4 	movi	r2,-129
11209edc:	a096703a 	and	r11,r20,r2
11209ee0:	5d000094 	ori	r20,r11,2
11209ee4:	0039883a 	mov	fp,zero
11209ee8:	003f9706 	br	11209d48 <__alt_data_end+0xffe89d48>
11209eec:	8025883a 	mov	r18,r16
11209ef0:	003c2e06 	br	11208fac <__alt_data_end+0xffe88fac>
11209ef4:	00844874 	movhi	r2,4385
11209ef8:	10814d04 	addi	r2,r2,1332
11209efc:	0039883a 	mov	fp,zero
11209f00:	d8802615 	stw	r2,152(sp)
11209f04:	003f9006 	br	11209d48 <__alt_data_end+0xffe89d48>
11209f08:	04a5c83a 	sub	r18,zero,r18
11209f0c:	07000b44 	movi	fp,45
11209f10:	9004c03a 	cmpne	r2,r18,zero
11209f14:	04e7c83a 	sub	r19,zero,r19
11209f18:	df001d85 	stb	fp,118(sp)
11209f1c:	98a7c83a 	sub	r19,r19,r2
11209f20:	48009f16 	blt	r9,zero,1120a1a0 <___vfiprintf_internal_r+0x1338>
11209f24:	00bfdfc4 	movi	r2,-129
11209f28:	a0a8703a 	and	r20,r20,r2
11209f2c:	003dd006 	br	11209670 <__alt_data_end+0xffe89670>
11209f30:	70004c26 	beq	r14,zero,1120a064 <___vfiprintf_internal_r+0x11fc>
11209f34:	00800084 	movi	r2,2
11209f38:	d8c01d04 	addi	r3,sp,116
11209f3c:	d8c00015 	stw	r3,0(sp)
11209f40:	d8800115 	stw	r2,4(sp)
11209f44:	01000044 	movi	r4,1
11209f48:	d811883a 	mov	r8,sp
11209f4c:	003f7306 	br	11209d1c <__alt_data_end+0xffe89d1c>
11209f50:	a080100c 	andi	r2,r20,64
11209f54:	da802217 	ldw	r10,136(sp)
11209f58:	103e0626 	beq	r2,zero,11209774 <__alt_data_end+0xffe89774>
11209f5c:	5480000f 	ldh	r18,0(r10)
11209f60:	52800104 	addi	r10,r10,4
11209f64:	da802215 	stw	r10,136(sp)
11209f68:	9027d7fa 	srai	r19,r18,31
11209f6c:	9805883a 	mov	r2,r19
11209f70:	003db806 	br	11209654 <__alt_data_end+0xffe89654>
11209f74:	a080040c 	andi	r2,r20,16
11209f78:	1000091e 	bne	r2,zero,11209fa0 <___vfiprintf_internal_r+0x1138>
11209f7c:	a2c0100c 	andi	r11,r20,64
11209f80:	58000726 	beq	r11,zero,11209fa0 <___vfiprintf_internal_r+0x1138>
11209f84:	da802217 	ldw	r10,136(sp)
11209f88:	50800017 	ldw	r2,0(r10)
11209f8c:	52800104 	addi	r10,r10,4
11209f90:	da802215 	stw	r10,136(sp)
11209f94:	da802317 	ldw	r10,140(sp)
11209f98:	1280000d 	sth	r10,0(r2)
11209f9c:	003be706 	br	11208f3c <__alt_data_end+0xffe88f3c>
11209fa0:	da802217 	ldw	r10,136(sp)
11209fa4:	50800017 	ldw	r2,0(r10)
11209fa8:	52800104 	addi	r10,r10,4
11209fac:	da802215 	stw	r10,136(sp)
11209fb0:	da802317 	ldw	r10,140(sp)
11209fb4:	12800015 	stw	r10,0(r2)
11209fb8:	003be006 	br	11208f3c <__alt_data_end+0xffe88f3c>
11209fbc:	a080100c 	andi	r2,r20,64
11209fc0:	da802217 	ldw	r10,136(sp)
11209fc4:	10003026 	beq	r2,zero,1120a088 <___vfiprintf_internal_r+0x1220>
11209fc8:	5480000b 	ldhu	r18,0(r10)
11209fcc:	52800104 	addi	r10,r10,4
11209fd0:	0027883a 	mov	r19,zero
11209fd4:	da802215 	stw	r10,136(sp)
11209fd8:	003d8006 	br	112095dc <__alt_data_end+0xffe895dc>
11209fdc:	80c00007 	ldb	r3,0(r16)
11209fe0:	003c0006 	br	11208fe4 <__alt_data_end+0xffe88fe4>
11209fe4:	a080100c 	andi	r2,r20,64
11209fe8:	d8001d85 	stb	zero,118(sp)
11209fec:	da802217 	ldw	r10,136(sp)
11209ff0:	1000201e 	bne	r2,zero,1120a074 <___vfiprintf_internal_r+0x120c>
11209ff4:	50800104 	addi	r2,r10,4
11209ff8:	54800017 	ldw	r18,0(r10)
11209ffc:	0027883a 	mov	r19,zero
1120a000:	483def0e 	bge	r9,zero,112097c0 <__alt_data_end+0xffe897c0>
1120a004:	94c6b03a 	or	r3,r18,r19
1120a008:	d8802215 	stw	r2,136(sp)
1120a00c:	183d4e1e 	bne	r3,zero,11209548 <__alt_data_end+0xffe89548>
1120a010:	0039883a 	mov	fp,zero
1120a014:	0005883a 	mov	r2,zero
1120a018:	003e0606 	br	11209834 <__alt_data_end+0xffe89834>
1120a01c:	d9402117 	ldw	r5,132(sp)
1120a020:	d9002017 	ldw	r4,128(sp)
1120a024:	d9801a04 	addi	r6,sp,104
1120a028:	da402c15 	stw	r9,176(sp)
1120a02c:	db802a15 	stw	r14,168(sp)
1120a030:	1208d540 	call	11208d54 <__sprint_r.part.0>
1120a034:	da402c17 	ldw	r9,176(sp)
1120a038:	db802a17 	ldw	r14,168(sp)
1120a03c:	103ede1e 	bne	r2,zero,11209bb8 <__alt_data_end+0xffe89bb8>
1120a040:	d9401b17 	ldw	r5,108(sp)
1120a044:	d8801c17 	ldw	r2,112(sp)
1120a048:	d811883a 	mov	r8,sp
1120a04c:	29000044 	addi	r4,r5,1
1120a050:	003e7406 	br	11209a24 <__alt_data_end+0xffe89a24>
1120a054:	00bfffc4 	movi	r2,-1
1120a058:	003c5806 	br	112091bc <__alt_data_end+0xffe891bc>
1120a05c:	d811883a 	mov	r8,sp
1120a060:	003ee806 	br	11209c04 <__alt_data_end+0xffe89c04>
1120a064:	000b883a 	mov	r5,zero
1120a068:	01000044 	movi	r4,1
1120a06c:	d811883a 	mov	r8,sp
1120a070:	003e7c06 	br	11209a64 <__alt_data_end+0xffe89a64>
1120a074:	50800104 	addi	r2,r10,4
1120a078:	5480000b 	ldhu	r18,0(r10)
1120a07c:	0027883a 	mov	r19,zero
1120a080:	483dcf0e 	bge	r9,zero,112097c0 <__alt_data_end+0xffe897c0>
1120a084:	003fdf06 	br	1120a004 <__alt_data_end+0xffe8a004>
1120a088:	54800017 	ldw	r18,0(r10)
1120a08c:	52800104 	addi	r10,r10,4
1120a090:	0027883a 	mov	r19,zero
1120a094:	da802215 	stw	r10,136(sp)
1120a098:	003d5006 	br	112095dc <__alt_data_end+0xffe895dc>
1120a09c:	50800104 	addi	r2,r10,4
1120a0a0:	5480000b 	ldhu	r18,0(r10)
1120a0a4:	0027883a 	mov	r19,zero
1120a0a8:	483f7d0e 	bge	r9,zero,11209ea0 <__alt_data_end+0xffe89ea0>
1120a0ac:	003ddc06 	br	11209820 <__alt_data_end+0xffe89820>
1120a0b0:	d8c02215 	stw	r3,136(sp)
1120a0b4:	0039883a 	mov	fp,zero
1120a0b8:	003ddb06 	br	11209828 <__alt_data_end+0xffe89828>
1120a0bc:	02844874 	movhi	r10,4385
1120a0c0:	5281ae04 	addi	r10,r10,1720
1120a0c4:	da802415 	stw	r10,144(sp)
1120a0c8:	003e8306 	br	11209ad8 <__alt_data_end+0xffe89ad8>
1120a0cc:	d8801c17 	ldw	r2,112(sp)
1120a0d0:	dd002117 	ldw	r20,132(sp)
1120a0d4:	103eb926 	beq	r2,zero,11209bbc <__alt_data_end+0xffe89bbc>
1120a0d8:	d9002017 	ldw	r4,128(sp)
1120a0dc:	d9801a04 	addi	r6,sp,104
1120a0e0:	a00b883a 	mov	r5,r20
1120a0e4:	1208d540 	call	11208d54 <__sprint_r.part.0>
1120a0e8:	003eb406 	br	11209bbc <__alt_data_end+0xffe89bbc>
1120a0ec:	80c00043 	ldbu	r3,1(r16)
1120a0f0:	a5000814 	ori	r20,r20,32
1120a0f4:	84000044 	addi	r16,r16,1
1120a0f8:	18c03fcc 	andi	r3,r3,255
1120a0fc:	18c0201c 	xori	r3,r3,128
1120a100:	18ffe004 	addi	r3,r3,-128
1120a104:	003bb706 	br	11208fe4 <__alt_data_end+0xffe88fe4>
1120a108:	a809883a 	mov	r4,r21
1120a10c:	d8c02a15 	stw	r3,168(sp)
1120a110:	da002b15 	stw	r8,172(sp)
1120a114:	12016540 	call	11201654 <strlen>
1120a118:	d8c02a17 	ldw	r3,168(sp)
1120a11c:	1027883a 	mov	r19,r2
1120a120:	df001d83 	ldbu	fp,118(sp)
1120a124:	d8c02215 	stw	r3,136(sp)
1120a128:	0013883a 	mov	r9,zero
1120a12c:	da002b17 	ldw	r8,172(sp)
1120a130:	003c4d06 	br	11209268 <__alt_data_end+0xffe89268>
1120a134:	d9402117 	ldw	r5,132(sp)
1120a138:	d9002017 	ldw	r4,128(sp)
1120a13c:	d9801a04 	addi	r6,sp,104
1120a140:	da402c15 	stw	r9,176(sp)
1120a144:	1208d540 	call	11208d54 <__sprint_r.part.0>
1120a148:	da402c17 	ldw	r9,176(sp)
1120a14c:	103e9a1e 	bne	r2,zero,11209bb8 <__alt_data_end+0xffe89bb8>
1120a150:	d9401b17 	ldw	r5,108(sp)
1120a154:	d8801c17 	ldw	r2,112(sp)
1120a158:	d811883a 	mov	r8,sp
1120a15c:	29000044 	addi	r4,r5,1
1120a160:	003e4206 	br	11209a6c <__alt_data_end+0xffe89a6c>
1120a164:	d9401b17 	ldw	r5,108(sp)
1120a168:	01044874 	movhi	r4,4385
1120a16c:	2101b204 	addi	r4,r4,1736
1120a170:	d9002415 	stw	r4,144(sp)
1120a174:	29400044 	addi	r5,r5,1
1120a178:	003c6d06 	br	11209330 <__alt_data_end+0xffe89330>
1120a17c:	0039883a 	mov	fp,zero
1120a180:	00800084 	movi	r2,2
1120a184:	10803fcc 	andi	r2,r2,255
1120a188:	01000044 	movi	r4,1
1120a18c:	11001e26 	beq	r2,r4,1120a208 <___vfiprintf_internal_r+0x13a0>
1120a190:	01000084 	movi	r4,2
1120a194:	11001e1e 	bne	r2,r4,1120a210 <___vfiprintf_internal_r+0x13a8>
1120a198:	1829883a 	mov	r20,r3
1120a19c:	003eea06 	br	11209d48 <__alt_data_end+0xffe89d48>
1120a1a0:	a007883a 	mov	r3,r20
1120a1a4:	00800044 	movi	r2,1
1120a1a8:	003ff606 	br	1120a184 <__alt_data_end+0xffe8a184>
1120a1ac:	00800184 	movi	r2,6
1120a1b0:	1240012e 	bgeu	r2,r9,1120a1b8 <___vfiprintf_internal_r+0x1350>
1120a1b4:	1013883a 	mov	r9,r2
1120a1b8:	4827883a 	mov	r19,r9
1120a1bc:	4825883a 	mov	r18,r9
1120a1c0:	48001516 	blt	r9,zero,1120a218 <___vfiprintf_internal_r+0x13b0>
1120a1c4:	05444874 	movhi	r21,4385
1120a1c8:	d8c02215 	stw	r3,136(sp)
1120a1cc:	ad415204 	addi	r21,r21,1352
1120a1d0:	003d1406 	br	11209624 <__alt_data_end+0xffe89624>
1120a1d4:	02844874 	movhi	r10,4385
1120a1d8:	5281ae04 	addi	r10,r10,1720
1120a1dc:	da802415 	stw	r10,144(sp)
1120a1e0:	200d883a 	mov	r6,r4
1120a1e4:	003c9106 	br	1120942c <__alt_data_end+0xffe8942c>
1120a1e8:	5021883a 	mov	r16,r10
1120a1ec:	0013883a 	mov	r9,zero
1120a1f0:	003b7d06 	br	11208fe8 <__alt_data_end+0xffe88fe8>
1120a1f4:	4827883a 	mov	r19,r9
1120a1f8:	df001d83 	ldbu	fp,118(sp)
1120a1fc:	d8c02215 	stw	r3,136(sp)
1120a200:	0013883a 	mov	r9,zero
1120a204:	003c1806 	br	11209268 <__alt_data_end+0xffe89268>
1120a208:	1829883a 	mov	r20,r3
1120a20c:	003d1806 	br	11209670 <__alt_data_end+0xffe89670>
1120a210:	1829883a 	mov	r20,r3
1120a214:	003ccd06 	br	1120954c <__alt_data_end+0xffe8954c>
1120a218:	0025883a 	mov	r18,zero
1120a21c:	003fe906 	br	1120a1c4 <__alt_data_end+0xffe8a1c4>
1120a220:	d8802217 	ldw	r2,136(sp)
1120a224:	80c00043 	ldbu	r3,1(r16)
1120a228:	5021883a 	mov	r16,r10
1120a22c:	12400017 	ldw	r9,0(r2)
1120a230:	10800104 	addi	r2,r2,4
1120a234:	d8802215 	stw	r2,136(sp)
1120a238:	483faf0e 	bge	r9,zero,1120a0f8 <__alt_data_end+0xffe8a0f8>
1120a23c:	18c03fcc 	andi	r3,r3,255
1120a240:	18c0201c 	xori	r3,r3,128
1120a244:	027fffc4 	movi	r9,-1
1120a248:	18ffe004 	addi	r3,r3,-128
1120a24c:	003b6506 	br	11208fe4 <__alt_data_end+0xffe88fe4>
1120a250:	d9c01d85 	stb	r7,118(sp)
1120a254:	003ca006 	br	112094d8 <__alt_data_end+0xffe894d8>
1120a258:	d9c01d85 	stb	r7,118(sp)
1120a25c:	003cad06 	br	11209514 <__alt_data_end+0xffe89514>
1120a260:	d9c01d85 	stb	r7,118(sp)
1120a264:	003d7d06 	br	1120985c <__alt_data_end+0xffe8985c>
1120a268:	d9c01d85 	stb	r7,118(sp)
1120a26c:	003d5f06 	br	112097ec <__alt_data_end+0xffe897ec>
1120a270:	a080004c 	andi	r2,r20,1
1120a274:	0039883a 	mov	fp,zero
1120a278:	10000526 	beq	r2,zero,1120a290 <___vfiprintf_internal_r+0x1428>
1120a27c:	00800c04 	movi	r2,48
1120a280:	d88019c5 	stb	r2,103(sp)
1120a284:	dcc02717 	ldw	r19,156(sp)
1120a288:	dd4019c4 	addi	r21,sp,103
1120a28c:	003bf606 	br	11209268 <__alt_data_end+0xffe89268>
1120a290:	0027883a 	mov	r19,zero
1120a294:	dd401a04 	addi	r21,sp,104
1120a298:	003bf306 	br	11209268 <__alt_data_end+0xffe89268>
1120a29c:	d9c01d85 	stb	r7,118(sp)
1120a2a0:	003dc806 	br	112099c4 <__alt_data_end+0xffe899c4>
1120a2a4:	d9c01d85 	stb	r7,118(sp)
1120a2a8:	003d3a06 	br	11209794 <__alt_data_end+0xffe89794>
1120a2ac:	d9c01d85 	stb	r7,118(sp)
1120a2b0:	003d2a06 	br	1120975c <__alt_data_end+0xffe8975c>
1120a2b4:	d9c01d85 	stb	r7,118(sp)
1120a2b8:	003cde06 	br	11209634 <__alt_data_end+0xffe89634>
1120a2bc:	d9c01d85 	stb	r7,118(sp)
1120a2c0:	003cbc06 	br	112095b4 <__alt_data_end+0xffe895b4>

1120a2c4 <__vfiprintf_internal>:
1120a2c4:	00844874 	movhi	r2,4385
1120a2c8:	1088b104 	addi	r2,r2,8900
1120a2cc:	300f883a 	mov	r7,r6
1120a2d0:	280d883a 	mov	r6,r5
1120a2d4:	200b883a 	mov	r5,r4
1120a2d8:	11000017 	ldw	r4,0(r2)
1120a2dc:	1208e681 	jmpi	11208e68 <___vfiprintf_internal_r>

1120a2e0 <__sbprintf>:
1120a2e0:	2880030b 	ldhu	r2,12(r5)
1120a2e4:	2ac01917 	ldw	r11,100(r5)
1120a2e8:	2a80038b 	ldhu	r10,14(r5)
1120a2ec:	2a400717 	ldw	r9,28(r5)
1120a2f0:	2a000917 	ldw	r8,36(r5)
1120a2f4:	defee204 	addi	sp,sp,-1144
1120a2f8:	00c10004 	movi	r3,1024
1120a2fc:	dc011a15 	stw	r16,1128(sp)
1120a300:	10bfff4c 	andi	r2,r2,65533
1120a304:	2821883a 	mov	r16,r5
1120a308:	d8cb883a 	add	r5,sp,r3
1120a30c:	dc811c15 	stw	r18,1136(sp)
1120a310:	dc411b15 	stw	r17,1132(sp)
1120a314:	dfc11d15 	stw	ra,1140(sp)
1120a318:	2025883a 	mov	r18,r4
1120a31c:	d881030d 	sth	r2,1036(sp)
1120a320:	dac11915 	stw	r11,1124(sp)
1120a324:	da81038d 	sth	r10,1038(sp)
1120a328:	da410715 	stw	r9,1052(sp)
1120a32c:	da010915 	stw	r8,1060(sp)
1120a330:	dec10015 	stw	sp,1024(sp)
1120a334:	dec10415 	stw	sp,1040(sp)
1120a338:	d8c10215 	stw	r3,1032(sp)
1120a33c:	d8c10515 	stw	r3,1044(sp)
1120a340:	d8010615 	stw	zero,1048(sp)
1120a344:	1208e680 	call	11208e68 <___vfiprintf_internal_r>
1120a348:	1023883a 	mov	r17,r2
1120a34c:	10000416 	blt	r2,zero,1120a360 <__sbprintf+0x80>
1120a350:	d9410004 	addi	r5,sp,1024
1120a354:	9009883a 	mov	r4,r18
1120a358:	12055b40 	call	112055b4 <_fflush_r>
1120a35c:	10000d1e 	bne	r2,zero,1120a394 <__sbprintf+0xb4>
1120a360:	d881030b 	ldhu	r2,1036(sp)
1120a364:	1080100c 	andi	r2,r2,64
1120a368:	10000326 	beq	r2,zero,1120a378 <__sbprintf+0x98>
1120a36c:	8080030b 	ldhu	r2,12(r16)
1120a370:	10801014 	ori	r2,r2,64
1120a374:	8080030d 	sth	r2,12(r16)
1120a378:	8805883a 	mov	r2,r17
1120a37c:	dfc11d17 	ldw	ra,1140(sp)
1120a380:	dc811c17 	ldw	r18,1136(sp)
1120a384:	dc411b17 	ldw	r17,1132(sp)
1120a388:	dc011a17 	ldw	r16,1128(sp)
1120a38c:	dec11e04 	addi	sp,sp,1144
1120a390:	f800283a 	ret
1120a394:	047fffc4 	movi	r17,-1
1120a398:	003ff106 	br	1120a360 <__alt_data_end+0xffe8a360>

1120a39c <__swbuf_r>:
1120a39c:	defffb04 	addi	sp,sp,-20
1120a3a0:	dcc00315 	stw	r19,12(sp)
1120a3a4:	dc800215 	stw	r18,8(sp)
1120a3a8:	dc000015 	stw	r16,0(sp)
1120a3ac:	dfc00415 	stw	ra,16(sp)
1120a3b0:	dc400115 	stw	r17,4(sp)
1120a3b4:	2025883a 	mov	r18,r4
1120a3b8:	2827883a 	mov	r19,r5
1120a3bc:	3021883a 	mov	r16,r6
1120a3c0:	20000226 	beq	r4,zero,1120a3cc <__swbuf_r+0x30>
1120a3c4:	20800e17 	ldw	r2,56(r4)
1120a3c8:	10004226 	beq	r2,zero,1120a4d4 <__swbuf_r+0x138>
1120a3cc:	80800617 	ldw	r2,24(r16)
1120a3d0:	8100030b 	ldhu	r4,12(r16)
1120a3d4:	80800215 	stw	r2,8(r16)
1120a3d8:	2080020c 	andi	r2,r4,8
1120a3dc:	10003626 	beq	r2,zero,1120a4b8 <__swbuf_r+0x11c>
1120a3e0:	80c00417 	ldw	r3,16(r16)
1120a3e4:	18003426 	beq	r3,zero,1120a4b8 <__swbuf_r+0x11c>
1120a3e8:	2088000c 	andi	r2,r4,8192
1120a3ec:	9c403fcc 	andi	r17,r19,255
1120a3f0:	10001a26 	beq	r2,zero,1120a45c <__swbuf_r+0xc0>
1120a3f4:	80800017 	ldw	r2,0(r16)
1120a3f8:	81000517 	ldw	r4,20(r16)
1120a3fc:	10c7c83a 	sub	r3,r2,r3
1120a400:	1900200e 	bge	r3,r4,1120a484 <__swbuf_r+0xe8>
1120a404:	18c00044 	addi	r3,r3,1
1120a408:	81000217 	ldw	r4,8(r16)
1120a40c:	11400044 	addi	r5,r2,1
1120a410:	81400015 	stw	r5,0(r16)
1120a414:	213fffc4 	addi	r4,r4,-1
1120a418:	81000215 	stw	r4,8(r16)
1120a41c:	14c00005 	stb	r19,0(r2)
1120a420:	80800517 	ldw	r2,20(r16)
1120a424:	10c01e26 	beq	r2,r3,1120a4a0 <__swbuf_r+0x104>
1120a428:	8080030b 	ldhu	r2,12(r16)
1120a42c:	1080004c 	andi	r2,r2,1
1120a430:	10000226 	beq	r2,zero,1120a43c <__swbuf_r+0xa0>
1120a434:	00800284 	movi	r2,10
1120a438:	88801926 	beq	r17,r2,1120a4a0 <__swbuf_r+0x104>
1120a43c:	8805883a 	mov	r2,r17
1120a440:	dfc00417 	ldw	ra,16(sp)
1120a444:	dcc00317 	ldw	r19,12(sp)
1120a448:	dc800217 	ldw	r18,8(sp)
1120a44c:	dc400117 	ldw	r17,4(sp)
1120a450:	dc000017 	ldw	r16,0(sp)
1120a454:	dec00504 	addi	sp,sp,20
1120a458:	f800283a 	ret
1120a45c:	81401917 	ldw	r5,100(r16)
1120a460:	00b7ffc4 	movi	r2,-8193
1120a464:	21080014 	ori	r4,r4,8192
1120a468:	2884703a 	and	r2,r5,r2
1120a46c:	80801915 	stw	r2,100(r16)
1120a470:	80800017 	ldw	r2,0(r16)
1120a474:	8100030d 	sth	r4,12(r16)
1120a478:	81000517 	ldw	r4,20(r16)
1120a47c:	10c7c83a 	sub	r3,r2,r3
1120a480:	193fe016 	blt	r3,r4,1120a404 <__alt_data_end+0xffe8a404>
1120a484:	800b883a 	mov	r5,r16
1120a488:	9009883a 	mov	r4,r18
1120a48c:	12055b40 	call	112055b4 <_fflush_r>
1120a490:	1000071e 	bne	r2,zero,1120a4b0 <__swbuf_r+0x114>
1120a494:	80800017 	ldw	r2,0(r16)
1120a498:	00c00044 	movi	r3,1
1120a49c:	003fda06 	br	1120a408 <__alt_data_end+0xffe8a408>
1120a4a0:	800b883a 	mov	r5,r16
1120a4a4:	9009883a 	mov	r4,r18
1120a4a8:	12055b40 	call	112055b4 <_fflush_r>
1120a4ac:	103fe326 	beq	r2,zero,1120a43c <__alt_data_end+0xffe8a43c>
1120a4b0:	00bfffc4 	movi	r2,-1
1120a4b4:	003fe206 	br	1120a440 <__alt_data_end+0xffe8a440>
1120a4b8:	800b883a 	mov	r5,r16
1120a4bc:	9009883a 	mov	r4,r18
1120a4c0:	12039bc0 	call	112039bc <__swsetup_r>
1120a4c4:	103ffa1e 	bne	r2,zero,1120a4b0 <__alt_data_end+0xffe8a4b0>
1120a4c8:	8100030b 	ldhu	r4,12(r16)
1120a4cc:	80c00417 	ldw	r3,16(r16)
1120a4d0:	003fc506 	br	1120a3e8 <__alt_data_end+0xffe8a3e8>
1120a4d4:	12059900 	call	11205990 <__sinit>
1120a4d8:	003fbc06 	br	1120a3cc <__alt_data_end+0xffe8a3cc>

1120a4dc <__swbuf>:
1120a4dc:	00844874 	movhi	r2,4385
1120a4e0:	1088b104 	addi	r2,r2,8900
1120a4e4:	280d883a 	mov	r6,r5
1120a4e8:	200b883a 	mov	r5,r4
1120a4ec:	11000017 	ldw	r4,0(r2)
1120a4f0:	120a39c1 	jmpi	1120a39c <__swbuf_r>

1120a4f4 <_write_r>:
1120a4f4:	defffd04 	addi	sp,sp,-12
1120a4f8:	2805883a 	mov	r2,r5
1120a4fc:	dc000015 	stw	r16,0(sp)
1120a500:	04044874 	movhi	r16,4385
1120a504:	dc400115 	stw	r17,4(sp)
1120a508:	300b883a 	mov	r5,r6
1120a50c:	8408c604 	addi	r16,r16,8984
1120a510:	2023883a 	mov	r17,r4
1120a514:	380d883a 	mov	r6,r7
1120a518:	1009883a 	mov	r4,r2
1120a51c:	dfc00215 	stw	ra,8(sp)
1120a520:	80000015 	stw	zero,0(r16)
1120a524:	120e5780 	call	1120e578 <write>
1120a528:	00ffffc4 	movi	r3,-1
1120a52c:	10c00526 	beq	r2,r3,1120a544 <_write_r+0x50>
1120a530:	dfc00217 	ldw	ra,8(sp)
1120a534:	dc400117 	ldw	r17,4(sp)
1120a538:	dc000017 	ldw	r16,0(sp)
1120a53c:	dec00304 	addi	sp,sp,12
1120a540:	f800283a 	ret
1120a544:	80c00017 	ldw	r3,0(r16)
1120a548:	183ff926 	beq	r3,zero,1120a530 <__alt_data_end+0xffe8a530>
1120a54c:	88c00015 	stw	r3,0(r17)
1120a550:	003ff706 	br	1120a530 <__alt_data_end+0xffe8a530>

1120a554 <_close_r>:
1120a554:	defffd04 	addi	sp,sp,-12
1120a558:	dc000015 	stw	r16,0(sp)
1120a55c:	04044874 	movhi	r16,4385
1120a560:	dc400115 	stw	r17,4(sp)
1120a564:	8408c604 	addi	r16,r16,8984
1120a568:	2023883a 	mov	r17,r4
1120a56c:	2809883a 	mov	r4,r5
1120a570:	dfc00215 	stw	ra,8(sp)
1120a574:	80000015 	stw	zero,0(r16)
1120a578:	120de240 	call	1120de24 <close>
1120a57c:	00ffffc4 	movi	r3,-1
1120a580:	10c00526 	beq	r2,r3,1120a598 <_close_r+0x44>
1120a584:	dfc00217 	ldw	ra,8(sp)
1120a588:	dc400117 	ldw	r17,4(sp)
1120a58c:	dc000017 	ldw	r16,0(sp)
1120a590:	dec00304 	addi	sp,sp,12
1120a594:	f800283a 	ret
1120a598:	80c00017 	ldw	r3,0(r16)
1120a59c:	183ff926 	beq	r3,zero,1120a584 <__alt_data_end+0xffe8a584>
1120a5a0:	88c00015 	stw	r3,0(r17)
1120a5a4:	003ff706 	br	1120a584 <__alt_data_end+0xffe8a584>

1120a5a8 <_calloc_r>:
1120a5a8:	298b383a 	mul	r5,r5,r6
1120a5ac:	defffe04 	addi	sp,sp,-8
1120a5b0:	dfc00115 	stw	ra,4(sp)
1120a5b4:	dc000015 	stw	r16,0(sp)
1120a5b8:	12066f00 	call	112066f0 <_malloc_r>
1120a5bc:	10002926 	beq	r2,zero,1120a664 <_calloc_r+0xbc>
1120a5c0:	11bfff17 	ldw	r6,-4(r2)
1120a5c4:	1021883a 	mov	r16,r2
1120a5c8:	00bfff04 	movi	r2,-4
1120a5cc:	308c703a 	and	r6,r6,r2
1120a5d0:	00c00904 	movi	r3,36
1120a5d4:	308d883a 	add	r6,r6,r2
1120a5d8:	19801636 	bltu	r3,r6,1120a634 <_calloc_r+0x8c>
1120a5dc:	008004c4 	movi	r2,19
1120a5e0:	11800b2e 	bgeu	r2,r6,1120a610 <_calloc_r+0x68>
1120a5e4:	80000015 	stw	zero,0(r16)
1120a5e8:	80000115 	stw	zero,4(r16)
1120a5ec:	008006c4 	movi	r2,27
1120a5f0:	11801a2e 	bgeu	r2,r6,1120a65c <_calloc_r+0xb4>
1120a5f4:	80000215 	stw	zero,8(r16)
1120a5f8:	80000315 	stw	zero,12(r16)
1120a5fc:	30c0151e 	bne	r6,r3,1120a654 <_calloc_r+0xac>
1120a600:	80000415 	stw	zero,16(r16)
1120a604:	80800604 	addi	r2,r16,24
1120a608:	80000515 	stw	zero,20(r16)
1120a60c:	00000106 	br	1120a614 <_calloc_r+0x6c>
1120a610:	8005883a 	mov	r2,r16
1120a614:	10000015 	stw	zero,0(r2)
1120a618:	10000115 	stw	zero,4(r2)
1120a61c:	10000215 	stw	zero,8(r2)
1120a620:	8005883a 	mov	r2,r16
1120a624:	dfc00117 	ldw	ra,4(sp)
1120a628:	dc000017 	ldw	r16,0(sp)
1120a62c:	dec00204 	addi	sp,sp,8
1120a630:	f800283a 	ret
1120a634:	000b883a 	mov	r5,zero
1120a638:	8009883a 	mov	r4,r16
1120a63c:	12072840 	call	11207284 <memset>
1120a640:	8005883a 	mov	r2,r16
1120a644:	dfc00117 	ldw	ra,4(sp)
1120a648:	dc000017 	ldw	r16,0(sp)
1120a64c:	dec00204 	addi	sp,sp,8
1120a650:	f800283a 	ret
1120a654:	80800404 	addi	r2,r16,16
1120a658:	003fee06 	br	1120a614 <__alt_data_end+0xffe8a614>
1120a65c:	80800204 	addi	r2,r16,8
1120a660:	003fec06 	br	1120a614 <__alt_data_end+0xffe8a614>
1120a664:	0005883a 	mov	r2,zero
1120a668:	003fee06 	br	1120a624 <__alt_data_end+0xffe8a624>

1120a66c <_fclose_r>:
1120a66c:	28003926 	beq	r5,zero,1120a754 <_fclose_r+0xe8>
1120a670:	defffc04 	addi	sp,sp,-16
1120a674:	dc400115 	stw	r17,4(sp)
1120a678:	dc000015 	stw	r16,0(sp)
1120a67c:	dfc00315 	stw	ra,12(sp)
1120a680:	dc800215 	stw	r18,8(sp)
1120a684:	2023883a 	mov	r17,r4
1120a688:	2821883a 	mov	r16,r5
1120a68c:	20000226 	beq	r4,zero,1120a698 <_fclose_r+0x2c>
1120a690:	20800e17 	ldw	r2,56(r4)
1120a694:	10002726 	beq	r2,zero,1120a734 <_fclose_r+0xc8>
1120a698:	8080030f 	ldh	r2,12(r16)
1120a69c:	1000071e 	bne	r2,zero,1120a6bc <_fclose_r+0x50>
1120a6a0:	0005883a 	mov	r2,zero
1120a6a4:	dfc00317 	ldw	ra,12(sp)
1120a6a8:	dc800217 	ldw	r18,8(sp)
1120a6ac:	dc400117 	ldw	r17,4(sp)
1120a6b0:	dc000017 	ldw	r16,0(sp)
1120a6b4:	dec00404 	addi	sp,sp,16
1120a6b8:	f800283a 	ret
1120a6bc:	800b883a 	mov	r5,r16
1120a6c0:	8809883a 	mov	r4,r17
1120a6c4:	12053980 	call	11205398 <__sflush_r>
1120a6c8:	1025883a 	mov	r18,r2
1120a6cc:	80800b17 	ldw	r2,44(r16)
1120a6d0:	10000426 	beq	r2,zero,1120a6e4 <_fclose_r+0x78>
1120a6d4:	81400717 	ldw	r5,28(r16)
1120a6d8:	8809883a 	mov	r4,r17
1120a6dc:	103ee83a 	callr	r2
1120a6e0:	10001616 	blt	r2,zero,1120a73c <_fclose_r+0xd0>
1120a6e4:	8080030b 	ldhu	r2,12(r16)
1120a6e8:	1080200c 	andi	r2,r2,128
1120a6ec:	1000151e 	bne	r2,zero,1120a744 <_fclose_r+0xd8>
1120a6f0:	81400c17 	ldw	r5,48(r16)
1120a6f4:	28000526 	beq	r5,zero,1120a70c <_fclose_r+0xa0>
1120a6f8:	80801004 	addi	r2,r16,64
1120a6fc:	28800226 	beq	r5,r2,1120a708 <_fclose_r+0x9c>
1120a700:	8809883a 	mov	r4,r17
1120a704:	1205b040 	call	11205b04 <_free_r>
1120a708:	80000c15 	stw	zero,48(r16)
1120a70c:	81401117 	ldw	r5,68(r16)
1120a710:	28000326 	beq	r5,zero,1120a720 <_fclose_r+0xb4>
1120a714:	8809883a 	mov	r4,r17
1120a718:	1205b040 	call	11205b04 <_free_r>
1120a71c:	80001115 	stw	zero,68(r16)
1120a720:	12059a00 	call	112059a0 <__sfp_lock_acquire>
1120a724:	8000030d 	sth	zero,12(r16)
1120a728:	12059a40 	call	112059a4 <__sfp_lock_release>
1120a72c:	9005883a 	mov	r2,r18
1120a730:	003fdc06 	br	1120a6a4 <__alt_data_end+0xffe8a6a4>
1120a734:	12059900 	call	11205990 <__sinit>
1120a738:	003fd706 	br	1120a698 <__alt_data_end+0xffe8a698>
1120a73c:	04bfffc4 	movi	r18,-1
1120a740:	003fe806 	br	1120a6e4 <__alt_data_end+0xffe8a6e4>
1120a744:	81400417 	ldw	r5,16(r16)
1120a748:	8809883a 	mov	r4,r17
1120a74c:	1205b040 	call	11205b04 <_free_r>
1120a750:	003fe706 	br	1120a6f0 <__alt_data_end+0xffe8a6f0>
1120a754:	0005883a 	mov	r2,zero
1120a758:	f800283a 	ret

1120a75c <fclose>:
1120a75c:	00844874 	movhi	r2,4385
1120a760:	1088b104 	addi	r2,r2,8900
1120a764:	200b883a 	mov	r5,r4
1120a768:	11000017 	ldw	r4,0(r2)
1120a76c:	120a66c1 	jmpi	1120a66c <_fclose_r>

1120a770 <__fputwc>:
1120a770:	defff804 	addi	sp,sp,-32
1120a774:	dcc00415 	stw	r19,16(sp)
1120a778:	dc800315 	stw	r18,12(sp)
1120a77c:	dc000115 	stw	r16,4(sp)
1120a780:	dfc00715 	stw	ra,28(sp)
1120a784:	dd400615 	stw	r21,24(sp)
1120a788:	dd000515 	stw	r20,20(sp)
1120a78c:	dc400215 	stw	r17,8(sp)
1120a790:	2027883a 	mov	r19,r4
1120a794:	2825883a 	mov	r18,r5
1120a798:	3021883a 	mov	r16,r6
1120a79c:	12064e00 	call	112064e0 <__locale_mb_cur_max>
1120a7a0:	00c00044 	movi	r3,1
1120a7a4:	10c03e26 	beq	r2,r3,1120a8a0 <__fputwc+0x130>
1120a7a8:	81c01704 	addi	r7,r16,92
1120a7ac:	900d883a 	mov	r6,r18
1120a7b0:	d80b883a 	mov	r5,sp
1120a7b4:	9809883a 	mov	r4,r19
1120a7b8:	120aae80 	call	1120aae8 <_wcrtomb_r>
1120a7bc:	1029883a 	mov	r20,r2
1120a7c0:	00bfffc4 	movi	r2,-1
1120a7c4:	a0802026 	beq	r20,r2,1120a848 <__fputwc+0xd8>
1120a7c8:	d9400003 	ldbu	r5,0(sp)
1120a7cc:	a0001c26 	beq	r20,zero,1120a840 <__fputwc+0xd0>
1120a7d0:	0023883a 	mov	r17,zero
1120a7d4:	05400284 	movi	r21,10
1120a7d8:	00000906 	br	1120a800 <__fputwc+0x90>
1120a7dc:	80800017 	ldw	r2,0(r16)
1120a7e0:	11400005 	stb	r5,0(r2)
1120a7e4:	80c00017 	ldw	r3,0(r16)
1120a7e8:	18c00044 	addi	r3,r3,1
1120a7ec:	80c00015 	stw	r3,0(r16)
1120a7f0:	8c400044 	addi	r17,r17,1
1120a7f4:	dc45883a 	add	r2,sp,r17
1120a7f8:	8d00112e 	bgeu	r17,r20,1120a840 <__fputwc+0xd0>
1120a7fc:	11400003 	ldbu	r5,0(r2)
1120a800:	80c00217 	ldw	r3,8(r16)
1120a804:	18ffffc4 	addi	r3,r3,-1
1120a808:	80c00215 	stw	r3,8(r16)
1120a80c:	183ff30e 	bge	r3,zero,1120a7dc <__alt_data_end+0xffe8a7dc>
1120a810:	80800617 	ldw	r2,24(r16)
1120a814:	18801916 	blt	r3,r2,1120a87c <__fputwc+0x10c>
1120a818:	80800017 	ldw	r2,0(r16)
1120a81c:	11400005 	stb	r5,0(r2)
1120a820:	80800017 	ldw	r2,0(r16)
1120a824:	10c00003 	ldbu	r3,0(r2)
1120a828:	10800044 	addi	r2,r2,1
1120a82c:	1d402326 	beq	r3,r21,1120a8bc <__fputwc+0x14c>
1120a830:	80800015 	stw	r2,0(r16)
1120a834:	8c400044 	addi	r17,r17,1
1120a838:	dc45883a 	add	r2,sp,r17
1120a83c:	8d3fef36 	bltu	r17,r20,1120a7fc <__alt_data_end+0xffe8a7fc>
1120a840:	9005883a 	mov	r2,r18
1120a844:	00000406 	br	1120a858 <__fputwc+0xe8>
1120a848:	80c0030b 	ldhu	r3,12(r16)
1120a84c:	a005883a 	mov	r2,r20
1120a850:	18c01014 	ori	r3,r3,64
1120a854:	80c0030d 	sth	r3,12(r16)
1120a858:	dfc00717 	ldw	ra,28(sp)
1120a85c:	dd400617 	ldw	r21,24(sp)
1120a860:	dd000517 	ldw	r20,20(sp)
1120a864:	dcc00417 	ldw	r19,16(sp)
1120a868:	dc800317 	ldw	r18,12(sp)
1120a86c:	dc400217 	ldw	r17,8(sp)
1120a870:	dc000117 	ldw	r16,4(sp)
1120a874:	dec00804 	addi	sp,sp,32
1120a878:	f800283a 	ret
1120a87c:	800d883a 	mov	r6,r16
1120a880:	29403fcc 	andi	r5,r5,255
1120a884:	9809883a 	mov	r4,r19
1120a888:	120a39c0 	call	1120a39c <__swbuf_r>
1120a88c:	10bfffe0 	cmpeqi	r2,r2,-1
1120a890:	10803fcc 	andi	r2,r2,255
1120a894:	103fd626 	beq	r2,zero,1120a7f0 <__alt_data_end+0xffe8a7f0>
1120a898:	00bfffc4 	movi	r2,-1
1120a89c:	003fee06 	br	1120a858 <__alt_data_end+0xffe8a858>
1120a8a0:	90ffffc4 	addi	r3,r18,-1
1120a8a4:	01003f84 	movi	r4,254
1120a8a8:	20ffbf36 	bltu	r4,r3,1120a7a8 <__alt_data_end+0xffe8a7a8>
1120a8ac:	900b883a 	mov	r5,r18
1120a8b0:	dc800005 	stb	r18,0(sp)
1120a8b4:	1029883a 	mov	r20,r2
1120a8b8:	003fc506 	br	1120a7d0 <__alt_data_end+0xffe8a7d0>
1120a8bc:	800d883a 	mov	r6,r16
1120a8c0:	a80b883a 	mov	r5,r21
1120a8c4:	9809883a 	mov	r4,r19
1120a8c8:	120a39c0 	call	1120a39c <__swbuf_r>
1120a8cc:	10bfffe0 	cmpeqi	r2,r2,-1
1120a8d0:	003fef06 	br	1120a890 <__alt_data_end+0xffe8a890>

1120a8d4 <_fputwc_r>:
1120a8d4:	3080030b 	ldhu	r2,12(r6)
1120a8d8:	10c8000c 	andi	r3,r2,8192
1120a8dc:	1800051e 	bne	r3,zero,1120a8f4 <_fputwc_r+0x20>
1120a8e0:	30c01917 	ldw	r3,100(r6)
1120a8e4:	10880014 	ori	r2,r2,8192
1120a8e8:	3080030d 	sth	r2,12(r6)
1120a8ec:	18880014 	ori	r2,r3,8192
1120a8f0:	30801915 	stw	r2,100(r6)
1120a8f4:	120a7701 	jmpi	1120a770 <__fputwc>

1120a8f8 <fputwc>:
1120a8f8:	00844874 	movhi	r2,4385
1120a8fc:	defffc04 	addi	sp,sp,-16
1120a900:	1088b104 	addi	r2,r2,8900
1120a904:	dc000115 	stw	r16,4(sp)
1120a908:	14000017 	ldw	r16,0(r2)
1120a90c:	dc400215 	stw	r17,8(sp)
1120a910:	dfc00315 	stw	ra,12(sp)
1120a914:	2023883a 	mov	r17,r4
1120a918:	80000226 	beq	r16,zero,1120a924 <fputwc+0x2c>
1120a91c:	80800e17 	ldw	r2,56(r16)
1120a920:	10001026 	beq	r2,zero,1120a964 <fputwc+0x6c>
1120a924:	2880030b 	ldhu	r2,12(r5)
1120a928:	10c8000c 	andi	r3,r2,8192
1120a92c:	1800051e 	bne	r3,zero,1120a944 <fputwc+0x4c>
1120a930:	28c01917 	ldw	r3,100(r5)
1120a934:	10880014 	ori	r2,r2,8192
1120a938:	2880030d 	sth	r2,12(r5)
1120a93c:	18880014 	ori	r2,r3,8192
1120a940:	28801915 	stw	r2,100(r5)
1120a944:	280d883a 	mov	r6,r5
1120a948:	8009883a 	mov	r4,r16
1120a94c:	880b883a 	mov	r5,r17
1120a950:	dfc00317 	ldw	ra,12(sp)
1120a954:	dc400217 	ldw	r17,8(sp)
1120a958:	dc000117 	ldw	r16,4(sp)
1120a95c:	dec00404 	addi	sp,sp,16
1120a960:	120a7701 	jmpi	1120a770 <__fputwc>
1120a964:	8009883a 	mov	r4,r16
1120a968:	d9400015 	stw	r5,0(sp)
1120a96c:	12059900 	call	11205990 <__sinit>
1120a970:	d9400017 	ldw	r5,0(sp)
1120a974:	003feb06 	br	1120a924 <__alt_data_end+0xffe8a924>

1120a978 <_fstat_r>:
1120a978:	defffd04 	addi	sp,sp,-12
1120a97c:	2805883a 	mov	r2,r5
1120a980:	dc000015 	stw	r16,0(sp)
1120a984:	04044874 	movhi	r16,4385
1120a988:	dc400115 	stw	r17,4(sp)
1120a98c:	8408c604 	addi	r16,r16,8984
1120a990:	2023883a 	mov	r17,r4
1120a994:	300b883a 	mov	r5,r6
1120a998:	1009883a 	mov	r4,r2
1120a99c:	dfc00215 	stw	ra,8(sp)
1120a9a0:	80000015 	stw	zero,0(r16)
1120a9a4:	120df5c0 	call	1120df5c <fstat>
1120a9a8:	00ffffc4 	movi	r3,-1
1120a9ac:	10c00526 	beq	r2,r3,1120a9c4 <_fstat_r+0x4c>
1120a9b0:	dfc00217 	ldw	ra,8(sp)
1120a9b4:	dc400117 	ldw	r17,4(sp)
1120a9b8:	dc000017 	ldw	r16,0(sp)
1120a9bc:	dec00304 	addi	sp,sp,12
1120a9c0:	f800283a 	ret
1120a9c4:	80c00017 	ldw	r3,0(r16)
1120a9c8:	183ff926 	beq	r3,zero,1120a9b0 <__alt_data_end+0xffe8a9b0>
1120a9cc:	88c00015 	stw	r3,0(r17)
1120a9d0:	003ff706 	br	1120a9b0 <__alt_data_end+0xffe8a9b0>

1120a9d4 <_isatty_r>:
1120a9d4:	defffd04 	addi	sp,sp,-12
1120a9d8:	dc000015 	stw	r16,0(sp)
1120a9dc:	04044874 	movhi	r16,4385
1120a9e0:	dc400115 	stw	r17,4(sp)
1120a9e4:	8408c604 	addi	r16,r16,8984
1120a9e8:	2023883a 	mov	r17,r4
1120a9ec:	2809883a 	mov	r4,r5
1120a9f0:	dfc00215 	stw	ra,8(sp)
1120a9f4:	80000015 	stw	zero,0(r16)
1120a9f8:	120e0480 	call	1120e048 <isatty>
1120a9fc:	00ffffc4 	movi	r3,-1
1120aa00:	10c00526 	beq	r2,r3,1120aa18 <_isatty_r+0x44>
1120aa04:	dfc00217 	ldw	ra,8(sp)
1120aa08:	dc400117 	ldw	r17,4(sp)
1120aa0c:	dc000017 	ldw	r16,0(sp)
1120aa10:	dec00304 	addi	sp,sp,12
1120aa14:	f800283a 	ret
1120aa18:	80c00017 	ldw	r3,0(r16)
1120aa1c:	183ff926 	beq	r3,zero,1120aa04 <__alt_data_end+0xffe8aa04>
1120aa20:	88c00015 	stw	r3,0(r17)
1120aa24:	003ff706 	br	1120aa04 <__alt_data_end+0xffe8aa04>

1120aa28 <_lseek_r>:
1120aa28:	defffd04 	addi	sp,sp,-12
1120aa2c:	2805883a 	mov	r2,r5
1120aa30:	dc000015 	stw	r16,0(sp)
1120aa34:	04044874 	movhi	r16,4385
1120aa38:	dc400115 	stw	r17,4(sp)
1120aa3c:	300b883a 	mov	r5,r6
1120aa40:	8408c604 	addi	r16,r16,8984
1120aa44:	2023883a 	mov	r17,r4
1120aa48:	380d883a 	mov	r6,r7
1120aa4c:	1009883a 	mov	r4,r2
1120aa50:	dfc00215 	stw	ra,8(sp)
1120aa54:	80000015 	stw	zero,0(r16)
1120aa58:	120e1280 	call	1120e128 <lseek>
1120aa5c:	00ffffc4 	movi	r3,-1
1120aa60:	10c00526 	beq	r2,r3,1120aa78 <_lseek_r+0x50>
1120aa64:	dfc00217 	ldw	ra,8(sp)
1120aa68:	dc400117 	ldw	r17,4(sp)
1120aa6c:	dc000017 	ldw	r16,0(sp)
1120aa70:	dec00304 	addi	sp,sp,12
1120aa74:	f800283a 	ret
1120aa78:	80c00017 	ldw	r3,0(r16)
1120aa7c:	183ff926 	beq	r3,zero,1120aa64 <__alt_data_end+0xffe8aa64>
1120aa80:	88c00015 	stw	r3,0(r17)
1120aa84:	003ff706 	br	1120aa64 <__alt_data_end+0xffe8aa64>

1120aa88 <_read_r>:
1120aa88:	defffd04 	addi	sp,sp,-12
1120aa8c:	2805883a 	mov	r2,r5
1120aa90:	dc000015 	stw	r16,0(sp)
1120aa94:	04044874 	movhi	r16,4385
1120aa98:	dc400115 	stw	r17,4(sp)
1120aa9c:	300b883a 	mov	r5,r6
1120aaa0:	8408c604 	addi	r16,r16,8984
1120aaa4:	2023883a 	mov	r17,r4
1120aaa8:	380d883a 	mov	r6,r7
1120aaac:	1009883a 	mov	r4,r2
1120aab0:	dfc00215 	stw	ra,8(sp)
1120aab4:	80000015 	stw	zero,0(r16)
1120aab8:	120e2fc0 	call	1120e2fc <read>
1120aabc:	00ffffc4 	movi	r3,-1
1120aac0:	10c00526 	beq	r2,r3,1120aad8 <_read_r+0x50>
1120aac4:	dfc00217 	ldw	ra,8(sp)
1120aac8:	dc400117 	ldw	r17,4(sp)
1120aacc:	dc000017 	ldw	r16,0(sp)
1120aad0:	dec00304 	addi	sp,sp,12
1120aad4:	f800283a 	ret
1120aad8:	80c00017 	ldw	r3,0(r16)
1120aadc:	183ff926 	beq	r3,zero,1120aac4 <__alt_data_end+0xffe8aac4>
1120aae0:	88c00015 	stw	r3,0(r17)
1120aae4:	003ff706 	br	1120aac4 <__alt_data_end+0xffe8aac4>

1120aae8 <_wcrtomb_r>:
1120aae8:	defff604 	addi	sp,sp,-40
1120aaec:	00844874 	movhi	r2,4385
1120aaf0:	dc800815 	stw	r18,32(sp)
1120aaf4:	dc400715 	stw	r17,28(sp)
1120aaf8:	dc000615 	stw	r16,24(sp)
1120aafc:	1088b504 	addi	r2,r2,8916
1120ab00:	dfc00915 	stw	ra,36(sp)
1120ab04:	2021883a 	mov	r16,r4
1120ab08:	3823883a 	mov	r17,r7
1120ab0c:	14800017 	ldw	r18,0(r2)
1120ab10:	28001426 	beq	r5,zero,1120ab64 <_wcrtomb_r+0x7c>
1120ab14:	d9400415 	stw	r5,16(sp)
1120ab18:	d9800515 	stw	r6,20(sp)
1120ab1c:	12064d40 	call	112064d4 <__locale_charset>
1120ab20:	d9800517 	ldw	r6,20(sp)
1120ab24:	d9400417 	ldw	r5,16(sp)
1120ab28:	100f883a 	mov	r7,r2
1120ab2c:	dc400015 	stw	r17,0(sp)
1120ab30:	8009883a 	mov	r4,r16
1120ab34:	903ee83a 	callr	r18
1120ab38:	00ffffc4 	movi	r3,-1
1120ab3c:	10c0031e 	bne	r2,r3,1120ab4c <_wcrtomb_r+0x64>
1120ab40:	88000015 	stw	zero,0(r17)
1120ab44:	00c02284 	movi	r3,138
1120ab48:	80c00015 	stw	r3,0(r16)
1120ab4c:	dfc00917 	ldw	ra,36(sp)
1120ab50:	dc800817 	ldw	r18,32(sp)
1120ab54:	dc400717 	ldw	r17,28(sp)
1120ab58:	dc000617 	ldw	r16,24(sp)
1120ab5c:	dec00a04 	addi	sp,sp,40
1120ab60:	f800283a 	ret
1120ab64:	12064d40 	call	112064d4 <__locale_charset>
1120ab68:	100f883a 	mov	r7,r2
1120ab6c:	dc400015 	stw	r17,0(sp)
1120ab70:	000d883a 	mov	r6,zero
1120ab74:	d9400104 	addi	r5,sp,4
1120ab78:	8009883a 	mov	r4,r16
1120ab7c:	903ee83a 	callr	r18
1120ab80:	003fed06 	br	1120ab38 <__alt_data_end+0xffe8ab38>

1120ab84 <wcrtomb>:
1120ab84:	defff604 	addi	sp,sp,-40
1120ab88:	00844874 	movhi	r2,4385
1120ab8c:	dc800615 	stw	r18,24(sp)
1120ab90:	dc400515 	stw	r17,20(sp)
1120ab94:	1088b104 	addi	r2,r2,8900
1120ab98:	dfc00915 	stw	ra,36(sp)
1120ab9c:	dd000815 	stw	r20,32(sp)
1120aba0:	dcc00715 	stw	r19,28(sp)
1120aba4:	dc000415 	stw	r16,16(sp)
1120aba8:	3025883a 	mov	r18,r6
1120abac:	14400017 	ldw	r17,0(r2)
1120abb0:	20001926 	beq	r4,zero,1120ac18 <wcrtomb+0x94>
1120abb4:	00844874 	movhi	r2,4385
1120abb8:	1088b504 	addi	r2,r2,8916
1120abbc:	15000017 	ldw	r20,0(r2)
1120abc0:	2021883a 	mov	r16,r4
1120abc4:	2827883a 	mov	r19,r5
1120abc8:	12064d40 	call	112064d4 <__locale_charset>
1120abcc:	100f883a 	mov	r7,r2
1120abd0:	dc800015 	stw	r18,0(sp)
1120abd4:	980d883a 	mov	r6,r19
1120abd8:	800b883a 	mov	r5,r16
1120abdc:	8809883a 	mov	r4,r17
1120abe0:	a03ee83a 	callr	r20
1120abe4:	00ffffc4 	movi	r3,-1
1120abe8:	10c0031e 	bne	r2,r3,1120abf8 <wcrtomb+0x74>
1120abec:	90000015 	stw	zero,0(r18)
1120abf0:	00c02284 	movi	r3,138
1120abf4:	88c00015 	stw	r3,0(r17)
1120abf8:	dfc00917 	ldw	ra,36(sp)
1120abfc:	dd000817 	ldw	r20,32(sp)
1120ac00:	dcc00717 	ldw	r19,28(sp)
1120ac04:	dc800617 	ldw	r18,24(sp)
1120ac08:	dc400517 	ldw	r17,20(sp)
1120ac0c:	dc000417 	ldw	r16,16(sp)
1120ac10:	dec00a04 	addi	sp,sp,40
1120ac14:	f800283a 	ret
1120ac18:	00844874 	movhi	r2,4385
1120ac1c:	1088b504 	addi	r2,r2,8916
1120ac20:	14000017 	ldw	r16,0(r2)
1120ac24:	12064d40 	call	112064d4 <__locale_charset>
1120ac28:	100f883a 	mov	r7,r2
1120ac2c:	dc800015 	stw	r18,0(sp)
1120ac30:	000d883a 	mov	r6,zero
1120ac34:	d9400104 	addi	r5,sp,4
1120ac38:	8809883a 	mov	r4,r17
1120ac3c:	803ee83a 	callr	r16
1120ac40:	003fe806 	br	1120abe4 <__alt_data_end+0xffe8abe4>

1120ac44 <__ascii_wctomb>:
1120ac44:	28000526 	beq	r5,zero,1120ac5c <__ascii_wctomb+0x18>
1120ac48:	00803fc4 	movi	r2,255
1120ac4c:	11800536 	bltu	r2,r6,1120ac64 <__ascii_wctomb+0x20>
1120ac50:	29800005 	stb	r6,0(r5)
1120ac54:	00800044 	movi	r2,1
1120ac58:	f800283a 	ret
1120ac5c:	0005883a 	mov	r2,zero
1120ac60:	f800283a 	ret
1120ac64:	00802284 	movi	r2,138
1120ac68:	20800015 	stw	r2,0(r4)
1120ac6c:	00bfffc4 	movi	r2,-1
1120ac70:	f800283a 	ret

1120ac74 <_wctomb_r>:
1120ac74:	00844874 	movhi	r2,4385
1120ac78:	defff904 	addi	sp,sp,-28
1120ac7c:	1088b504 	addi	r2,r2,8916
1120ac80:	dfc00615 	stw	ra,24(sp)
1120ac84:	dc400515 	stw	r17,20(sp)
1120ac88:	dc000415 	stw	r16,16(sp)
1120ac8c:	3823883a 	mov	r17,r7
1120ac90:	14000017 	ldw	r16,0(r2)
1120ac94:	d9000115 	stw	r4,4(sp)
1120ac98:	d9400215 	stw	r5,8(sp)
1120ac9c:	d9800315 	stw	r6,12(sp)
1120aca0:	12064d40 	call	112064d4 <__locale_charset>
1120aca4:	d9800317 	ldw	r6,12(sp)
1120aca8:	d9400217 	ldw	r5,8(sp)
1120acac:	d9000117 	ldw	r4,4(sp)
1120acb0:	100f883a 	mov	r7,r2
1120acb4:	dc400015 	stw	r17,0(sp)
1120acb8:	803ee83a 	callr	r16
1120acbc:	dfc00617 	ldw	ra,24(sp)
1120acc0:	dc400517 	ldw	r17,20(sp)
1120acc4:	dc000417 	ldw	r16,16(sp)
1120acc8:	dec00704 	addi	sp,sp,28
1120accc:	f800283a 	ret

1120acd0 <__udivdi3>:
1120acd0:	defff504 	addi	sp,sp,-44
1120acd4:	dcc00415 	stw	r19,16(sp)
1120acd8:	dc000115 	stw	r16,4(sp)
1120acdc:	dfc00a15 	stw	ra,40(sp)
1120ace0:	df000915 	stw	fp,36(sp)
1120ace4:	ddc00815 	stw	r23,32(sp)
1120ace8:	dd800715 	stw	r22,28(sp)
1120acec:	dd400615 	stw	r21,24(sp)
1120acf0:	dd000515 	stw	r20,20(sp)
1120acf4:	dc800315 	stw	r18,12(sp)
1120acf8:	dc400215 	stw	r17,8(sp)
1120acfc:	2027883a 	mov	r19,r4
1120ad00:	2821883a 	mov	r16,r5
1120ad04:	3800411e 	bne	r7,zero,1120ae0c <__udivdi3+0x13c>
1120ad08:	3023883a 	mov	r17,r6
1120ad0c:	2025883a 	mov	r18,r4
1120ad10:	2980522e 	bgeu	r5,r6,1120ae5c <__udivdi3+0x18c>
1120ad14:	00bfffd4 	movui	r2,65535
1120ad18:	282d883a 	mov	r22,r5
1120ad1c:	1180a836 	bltu	r2,r6,1120afc0 <__udivdi3+0x2f0>
1120ad20:	00803fc4 	movi	r2,255
1120ad24:	1185803a 	cmpltu	r2,r2,r6
1120ad28:	100490fa 	slli	r2,r2,3
1120ad2c:	3086d83a 	srl	r3,r6,r2
1120ad30:	01044874 	movhi	r4,4385
1120ad34:	2101b604 	addi	r4,r4,1752
1120ad38:	20c7883a 	add	r3,r4,r3
1120ad3c:	18c00003 	ldbu	r3,0(r3)
1120ad40:	1885883a 	add	r2,r3,r2
1120ad44:	00c00804 	movi	r3,32
1120ad48:	1887c83a 	sub	r3,r3,r2
1120ad4c:	18000526 	beq	r3,zero,1120ad64 <__udivdi3+0x94>
1120ad50:	80e0983a 	sll	r16,r16,r3
1120ad54:	9884d83a 	srl	r2,r19,r2
1120ad58:	30e2983a 	sll	r17,r6,r3
1120ad5c:	98e4983a 	sll	r18,r19,r3
1120ad60:	142cb03a 	or	r22,r2,r16
1120ad64:	882ad43a 	srli	r21,r17,16
1120ad68:	b009883a 	mov	r4,r22
1120ad6c:	8d3fffcc 	andi	r20,r17,65535
1120ad70:	a80b883a 	mov	r5,r21
1120ad74:	120149c0 	call	1120149c <__umodsi3>
1120ad78:	b009883a 	mov	r4,r22
1120ad7c:	a80b883a 	mov	r5,r21
1120ad80:	1027883a 	mov	r19,r2
1120ad84:	12014380 	call	11201438 <__udivsi3>
1120ad88:	102d883a 	mov	r22,r2
1120ad8c:	9826943a 	slli	r19,r19,16
1120ad90:	9004d43a 	srli	r2,r18,16
1120ad94:	a5a1383a 	mul	r16,r20,r22
1120ad98:	14c4b03a 	or	r2,r2,r19
1120ad9c:	1400052e 	bgeu	r2,r16,1120adb4 <__udivdi3+0xe4>
1120ada0:	1445883a 	add	r2,r2,r17
1120ada4:	b0ffffc4 	addi	r3,r22,-1
1120ada8:	14400136 	bltu	r2,r17,1120adb0 <__udivdi3+0xe0>
1120adac:	14012336 	bltu	r2,r16,1120b23c <__udivdi3+0x56c>
1120adb0:	182d883a 	mov	r22,r3
1120adb4:	1421c83a 	sub	r16,r2,r16
1120adb8:	a80b883a 	mov	r5,r21
1120adbc:	8009883a 	mov	r4,r16
1120adc0:	120149c0 	call	1120149c <__umodsi3>
1120adc4:	1027883a 	mov	r19,r2
1120adc8:	a80b883a 	mov	r5,r21
1120adcc:	8009883a 	mov	r4,r16
1120add0:	12014380 	call	11201438 <__udivsi3>
1120add4:	9826943a 	slli	r19,r19,16
1120add8:	a0a9383a 	mul	r20,r20,r2
1120addc:	94bfffcc 	andi	r18,r18,65535
1120ade0:	94e4b03a 	or	r18,r18,r19
1120ade4:	9500052e 	bgeu	r18,r20,1120adfc <__udivdi3+0x12c>
1120ade8:	8ca5883a 	add	r18,r17,r18
1120adec:	10ffffc4 	addi	r3,r2,-1
1120adf0:	9440f136 	bltu	r18,r17,1120b1b8 <__udivdi3+0x4e8>
1120adf4:	9500f02e 	bgeu	r18,r20,1120b1b8 <__udivdi3+0x4e8>
1120adf8:	10bfff84 	addi	r2,r2,-2
1120adfc:	b00c943a 	slli	r6,r22,16
1120ae00:	0007883a 	mov	r3,zero
1120ae04:	3084b03a 	or	r2,r6,r2
1120ae08:	00005906 	br	1120af70 <__udivdi3+0x2a0>
1120ae0c:	29c05636 	bltu	r5,r7,1120af68 <__udivdi3+0x298>
1120ae10:	00bfffd4 	movui	r2,65535
1120ae14:	11c0622e 	bgeu	r2,r7,1120afa0 <__udivdi3+0x2d0>
1120ae18:	00804034 	movhi	r2,256
1120ae1c:	10bfffc4 	addi	r2,r2,-1
1120ae20:	11c0ee36 	bltu	r2,r7,1120b1dc <__udivdi3+0x50c>
1120ae24:	00800404 	movi	r2,16
1120ae28:	3886d83a 	srl	r3,r7,r2
1120ae2c:	01044874 	movhi	r4,4385
1120ae30:	2101b604 	addi	r4,r4,1752
1120ae34:	20c7883a 	add	r3,r4,r3
1120ae38:	18c00003 	ldbu	r3,0(r3)
1120ae3c:	05400804 	movi	r21,32
1120ae40:	1885883a 	add	r2,r3,r2
1120ae44:	a8abc83a 	sub	r21,r21,r2
1120ae48:	a800621e 	bne	r21,zero,1120afd4 <__udivdi3+0x304>
1120ae4c:	3c00e936 	bltu	r7,r16,1120b1f4 <__udivdi3+0x524>
1120ae50:	9985403a 	cmpgeu	r2,r19,r6
1120ae54:	0007883a 	mov	r3,zero
1120ae58:	00004506 	br	1120af70 <__udivdi3+0x2a0>
1120ae5c:	3000041e 	bne	r6,zero,1120ae70 <__udivdi3+0x1a0>
1120ae60:	000b883a 	mov	r5,zero
1120ae64:	01000044 	movi	r4,1
1120ae68:	12014380 	call	11201438 <__udivsi3>
1120ae6c:	1023883a 	mov	r17,r2
1120ae70:	00bfffd4 	movui	r2,65535
1120ae74:	14404e2e 	bgeu	r2,r17,1120afb0 <__udivdi3+0x2e0>
1120ae78:	00804034 	movhi	r2,256
1120ae7c:	10bfffc4 	addi	r2,r2,-1
1120ae80:	1440d836 	bltu	r2,r17,1120b1e4 <__udivdi3+0x514>
1120ae84:	00800404 	movi	r2,16
1120ae88:	8886d83a 	srl	r3,r17,r2
1120ae8c:	01044874 	movhi	r4,4385
1120ae90:	2101b604 	addi	r4,r4,1752
1120ae94:	20c7883a 	add	r3,r4,r3
1120ae98:	18c00003 	ldbu	r3,0(r3)
1120ae9c:	1885883a 	add	r2,r3,r2
1120aea0:	00c00804 	movi	r3,32
1120aea4:	1887c83a 	sub	r3,r3,r2
1120aea8:	18008f1e 	bne	r3,zero,1120b0e8 <__udivdi3+0x418>
1120aeac:	882ad43a 	srli	r21,r17,16
1120aeb0:	8461c83a 	sub	r16,r16,r17
1120aeb4:	8d3fffcc 	andi	r20,r17,65535
1120aeb8:	00c00044 	movi	r3,1
1120aebc:	8009883a 	mov	r4,r16
1120aec0:	a80b883a 	mov	r5,r21
1120aec4:	d8c00015 	stw	r3,0(sp)
1120aec8:	120149c0 	call	1120149c <__umodsi3>
1120aecc:	8009883a 	mov	r4,r16
1120aed0:	a80b883a 	mov	r5,r21
1120aed4:	1027883a 	mov	r19,r2
1120aed8:	12014380 	call	11201438 <__udivsi3>
1120aedc:	9826943a 	slli	r19,r19,16
1120aee0:	9008d43a 	srli	r4,r18,16
1120aee4:	1521383a 	mul	r16,r2,r20
1120aee8:	102d883a 	mov	r22,r2
1120aeec:	24c8b03a 	or	r4,r4,r19
1120aef0:	d8c00017 	ldw	r3,0(sp)
1120aef4:	2400052e 	bgeu	r4,r16,1120af0c <__udivdi3+0x23c>
1120aef8:	2449883a 	add	r4,r4,r17
1120aefc:	b0bfffc4 	addi	r2,r22,-1
1120af00:	24400136 	bltu	r4,r17,1120af08 <__udivdi3+0x238>
1120af04:	2400ca36 	bltu	r4,r16,1120b230 <__udivdi3+0x560>
1120af08:	102d883a 	mov	r22,r2
1120af0c:	2421c83a 	sub	r16,r4,r16
1120af10:	a80b883a 	mov	r5,r21
1120af14:	8009883a 	mov	r4,r16
1120af18:	d8c00015 	stw	r3,0(sp)
1120af1c:	120149c0 	call	1120149c <__umodsi3>
1120af20:	1027883a 	mov	r19,r2
1120af24:	a80b883a 	mov	r5,r21
1120af28:	8009883a 	mov	r4,r16
1120af2c:	12014380 	call	11201438 <__udivsi3>
1120af30:	9826943a 	slli	r19,r19,16
1120af34:	1529383a 	mul	r20,r2,r20
1120af38:	94bfffcc 	andi	r18,r18,65535
1120af3c:	94e4b03a 	or	r18,r18,r19
1120af40:	d8c00017 	ldw	r3,0(sp)
1120af44:	9500052e 	bgeu	r18,r20,1120af5c <__udivdi3+0x28c>
1120af48:	8ca5883a 	add	r18,r17,r18
1120af4c:	113fffc4 	addi	r4,r2,-1
1120af50:	94409736 	bltu	r18,r17,1120b1b0 <__udivdi3+0x4e0>
1120af54:	9500962e 	bgeu	r18,r20,1120b1b0 <__udivdi3+0x4e0>
1120af58:	10bfff84 	addi	r2,r2,-2
1120af5c:	b00c943a 	slli	r6,r22,16
1120af60:	3084b03a 	or	r2,r6,r2
1120af64:	00000206 	br	1120af70 <__udivdi3+0x2a0>
1120af68:	0007883a 	mov	r3,zero
1120af6c:	0005883a 	mov	r2,zero
1120af70:	dfc00a17 	ldw	ra,40(sp)
1120af74:	df000917 	ldw	fp,36(sp)
1120af78:	ddc00817 	ldw	r23,32(sp)
1120af7c:	dd800717 	ldw	r22,28(sp)
1120af80:	dd400617 	ldw	r21,24(sp)
1120af84:	dd000517 	ldw	r20,20(sp)
1120af88:	dcc00417 	ldw	r19,16(sp)
1120af8c:	dc800317 	ldw	r18,12(sp)
1120af90:	dc400217 	ldw	r17,8(sp)
1120af94:	dc000117 	ldw	r16,4(sp)
1120af98:	dec00b04 	addi	sp,sp,44
1120af9c:	f800283a 	ret
1120afa0:	00803fc4 	movi	r2,255
1120afa4:	11c5803a 	cmpltu	r2,r2,r7
1120afa8:	100490fa 	slli	r2,r2,3
1120afac:	003f9e06 	br	1120ae28 <__alt_data_end+0xffe8ae28>
1120afb0:	00803fc4 	movi	r2,255
1120afb4:	1445803a 	cmpltu	r2,r2,r17
1120afb8:	100490fa 	slli	r2,r2,3
1120afbc:	003fb206 	br	1120ae88 <__alt_data_end+0xffe8ae88>
1120afc0:	00804034 	movhi	r2,256
1120afc4:	10bfffc4 	addi	r2,r2,-1
1120afc8:	11808836 	bltu	r2,r6,1120b1ec <__udivdi3+0x51c>
1120afcc:	00800404 	movi	r2,16
1120afd0:	003f5606 	br	1120ad2c <__alt_data_end+0xffe8ad2c>
1120afd4:	30aed83a 	srl	r23,r6,r2
1120afd8:	3d4e983a 	sll	r7,r7,r21
1120afdc:	80acd83a 	srl	r22,r16,r2
1120afe0:	9884d83a 	srl	r2,r19,r2
1120afe4:	3deeb03a 	or	r23,r7,r23
1120afe8:	b824d43a 	srli	r18,r23,16
1120afec:	8560983a 	sll	r16,r16,r21
1120aff0:	b009883a 	mov	r4,r22
1120aff4:	900b883a 	mov	r5,r18
1120aff8:	3568983a 	sll	r20,r6,r21
1120affc:	1420b03a 	or	r16,r2,r16
1120b000:	120149c0 	call	1120149c <__umodsi3>
1120b004:	b009883a 	mov	r4,r22
1120b008:	900b883a 	mov	r5,r18
1120b00c:	1023883a 	mov	r17,r2
1120b010:	12014380 	call	11201438 <__udivsi3>
1120b014:	8808943a 	slli	r4,r17,16
1120b018:	bf3fffcc 	andi	fp,r23,65535
1120b01c:	8006d43a 	srli	r3,r16,16
1120b020:	e0a3383a 	mul	r17,fp,r2
1120b024:	100d883a 	mov	r6,r2
1120b028:	1906b03a 	or	r3,r3,r4
1120b02c:	1c40042e 	bgeu	r3,r17,1120b040 <__udivdi3+0x370>
1120b030:	1dc7883a 	add	r3,r3,r23
1120b034:	10bfffc4 	addi	r2,r2,-1
1120b038:	1dc0752e 	bgeu	r3,r23,1120b210 <__udivdi3+0x540>
1120b03c:	100d883a 	mov	r6,r2
1120b040:	1c63c83a 	sub	r17,r3,r17
1120b044:	900b883a 	mov	r5,r18
1120b048:	8809883a 	mov	r4,r17
1120b04c:	d9800015 	stw	r6,0(sp)
1120b050:	120149c0 	call	1120149c <__umodsi3>
1120b054:	102d883a 	mov	r22,r2
1120b058:	8809883a 	mov	r4,r17
1120b05c:	900b883a 	mov	r5,r18
1120b060:	12014380 	call	11201438 <__udivsi3>
1120b064:	b02c943a 	slli	r22,r22,16
1120b068:	e089383a 	mul	r4,fp,r2
1120b06c:	843fffcc 	andi	r16,r16,65535
1120b070:	85a0b03a 	or	r16,r16,r22
1120b074:	d9800017 	ldw	r6,0(sp)
1120b078:	8100042e 	bgeu	r16,r4,1120b08c <__udivdi3+0x3bc>
1120b07c:	85e1883a 	add	r16,r16,r23
1120b080:	10ffffc4 	addi	r3,r2,-1
1120b084:	85c05e2e 	bgeu	r16,r23,1120b200 <__udivdi3+0x530>
1120b088:	1805883a 	mov	r2,r3
1120b08c:	300c943a 	slli	r6,r6,16
1120b090:	a17fffcc 	andi	r5,r20,65535
1120b094:	a028d43a 	srli	r20,r20,16
1120b098:	3084b03a 	or	r2,r6,r2
1120b09c:	10ffffcc 	andi	r3,r2,65535
1120b0a0:	100cd43a 	srli	r6,r2,16
1120b0a4:	194f383a 	mul	r7,r3,r5
1120b0a8:	1d07383a 	mul	r3,r3,r20
1120b0ac:	314b383a 	mul	r5,r6,r5
1120b0b0:	3810d43a 	srli	r8,r7,16
1120b0b4:	8121c83a 	sub	r16,r16,r4
1120b0b8:	1947883a 	add	r3,r3,r5
1120b0bc:	40c7883a 	add	r3,r8,r3
1120b0c0:	350d383a 	mul	r6,r6,r20
1120b0c4:	1940022e 	bgeu	r3,r5,1120b0d0 <__udivdi3+0x400>
1120b0c8:	01000074 	movhi	r4,1
1120b0cc:	310d883a 	add	r6,r6,r4
1120b0d0:	1828d43a 	srli	r20,r3,16
1120b0d4:	a18d883a 	add	r6,r20,r6
1120b0d8:	81803e36 	bltu	r16,r6,1120b1d4 <__udivdi3+0x504>
1120b0dc:	81803826 	beq	r16,r6,1120b1c0 <__udivdi3+0x4f0>
1120b0e0:	0007883a 	mov	r3,zero
1120b0e4:	003fa206 	br	1120af70 <__alt_data_end+0xffe8af70>
1120b0e8:	88e2983a 	sll	r17,r17,r3
1120b0ec:	80a8d83a 	srl	r20,r16,r2
1120b0f0:	80e0983a 	sll	r16,r16,r3
1120b0f4:	882ad43a 	srli	r21,r17,16
1120b0f8:	9884d83a 	srl	r2,r19,r2
1120b0fc:	a009883a 	mov	r4,r20
1120b100:	a80b883a 	mov	r5,r21
1120b104:	142eb03a 	or	r23,r2,r16
1120b108:	98e4983a 	sll	r18,r19,r3
1120b10c:	120149c0 	call	1120149c <__umodsi3>
1120b110:	a009883a 	mov	r4,r20
1120b114:	a80b883a 	mov	r5,r21
1120b118:	1021883a 	mov	r16,r2
1120b11c:	12014380 	call	11201438 <__udivsi3>
1120b120:	1039883a 	mov	fp,r2
1120b124:	8d3fffcc 	andi	r20,r17,65535
1120b128:	8020943a 	slli	r16,r16,16
1120b12c:	b804d43a 	srli	r2,r23,16
1120b130:	a72d383a 	mul	r22,r20,fp
1120b134:	1404b03a 	or	r2,r2,r16
1120b138:	1580062e 	bgeu	r2,r22,1120b154 <__udivdi3+0x484>
1120b13c:	1445883a 	add	r2,r2,r17
1120b140:	e0ffffc4 	addi	r3,fp,-1
1120b144:	14403836 	bltu	r2,r17,1120b228 <__udivdi3+0x558>
1120b148:	1580372e 	bgeu	r2,r22,1120b228 <__udivdi3+0x558>
1120b14c:	e73fff84 	addi	fp,fp,-2
1120b150:	1445883a 	add	r2,r2,r17
1120b154:	15adc83a 	sub	r22,r2,r22
1120b158:	a80b883a 	mov	r5,r21
1120b15c:	b009883a 	mov	r4,r22
1120b160:	120149c0 	call	1120149c <__umodsi3>
1120b164:	1027883a 	mov	r19,r2
1120b168:	b009883a 	mov	r4,r22
1120b16c:	a80b883a 	mov	r5,r21
1120b170:	12014380 	call	11201438 <__udivsi3>
1120b174:	9826943a 	slli	r19,r19,16
1120b178:	a0a1383a 	mul	r16,r20,r2
1120b17c:	b93fffcc 	andi	r4,r23,65535
1120b180:	24c8b03a 	or	r4,r4,r19
1120b184:	2400062e 	bgeu	r4,r16,1120b1a0 <__udivdi3+0x4d0>
1120b188:	2449883a 	add	r4,r4,r17
1120b18c:	10ffffc4 	addi	r3,r2,-1
1120b190:	24402336 	bltu	r4,r17,1120b220 <__udivdi3+0x550>
1120b194:	2400222e 	bgeu	r4,r16,1120b220 <__udivdi3+0x550>
1120b198:	10bfff84 	addi	r2,r2,-2
1120b19c:	2449883a 	add	r4,r4,r17
1120b1a0:	e038943a 	slli	fp,fp,16
1120b1a4:	2421c83a 	sub	r16,r4,r16
1120b1a8:	e086b03a 	or	r3,fp,r2
1120b1ac:	003f4306 	br	1120aebc <__alt_data_end+0xffe8aebc>
1120b1b0:	2005883a 	mov	r2,r4
1120b1b4:	003f6906 	br	1120af5c <__alt_data_end+0xffe8af5c>
1120b1b8:	1805883a 	mov	r2,r3
1120b1bc:	003f0f06 	br	1120adfc <__alt_data_end+0xffe8adfc>
1120b1c0:	1806943a 	slli	r3,r3,16
1120b1c4:	9d66983a 	sll	r19,r19,r21
1120b1c8:	39ffffcc 	andi	r7,r7,65535
1120b1cc:	19c7883a 	add	r3,r3,r7
1120b1d0:	98ffc32e 	bgeu	r19,r3,1120b0e0 <__alt_data_end+0xffe8b0e0>
1120b1d4:	10bfffc4 	addi	r2,r2,-1
1120b1d8:	003fc106 	br	1120b0e0 <__alt_data_end+0xffe8b0e0>
1120b1dc:	00800604 	movi	r2,24
1120b1e0:	003f1106 	br	1120ae28 <__alt_data_end+0xffe8ae28>
1120b1e4:	00800604 	movi	r2,24
1120b1e8:	003f2706 	br	1120ae88 <__alt_data_end+0xffe8ae88>
1120b1ec:	00800604 	movi	r2,24
1120b1f0:	003ece06 	br	1120ad2c <__alt_data_end+0xffe8ad2c>
1120b1f4:	0007883a 	mov	r3,zero
1120b1f8:	00800044 	movi	r2,1
1120b1fc:	003f5c06 	br	1120af70 <__alt_data_end+0xffe8af70>
1120b200:	813fa12e 	bgeu	r16,r4,1120b088 <__alt_data_end+0xffe8b088>
1120b204:	10bfff84 	addi	r2,r2,-2
1120b208:	85e1883a 	add	r16,r16,r23
1120b20c:	003f9f06 	br	1120b08c <__alt_data_end+0xffe8b08c>
1120b210:	1c7f8a2e 	bgeu	r3,r17,1120b03c <__alt_data_end+0xffe8b03c>
1120b214:	31bfff84 	addi	r6,r6,-2
1120b218:	1dc7883a 	add	r3,r3,r23
1120b21c:	003f8806 	br	1120b040 <__alt_data_end+0xffe8b040>
1120b220:	1805883a 	mov	r2,r3
1120b224:	003fde06 	br	1120b1a0 <__alt_data_end+0xffe8b1a0>
1120b228:	1839883a 	mov	fp,r3
1120b22c:	003fc906 	br	1120b154 <__alt_data_end+0xffe8b154>
1120b230:	b5bfff84 	addi	r22,r22,-2
1120b234:	2449883a 	add	r4,r4,r17
1120b238:	003f3406 	br	1120af0c <__alt_data_end+0xffe8af0c>
1120b23c:	b5bfff84 	addi	r22,r22,-2
1120b240:	1445883a 	add	r2,r2,r17
1120b244:	003edb06 	br	1120adb4 <__alt_data_end+0xffe8adb4>

1120b248 <__umoddi3>:
1120b248:	defff404 	addi	sp,sp,-48
1120b24c:	df000a15 	stw	fp,40(sp)
1120b250:	dc400315 	stw	r17,12(sp)
1120b254:	dc000215 	stw	r16,8(sp)
1120b258:	dfc00b15 	stw	ra,44(sp)
1120b25c:	ddc00915 	stw	r23,36(sp)
1120b260:	dd800815 	stw	r22,32(sp)
1120b264:	dd400715 	stw	r21,28(sp)
1120b268:	dd000615 	stw	r20,24(sp)
1120b26c:	dcc00515 	stw	r19,20(sp)
1120b270:	dc800415 	stw	r18,16(sp)
1120b274:	2021883a 	mov	r16,r4
1120b278:	2823883a 	mov	r17,r5
1120b27c:	2839883a 	mov	fp,r5
1120b280:	38003c1e 	bne	r7,zero,1120b374 <__umoddi3+0x12c>
1120b284:	3027883a 	mov	r19,r6
1120b288:	2029883a 	mov	r20,r4
1120b28c:	2980512e 	bgeu	r5,r6,1120b3d4 <__umoddi3+0x18c>
1120b290:	00bfffd4 	movui	r2,65535
1120b294:	11809a36 	bltu	r2,r6,1120b500 <__umoddi3+0x2b8>
1120b298:	01003fc4 	movi	r4,255
1120b29c:	2189803a 	cmpltu	r4,r4,r6
1120b2a0:	200890fa 	slli	r4,r4,3
1120b2a4:	3104d83a 	srl	r2,r6,r4
1120b2a8:	00c44874 	movhi	r3,4385
1120b2ac:	18c1b604 	addi	r3,r3,1752
1120b2b0:	1885883a 	add	r2,r3,r2
1120b2b4:	10c00003 	ldbu	r3,0(r2)
1120b2b8:	00800804 	movi	r2,32
1120b2bc:	1909883a 	add	r4,r3,r4
1120b2c0:	1125c83a 	sub	r18,r2,r4
1120b2c4:	90000526 	beq	r18,zero,1120b2dc <__umoddi3+0x94>
1120b2c8:	8ca2983a 	sll	r17,r17,r18
1120b2cc:	8108d83a 	srl	r4,r16,r4
1120b2d0:	34a6983a 	sll	r19,r6,r18
1120b2d4:	84a8983a 	sll	r20,r16,r18
1120b2d8:	2478b03a 	or	fp,r4,r17
1120b2dc:	982ed43a 	srli	r23,r19,16
1120b2e0:	e009883a 	mov	r4,fp
1120b2e4:	9dbfffcc 	andi	r22,r19,65535
1120b2e8:	b80b883a 	mov	r5,r23
1120b2ec:	120149c0 	call	1120149c <__umodsi3>
1120b2f0:	e009883a 	mov	r4,fp
1120b2f4:	b80b883a 	mov	r5,r23
1120b2f8:	102b883a 	mov	r21,r2
1120b2fc:	12014380 	call	11201438 <__udivsi3>
1120b300:	a806943a 	slli	r3,r21,16
1120b304:	a008d43a 	srli	r4,r20,16
1120b308:	b085383a 	mul	r2,r22,r2
1120b30c:	20c8b03a 	or	r4,r4,r3
1120b310:	2080032e 	bgeu	r4,r2,1120b320 <__umoddi3+0xd8>
1120b314:	24c9883a 	add	r4,r4,r19
1120b318:	24c00136 	bltu	r4,r19,1120b320 <__umoddi3+0xd8>
1120b31c:	20811036 	bltu	r4,r2,1120b760 <__umoddi3+0x518>
1120b320:	20abc83a 	sub	r21,r4,r2
1120b324:	b80b883a 	mov	r5,r23
1120b328:	a809883a 	mov	r4,r21
1120b32c:	120149c0 	call	1120149c <__umodsi3>
1120b330:	1023883a 	mov	r17,r2
1120b334:	b80b883a 	mov	r5,r23
1120b338:	a809883a 	mov	r4,r21
1120b33c:	12014380 	call	11201438 <__udivsi3>
1120b340:	8822943a 	slli	r17,r17,16
1120b344:	b085383a 	mul	r2,r22,r2
1120b348:	a0ffffcc 	andi	r3,r20,65535
1120b34c:	1c46b03a 	or	r3,r3,r17
1120b350:	1880042e 	bgeu	r3,r2,1120b364 <__umoddi3+0x11c>
1120b354:	1cc7883a 	add	r3,r3,r19
1120b358:	1cc00236 	bltu	r3,r19,1120b364 <__umoddi3+0x11c>
1120b35c:	1880012e 	bgeu	r3,r2,1120b364 <__umoddi3+0x11c>
1120b360:	1cc7883a 	add	r3,r3,r19
1120b364:	1885c83a 	sub	r2,r3,r2
1120b368:	1484d83a 	srl	r2,r2,r18
1120b36c:	0007883a 	mov	r3,zero
1120b370:	00004f06 	br	1120b4b0 <__umoddi3+0x268>
1120b374:	29c04c36 	bltu	r5,r7,1120b4a8 <__umoddi3+0x260>
1120b378:	00bfffd4 	movui	r2,65535
1120b37c:	11c0582e 	bgeu	r2,r7,1120b4e0 <__umoddi3+0x298>
1120b380:	00804034 	movhi	r2,256
1120b384:	10bfffc4 	addi	r2,r2,-1
1120b388:	11c0e736 	bltu	r2,r7,1120b728 <__umoddi3+0x4e0>
1120b38c:	01000404 	movi	r4,16
1120b390:	3904d83a 	srl	r2,r7,r4
1120b394:	00c44874 	movhi	r3,4385
1120b398:	18c1b604 	addi	r3,r3,1752
1120b39c:	1885883a 	add	r2,r3,r2
1120b3a0:	14c00003 	ldbu	r19,0(r2)
1120b3a4:	00c00804 	movi	r3,32
1120b3a8:	9927883a 	add	r19,r19,r4
1120b3ac:	1ce9c83a 	sub	r20,r3,r19
1120b3b0:	a000581e 	bne	r20,zero,1120b514 <__umoddi3+0x2cc>
1120b3b4:	3c400136 	bltu	r7,r17,1120b3bc <__umoddi3+0x174>
1120b3b8:	8180eb36 	bltu	r16,r6,1120b768 <__umoddi3+0x520>
1120b3bc:	8185c83a 	sub	r2,r16,r6
1120b3c0:	89e3c83a 	sub	r17,r17,r7
1120b3c4:	8089803a 	cmpltu	r4,r16,r2
1120b3c8:	8939c83a 	sub	fp,r17,r4
1120b3cc:	e007883a 	mov	r3,fp
1120b3d0:	00003706 	br	1120b4b0 <__umoddi3+0x268>
1120b3d4:	3000041e 	bne	r6,zero,1120b3e8 <__umoddi3+0x1a0>
1120b3d8:	000b883a 	mov	r5,zero
1120b3dc:	01000044 	movi	r4,1
1120b3e0:	12014380 	call	11201438 <__udivsi3>
1120b3e4:	1027883a 	mov	r19,r2
1120b3e8:	00bfffd4 	movui	r2,65535
1120b3ec:	14c0402e 	bgeu	r2,r19,1120b4f0 <__umoddi3+0x2a8>
1120b3f0:	00804034 	movhi	r2,256
1120b3f4:	10bfffc4 	addi	r2,r2,-1
1120b3f8:	14c0cd36 	bltu	r2,r19,1120b730 <__umoddi3+0x4e8>
1120b3fc:	00800404 	movi	r2,16
1120b400:	9886d83a 	srl	r3,r19,r2
1120b404:	01044874 	movhi	r4,4385
1120b408:	2101b604 	addi	r4,r4,1752
1120b40c:	20c7883a 	add	r3,r4,r3
1120b410:	18c00003 	ldbu	r3,0(r3)
1120b414:	1887883a 	add	r3,r3,r2
1120b418:	00800804 	movi	r2,32
1120b41c:	10e5c83a 	sub	r18,r2,r3
1120b420:	9000901e 	bne	r18,zero,1120b664 <__umoddi3+0x41c>
1120b424:	982cd43a 	srli	r22,r19,16
1120b428:	8ce3c83a 	sub	r17,r17,r19
1120b42c:	9d7fffcc 	andi	r21,r19,65535
1120b430:	b00b883a 	mov	r5,r22
1120b434:	8809883a 	mov	r4,r17
1120b438:	120149c0 	call	1120149c <__umodsi3>
1120b43c:	8809883a 	mov	r4,r17
1120b440:	b00b883a 	mov	r5,r22
1120b444:	1021883a 	mov	r16,r2
1120b448:	12014380 	call	11201438 <__udivsi3>
1120b44c:	8006943a 	slli	r3,r16,16
1120b450:	a008d43a 	srli	r4,r20,16
1120b454:	1545383a 	mul	r2,r2,r21
1120b458:	20c8b03a 	or	r4,r4,r3
1120b45c:	2080042e 	bgeu	r4,r2,1120b470 <__umoddi3+0x228>
1120b460:	24c9883a 	add	r4,r4,r19
1120b464:	24c00236 	bltu	r4,r19,1120b470 <__umoddi3+0x228>
1120b468:	2080012e 	bgeu	r4,r2,1120b470 <__umoddi3+0x228>
1120b46c:	24c9883a 	add	r4,r4,r19
1120b470:	20a1c83a 	sub	r16,r4,r2
1120b474:	b00b883a 	mov	r5,r22
1120b478:	8009883a 	mov	r4,r16
1120b47c:	120149c0 	call	1120149c <__umodsi3>
1120b480:	1023883a 	mov	r17,r2
1120b484:	b00b883a 	mov	r5,r22
1120b488:	8009883a 	mov	r4,r16
1120b48c:	12014380 	call	11201438 <__udivsi3>
1120b490:	8822943a 	slli	r17,r17,16
1120b494:	1545383a 	mul	r2,r2,r21
1120b498:	a53fffcc 	andi	r20,r20,65535
1120b49c:	a446b03a 	or	r3,r20,r17
1120b4a0:	18bfb02e 	bgeu	r3,r2,1120b364 <__alt_data_end+0xffe8b364>
1120b4a4:	003fab06 	br	1120b354 <__alt_data_end+0xffe8b354>
1120b4a8:	2005883a 	mov	r2,r4
1120b4ac:	2807883a 	mov	r3,r5
1120b4b0:	dfc00b17 	ldw	ra,44(sp)
1120b4b4:	df000a17 	ldw	fp,40(sp)
1120b4b8:	ddc00917 	ldw	r23,36(sp)
1120b4bc:	dd800817 	ldw	r22,32(sp)
1120b4c0:	dd400717 	ldw	r21,28(sp)
1120b4c4:	dd000617 	ldw	r20,24(sp)
1120b4c8:	dcc00517 	ldw	r19,20(sp)
1120b4cc:	dc800417 	ldw	r18,16(sp)
1120b4d0:	dc400317 	ldw	r17,12(sp)
1120b4d4:	dc000217 	ldw	r16,8(sp)
1120b4d8:	dec00c04 	addi	sp,sp,48
1120b4dc:	f800283a 	ret
1120b4e0:	04c03fc4 	movi	r19,255
1120b4e4:	99c9803a 	cmpltu	r4,r19,r7
1120b4e8:	200890fa 	slli	r4,r4,3
1120b4ec:	003fa806 	br	1120b390 <__alt_data_end+0xffe8b390>
1120b4f0:	00803fc4 	movi	r2,255
1120b4f4:	14c5803a 	cmpltu	r2,r2,r19
1120b4f8:	100490fa 	slli	r2,r2,3
1120b4fc:	003fc006 	br	1120b400 <__alt_data_end+0xffe8b400>
1120b500:	00804034 	movhi	r2,256
1120b504:	10bfffc4 	addi	r2,r2,-1
1120b508:	11808b36 	bltu	r2,r6,1120b738 <__umoddi3+0x4f0>
1120b50c:	01000404 	movi	r4,16
1120b510:	003f6406 	br	1120b2a4 <__alt_data_end+0xffe8b2a4>
1120b514:	34c4d83a 	srl	r2,r6,r19
1120b518:	3d0e983a 	sll	r7,r7,r20
1120b51c:	8cf8d83a 	srl	fp,r17,r19
1120b520:	8d10983a 	sll	r8,r17,r20
1120b524:	38aab03a 	or	r21,r7,r2
1120b528:	a82cd43a 	srli	r22,r21,16
1120b52c:	84e2d83a 	srl	r17,r16,r19
1120b530:	e009883a 	mov	r4,fp
1120b534:	b00b883a 	mov	r5,r22
1120b538:	8a22b03a 	or	r17,r17,r8
1120b53c:	3524983a 	sll	r18,r6,r20
1120b540:	120149c0 	call	1120149c <__umodsi3>
1120b544:	e009883a 	mov	r4,fp
1120b548:	b00b883a 	mov	r5,r22
1120b54c:	102f883a 	mov	r23,r2
1120b550:	12014380 	call	11201438 <__udivsi3>
1120b554:	100d883a 	mov	r6,r2
1120b558:	b808943a 	slli	r4,r23,16
1120b55c:	aa3fffcc 	andi	r8,r21,65535
1120b560:	8804d43a 	srli	r2,r17,16
1120b564:	41af383a 	mul	r23,r8,r6
1120b568:	8520983a 	sll	r16,r16,r20
1120b56c:	1104b03a 	or	r2,r2,r4
1120b570:	15c0042e 	bgeu	r2,r23,1120b584 <__umoddi3+0x33c>
1120b574:	1545883a 	add	r2,r2,r21
1120b578:	30ffffc4 	addi	r3,r6,-1
1120b57c:	1540742e 	bgeu	r2,r21,1120b750 <__umoddi3+0x508>
1120b580:	180d883a 	mov	r6,r3
1120b584:	15efc83a 	sub	r23,r2,r23
1120b588:	b00b883a 	mov	r5,r22
1120b58c:	b809883a 	mov	r4,r23
1120b590:	d9800115 	stw	r6,4(sp)
1120b594:	da000015 	stw	r8,0(sp)
1120b598:	120149c0 	call	1120149c <__umodsi3>
1120b59c:	b00b883a 	mov	r5,r22
1120b5a0:	b809883a 	mov	r4,r23
1120b5a4:	1039883a 	mov	fp,r2
1120b5a8:	12014380 	call	11201438 <__udivsi3>
1120b5ac:	da000017 	ldw	r8,0(sp)
1120b5b0:	e038943a 	slli	fp,fp,16
1120b5b4:	100b883a 	mov	r5,r2
1120b5b8:	4089383a 	mul	r4,r8,r2
1120b5bc:	8a3fffcc 	andi	r8,r17,65535
1120b5c0:	4710b03a 	or	r8,r8,fp
1120b5c4:	d9800117 	ldw	r6,4(sp)
1120b5c8:	4100042e 	bgeu	r8,r4,1120b5dc <__umoddi3+0x394>
1120b5cc:	4551883a 	add	r8,r8,r21
1120b5d0:	10bfffc4 	addi	r2,r2,-1
1120b5d4:	45405a2e 	bgeu	r8,r21,1120b740 <__umoddi3+0x4f8>
1120b5d8:	100b883a 	mov	r5,r2
1120b5dc:	300c943a 	slli	r6,r6,16
1120b5e0:	91ffffcc 	andi	r7,r18,65535
1120b5e4:	9004d43a 	srli	r2,r18,16
1120b5e8:	314cb03a 	or	r6,r6,r5
1120b5ec:	317fffcc 	andi	r5,r6,65535
1120b5f0:	300cd43a 	srli	r6,r6,16
1120b5f4:	29d3383a 	mul	r9,r5,r7
1120b5f8:	288b383a 	mul	r5,r5,r2
1120b5fc:	31cf383a 	mul	r7,r6,r7
1120b600:	4806d43a 	srli	r3,r9,16
1120b604:	4111c83a 	sub	r8,r8,r4
1120b608:	29cb883a 	add	r5,r5,r7
1120b60c:	194b883a 	add	r5,r3,r5
1120b610:	3085383a 	mul	r2,r6,r2
1120b614:	29c0022e 	bgeu	r5,r7,1120b620 <__umoddi3+0x3d8>
1120b618:	00c00074 	movhi	r3,1
1120b61c:	10c5883a 	add	r2,r2,r3
1120b620:	2808d43a 	srli	r4,r5,16
1120b624:	280a943a 	slli	r5,r5,16
1120b628:	4a7fffcc 	andi	r9,r9,65535
1120b62c:	2085883a 	add	r2,r4,r2
1120b630:	2a4b883a 	add	r5,r5,r9
1120b634:	40803636 	bltu	r8,r2,1120b710 <__umoddi3+0x4c8>
1120b638:	40804d26 	beq	r8,r2,1120b770 <__umoddi3+0x528>
1120b63c:	4089c83a 	sub	r4,r8,r2
1120b640:	280f883a 	mov	r7,r5
1120b644:	81cfc83a 	sub	r7,r16,r7
1120b648:	81c7803a 	cmpltu	r3,r16,r7
1120b64c:	20c7c83a 	sub	r3,r4,r3
1120b650:	1cc4983a 	sll	r2,r3,r19
1120b654:	3d0ed83a 	srl	r7,r7,r20
1120b658:	1d06d83a 	srl	r3,r3,r20
1120b65c:	11c4b03a 	or	r2,r2,r7
1120b660:	003f9306 	br	1120b4b0 <__alt_data_end+0xffe8b4b0>
1120b664:	9ca6983a 	sll	r19,r19,r18
1120b668:	88e8d83a 	srl	r20,r17,r3
1120b66c:	80c4d83a 	srl	r2,r16,r3
1120b670:	982cd43a 	srli	r22,r19,16
1120b674:	8ca2983a 	sll	r17,r17,r18
1120b678:	a009883a 	mov	r4,r20
1120b67c:	b00b883a 	mov	r5,r22
1120b680:	1478b03a 	or	fp,r2,r17
1120b684:	120149c0 	call	1120149c <__umodsi3>
1120b688:	a009883a 	mov	r4,r20
1120b68c:	b00b883a 	mov	r5,r22
1120b690:	1023883a 	mov	r17,r2
1120b694:	12014380 	call	11201438 <__udivsi3>
1120b698:	9d7fffcc 	andi	r21,r19,65535
1120b69c:	880a943a 	slli	r5,r17,16
1120b6a0:	e008d43a 	srli	r4,fp,16
1120b6a4:	a885383a 	mul	r2,r21,r2
1120b6a8:	84a8983a 	sll	r20,r16,r18
1120b6ac:	2148b03a 	or	r4,r4,r5
1120b6b0:	2080042e 	bgeu	r4,r2,1120b6c4 <__umoddi3+0x47c>
1120b6b4:	24c9883a 	add	r4,r4,r19
1120b6b8:	24c00236 	bltu	r4,r19,1120b6c4 <__umoddi3+0x47c>
1120b6bc:	2080012e 	bgeu	r4,r2,1120b6c4 <__umoddi3+0x47c>
1120b6c0:	24c9883a 	add	r4,r4,r19
1120b6c4:	20a3c83a 	sub	r17,r4,r2
1120b6c8:	b00b883a 	mov	r5,r22
1120b6cc:	8809883a 	mov	r4,r17
1120b6d0:	120149c0 	call	1120149c <__umodsi3>
1120b6d4:	102f883a 	mov	r23,r2
1120b6d8:	8809883a 	mov	r4,r17
1120b6dc:	b00b883a 	mov	r5,r22
1120b6e0:	12014380 	call	11201438 <__udivsi3>
1120b6e4:	b82e943a 	slli	r23,r23,16
1120b6e8:	a885383a 	mul	r2,r21,r2
1120b6ec:	e13fffcc 	andi	r4,fp,65535
1120b6f0:	25c8b03a 	or	r4,r4,r23
1120b6f4:	2080042e 	bgeu	r4,r2,1120b708 <__umoddi3+0x4c0>
1120b6f8:	24c9883a 	add	r4,r4,r19
1120b6fc:	24c00236 	bltu	r4,r19,1120b708 <__umoddi3+0x4c0>
1120b700:	2080012e 	bgeu	r4,r2,1120b708 <__umoddi3+0x4c0>
1120b704:	24c9883a 	add	r4,r4,r19
1120b708:	20a3c83a 	sub	r17,r4,r2
1120b70c:	003f4806 	br	1120b430 <__alt_data_end+0xffe8b430>
1120b710:	2c8fc83a 	sub	r7,r5,r18
1120b714:	1545c83a 	sub	r2,r2,r21
1120b718:	29cb803a 	cmpltu	r5,r5,r7
1120b71c:	1145c83a 	sub	r2,r2,r5
1120b720:	4089c83a 	sub	r4,r8,r2
1120b724:	003fc706 	br	1120b644 <__alt_data_end+0xffe8b644>
1120b728:	01000604 	movi	r4,24
1120b72c:	003f1806 	br	1120b390 <__alt_data_end+0xffe8b390>
1120b730:	00800604 	movi	r2,24
1120b734:	003f3206 	br	1120b400 <__alt_data_end+0xffe8b400>
1120b738:	01000604 	movi	r4,24
1120b73c:	003ed906 	br	1120b2a4 <__alt_data_end+0xffe8b2a4>
1120b740:	413fa52e 	bgeu	r8,r4,1120b5d8 <__alt_data_end+0xffe8b5d8>
1120b744:	297fff84 	addi	r5,r5,-2
1120b748:	4551883a 	add	r8,r8,r21
1120b74c:	003fa306 	br	1120b5dc <__alt_data_end+0xffe8b5dc>
1120b750:	15ff8b2e 	bgeu	r2,r23,1120b580 <__alt_data_end+0xffe8b580>
1120b754:	31bfff84 	addi	r6,r6,-2
1120b758:	1545883a 	add	r2,r2,r21
1120b75c:	003f8906 	br	1120b584 <__alt_data_end+0xffe8b584>
1120b760:	24c9883a 	add	r4,r4,r19
1120b764:	003eee06 	br	1120b320 <__alt_data_end+0xffe8b320>
1120b768:	8005883a 	mov	r2,r16
1120b76c:	003f1706 	br	1120b3cc <__alt_data_end+0xffe8b3cc>
1120b770:	817fe736 	bltu	r16,r5,1120b710 <__alt_data_end+0xffe8b710>
1120b774:	280f883a 	mov	r7,r5
1120b778:	0009883a 	mov	r4,zero
1120b77c:	003fb106 	br	1120b644 <__alt_data_end+0xffe8b644>

1120b780 <__adddf3>:
1120b780:	02c00434 	movhi	r11,16
1120b784:	5affffc4 	addi	r11,r11,-1
1120b788:	2806d7fa 	srli	r3,r5,31
1120b78c:	2ad4703a 	and	r10,r5,r11
1120b790:	3ad2703a 	and	r9,r7,r11
1120b794:	3804d53a 	srli	r2,r7,20
1120b798:	3018d77a 	srli	r12,r6,29
1120b79c:	280ad53a 	srli	r5,r5,20
1120b7a0:	501490fa 	slli	r10,r10,3
1120b7a4:	2010d77a 	srli	r8,r4,29
1120b7a8:	481290fa 	slli	r9,r9,3
1120b7ac:	380ed7fa 	srli	r7,r7,31
1120b7b0:	defffb04 	addi	sp,sp,-20
1120b7b4:	dc800215 	stw	r18,8(sp)
1120b7b8:	dc400115 	stw	r17,4(sp)
1120b7bc:	dc000015 	stw	r16,0(sp)
1120b7c0:	dfc00415 	stw	ra,16(sp)
1120b7c4:	dcc00315 	stw	r19,12(sp)
1120b7c8:	1c803fcc 	andi	r18,r3,255
1120b7cc:	2c01ffcc 	andi	r16,r5,2047
1120b7d0:	5210b03a 	or	r8,r10,r8
1120b7d4:	202290fa 	slli	r17,r4,3
1120b7d8:	1081ffcc 	andi	r2,r2,2047
1120b7dc:	4b12b03a 	or	r9,r9,r12
1120b7e0:	300c90fa 	slli	r6,r6,3
1120b7e4:	91c07526 	beq	r18,r7,1120b9bc <__adddf3+0x23c>
1120b7e8:	8087c83a 	sub	r3,r16,r2
1120b7ec:	00c0ab0e 	bge	zero,r3,1120ba9c <__adddf3+0x31c>
1120b7f0:	10002a1e 	bne	r2,zero,1120b89c <__adddf3+0x11c>
1120b7f4:	4984b03a 	or	r2,r9,r6
1120b7f8:	1000961e 	bne	r2,zero,1120ba54 <__adddf3+0x2d4>
1120b7fc:	888001cc 	andi	r2,r17,7
1120b800:	10000726 	beq	r2,zero,1120b820 <__adddf3+0xa0>
1120b804:	888003cc 	andi	r2,r17,15
1120b808:	00c00104 	movi	r3,4
1120b80c:	10c00426 	beq	r2,r3,1120b820 <__adddf3+0xa0>
1120b810:	88c7883a 	add	r3,r17,r3
1120b814:	1c63803a 	cmpltu	r17,r3,r17
1120b818:	4451883a 	add	r8,r8,r17
1120b81c:	1823883a 	mov	r17,r3
1120b820:	4080202c 	andhi	r2,r8,128
1120b824:	10005926 	beq	r2,zero,1120b98c <__adddf3+0x20c>
1120b828:	84000044 	addi	r16,r16,1
1120b82c:	0081ffc4 	movi	r2,2047
1120b830:	8080ba26 	beq	r16,r2,1120bb1c <__adddf3+0x39c>
1120b834:	00bfe034 	movhi	r2,65408
1120b838:	10bfffc4 	addi	r2,r2,-1
1120b83c:	4090703a 	and	r8,r8,r2
1120b840:	4004977a 	slli	r2,r8,29
1120b844:	4010927a 	slli	r8,r8,9
1120b848:	8822d0fa 	srli	r17,r17,3
1120b84c:	8401ffcc 	andi	r16,r16,2047
1120b850:	4010d33a 	srli	r8,r8,12
1120b854:	9007883a 	mov	r3,r18
1120b858:	1444b03a 	or	r2,r2,r17
1120b85c:	8401ffcc 	andi	r16,r16,2047
1120b860:	8020953a 	slli	r16,r16,20
1120b864:	18c03fcc 	andi	r3,r3,255
1120b868:	01000434 	movhi	r4,16
1120b86c:	213fffc4 	addi	r4,r4,-1
1120b870:	180697fa 	slli	r3,r3,31
1120b874:	4110703a 	and	r8,r8,r4
1120b878:	4410b03a 	or	r8,r8,r16
1120b87c:	40c6b03a 	or	r3,r8,r3
1120b880:	dfc00417 	ldw	ra,16(sp)
1120b884:	dcc00317 	ldw	r19,12(sp)
1120b888:	dc800217 	ldw	r18,8(sp)
1120b88c:	dc400117 	ldw	r17,4(sp)
1120b890:	dc000017 	ldw	r16,0(sp)
1120b894:	dec00504 	addi	sp,sp,20
1120b898:	f800283a 	ret
1120b89c:	0081ffc4 	movi	r2,2047
1120b8a0:	80bfd626 	beq	r16,r2,1120b7fc <__alt_data_end+0xffe8b7fc>
1120b8a4:	4a402034 	orhi	r9,r9,128
1120b8a8:	00800e04 	movi	r2,56
1120b8ac:	10c09f16 	blt	r2,r3,1120bb2c <__adddf3+0x3ac>
1120b8b0:	008007c4 	movi	r2,31
1120b8b4:	10c0c216 	blt	r2,r3,1120bbc0 <__adddf3+0x440>
1120b8b8:	00800804 	movi	r2,32
1120b8bc:	10c5c83a 	sub	r2,r2,r3
1120b8c0:	488a983a 	sll	r5,r9,r2
1120b8c4:	30c8d83a 	srl	r4,r6,r3
1120b8c8:	3084983a 	sll	r2,r6,r2
1120b8cc:	48c6d83a 	srl	r3,r9,r3
1120b8d0:	290cb03a 	or	r6,r5,r4
1120b8d4:	1004c03a 	cmpne	r2,r2,zero
1120b8d8:	308cb03a 	or	r6,r6,r2
1120b8dc:	898dc83a 	sub	r6,r17,r6
1120b8e0:	89a3803a 	cmpltu	r17,r17,r6
1120b8e4:	40d1c83a 	sub	r8,r8,r3
1120b8e8:	4451c83a 	sub	r8,r8,r17
1120b8ec:	3023883a 	mov	r17,r6
1120b8f0:	4080202c 	andhi	r2,r8,128
1120b8f4:	10002326 	beq	r2,zero,1120b984 <__adddf3+0x204>
1120b8f8:	04c02034 	movhi	r19,128
1120b8fc:	9cffffc4 	addi	r19,r19,-1
1120b900:	44e6703a 	and	r19,r8,r19
1120b904:	98007626 	beq	r19,zero,1120bae0 <__adddf3+0x360>
1120b908:	9809883a 	mov	r4,r19
1120b90c:	120dd840 	call	1120dd84 <__clzsi2>
1120b910:	10fffe04 	addi	r3,r2,-8
1120b914:	010007c4 	movi	r4,31
1120b918:	20c07716 	blt	r4,r3,1120baf8 <__adddf3+0x378>
1120b91c:	00800804 	movi	r2,32
1120b920:	10c5c83a 	sub	r2,r2,r3
1120b924:	8884d83a 	srl	r2,r17,r2
1120b928:	98d0983a 	sll	r8,r19,r3
1120b92c:	88e2983a 	sll	r17,r17,r3
1120b930:	1204b03a 	or	r2,r2,r8
1120b934:	1c007416 	blt	r3,r16,1120bb08 <__adddf3+0x388>
1120b938:	1c21c83a 	sub	r16,r3,r16
1120b93c:	82000044 	addi	r8,r16,1
1120b940:	00c007c4 	movi	r3,31
1120b944:	1a009116 	blt	r3,r8,1120bb8c <__adddf3+0x40c>
1120b948:	00c00804 	movi	r3,32
1120b94c:	1a07c83a 	sub	r3,r3,r8
1120b950:	8a08d83a 	srl	r4,r17,r8
1120b954:	88e2983a 	sll	r17,r17,r3
1120b958:	10c6983a 	sll	r3,r2,r3
1120b95c:	1210d83a 	srl	r8,r2,r8
1120b960:	8804c03a 	cmpne	r2,r17,zero
1120b964:	1906b03a 	or	r3,r3,r4
1120b968:	18a2b03a 	or	r17,r3,r2
1120b96c:	0021883a 	mov	r16,zero
1120b970:	003fa206 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120b974:	1890b03a 	or	r8,r3,r2
1120b978:	40017d26 	beq	r8,zero,1120bf70 <__adddf3+0x7f0>
1120b97c:	1011883a 	mov	r8,r2
1120b980:	1823883a 	mov	r17,r3
1120b984:	888001cc 	andi	r2,r17,7
1120b988:	103f9e1e 	bne	r2,zero,1120b804 <__alt_data_end+0xffe8b804>
1120b98c:	4004977a 	slli	r2,r8,29
1120b990:	8822d0fa 	srli	r17,r17,3
1120b994:	4010d0fa 	srli	r8,r8,3
1120b998:	9007883a 	mov	r3,r18
1120b99c:	1444b03a 	or	r2,r2,r17
1120b9a0:	0101ffc4 	movi	r4,2047
1120b9a4:	81002426 	beq	r16,r4,1120ba38 <__adddf3+0x2b8>
1120b9a8:	8120703a 	and	r16,r16,r4
1120b9ac:	01000434 	movhi	r4,16
1120b9b0:	213fffc4 	addi	r4,r4,-1
1120b9b4:	4110703a 	and	r8,r8,r4
1120b9b8:	003fa806 	br	1120b85c <__alt_data_end+0xffe8b85c>
1120b9bc:	8089c83a 	sub	r4,r16,r2
1120b9c0:	01005e0e 	bge	zero,r4,1120bb3c <__adddf3+0x3bc>
1120b9c4:	10002b26 	beq	r2,zero,1120ba74 <__adddf3+0x2f4>
1120b9c8:	0081ffc4 	movi	r2,2047
1120b9cc:	80bf8b26 	beq	r16,r2,1120b7fc <__alt_data_end+0xffe8b7fc>
1120b9d0:	4a402034 	orhi	r9,r9,128
1120b9d4:	00800e04 	movi	r2,56
1120b9d8:	1100a40e 	bge	r2,r4,1120bc6c <__adddf3+0x4ec>
1120b9dc:	498cb03a 	or	r6,r9,r6
1120b9e0:	300ac03a 	cmpne	r5,r6,zero
1120b9e4:	0013883a 	mov	r9,zero
1120b9e8:	2c4b883a 	add	r5,r5,r17
1120b9ec:	2c63803a 	cmpltu	r17,r5,r17
1120b9f0:	4a11883a 	add	r8,r9,r8
1120b9f4:	8a11883a 	add	r8,r17,r8
1120b9f8:	2823883a 	mov	r17,r5
1120b9fc:	4080202c 	andhi	r2,r8,128
1120ba00:	103fe026 	beq	r2,zero,1120b984 <__alt_data_end+0xffe8b984>
1120ba04:	84000044 	addi	r16,r16,1
1120ba08:	0081ffc4 	movi	r2,2047
1120ba0c:	8080d226 	beq	r16,r2,1120bd58 <__adddf3+0x5d8>
1120ba10:	00bfe034 	movhi	r2,65408
1120ba14:	10bfffc4 	addi	r2,r2,-1
1120ba18:	4090703a 	and	r8,r8,r2
1120ba1c:	880ad07a 	srli	r5,r17,1
1120ba20:	400897fa 	slli	r4,r8,31
1120ba24:	88c0004c 	andi	r3,r17,1
1120ba28:	28e2b03a 	or	r17,r5,r3
1120ba2c:	4010d07a 	srli	r8,r8,1
1120ba30:	2462b03a 	or	r17,r4,r17
1120ba34:	003f7106 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120ba38:	4088b03a 	or	r4,r8,r2
1120ba3c:	20014526 	beq	r4,zero,1120bf54 <__adddf3+0x7d4>
1120ba40:	01000434 	movhi	r4,16
1120ba44:	42000234 	orhi	r8,r8,8
1120ba48:	213fffc4 	addi	r4,r4,-1
1120ba4c:	4110703a 	and	r8,r8,r4
1120ba50:	003f8206 	br	1120b85c <__alt_data_end+0xffe8b85c>
1120ba54:	18ffffc4 	addi	r3,r3,-1
1120ba58:	1800491e 	bne	r3,zero,1120bb80 <__adddf3+0x400>
1120ba5c:	898bc83a 	sub	r5,r17,r6
1120ba60:	8963803a 	cmpltu	r17,r17,r5
1120ba64:	4251c83a 	sub	r8,r8,r9
1120ba68:	4451c83a 	sub	r8,r8,r17
1120ba6c:	2823883a 	mov	r17,r5
1120ba70:	003f9f06 	br	1120b8f0 <__alt_data_end+0xffe8b8f0>
1120ba74:	4984b03a 	or	r2,r9,r6
1120ba78:	103f6026 	beq	r2,zero,1120b7fc <__alt_data_end+0xffe8b7fc>
1120ba7c:	213fffc4 	addi	r4,r4,-1
1120ba80:	2000931e 	bne	r4,zero,1120bcd0 <__adddf3+0x550>
1120ba84:	898d883a 	add	r6,r17,r6
1120ba88:	3463803a 	cmpltu	r17,r6,r17
1120ba8c:	4251883a 	add	r8,r8,r9
1120ba90:	8a11883a 	add	r8,r17,r8
1120ba94:	3023883a 	mov	r17,r6
1120ba98:	003fd806 	br	1120b9fc <__alt_data_end+0xffe8b9fc>
1120ba9c:	1800541e 	bne	r3,zero,1120bbf0 <__adddf3+0x470>
1120baa0:	80800044 	addi	r2,r16,1
1120baa4:	1081ffcc 	andi	r2,r2,2047
1120baa8:	00c00044 	movi	r3,1
1120baac:	1880a00e 	bge	r3,r2,1120bd30 <__adddf3+0x5b0>
1120bab0:	8989c83a 	sub	r4,r17,r6
1120bab4:	8905803a 	cmpltu	r2,r17,r4
1120bab8:	4267c83a 	sub	r19,r8,r9
1120babc:	98a7c83a 	sub	r19,r19,r2
1120bac0:	9880202c 	andhi	r2,r19,128
1120bac4:	10006326 	beq	r2,zero,1120bc54 <__adddf3+0x4d4>
1120bac8:	3463c83a 	sub	r17,r6,r17
1120bacc:	4a07c83a 	sub	r3,r9,r8
1120bad0:	344d803a 	cmpltu	r6,r6,r17
1120bad4:	19a7c83a 	sub	r19,r3,r6
1120bad8:	3825883a 	mov	r18,r7
1120badc:	983f8a1e 	bne	r19,zero,1120b908 <__alt_data_end+0xffe8b908>
1120bae0:	8809883a 	mov	r4,r17
1120bae4:	120dd840 	call	1120dd84 <__clzsi2>
1120bae8:	10800804 	addi	r2,r2,32
1120baec:	10fffe04 	addi	r3,r2,-8
1120baf0:	010007c4 	movi	r4,31
1120baf4:	20ff890e 	bge	r4,r3,1120b91c <__alt_data_end+0xffe8b91c>
1120baf8:	10bff604 	addi	r2,r2,-40
1120bafc:	8884983a 	sll	r2,r17,r2
1120bb00:	0023883a 	mov	r17,zero
1120bb04:	1c3f8c0e 	bge	r3,r16,1120b938 <__alt_data_end+0xffe8b938>
1120bb08:	023fe034 	movhi	r8,65408
1120bb0c:	423fffc4 	addi	r8,r8,-1
1120bb10:	80e1c83a 	sub	r16,r16,r3
1120bb14:	1210703a 	and	r8,r2,r8
1120bb18:	003f3806 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120bb1c:	9007883a 	mov	r3,r18
1120bb20:	0011883a 	mov	r8,zero
1120bb24:	0005883a 	mov	r2,zero
1120bb28:	003f4c06 	br	1120b85c <__alt_data_end+0xffe8b85c>
1120bb2c:	498cb03a 	or	r6,r9,r6
1120bb30:	300cc03a 	cmpne	r6,r6,zero
1120bb34:	0007883a 	mov	r3,zero
1120bb38:	003f6806 	br	1120b8dc <__alt_data_end+0xffe8b8dc>
1120bb3c:	20009c1e 	bne	r4,zero,1120bdb0 <__adddf3+0x630>
1120bb40:	80800044 	addi	r2,r16,1
1120bb44:	1141ffcc 	andi	r5,r2,2047
1120bb48:	01000044 	movi	r4,1
1120bb4c:	2140670e 	bge	r4,r5,1120bcec <__adddf3+0x56c>
1120bb50:	0101ffc4 	movi	r4,2047
1120bb54:	11007f26 	beq	r2,r4,1120bd54 <__adddf3+0x5d4>
1120bb58:	898d883a 	add	r6,r17,r6
1120bb5c:	4247883a 	add	r3,r8,r9
1120bb60:	3451803a 	cmpltu	r8,r6,r17
1120bb64:	40d1883a 	add	r8,r8,r3
1120bb68:	402297fa 	slli	r17,r8,31
1120bb6c:	300cd07a 	srli	r6,r6,1
1120bb70:	4010d07a 	srli	r8,r8,1
1120bb74:	1021883a 	mov	r16,r2
1120bb78:	89a2b03a 	or	r17,r17,r6
1120bb7c:	003f1f06 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120bb80:	0081ffc4 	movi	r2,2047
1120bb84:	80bf481e 	bne	r16,r2,1120b8a8 <__alt_data_end+0xffe8b8a8>
1120bb88:	003f1c06 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120bb8c:	843ff844 	addi	r16,r16,-31
1120bb90:	01000804 	movi	r4,32
1120bb94:	1406d83a 	srl	r3,r2,r16
1120bb98:	41005026 	beq	r8,r4,1120bcdc <__adddf3+0x55c>
1120bb9c:	01001004 	movi	r4,64
1120bba0:	2211c83a 	sub	r8,r4,r8
1120bba4:	1204983a 	sll	r2,r2,r8
1120bba8:	88a2b03a 	or	r17,r17,r2
1120bbac:	8822c03a 	cmpne	r17,r17,zero
1120bbb0:	1c62b03a 	or	r17,r3,r17
1120bbb4:	0011883a 	mov	r8,zero
1120bbb8:	0021883a 	mov	r16,zero
1120bbbc:	003f7106 	br	1120b984 <__alt_data_end+0xffe8b984>
1120bbc0:	193ff804 	addi	r4,r3,-32
1120bbc4:	00800804 	movi	r2,32
1120bbc8:	4908d83a 	srl	r4,r9,r4
1120bbcc:	18804526 	beq	r3,r2,1120bce4 <__adddf3+0x564>
1120bbd0:	00801004 	movi	r2,64
1120bbd4:	10c5c83a 	sub	r2,r2,r3
1120bbd8:	4886983a 	sll	r3,r9,r2
1120bbdc:	198cb03a 	or	r6,r3,r6
1120bbe0:	300cc03a 	cmpne	r6,r6,zero
1120bbe4:	218cb03a 	or	r6,r4,r6
1120bbe8:	0007883a 	mov	r3,zero
1120bbec:	003f3b06 	br	1120b8dc <__alt_data_end+0xffe8b8dc>
1120bbf0:	80002a26 	beq	r16,zero,1120bc9c <__adddf3+0x51c>
1120bbf4:	0101ffc4 	movi	r4,2047
1120bbf8:	11006826 	beq	r2,r4,1120bd9c <__adddf3+0x61c>
1120bbfc:	00c7c83a 	sub	r3,zero,r3
1120bc00:	42002034 	orhi	r8,r8,128
1120bc04:	01000e04 	movi	r4,56
1120bc08:	20c07c16 	blt	r4,r3,1120bdfc <__adddf3+0x67c>
1120bc0c:	010007c4 	movi	r4,31
1120bc10:	20c0da16 	blt	r4,r3,1120bf7c <__adddf3+0x7fc>
1120bc14:	01000804 	movi	r4,32
1120bc18:	20c9c83a 	sub	r4,r4,r3
1120bc1c:	4114983a 	sll	r10,r8,r4
1120bc20:	88cad83a 	srl	r5,r17,r3
1120bc24:	8908983a 	sll	r4,r17,r4
1120bc28:	40c6d83a 	srl	r3,r8,r3
1120bc2c:	5162b03a 	or	r17,r10,r5
1120bc30:	2008c03a 	cmpne	r4,r4,zero
1120bc34:	8922b03a 	or	r17,r17,r4
1120bc38:	3463c83a 	sub	r17,r6,r17
1120bc3c:	48c7c83a 	sub	r3,r9,r3
1120bc40:	344d803a 	cmpltu	r6,r6,r17
1120bc44:	1991c83a 	sub	r8,r3,r6
1120bc48:	1021883a 	mov	r16,r2
1120bc4c:	3825883a 	mov	r18,r7
1120bc50:	003f2706 	br	1120b8f0 <__alt_data_end+0xffe8b8f0>
1120bc54:	24d0b03a 	or	r8,r4,r19
1120bc58:	40001b1e 	bne	r8,zero,1120bcc8 <__adddf3+0x548>
1120bc5c:	0005883a 	mov	r2,zero
1120bc60:	0007883a 	mov	r3,zero
1120bc64:	0021883a 	mov	r16,zero
1120bc68:	003f4d06 	br	1120b9a0 <__alt_data_end+0xffe8b9a0>
1120bc6c:	008007c4 	movi	r2,31
1120bc70:	11003c16 	blt	r2,r4,1120bd64 <__adddf3+0x5e4>
1120bc74:	00800804 	movi	r2,32
1120bc78:	1105c83a 	sub	r2,r2,r4
1120bc7c:	488e983a 	sll	r7,r9,r2
1120bc80:	310ad83a 	srl	r5,r6,r4
1120bc84:	3084983a 	sll	r2,r6,r2
1120bc88:	4912d83a 	srl	r9,r9,r4
1120bc8c:	394ab03a 	or	r5,r7,r5
1120bc90:	1004c03a 	cmpne	r2,r2,zero
1120bc94:	288ab03a 	or	r5,r5,r2
1120bc98:	003f5306 	br	1120b9e8 <__alt_data_end+0xffe8b9e8>
1120bc9c:	4448b03a 	or	r4,r8,r17
1120bca0:	20003e26 	beq	r4,zero,1120bd9c <__adddf3+0x61c>
1120bca4:	00c6303a 	nor	r3,zero,r3
1120bca8:	18003a1e 	bne	r3,zero,1120bd94 <__adddf3+0x614>
1120bcac:	3463c83a 	sub	r17,r6,r17
1120bcb0:	4a07c83a 	sub	r3,r9,r8
1120bcb4:	344d803a 	cmpltu	r6,r6,r17
1120bcb8:	1991c83a 	sub	r8,r3,r6
1120bcbc:	1021883a 	mov	r16,r2
1120bcc0:	3825883a 	mov	r18,r7
1120bcc4:	003f0a06 	br	1120b8f0 <__alt_data_end+0xffe8b8f0>
1120bcc8:	2023883a 	mov	r17,r4
1120bccc:	003f0d06 	br	1120b904 <__alt_data_end+0xffe8b904>
1120bcd0:	0081ffc4 	movi	r2,2047
1120bcd4:	80bf3f1e 	bne	r16,r2,1120b9d4 <__alt_data_end+0xffe8b9d4>
1120bcd8:	003ec806 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120bcdc:	0005883a 	mov	r2,zero
1120bce0:	003fb106 	br	1120bba8 <__alt_data_end+0xffe8bba8>
1120bce4:	0007883a 	mov	r3,zero
1120bce8:	003fbc06 	br	1120bbdc <__alt_data_end+0xffe8bbdc>
1120bcec:	4444b03a 	or	r2,r8,r17
1120bcf0:	8000871e 	bne	r16,zero,1120bf10 <__adddf3+0x790>
1120bcf4:	1000ba26 	beq	r2,zero,1120bfe0 <__adddf3+0x860>
1120bcf8:	4984b03a 	or	r2,r9,r6
1120bcfc:	103ebf26 	beq	r2,zero,1120b7fc <__alt_data_end+0xffe8b7fc>
1120bd00:	8985883a 	add	r2,r17,r6
1120bd04:	4247883a 	add	r3,r8,r9
1120bd08:	1451803a 	cmpltu	r8,r2,r17
1120bd0c:	40d1883a 	add	r8,r8,r3
1120bd10:	40c0202c 	andhi	r3,r8,128
1120bd14:	1023883a 	mov	r17,r2
1120bd18:	183f1a26 	beq	r3,zero,1120b984 <__alt_data_end+0xffe8b984>
1120bd1c:	00bfe034 	movhi	r2,65408
1120bd20:	10bfffc4 	addi	r2,r2,-1
1120bd24:	2021883a 	mov	r16,r4
1120bd28:	4090703a 	and	r8,r8,r2
1120bd2c:	003eb306 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120bd30:	4444b03a 	or	r2,r8,r17
1120bd34:	8000291e 	bne	r16,zero,1120bddc <__adddf3+0x65c>
1120bd38:	10004b1e 	bne	r2,zero,1120be68 <__adddf3+0x6e8>
1120bd3c:	4990b03a 	or	r8,r9,r6
1120bd40:	40008b26 	beq	r8,zero,1120bf70 <__adddf3+0x7f0>
1120bd44:	4811883a 	mov	r8,r9
1120bd48:	3023883a 	mov	r17,r6
1120bd4c:	3825883a 	mov	r18,r7
1120bd50:	003eaa06 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120bd54:	1021883a 	mov	r16,r2
1120bd58:	0011883a 	mov	r8,zero
1120bd5c:	0005883a 	mov	r2,zero
1120bd60:	003f0f06 	br	1120b9a0 <__alt_data_end+0xffe8b9a0>
1120bd64:	217ff804 	addi	r5,r4,-32
1120bd68:	00800804 	movi	r2,32
1120bd6c:	494ad83a 	srl	r5,r9,r5
1120bd70:	20807d26 	beq	r4,r2,1120bf68 <__adddf3+0x7e8>
1120bd74:	00801004 	movi	r2,64
1120bd78:	1109c83a 	sub	r4,r2,r4
1120bd7c:	4912983a 	sll	r9,r9,r4
1120bd80:	498cb03a 	or	r6,r9,r6
1120bd84:	300cc03a 	cmpne	r6,r6,zero
1120bd88:	298ab03a 	or	r5,r5,r6
1120bd8c:	0013883a 	mov	r9,zero
1120bd90:	003f1506 	br	1120b9e8 <__alt_data_end+0xffe8b9e8>
1120bd94:	0101ffc4 	movi	r4,2047
1120bd98:	113f9a1e 	bne	r2,r4,1120bc04 <__alt_data_end+0xffe8bc04>
1120bd9c:	4811883a 	mov	r8,r9
1120bda0:	3023883a 	mov	r17,r6
1120bda4:	1021883a 	mov	r16,r2
1120bda8:	3825883a 	mov	r18,r7
1120bdac:	003e9306 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120bdb0:	8000161e 	bne	r16,zero,1120be0c <__adddf3+0x68c>
1120bdb4:	444ab03a 	or	r5,r8,r17
1120bdb8:	28005126 	beq	r5,zero,1120bf00 <__adddf3+0x780>
1120bdbc:	0108303a 	nor	r4,zero,r4
1120bdc0:	20004d1e 	bne	r4,zero,1120bef8 <__adddf3+0x778>
1120bdc4:	89a3883a 	add	r17,r17,r6
1120bdc8:	4253883a 	add	r9,r8,r9
1120bdcc:	898d803a 	cmpltu	r6,r17,r6
1120bdd0:	3251883a 	add	r8,r6,r9
1120bdd4:	1021883a 	mov	r16,r2
1120bdd8:	003f0806 	br	1120b9fc <__alt_data_end+0xffe8b9fc>
1120bddc:	1000301e 	bne	r2,zero,1120bea0 <__adddf3+0x720>
1120bde0:	4984b03a 	or	r2,r9,r6
1120bde4:	10007126 	beq	r2,zero,1120bfac <__adddf3+0x82c>
1120bde8:	4811883a 	mov	r8,r9
1120bdec:	3023883a 	mov	r17,r6
1120bdf0:	3825883a 	mov	r18,r7
1120bdf4:	0401ffc4 	movi	r16,2047
1120bdf8:	003e8006 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120bdfc:	4462b03a 	or	r17,r8,r17
1120be00:	8822c03a 	cmpne	r17,r17,zero
1120be04:	0007883a 	mov	r3,zero
1120be08:	003f8b06 	br	1120bc38 <__alt_data_end+0xffe8bc38>
1120be0c:	0141ffc4 	movi	r5,2047
1120be10:	11403b26 	beq	r2,r5,1120bf00 <__adddf3+0x780>
1120be14:	0109c83a 	sub	r4,zero,r4
1120be18:	42002034 	orhi	r8,r8,128
1120be1c:	01400e04 	movi	r5,56
1120be20:	29006716 	blt	r5,r4,1120bfc0 <__adddf3+0x840>
1120be24:	014007c4 	movi	r5,31
1120be28:	29007016 	blt	r5,r4,1120bfec <__adddf3+0x86c>
1120be2c:	01400804 	movi	r5,32
1120be30:	290bc83a 	sub	r5,r5,r4
1120be34:	4154983a 	sll	r10,r8,r5
1120be38:	890ed83a 	srl	r7,r17,r4
1120be3c:	894a983a 	sll	r5,r17,r5
1120be40:	4108d83a 	srl	r4,r8,r4
1120be44:	51e2b03a 	or	r17,r10,r7
1120be48:	280ac03a 	cmpne	r5,r5,zero
1120be4c:	8962b03a 	or	r17,r17,r5
1120be50:	89a3883a 	add	r17,r17,r6
1120be54:	2253883a 	add	r9,r4,r9
1120be58:	898d803a 	cmpltu	r6,r17,r6
1120be5c:	3251883a 	add	r8,r6,r9
1120be60:	1021883a 	mov	r16,r2
1120be64:	003ee506 	br	1120b9fc <__alt_data_end+0xffe8b9fc>
1120be68:	4984b03a 	or	r2,r9,r6
1120be6c:	103e6326 	beq	r2,zero,1120b7fc <__alt_data_end+0xffe8b7fc>
1120be70:	8987c83a 	sub	r3,r17,r6
1120be74:	88c9803a 	cmpltu	r4,r17,r3
1120be78:	4245c83a 	sub	r2,r8,r9
1120be7c:	1105c83a 	sub	r2,r2,r4
1120be80:	1100202c 	andhi	r4,r2,128
1120be84:	203ebb26 	beq	r4,zero,1120b974 <__alt_data_end+0xffe8b974>
1120be88:	3463c83a 	sub	r17,r6,r17
1120be8c:	4a07c83a 	sub	r3,r9,r8
1120be90:	344d803a 	cmpltu	r6,r6,r17
1120be94:	1991c83a 	sub	r8,r3,r6
1120be98:	3825883a 	mov	r18,r7
1120be9c:	003e5706 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120bea0:	4984b03a 	or	r2,r9,r6
1120bea4:	10002e26 	beq	r2,zero,1120bf60 <__adddf3+0x7e0>
1120bea8:	4004d0fa 	srli	r2,r8,3
1120beac:	8822d0fa 	srli	r17,r17,3
1120beb0:	4010977a 	slli	r8,r8,29
1120beb4:	10c0022c 	andhi	r3,r2,8
1120beb8:	4462b03a 	or	r17,r8,r17
1120bebc:	18000826 	beq	r3,zero,1120bee0 <__adddf3+0x760>
1120bec0:	4808d0fa 	srli	r4,r9,3
1120bec4:	20c0022c 	andhi	r3,r4,8
1120bec8:	1800051e 	bne	r3,zero,1120bee0 <__adddf3+0x760>
1120becc:	300cd0fa 	srli	r6,r6,3
1120bed0:	4806977a 	slli	r3,r9,29
1120bed4:	2005883a 	mov	r2,r4
1120bed8:	3825883a 	mov	r18,r7
1120bedc:	19a2b03a 	or	r17,r3,r6
1120bee0:	8810d77a 	srli	r8,r17,29
1120bee4:	100490fa 	slli	r2,r2,3
1120bee8:	882290fa 	slli	r17,r17,3
1120beec:	0401ffc4 	movi	r16,2047
1120bef0:	4090b03a 	or	r8,r8,r2
1120bef4:	003e4106 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120bef8:	0141ffc4 	movi	r5,2047
1120befc:	117fc71e 	bne	r2,r5,1120be1c <__alt_data_end+0xffe8be1c>
1120bf00:	4811883a 	mov	r8,r9
1120bf04:	3023883a 	mov	r17,r6
1120bf08:	1021883a 	mov	r16,r2
1120bf0c:	003e3b06 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120bf10:	10002f26 	beq	r2,zero,1120bfd0 <__adddf3+0x850>
1120bf14:	4984b03a 	or	r2,r9,r6
1120bf18:	10001126 	beq	r2,zero,1120bf60 <__adddf3+0x7e0>
1120bf1c:	4004d0fa 	srli	r2,r8,3
1120bf20:	8822d0fa 	srli	r17,r17,3
1120bf24:	4010977a 	slli	r8,r8,29
1120bf28:	10c0022c 	andhi	r3,r2,8
1120bf2c:	4462b03a 	or	r17,r8,r17
1120bf30:	183feb26 	beq	r3,zero,1120bee0 <__alt_data_end+0xffe8bee0>
1120bf34:	4808d0fa 	srli	r4,r9,3
1120bf38:	20c0022c 	andhi	r3,r4,8
1120bf3c:	183fe81e 	bne	r3,zero,1120bee0 <__alt_data_end+0xffe8bee0>
1120bf40:	300cd0fa 	srli	r6,r6,3
1120bf44:	4806977a 	slli	r3,r9,29
1120bf48:	2005883a 	mov	r2,r4
1120bf4c:	19a2b03a 	or	r17,r3,r6
1120bf50:	003fe306 	br	1120bee0 <__alt_data_end+0xffe8bee0>
1120bf54:	0011883a 	mov	r8,zero
1120bf58:	0005883a 	mov	r2,zero
1120bf5c:	003e3f06 	br	1120b85c <__alt_data_end+0xffe8b85c>
1120bf60:	0401ffc4 	movi	r16,2047
1120bf64:	003e2506 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120bf68:	0013883a 	mov	r9,zero
1120bf6c:	003f8406 	br	1120bd80 <__alt_data_end+0xffe8bd80>
1120bf70:	0005883a 	mov	r2,zero
1120bf74:	0007883a 	mov	r3,zero
1120bf78:	003e8906 	br	1120b9a0 <__alt_data_end+0xffe8b9a0>
1120bf7c:	197ff804 	addi	r5,r3,-32
1120bf80:	01000804 	movi	r4,32
1120bf84:	414ad83a 	srl	r5,r8,r5
1120bf88:	19002426 	beq	r3,r4,1120c01c <__adddf3+0x89c>
1120bf8c:	01001004 	movi	r4,64
1120bf90:	20c7c83a 	sub	r3,r4,r3
1120bf94:	40c6983a 	sll	r3,r8,r3
1120bf98:	1c46b03a 	or	r3,r3,r17
1120bf9c:	1806c03a 	cmpne	r3,r3,zero
1120bfa0:	28e2b03a 	or	r17,r5,r3
1120bfa4:	0007883a 	mov	r3,zero
1120bfa8:	003f2306 	br	1120bc38 <__alt_data_end+0xffe8bc38>
1120bfac:	0007883a 	mov	r3,zero
1120bfb0:	5811883a 	mov	r8,r11
1120bfb4:	00bfffc4 	movi	r2,-1
1120bfb8:	0401ffc4 	movi	r16,2047
1120bfbc:	003e7806 	br	1120b9a0 <__alt_data_end+0xffe8b9a0>
1120bfc0:	4462b03a 	or	r17,r8,r17
1120bfc4:	8822c03a 	cmpne	r17,r17,zero
1120bfc8:	0009883a 	mov	r4,zero
1120bfcc:	003fa006 	br	1120be50 <__alt_data_end+0xffe8be50>
1120bfd0:	4811883a 	mov	r8,r9
1120bfd4:	3023883a 	mov	r17,r6
1120bfd8:	0401ffc4 	movi	r16,2047
1120bfdc:	003e0706 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120bfe0:	4811883a 	mov	r8,r9
1120bfe4:	3023883a 	mov	r17,r6
1120bfe8:	003e0406 	br	1120b7fc <__alt_data_end+0xffe8b7fc>
1120bfec:	21fff804 	addi	r7,r4,-32
1120bff0:	01400804 	movi	r5,32
1120bff4:	41ced83a 	srl	r7,r8,r7
1120bff8:	21400a26 	beq	r4,r5,1120c024 <__adddf3+0x8a4>
1120bffc:	01401004 	movi	r5,64
1120c000:	2909c83a 	sub	r4,r5,r4
1120c004:	4108983a 	sll	r4,r8,r4
1120c008:	2448b03a 	or	r4,r4,r17
1120c00c:	2008c03a 	cmpne	r4,r4,zero
1120c010:	3922b03a 	or	r17,r7,r4
1120c014:	0009883a 	mov	r4,zero
1120c018:	003f8d06 	br	1120be50 <__alt_data_end+0xffe8be50>
1120c01c:	0007883a 	mov	r3,zero
1120c020:	003fdd06 	br	1120bf98 <__alt_data_end+0xffe8bf98>
1120c024:	0009883a 	mov	r4,zero
1120c028:	003ff706 	br	1120c008 <__alt_data_end+0xffe8c008>

1120c02c <__divdf3>:
1120c02c:	defff204 	addi	sp,sp,-56
1120c030:	dd400915 	stw	r21,36(sp)
1120c034:	282ad53a 	srli	r21,r5,20
1120c038:	dd000815 	stw	r20,32(sp)
1120c03c:	2828d7fa 	srli	r20,r5,31
1120c040:	dc000415 	stw	r16,16(sp)
1120c044:	04000434 	movhi	r16,16
1120c048:	df000c15 	stw	fp,48(sp)
1120c04c:	843fffc4 	addi	r16,r16,-1
1120c050:	dfc00d15 	stw	ra,52(sp)
1120c054:	ddc00b15 	stw	r23,44(sp)
1120c058:	dd800a15 	stw	r22,40(sp)
1120c05c:	dcc00715 	stw	r19,28(sp)
1120c060:	dc800615 	stw	r18,24(sp)
1120c064:	dc400515 	stw	r17,20(sp)
1120c068:	ad41ffcc 	andi	r21,r21,2047
1120c06c:	2c20703a 	and	r16,r5,r16
1120c070:	a7003fcc 	andi	fp,r20,255
1120c074:	a8006126 	beq	r21,zero,1120c1fc <__divdf3+0x1d0>
1120c078:	0081ffc4 	movi	r2,2047
1120c07c:	2025883a 	mov	r18,r4
1120c080:	a8803726 	beq	r21,r2,1120c160 <__divdf3+0x134>
1120c084:	80800434 	orhi	r2,r16,16
1120c088:	100490fa 	slli	r2,r2,3
1120c08c:	2020d77a 	srli	r16,r4,29
1120c090:	202490fa 	slli	r18,r4,3
1120c094:	ad7f0044 	addi	r21,r21,-1023
1120c098:	80a0b03a 	or	r16,r16,r2
1120c09c:	0027883a 	mov	r19,zero
1120c0a0:	0013883a 	mov	r9,zero
1120c0a4:	3804d53a 	srli	r2,r7,20
1120c0a8:	382cd7fa 	srli	r22,r7,31
1120c0ac:	04400434 	movhi	r17,16
1120c0b0:	8c7fffc4 	addi	r17,r17,-1
1120c0b4:	1081ffcc 	andi	r2,r2,2047
1120c0b8:	3011883a 	mov	r8,r6
1120c0bc:	3c62703a 	and	r17,r7,r17
1120c0c0:	b5c03fcc 	andi	r23,r22,255
1120c0c4:	10006c26 	beq	r2,zero,1120c278 <__divdf3+0x24c>
1120c0c8:	00c1ffc4 	movi	r3,2047
1120c0cc:	10c06426 	beq	r2,r3,1120c260 <__divdf3+0x234>
1120c0d0:	88c00434 	orhi	r3,r17,16
1120c0d4:	180690fa 	slli	r3,r3,3
1120c0d8:	3022d77a 	srli	r17,r6,29
1120c0dc:	301090fa 	slli	r8,r6,3
1120c0e0:	10bf0044 	addi	r2,r2,-1023
1120c0e4:	88e2b03a 	or	r17,r17,r3
1120c0e8:	000f883a 	mov	r7,zero
1120c0ec:	a58cf03a 	xor	r6,r20,r22
1120c0f0:	3cc8b03a 	or	r4,r7,r19
1120c0f4:	a8abc83a 	sub	r21,r21,r2
1120c0f8:	008003c4 	movi	r2,15
1120c0fc:	3007883a 	mov	r3,r6
1120c100:	34c03fcc 	andi	r19,r6,255
1120c104:	11009036 	bltu	r2,r4,1120c348 <__divdf3+0x31c>
1120c108:	200890ba 	slli	r4,r4,2
1120c10c:	00844874 	movhi	r2,4385
1120c110:	10b04804 	addi	r2,r2,-16096
1120c114:	2089883a 	add	r4,r4,r2
1120c118:	20800017 	ldw	r2,0(r4)
1120c11c:	1000683a 	jmp	r2
1120c120:	1120c348 	cmpgei	r4,r2,-31987
1120c124:	1120c198 	cmpnei	r4,r2,-31994
1120c128:	1120c338 	rdprs	r4,r2,-31988
1120c12c:	1120c18c 	andi	r4,r2,33542
1120c130:	1120c338 	rdprs	r4,r2,-31988
1120c134:	1120c30c 	andi	r4,r2,33548
1120c138:	1120c338 	rdprs	r4,r2,-31988
1120c13c:	1120c18c 	andi	r4,r2,33542
1120c140:	1120c198 	cmpnei	r4,r2,-31994
1120c144:	1120c198 	cmpnei	r4,r2,-31994
1120c148:	1120c30c 	andi	r4,r2,33548
1120c14c:	1120c18c 	andi	r4,r2,33542
1120c150:	1120c17c 	xorhi	r4,r2,33541
1120c154:	1120c17c 	xorhi	r4,r2,33541
1120c158:	1120c17c 	xorhi	r4,r2,33541
1120c15c:	1120c62c 	andhi	r4,r2,33560
1120c160:	2404b03a 	or	r2,r4,r16
1120c164:	1000661e 	bne	r2,zero,1120c300 <__divdf3+0x2d4>
1120c168:	04c00204 	movi	r19,8
1120c16c:	0021883a 	mov	r16,zero
1120c170:	0025883a 	mov	r18,zero
1120c174:	02400084 	movi	r9,2
1120c178:	003fca06 	br	1120c0a4 <__alt_data_end+0xffe8c0a4>
1120c17c:	8023883a 	mov	r17,r16
1120c180:	9011883a 	mov	r8,r18
1120c184:	e02f883a 	mov	r23,fp
1120c188:	480f883a 	mov	r7,r9
1120c18c:	00800084 	movi	r2,2
1120c190:	3881311e 	bne	r7,r2,1120c658 <__divdf3+0x62c>
1120c194:	b827883a 	mov	r19,r23
1120c198:	98c0004c 	andi	r3,r19,1
1120c19c:	0081ffc4 	movi	r2,2047
1120c1a0:	000b883a 	mov	r5,zero
1120c1a4:	0025883a 	mov	r18,zero
1120c1a8:	1004953a 	slli	r2,r2,20
1120c1ac:	18c03fcc 	andi	r3,r3,255
1120c1b0:	04400434 	movhi	r17,16
1120c1b4:	8c7fffc4 	addi	r17,r17,-1
1120c1b8:	180697fa 	slli	r3,r3,31
1120c1bc:	2c4a703a 	and	r5,r5,r17
1120c1c0:	288ab03a 	or	r5,r5,r2
1120c1c4:	28c6b03a 	or	r3,r5,r3
1120c1c8:	9005883a 	mov	r2,r18
1120c1cc:	dfc00d17 	ldw	ra,52(sp)
1120c1d0:	df000c17 	ldw	fp,48(sp)
1120c1d4:	ddc00b17 	ldw	r23,44(sp)
1120c1d8:	dd800a17 	ldw	r22,40(sp)
1120c1dc:	dd400917 	ldw	r21,36(sp)
1120c1e0:	dd000817 	ldw	r20,32(sp)
1120c1e4:	dcc00717 	ldw	r19,28(sp)
1120c1e8:	dc800617 	ldw	r18,24(sp)
1120c1ec:	dc400517 	ldw	r17,20(sp)
1120c1f0:	dc000417 	ldw	r16,16(sp)
1120c1f4:	dec00e04 	addi	sp,sp,56
1120c1f8:	f800283a 	ret
1120c1fc:	2404b03a 	or	r2,r4,r16
1120c200:	2027883a 	mov	r19,r4
1120c204:	10003926 	beq	r2,zero,1120c2ec <__divdf3+0x2c0>
1120c208:	80012e26 	beq	r16,zero,1120c6c4 <__divdf3+0x698>
1120c20c:	8009883a 	mov	r4,r16
1120c210:	d9800315 	stw	r6,12(sp)
1120c214:	d9c00215 	stw	r7,8(sp)
1120c218:	120dd840 	call	1120dd84 <__clzsi2>
1120c21c:	d9800317 	ldw	r6,12(sp)
1120c220:	d9c00217 	ldw	r7,8(sp)
1120c224:	113ffd44 	addi	r4,r2,-11
1120c228:	00c00704 	movi	r3,28
1120c22c:	19012116 	blt	r3,r4,1120c6b4 <__divdf3+0x688>
1120c230:	00c00744 	movi	r3,29
1120c234:	147ffe04 	addi	r17,r2,-8
1120c238:	1907c83a 	sub	r3,r3,r4
1120c23c:	8460983a 	sll	r16,r16,r17
1120c240:	98c6d83a 	srl	r3,r19,r3
1120c244:	9c64983a 	sll	r18,r19,r17
1120c248:	1c20b03a 	or	r16,r3,r16
1120c24c:	1080fcc4 	addi	r2,r2,1011
1120c250:	00abc83a 	sub	r21,zero,r2
1120c254:	0027883a 	mov	r19,zero
1120c258:	0013883a 	mov	r9,zero
1120c25c:	003f9106 	br	1120c0a4 <__alt_data_end+0xffe8c0a4>
1120c260:	3446b03a 	or	r3,r6,r17
1120c264:	18001f1e 	bne	r3,zero,1120c2e4 <__divdf3+0x2b8>
1120c268:	0023883a 	mov	r17,zero
1120c26c:	0011883a 	mov	r8,zero
1120c270:	01c00084 	movi	r7,2
1120c274:	003f9d06 	br	1120c0ec <__alt_data_end+0xffe8c0ec>
1120c278:	3446b03a 	or	r3,r6,r17
1120c27c:	18001526 	beq	r3,zero,1120c2d4 <__divdf3+0x2a8>
1120c280:	88011b26 	beq	r17,zero,1120c6f0 <__divdf3+0x6c4>
1120c284:	8809883a 	mov	r4,r17
1120c288:	d9800315 	stw	r6,12(sp)
1120c28c:	da400115 	stw	r9,4(sp)
1120c290:	120dd840 	call	1120dd84 <__clzsi2>
1120c294:	d9800317 	ldw	r6,12(sp)
1120c298:	da400117 	ldw	r9,4(sp)
1120c29c:	113ffd44 	addi	r4,r2,-11
1120c2a0:	00c00704 	movi	r3,28
1120c2a4:	19010e16 	blt	r3,r4,1120c6e0 <__divdf3+0x6b4>
1120c2a8:	00c00744 	movi	r3,29
1120c2ac:	123ffe04 	addi	r8,r2,-8
1120c2b0:	1907c83a 	sub	r3,r3,r4
1120c2b4:	8a22983a 	sll	r17,r17,r8
1120c2b8:	30c6d83a 	srl	r3,r6,r3
1120c2bc:	3210983a 	sll	r8,r6,r8
1120c2c0:	1c62b03a 	or	r17,r3,r17
1120c2c4:	1080fcc4 	addi	r2,r2,1011
1120c2c8:	0085c83a 	sub	r2,zero,r2
1120c2cc:	000f883a 	mov	r7,zero
1120c2d0:	003f8606 	br	1120c0ec <__alt_data_end+0xffe8c0ec>
1120c2d4:	0023883a 	mov	r17,zero
1120c2d8:	0011883a 	mov	r8,zero
1120c2dc:	01c00044 	movi	r7,1
1120c2e0:	003f8206 	br	1120c0ec <__alt_data_end+0xffe8c0ec>
1120c2e4:	01c000c4 	movi	r7,3
1120c2e8:	003f8006 	br	1120c0ec <__alt_data_end+0xffe8c0ec>
1120c2ec:	04c00104 	movi	r19,4
1120c2f0:	0021883a 	mov	r16,zero
1120c2f4:	0025883a 	mov	r18,zero
1120c2f8:	02400044 	movi	r9,1
1120c2fc:	003f6906 	br	1120c0a4 <__alt_data_end+0xffe8c0a4>
1120c300:	04c00304 	movi	r19,12
1120c304:	024000c4 	movi	r9,3
1120c308:	003f6606 	br	1120c0a4 <__alt_data_end+0xffe8c0a4>
1120c30c:	01400434 	movhi	r5,16
1120c310:	0007883a 	mov	r3,zero
1120c314:	297fffc4 	addi	r5,r5,-1
1120c318:	04bfffc4 	movi	r18,-1
1120c31c:	0081ffc4 	movi	r2,2047
1120c320:	003fa106 	br	1120c1a8 <__alt_data_end+0xffe8c1a8>
1120c324:	00c00044 	movi	r3,1
1120c328:	1887c83a 	sub	r3,r3,r2
1120c32c:	01000e04 	movi	r4,56
1120c330:	20c1210e 	bge	r4,r3,1120c7b8 <__divdf3+0x78c>
1120c334:	98c0004c 	andi	r3,r19,1
1120c338:	0005883a 	mov	r2,zero
1120c33c:	000b883a 	mov	r5,zero
1120c340:	0025883a 	mov	r18,zero
1120c344:	003f9806 	br	1120c1a8 <__alt_data_end+0xffe8c1a8>
1120c348:	8c00fd36 	bltu	r17,r16,1120c740 <__divdf3+0x714>
1120c34c:	8440fb26 	beq	r16,r17,1120c73c <__divdf3+0x710>
1120c350:	8007883a 	mov	r3,r16
1120c354:	ad7fffc4 	addi	r21,r21,-1
1120c358:	0021883a 	mov	r16,zero
1120c35c:	4004d63a 	srli	r2,r8,24
1120c360:	8822923a 	slli	r17,r17,8
1120c364:	1809883a 	mov	r4,r3
1120c368:	402c923a 	slli	r22,r8,8
1120c36c:	88b8b03a 	or	fp,r17,r2
1120c370:	e028d43a 	srli	r20,fp,16
1120c374:	d8c00015 	stw	r3,0(sp)
1120c378:	e5ffffcc 	andi	r23,fp,65535
1120c37c:	a00b883a 	mov	r5,r20
1120c380:	12014380 	call	11201438 <__udivsi3>
1120c384:	d8c00017 	ldw	r3,0(sp)
1120c388:	a00b883a 	mov	r5,r20
1120c38c:	d8800315 	stw	r2,12(sp)
1120c390:	1809883a 	mov	r4,r3
1120c394:	120149c0 	call	1120149c <__umodsi3>
1120c398:	d9800317 	ldw	r6,12(sp)
1120c39c:	1006943a 	slli	r3,r2,16
1120c3a0:	9004d43a 	srli	r2,r18,16
1120c3a4:	b9a3383a 	mul	r17,r23,r6
1120c3a8:	10c4b03a 	or	r2,r2,r3
1120c3ac:	1440062e 	bgeu	r2,r17,1120c3c8 <__divdf3+0x39c>
1120c3b0:	1705883a 	add	r2,r2,fp
1120c3b4:	30ffffc4 	addi	r3,r6,-1
1120c3b8:	1700ee36 	bltu	r2,fp,1120c774 <__divdf3+0x748>
1120c3bc:	1440ed2e 	bgeu	r2,r17,1120c774 <__divdf3+0x748>
1120c3c0:	31bfff84 	addi	r6,r6,-2
1120c3c4:	1705883a 	add	r2,r2,fp
1120c3c8:	1463c83a 	sub	r17,r2,r17
1120c3cc:	a00b883a 	mov	r5,r20
1120c3d0:	8809883a 	mov	r4,r17
1120c3d4:	d9800315 	stw	r6,12(sp)
1120c3d8:	12014380 	call	11201438 <__udivsi3>
1120c3dc:	a00b883a 	mov	r5,r20
1120c3e0:	8809883a 	mov	r4,r17
1120c3e4:	d8800215 	stw	r2,8(sp)
1120c3e8:	120149c0 	call	1120149c <__umodsi3>
1120c3ec:	d9c00217 	ldw	r7,8(sp)
1120c3f0:	1004943a 	slli	r2,r2,16
1120c3f4:	94bfffcc 	andi	r18,r18,65535
1120c3f8:	b9d1383a 	mul	r8,r23,r7
1120c3fc:	90a4b03a 	or	r18,r18,r2
1120c400:	d9800317 	ldw	r6,12(sp)
1120c404:	9200062e 	bgeu	r18,r8,1120c420 <__divdf3+0x3f4>
1120c408:	9725883a 	add	r18,r18,fp
1120c40c:	38bfffc4 	addi	r2,r7,-1
1120c410:	9700d636 	bltu	r18,fp,1120c76c <__divdf3+0x740>
1120c414:	9200d52e 	bgeu	r18,r8,1120c76c <__divdf3+0x740>
1120c418:	39ffff84 	addi	r7,r7,-2
1120c41c:	9725883a 	add	r18,r18,fp
1120c420:	3004943a 	slli	r2,r6,16
1120c424:	b012d43a 	srli	r9,r22,16
1120c428:	b1bfffcc 	andi	r6,r22,65535
1120c42c:	11e2b03a 	or	r17,r2,r7
1120c430:	8806d43a 	srli	r3,r17,16
1120c434:	893fffcc 	andi	r4,r17,65535
1120c438:	218b383a 	mul	r5,r4,r6
1120c43c:	30c5383a 	mul	r2,r6,r3
1120c440:	2249383a 	mul	r4,r4,r9
1120c444:	280ed43a 	srli	r7,r5,16
1120c448:	9225c83a 	sub	r18,r18,r8
1120c44c:	2089883a 	add	r4,r4,r2
1120c450:	3909883a 	add	r4,r7,r4
1120c454:	1a47383a 	mul	r3,r3,r9
1120c458:	2080022e 	bgeu	r4,r2,1120c464 <__divdf3+0x438>
1120c45c:	00800074 	movhi	r2,1
1120c460:	1887883a 	add	r3,r3,r2
1120c464:	2004d43a 	srli	r2,r4,16
1120c468:	2008943a 	slli	r4,r4,16
1120c46c:	297fffcc 	andi	r5,r5,65535
1120c470:	10c7883a 	add	r3,r2,r3
1120c474:	2149883a 	add	r4,r4,r5
1120c478:	90c0a536 	bltu	r18,r3,1120c710 <__divdf3+0x6e4>
1120c47c:	90c0bf26 	beq	r18,r3,1120c77c <__divdf3+0x750>
1120c480:	90c7c83a 	sub	r3,r18,r3
1120c484:	810fc83a 	sub	r7,r16,r4
1120c488:	81e5803a 	cmpltu	r18,r16,r7
1120c48c:	1ca5c83a 	sub	r18,r3,r18
1120c490:	e480c126 	beq	fp,r18,1120c798 <__divdf3+0x76c>
1120c494:	a00b883a 	mov	r5,r20
1120c498:	9009883a 	mov	r4,r18
1120c49c:	d9800315 	stw	r6,12(sp)
1120c4a0:	d9c00215 	stw	r7,8(sp)
1120c4a4:	da400115 	stw	r9,4(sp)
1120c4a8:	12014380 	call	11201438 <__udivsi3>
1120c4ac:	a00b883a 	mov	r5,r20
1120c4b0:	9009883a 	mov	r4,r18
1120c4b4:	d8800015 	stw	r2,0(sp)
1120c4b8:	120149c0 	call	1120149c <__umodsi3>
1120c4bc:	d9c00217 	ldw	r7,8(sp)
1120c4c0:	da000017 	ldw	r8,0(sp)
1120c4c4:	1006943a 	slli	r3,r2,16
1120c4c8:	3804d43a 	srli	r2,r7,16
1120c4cc:	ba21383a 	mul	r16,r23,r8
1120c4d0:	d9800317 	ldw	r6,12(sp)
1120c4d4:	10c4b03a 	or	r2,r2,r3
1120c4d8:	da400117 	ldw	r9,4(sp)
1120c4dc:	1400062e 	bgeu	r2,r16,1120c4f8 <__divdf3+0x4cc>
1120c4e0:	1705883a 	add	r2,r2,fp
1120c4e4:	40ffffc4 	addi	r3,r8,-1
1120c4e8:	1700ad36 	bltu	r2,fp,1120c7a0 <__divdf3+0x774>
1120c4ec:	1400ac2e 	bgeu	r2,r16,1120c7a0 <__divdf3+0x774>
1120c4f0:	423fff84 	addi	r8,r8,-2
1120c4f4:	1705883a 	add	r2,r2,fp
1120c4f8:	1421c83a 	sub	r16,r2,r16
1120c4fc:	a00b883a 	mov	r5,r20
1120c500:	8009883a 	mov	r4,r16
1120c504:	d9800315 	stw	r6,12(sp)
1120c508:	d9c00215 	stw	r7,8(sp)
1120c50c:	da000015 	stw	r8,0(sp)
1120c510:	da400115 	stw	r9,4(sp)
1120c514:	12014380 	call	11201438 <__udivsi3>
1120c518:	8009883a 	mov	r4,r16
1120c51c:	a00b883a 	mov	r5,r20
1120c520:	1025883a 	mov	r18,r2
1120c524:	120149c0 	call	1120149c <__umodsi3>
1120c528:	d9c00217 	ldw	r7,8(sp)
1120c52c:	1004943a 	slli	r2,r2,16
1120c530:	bcaf383a 	mul	r23,r23,r18
1120c534:	393fffcc 	andi	r4,r7,65535
1120c538:	2088b03a 	or	r4,r4,r2
1120c53c:	d9800317 	ldw	r6,12(sp)
1120c540:	da000017 	ldw	r8,0(sp)
1120c544:	da400117 	ldw	r9,4(sp)
1120c548:	25c0062e 	bgeu	r4,r23,1120c564 <__divdf3+0x538>
1120c54c:	2709883a 	add	r4,r4,fp
1120c550:	90bfffc4 	addi	r2,r18,-1
1120c554:	27009436 	bltu	r4,fp,1120c7a8 <__divdf3+0x77c>
1120c558:	25c0932e 	bgeu	r4,r23,1120c7a8 <__divdf3+0x77c>
1120c55c:	94bfff84 	addi	r18,r18,-2
1120c560:	2709883a 	add	r4,r4,fp
1120c564:	4004943a 	slli	r2,r8,16
1120c568:	25efc83a 	sub	r23,r4,r23
1120c56c:	1490b03a 	or	r8,r2,r18
1120c570:	4008d43a 	srli	r4,r8,16
1120c574:	40ffffcc 	andi	r3,r8,65535
1120c578:	30c5383a 	mul	r2,r6,r3
1120c57c:	1a47383a 	mul	r3,r3,r9
1120c580:	310d383a 	mul	r6,r6,r4
1120c584:	100ad43a 	srli	r5,r2,16
1120c588:	4913383a 	mul	r9,r9,r4
1120c58c:	1987883a 	add	r3,r3,r6
1120c590:	28c7883a 	add	r3,r5,r3
1120c594:	1980022e 	bgeu	r3,r6,1120c5a0 <__divdf3+0x574>
1120c598:	01000074 	movhi	r4,1
1120c59c:	4913883a 	add	r9,r9,r4
1120c5a0:	1808d43a 	srli	r4,r3,16
1120c5a4:	1806943a 	slli	r3,r3,16
1120c5a8:	10bfffcc 	andi	r2,r2,65535
1120c5ac:	2253883a 	add	r9,r4,r9
1120c5b0:	1887883a 	add	r3,r3,r2
1120c5b4:	ba403836 	bltu	r23,r9,1120c698 <__divdf3+0x66c>
1120c5b8:	ba403626 	beq	r23,r9,1120c694 <__divdf3+0x668>
1120c5bc:	42000054 	ori	r8,r8,1
1120c5c0:	a880ffc4 	addi	r2,r21,1023
1120c5c4:	00bf570e 	bge	zero,r2,1120c324 <__alt_data_end+0xffe8c324>
1120c5c8:	40c001cc 	andi	r3,r8,7
1120c5cc:	18000726 	beq	r3,zero,1120c5ec <__divdf3+0x5c0>
1120c5d0:	40c003cc 	andi	r3,r8,15
1120c5d4:	01000104 	movi	r4,4
1120c5d8:	19000426 	beq	r3,r4,1120c5ec <__divdf3+0x5c0>
1120c5dc:	4107883a 	add	r3,r8,r4
1120c5e0:	1a11803a 	cmpltu	r8,r3,r8
1120c5e4:	8a23883a 	add	r17,r17,r8
1120c5e8:	1811883a 	mov	r8,r3
1120c5ec:	88c0402c 	andhi	r3,r17,256
1120c5f0:	18000426 	beq	r3,zero,1120c604 <__divdf3+0x5d8>
1120c5f4:	00ffc034 	movhi	r3,65280
1120c5f8:	18ffffc4 	addi	r3,r3,-1
1120c5fc:	a8810004 	addi	r2,r21,1024
1120c600:	88e2703a 	and	r17,r17,r3
1120c604:	00c1ff84 	movi	r3,2046
1120c608:	18bee316 	blt	r3,r2,1120c198 <__alt_data_end+0xffe8c198>
1120c60c:	8824977a 	slli	r18,r17,29
1120c610:	4010d0fa 	srli	r8,r8,3
1120c614:	8822927a 	slli	r17,r17,9
1120c618:	1081ffcc 	andi	r2,r2,2047
1120c61c:	9224b03a 	or	r18,r18,r8
1120c620:	880ad33a 	srli	r5,r17,12
1120c624:	98c0004c 	andi	r3,r19,1
1120c628:	003edf06 	br	1120c1a8 <__alt_data_end+0xffe8c1a8>
1120c62c:	8080022c 	andhi	r2,r16,8
1120c630:	10001226 	beq	r2,zero,1120c67c <__divdf3+0x650>
1120c634:	8880022c 	andhi	r2,r17,8
1120c638:	1000101e 	bne	r2,zero,1120c67c <__divdf3+0x650>
1120c63c:	00800434 	movhi	r2,16
1120c640:	89400234 	orhi	r5,r17,8
1120c644:	10bfffc4 	addi	r2,r2,-1
1120c648:	b007883a 	mov	r3,r22
1120c64c:	288a703a 	and	r5,r5,r2
1120c650:	4025883a 	mov	r18,r8
1120c654:	003f3106 	br	1120c31c <__alt_data_end+0xffe8c31c>
1120c658:	008000c4 	movi	r2,3
1120c65c:	3880a626 	beq	r7,r2,1120c8f8 <__divdf3+0x8cc>
1120c660:	00800044 	movi	r2,1
1120c664:	3880521e 	bne	r7,r2,1120c7b0 <__divdf3+0x784>
1120c668:	b807883a 	mov	r3,r23
1120c66c:	0005883a 	mov	r2,zero
1120c670:	000b883a 	mov	r5,zero
1120c674:	0025883a 	mov	r18,zero
1120c678:	003ecb06 	br	1120c1a8 <__alt_data_end+0xffe8c1a8>
1120c67c:	00800434 	movhi	r2,16
1120c680:	81400234 	orhi	r5,r16,8
1120c684:	10bfffc4 	addi	r2,r2,-1
1120c688:	a007883a 	mov	r3,r20
1120c68c:	288a703a 	and	r5,r5,r2
1120c690:	003f2206 	br	1120c31c <__alt_data_end+0xffe8c31c>
1120c694:	183fca26 	beq	r3,zero,1120c5c0 <__alt_data_end+0xffe8c5c0>
1120c698:	e5ef883a 	add	r23,fp,r23
1120c69c:	40bfffc4 	addi	r2,r8,-1
1120c6a0:	bf00392e 	bgeu	r23,fp,1120c788 <__divdf3+0x75c>
1120c6a4:	1011883a 	mov	r8,r2
1120c6a8:	ba7fc41e 	bne	r23,r9,1120c5bc <__alt_data_end+0xffe8c5bc>
1120c6ac:	b0ffc31e 	bne	r22,r3,1120c5bc <__alt_data_end+0xffe8c5bc>
1120c6b0:	003fc306 	br	1120c5c0 <__alt_data_end+0xffe8c5c0>
1120c6b4:	143ff604 	addi	r16,r2,-40
1120c6b8:	9c20983a 	sll	r16,r19,r16
1120c6bc:	0025883a 	mov	r18,zero
1120c6c0:	003ee206 	br	1120c24c <__alt_data_end+0xffe8c24c>
1120c6c4:	d9800315 	stw	r6,12(sp)
1120c6c8:	d9c00215 	stw	r7,8(sp)
1120c6cc:	120dd840 	call	1120dd84 <__clzsi2>
1120c6d0:	10800804 	addi	r2,r2,32
1120c6d4:	d9c00217 	ldw	r7,8(sp)
1120c6d8:	d9800317 	ldw	r6,12(sp)
1120c6dc:	003ed106 	br	1120c224 <__alt_data_end+0xffe8c224>
1120c6e0:	147ff604 	addi	r17,r2,-40
1120c6e4:	3462983a 	sll	r17,r6,r17
1120c6e8:	0011883a 	mov	r8,zero
1120c6ec:	003ef506 	br	1120c2c4 <__alt_data_end+0xffe8c2c4>
1120c6f0:	3009883a 	mov	r4,r6
1120c6f4:	d9800315 	stw	r6,12(sp)
1120c6f8:	da400115 	stw	r9,4(sp)
1120c6fc:	120dd840 	call	1120dd84 <__clzsi2>
1120c700:	10800804 	addi	r2,r2,32
1120c704:	da400117 	ldw	r9,4(sp)
1120c708:	d9800317 	ldw	r6,12(sp)
1120c70c:	003ee306 	br	1120c29c <__alt_data_end+0xffe8c29c>
1120c710:	85a1883a 	add	r16,r16,r22
1120c714:	8585803a 	cmpltu	r2,r16,r22
1120c718:	1705883a 	add	r2,r2,fp
1120c71c:	14a5883a 	add	r18,r2,r18
1120c720:	88bfffc4 	addi	r2,r17,-1
1120c724:	e4800c2e 	bgeu	fp,r18,1120c758 <__divdf3+0x72c>
1120c728:	90c03e36 	bltu	r18,r3,1120c824 <__divdf3+0x7f8>
1120c72c:	1c806926 	beq	r3,r18,1120c8d4 <__divdf3+0x8a8>
1120c730:	90c7c83a 	sub	r3,r18,r3
1120c734:	1023883a 	mov	r17,r2
1120c738:	003f5206 	br	1120c484 <__alt_data_end+0xffe8c484>
1120c73c:	923f0436 	bltu	r18,r8,1120c350 <__alt_data_end+0xffe8c350>
1120c740:	800897fa 	slli	r4,r16,31
1120c744:	9004d07a 	srli	r2,r18,1
1120c748:	8006d07a 	srli	r3,r16,1
1120c74c:	902097fa 	slli	r16,r18,31
1120c750:	20a4b03a 	or	r18,r4,r2
1120c754:	003f0106 	br	1120c35c <__alt_data_end+0xffe8c35c>
1120c758:	e4bff51e 	bne	fp,r18,1120c730 <__alt_data_end+0xffe8c730>
1120c75c:	85bff22e 	bgeu	r16,r22,1120c728 <__alt_data_end+0xffe8c728>
1120c760:	e0c7c83a 	sub	r3,fp,r3
1120c764:	1023883a 	mov	r17,r2
1120c768:	003f4606 	br	1120c484 <__alt_data_end+0xffe8c484>
1120c76c:	100f883a 	mov	r7,r2
1120c770:	003f2b06 	br	1120c420 <__alt_data_end+0xffe8c420>
1120c774:	180d883a 	mov	r6,r3
1120c778:	003f1306 	br	1120c3c8 <__alt_data_end+0xffe8c3c8>
1120c77c:	813fe436 	bltu	r16,r4,1120c710 <__alt_data_end+0xffe8c710>
1120c780:	0007883a 	mov	r3,zero
1120c784:	003f3f06 	br	1120c484 <__alt_data_end+0xffe8c484>
1120c788:	ba402c36 	bltu	r23,r9,1120c83c <__divdf3+0x810>
1120c78c:	4dc05426 	beq	r9,r23,1120c8e0 <__divdf3+0x8b4>
1120c790:	1011883a 	mov	r8,r2
1120c794:	003f8906 	br	1120c5bc <__alt_data_end+0xffe8c5bc>
1120c798:	023fffc4 	movi	r8,-1
1120c79c:	003f8806 	br	1120c5c0 <__alt_data_end+0xffe8c5c0>
1120c7a0:	1811883a 	mov	r8,r3
1120c7a4:	003f5406 	br	1120c4f8 <__alt_data_end+0xffe8c4f8>
1120c7a8:	1025883a 	mov	r18,r2
1120c7ac:	003f6d06 	br	1120c564 <__alt_data_end+0xffe8c564>
1120c7b0:	b827883a 	mov	r19,r23
1120c7b4:	003f8206 	br	1120c5c0 <__alt_data_end+0xffe8c5c0>
1120c7b8:	010007c4 	movi	r4,31
1120c7bc:	20c02616 	blt	r4,r3,1120c858 <__divdf3+0x82c>
1120c7c0:	00800804 	movi	r2,32
1120c7c4:	10c5c83a 	sub	r2,r2,r3
1120c7c8:	888a983a 	sll	r5,r17,r2
1120c7cc:	40c8d83a 	srl	r4,r8,r3
1120c7d0:	4084983a 	sll	r2,r8,r2
1120c7d4:	88e2d83a 	srl	r17,r17,r3
1120c7d8:	2906b03a 	or	r3,r5,r4
1120c7dc:	1004c03a 	cmpne	r2,r2,zero
1120c7e0:	1886b03a 	or	r3,r3,r2
1120c7e4:	188001cc 	andi	r2,r3,7
1120c7e8:	10000726 	beq	r2,zero,1120c808 <__divdf3+0x7dc>
1120c7ec:	188003cc 	andi	r2,r3,15
1120c7f0:	01000104 	movi	r4,4
1120c7f4:	11000426 	beq	r2,r4,1120c808 <__divdf3+0x7dc>
1120c7f8:	1805883a 	mov	r2,r3
1120c7fc:	10c00104 	addi	r3,r2,4
1120c800:	1885803a 	cmpltu	r2,r3,r2
1120c804:	88a3883a 	add	r17,r17,r2
1120c808:	8880202c 	andhi	r2,r17,128
1120c80c:	10002726 	beq	r2,zero,1120c8ac <__divdf3+0x880>
1120c810:	98c0004c 	andi	r3,r19,1
1120c814:	00800044 	movi	r2,1
1120c818:	000b883a 	mov	r5,zero
1120c81c:	0025883a 	mov	r18,zero
1120c820:	003e6106 	br	1120c1a8 <__alt_data_end+0xffe8c1a8>
1120c824:	85a1883a 	add	r16,r16,r22
1120c828:	8585803a 	cmpltu	r2,r16,r22
1120c82c:	1705883a 	add	r2,r2,fp
1120c830:	14a5883a 	add	r18,r2,r18
1120c834:	8c7fff84 	addi	r17,r17,-2
1120c838:	003f1106 	br	1120c480 <__alt_data_end+0xffe8c480>
1120c83c:	b589883a 	add	r4,r22,r22
1120c840:	25ad803a 	cmpltu	r22,r4,r22
1120c844:	b739883a 	add	fp,r22,fp
1120c848:	40bfff84 	addi	r2,r8,-2
1120c84c:	bf2f883a 	add	r23,r23,fp
1120c850:	202d883a 	mov	r22,r4
1120c854:	003f9306 	br	1120c6a4 <__alt_data_end+0xffe8c6a4>
1120c858:	013ff844 	movi	r4,-31
1120c85c:	2085c83a 	sub	r2,r4,r2
1120c860:	8888d83a 	srl	r4,r17,r2
1120c864:	00800804 	movi	r2,32
1120c868:	18802126 	beq	r3,r2,1120c8f0 <__divdf3+0x8c4>
1120c86c:	00801004 	movi	r2,64
1120c870:	10c5c83a 	sub	r2,r2,r3
1120c874:	8884983a 	sll	r2,r17,r2
1120c878:	1204b03a 	or	r2,r2,r8
1120c87c:	1004c03a 	cmpne	r2,r2,zero
1120c880:	2084b03a 	or	r2,r4,r2
1120c884:	144001cc 	andi	r17,r2,7
1120c888:	88000d1e 	bne	r17,zero,1120c8c0 <__divdf3+0x894>
1120c88c:	000b883a 	mov	r5,zero
1120c890:	1024d0fa 	srli	r18,r2,3
1120c894:	98c0004c 	andi	r3,r19,1
1120c898:	0005883a 	mov	r2,zero
1120c89c:	9464b03a 	or	r18,r18,r17
1120c8a0:	003e4106 	br	1120c1a8 <__alt_data_end+0xffe8c1a8>
1120c8a4:	1007883a 	mov	r3,r2
1120c8a8:	0023883a 	mov	r17,zero
1120c8ac:	880a927a 	slli	r5,r17,9
1120c8b0:	1805883a 	mov	r2,r3
1120c8b4:	8822977a 	slli	r17,r17,29
1120c8b8:	280ad33a 	srli	r5,r5,12
1120c8bc:	003ff406 	br	1120c890 <__alt_data_end+0xffe8c890>
1120c8c0:	10c003cc 	andi	r3,r2,15
1120c8c4:	01000104 	movi	r4,4
1120c8c8:	193ff626 	beq	r3,r4,1120c8a4 <__alt_data_end+0xffe8c8a4>
1120c8cc:	0023883a 	mov	r17,zero
1120c8d0:	003fca06 	br	1120c7fc <__alt_data_end+0xffe8c7fc>
1120c8d4:	813fd336 	bltu	r16,r4,1120c824 <__alt_data_end+0xffe8c824>
1120c8d8:	1023883a 	mov	r17,r2
1120c8dc:	003fa806 	br	1120c780 <__alt_data_end+0xffe8c780>
1120c8e0:	b0ffd636 	bltu	r22,r3,1120c83c <__alt_data_end+0xffe8c83c>
1120c8e4:	1011883a 	mov	r8,r2
1120c8e8:	b0ff341e 	bne	r22,r3,1120c5bc <__alt_data_end+0xffe8c5bc>
1120c8ec:	003f3406 	br	1120c5c0 <__alt_data_end+0xffe8c5c0>
1120c8f0:	0005883a 	mov	r2,zero
1120c8f4:	003fe006 	br	1120c878 <__alt_data_end+0xffe8c878>
1120c8f8:	00800434 	movhi	r2,16
1120c8fc:	89400234 	orhi	r5,r17,8
1120c900:	10bfffc4 	addi	r2,r2,-1
1120c904:	b807883a 	mov	r3,r23
1120c908:	288a703a 	and	r5,r5,r2
1120c90c:	4025883a 	mov	r18,r8
1120c910:	003e8206 	br	1120c31c <__alt_data_end+0xffe8c31c>

1120c914 <__eqdf2>:
1120c914:	2804d53a 	srli	r2,r5,20
1120c918:	3806d53a 	srli	r3,r7,20
1120c91c:	02000434 	movhi	r8,16
1120c920:	423fffc4 	addi	r8,r8,-1
1120c924:	1081ffcc 	andi	r2,r2,2047
1120c928:	0281ffc4 	movi	r10,2047
1120c92c:	2a12703a 	and	r9,r5,r8
1120c930:	18c1ffcc 	andi	r3,r3,2047
1120c934:	3a10703a 	and	r8,r7,r8
1120c938:	280ad7fa 	srli	r5,r5,31
1120c93c:	380ed7fa 	srli	r7,r7,31
1120c940:	12801026 	beq	r2,r10,1120c984 <__eqdf2+0x70>
1120c944:	0281ffc4 	movi	r10,2047
1120c948:	1a800a26 	beq	r3,r10,1120c974 <__eqdf2+0x60>
1120c94c:	10c00226 	beq	r2,r3,1120c958 <__eqdf2+0x44>
1120c950:	00800044 	movi	r2,1
1120c954:	f800283a 	ret
1120c958:	4a3ffd1e 	bne	r9,r8,1120c950 <__alt_data_end+0xffe8c950>
1120c95c:	21bffc1e 	bne	r4,r6,1120c950 <__alt_data_end+0xffe8c950>
1120c960:	29c00c26 	beq	r5,r7,1120c994 <__eqdf2+0x80>
1120c964:	103ffa1e 	bne	r2,zero,1120c950 <__alt_data_end+0xffe8c950>
1120c968:	2244b03a 	or	r2,r4,r9
1120c96c:	1004c03a 	cmpne	r2,r2,zero
1120c970:	f800283a 	ret
1120c974:	3214b03a 	or	r10,r6,r8
1120c978:	503ff426 	beq	r10,zero,1120c94c <__alt_data_end+0xffe8c94c>
1120c97c:	00800044 	movi	r2,1
1120c980:	f800283a 	ret
1120c984:	2254b03a 	or	r10,r4,r9
1120c988:	503fee26 	beq	r10,zero,1120c944 <__alt_data_end+0xffe8c944>
1120c98c:	00800044 	movi	r2,1
1120c990:	f800283a 	ret
1120c994:	0005883a 	mov	r2,zero
1120c998:	f800283a 	ret

1120c99c <__gedf2>:
1120c99c:	2804d53a 	srli	r2,r5,20
1120c9a0:	3806d53a 	srli	r3,r7,20
1120c9a4:	02000434 	movhi	r8,16
1120c9a8:	423fffc4 	addi	r8,r8,-1
1120c9ac:	1081ffcc 	andi	r2,r2,2047
1120c9b0:	0241ffc4 	movi	r9,2047
1120c9b4:	2a14703a 	and	r10,r5,r8
1120c9b8:	18c1ffcc 	andi	r3,r3,2047
1120c9bc:	3a10703a 	and	r8,r7,r8
1120c9c0:	280ad7fa 	srli	r5,r5,31
1120c9c4:	380ed7fa 	srli	r7,r7,31
1120c9c8:	12401d26 	beq	r2,r9,1120ca40 <__gedf2+0xa4>
1120c9cc:	0241ffc4 	movi	r9,2047
1120c9d0:	1a401226 	beq	r3,r9,1120ca1c <__gedf2+0x80>
1120c9d4:	1000081e 	bne	r2,zero,1120c9f8 <__gedf2+0x5c>
1120c9d8:	2296b03a 	or	r11,r4,r10
1120c9dc:	5813003a 	cmpeq	r9,r11,zero
1120c9e0:	1800091e 	bne	r3,zero,1120ca08 <__gedf2+0x6c>
1120c9e4:	3218b03a 	or	r12,r6,r8
1120c9e8:	6000071e 	bne	r12,zero,1120ca08 <__gedf2+0x6c>
1120c9ec:	0005883a 	mov	r2,zero
1120c9f0:	5800101e 	bne	r11,zero,1120ca34 <__gedf2+0x98>
1120c9f4:	f800283a 	ret
1120c9f8:	18000c1e 	bne	r3,zero,1120ca2c <__gedf2+0x90>
1120c9fc:	3212b03a 	or	r9,r6,r8
1120ca00:	48000c26 	beq	r9,zero,1120ca34 <__gedf2+0x98>
1120ca04:	0013883a 	mov	r9,zero
1120ca08:	39c03fcc 	andi	r7,r7,255
1120ca0c:	48000826 	beq	r9,zero,1120ca30 <__gedf2+0x94>
1120ca10:	38000926 	beq	r7,zero,1120ca38 <__gedf2+0x9c>
1120ca14:	00800044 	movi	r2,1
1120ca18:	f800283a 	ret
1120ca1c:	3212b03a 	or	r9,r6,r8
1120ca20:	483fec26 	beq	r9,zero,1120c9d4 <__alt_data_end+0xffe8c9d4>
1120ca24:	00bfff84 	movi	r2,-2
1120ca28:	f800283a 	ret
1120ca2c:	39c03fcc 	andi	r7,r7,255
1120ca30:	29c00626 	beq	r5,r7,1120ca4c <__gedf2+0xb0>
1120ca34:	283ff726 	beq	r5,zero,1120ca14 <__alt_data_end+0xffe8ca14>
1120ca38:	00bfffc4 	movi	r2,-1
1120ca3c:	f800283a 	ret
1120ca40:	2292b03a 	or	r9,r4,r10
1120ca44:	483fe126 	beq	r9,zero,1120c9cc <__alt_data_end+0xffe8c9cc>
1120ca48:	003ff606 	br	1120ca24 <__alt_data_end+0xffe8ca24>
1120ca4c:	18bff916 	blt	r3,r2,1120ca34 <__alt_data_end+0xffe8ca34>
1120ca50:	10c00316 	blt	r2,r3,1120ca60 <__gedf2+0xc4>
1120ca54:	42bff736 	bltu	r8,r10,1120ca34 <__alt_data_end+0xffe8ca34>
1120ca58:	52000326 	beq	r10,r8,1120ca68 <__gedf2+0xcc>
1120ca5c:	5200042e 	bgeu	r10,r8,1120ca70 <__gedf2+0xd4>
1120ca60:	283fec1e 	bne	r5,zero,1120ca14 <__alt_data_end+0xffe8ca14>
1120ca64:	003ff406 	br	1120ca38 <__alt_data_end+0xffe8ca38>
1120ca68:	313ff236 	bltu	r6,r4,1120ca34 <__alt_data_end+0xffe8ca34>
1120ca6c:	21bffc36 	bltu	r4,r6,1120ca60 <__alt_data_end+0xffe8ca60>
1120ca70:	0005883a 	mov	r2,zero
1120ca74:	f800283a 	ret

1120ca78 <__ledf2>:
1120ca78:	2804d53a 	srli	r2,r5,20
1120ca7c:	3810d53a 	srli	r8,r7,20
1120ca80:	00c00434 	movhi	r3,16
1120ca84:	18ffffc4 	addi	r3,r3,-1
1120ca88:	1081ffcc 	andi	r2,r2,2047
1120ca8c:	0241ffc4 	movi	r9,2047
1120ca90:	28d4703a 	and	r10,r5,r3
1120ca94:	4201ffcc 	andi	r8,r8,2047
1120ca98:	38c6703a 	and	r3,r7,r3
1120ca9c:	280ad7fa 	srli	r5,r5,31
1120caa0:	380ed7fa 	srli	r7,r7,31
1120caa4:	12401f26 	beq	r2,r9,1120cb24 <__ledf2+0xac>
1120caa8:	0241ffc4 	movi	r9,2047
1120caac:	42401426 	beq	r8,r9,1120cb00 <__ledf2+0x88>
1120cab0:	1000091e 	bne	r2,zero,1120cad8 <__ledf2+0x60>
1120cab4:	2296b03a 	or	r11,r4,r10
1120cab8:	5813003a 	cmpeq	r9,r11,zero
1120cabc:	29403fcc 	andi	r5,r5,255
1120cac0:	40000a1e 	bne	r8,zero,1120caec <__ledf2+0x74>
1120cac4:	30d8b03a 	or	r12,r6,r3
1120cac8:	6000081e 	bne	r12,zero,1120caec <__ledf2+0x74>
1120cacc:	0005883a 	mov	r2,zero
1120cad0:	5800111e 	bne	r11,zero,1120cb18 <__ledf2+0xa0>
1120cad4:	f800283a 	ret
1120cad8:	29403fcc 	andi	r5,r5,255
1120cadc:	40000c1e 	bne	r8,zero,1120cb10 <__ledf2+0x98>
1120cae0:	30d2b03a 	or	r9,r6,r3
1120cae4:	48000c26 	beq	r9,zero,1120cb18 <__ledf2+0xa0>
1120cae8:	0013883a 	mov	r9,zero
1120caec:	39c03fcc 	andi	r7,r7,255
1120caf0:	48000826 	beq	r9,zero,1120cb14 <__ledf2+0x9c>
1120caf4:	38001126 	beq	r7,zero,1120cb3c <__ledf2+0xc4>
1120caf8:	00800044 	movi	r2,1
1120cafc:	f800283a 	ret
1120cb00:	30d2b03a 	or	r9,r6,r3
1120cb04:	483fea26 	beq	r9,zero,1120cab0 <__alt_data_end+0xffe8cab0>
1120cb08:	00800084 	movi	r2,2
1120cb0c:	f800283a 	ret
1120cb10:	39c03fcc 	andi	r7,r7,255
1120cb14:	39400726 	beq	r7,r5,1120cb34 <__ledf2+0xbc>
1120cb18:	2800081e 	bne	r5,zero,1120cb3c <__ledf2+0xc4>
1120cb1c:	00800044 	movi	r2,1
1120cb20:	f800283a 	ret
1120cb24:	2292b03a 	or	r9,r4,r10
1120cb28:	483fdf26 	beq	r9,zero,1120caa8 <__alt_data_end+0xffe8caa8>
1120cb2c:	00800084 	movi	r2,2
1120cb30:	f800283a 	ret
1120cb34:	4080030e 	bge	r8,r2,1120cb44 <__ledf2+0xcc>
1120cb38:	383fef26 	beq	r7,zero,1120caf8 <__alt_data_end+0xffe8caf8>
1120cb3c:	00bfffc4 	movi	r2,-1
1120cb40:	f800283a 	ret
1120cb44:	123feb16 	blt	r2,r8,1120caf4 <__alt_data_end+0xffe8caf4>
1120cb48:	1abff336 	bltu	r3,r10,1120cb18 <__alt_data_end+0xffe8cb18>
1120cb4c:	50c00326 	beq	r10,r3,1120cb5c <__ledf2+0xe4>
1120cb50:	50c0042e 	bgeu	r10,r3,1120cb64 <__ledf2+0xec>
1120cb54:	283fe81e 	bne	r5,zero,1120caf8 <__alt_data_end+0xffe8caf8>
1120cb58:	003ff806 	br	1120cb3c <__alt_data_end+0xffe8cb3c>
1120cb5c:	313fee36 	bltu	r6,r4,1120cb18 <__alt_data_end+0xffe8cb18>
1120cb60:	21bffc36 	bltu	r4,r6,1120cb54 <__alt_data_end+0xffe8cb54>
1120cb64:	0005883a 	mov	r2,zero
1120cb68:	f800283a 	ret

1120cb6c <__muldf3>:
1120cb6c:	defff304 	addi	sp,sp,-52
1120cb70:	2804d53a 	srli	r2,r5,20
1120cb74:	dd800915 	stw	r22,36(sp)
1120cb78:	282cd7fa 	srli	r22,r5,31
1120cb7c:	dc000315 	stw	r16,12(sp)
1120cb80:	04000434 	movhi	r16,16
1120cb84:	dd400815 	stw	r21,32(sp)
1120cb88:	dc800515 	stw	r18,20(sp)
1120cb8c:	843fffc4 	addi	r16,r16,-1
1120cb90:	dfc00c15 	stw	ra,48(sp)
1120cb94:	df000b15 	stw	fp,44(sp)
1120cb98:	ddc00a15 	stw	r23,40(sp)
1120cb9c:	dd000715 	stw	r20,28(sp)
1120cba0:	dcc00615 	stw	r19,24(sp)
1120cba4:	dc400415 	stw	r17,16(sp)
1120cba8:	1481ffcc 	andi	r18,r2,2047
1120cbac:	2c20703a 	and	r16,r5,r16
1120cbb0:	b02b883a 	mov	r21,r22
1120cbb4:	b2403fcc 	andi	r9,r22,255
1120cbb8:	90006026 	beq	r18,zero,1120cd3c <__muldf3+0x1d0>
1120cbbc:	0081ffc4 	movi	r2,2047
1120cbc0:	2029883a 	mov	r20,r4
1120cbc4:	90803626 	beq	r18,r2,1120cca0 <__muldf3+0x134>
1120cbc8:	80800434 	orhi	r2,r16,16
1120cbcc:	100490fa 	slli	r2,r2,3
1120cbd0:	2020d77a 	srli	r16,r4,29
1120cbd4:	202890fa 	slli	r20,r4,3
1120cbd8:	94bf0044 	addi	r18,r18,-1023
1120cbdc:	80a0b03a 	or	r16,r16,r2
1120cbe0:	0027883a 	mov	r19,zero
1120cbe4:	0039883a 	mov	fp,zero
1120cbe8:	3804d53a 	srli	r2,r7,20
1120cbec:	382ed7fa 	srli	r23,r7,31
1120cbf0:	04400434 	movhi	r17,16
1120cbf4:	8c7fffc4 	addi	r17,r17,-1
1120cbf8:	1081ffcc 	andi	r2,r2,2047
1120cbfc:	3011883a 	mov	r8,r6
1120cc00:	3c62703a 	and	r17,r7,r17
1120cc04:	ba803fcc 	andi	r10,r23,255
1120cc08:	10006d26 	beq	r2,zero,1120cdc0 <__muldf3+0x254>
1120cc0c:	00c1ffc4 	movi	r3,2047
1120cc10:	10c06526 	beq	r2,r3,1120cda8 <__muldf3+0x23c>
1120cc14:	88c00434 	orhi	r3,r17,16
1120cc18:	180690fa 	slli	r3,r3,3
1120cc1c:	3022d77a 	srli	r17,r6,29
1120cc20:	301090fa 	slli	r8,r6,3
1120cc24:	10bf0044 	addi	r2,r2,-1023
1120cc28:	88e2b03a 	or	r17,r17,r3
1120cc2c:	000b883a 	mov	r5,zero
1120cc30:	9085883a 	add	r2,r18,r2
1120cc34:	2cc8b03a 	or	r4,r5,r19
1120cc38:	00c003c4 	movi	r3,15
1120cc3c:	bdacf03a 	xor	r22,r23,r22
1120cc40:	12c00044 	addi	r11,r2,1
1120cc44:	19009936 	bltu	r3,r4,1120ceac <__muldf3+0x340>
1120cc48:	200890ba 	slli	r4,r4,2
1120cc4c:	00c44874 	movhi	r3,4385
1120cc50:	18f31804 	addi	r3,r3,-13216
1120cc54:	20c9883a 	add	r4,r4,r3
1120cc58:	20c00017 	ldw	r3,0(r4)
1120cc5c:	1800683a 	jmp	r3
1120cc60:	1120ceac 	andhi	r4,r2,33594
1120cc64:	1120ccc0 	call	11120ccc <__reset+0xcfe0ccc>
1120cc68:	1120ccc0 	call	11120ccc <__reset+0xcfe0ccc>
1120cc6c:	1120ccbc 	xorhi	r4,r2,33586
1120cc70:	1120ce88 	cmpgei	r4,r2,-31942
1120cc74:	1120ce88 	cmpgei	r4,r2,-31942
1120cc78:	1120ce70 	cmpltui	r4,r2,33593
1120cc7c:	1120ccbc 	xorhi	r4,r2,33586
1120cc80:	1120ce88 	cmpgei	r4,r2,-31942
1120cc84:	1120ce70 	cmpltui	r4,r2,33593
1120cc88:	1120ce88 	cmpgei	r4,r2,-31942
1120cc8c:	1120ccbc 	xorhi	r4,r2,33586
1120cc90:	1120ce98 	cmpnei	r4,r2,-31942
1120cc94:	1120ce98 	cmpnei	r4,r2,-31942
1120cc98:	1120ce98 	cmpnei	r4,r2,-31942
1120cc9c:	1120d0b4 	orhi	r4,r2,33602
1120cca0:	2404b03a 	or	r2,r4,r16
1120cca4:	10006f1e 	bne	r2,zero,1120ce64 <__muldf3+0x2f8>
1120cca8:	04c00204 	movi	r19,8
1120ccac:	0021883a 	mov	r16,zero
1120ccb0:	0029883a 	mov	r20,zero
1120ccb4:	07000084 	movi	fp,2
1120ccb8:	003fcb06 	br	1120cbe8 <__alt_data_end+0xffe8cbe8>
1120ccbc:	502d883a 	mov	r22,r10
1120ccc0:	00800084 	movi	r2,2
1120ccc4:	28805726 	beq	r5,r2,1120ce24 <__muldf3+0x2b8>
1120ccc8:	008000c4 	movi	r2,3
1120cccc:	28816626 	beq	r5,r2,1120d268 <__muldf3+0x6fc>
1120ccd0:	00800044 	movi	r2,1
1120ccd4:	2881411e 	bne	r5,r2,1120d1dc <__muldf3+0x670>
1120ccd8:	b02b883a 	mov	r21,r22
1120ccdc:	0005883a 	mov	r2,zero
1120cce0:	000b883a 	mov	r5,zero
1120cce4:	0029883a 	mov	r20,zero
1120cce8:	1004953a 	slli	r2,r2,20
1120ccec:	a8c03fcc 	andi	r3,r21,255
1120ccf0:	04400434 	movhi	r17,16
1120ccf4:	8c7fffc4 	addi	r17,r17,-1
1120ccf8:	180697fa 	slli	r3,r3,31
1120ccfc:	2c4a703a 	and	r5,r5,r17
1120cd00:	288ab03a 	or	r5,r5,r2
1120cd04:	28c6b03a 	or	r3,r5,r3
1120cd08:	a005883a 	mov	r2,r20
1120cd0c:	dfc00c17 	ldw	ra,48(sp)
1120cd10:	df000b17 	ldw	fp,44(sp)
1120cd14:	ddc00a17 	ldw	r23,40(sp)
1120cd18:	dd800917 	ldw	r22,36(sp)
1120cd1c:	dd400817 	ldw	r21,32(sp)
1120cd20:	dd000717 	ldw	r20,28(sp)
1120cd24:	dcc00617 	ldw	r19,24(sp)
1120cd28:	dc800517 	ldw	r18,20(sp)
1120cd2c:	dc400417 	ldw	r17,16(sp)
1120cd30:	dc000317 	ldw	r16,12(sp)
1120cd34:	dec00d04 	addi	sp,sp,52
1120cd38:	f800283a 	ret
1120cd3c:	2404b03a 	or	r2,r4,r16
1120cd40:	2027883a 	mov	r19,r4
1120cd44:	10004226 	beq	r2,zero,1120ce50 <__muldf3+0x2e4>
1120cd48:	8000fc26 	beq	r16,zero,1120d13c <__muldf3+0x5d0>
1120cd4c:	8009883a 	mov	r4,r16
1120cd50:	d9800215 	stw	r6,8(sp)
1120cd54:	d9c00015 	stw	r7,0(sp)
1120cd58:	da400115 	stw	r9,4(sp)
1120cd5c:	120dd840 	call	1120dd84 <__clzsi2>
1120cd60:	d9800217 	ldw	r6,8(sp)
1120cd64:	d9c00017 	ldw	r7,0(sp)
1120cd68:	da400117 	ldw	r9,4(sp)
1120cd6c:	113ffd44 	addi	r4,r2,-11
1120cd70:	00c00704 	movi	r3,28
1120cd74:	1900ed16 	blt	r3,r4,1120d12c <__muldf3+0x5c0>
1120cd78:	00c00744 	movi	r3,29
1120cd7c:	147ffe04 	addi	r17,r2,-8
1120cd80:	1907c83a 	sub	r3,r3,r4
1120cd84:	8460983a 	sll	r16,r16,r17
1120cd88:	98c6d83a 	srl	r3,r19,r3
1120cd8c:	9c68983a 	sll	r20,r19,r17
1120cd90:	1c20b03a 	or	r16,r3,r16
1120cd94:	1080fcc4 	addi	r2,r2,1011
1120cd98:	00a5c83a 	sub	r18,zero,r2
1120cd9c:	0027883a 	mov	r19,zero
1120cda0:	0039883a 	mov	fp,zero
1120cda4:	003f9006 	br	1120cbe8 <__alt_data_end+0xffe8cbe8>
1120cda8:	3446b03a 	or	r3,r6,r17
1120cdac:	1800261e 	bne	r3,zero,1120ce48 <__muldf3+0x2dc>
1120cdb0:	0023883a 	mov	r17,zero
1120cdb4:	0011883a 	mov	r8,zero
1120cdb8:	01400084 	movi	r5,2
1120cdbc:	003f9c06 	br	1120cc30 <__alt_data_end+0xffe8cc30>
1120cdc0:	3446b03a 	or	r3,r6,r17
1120cdc4:	18001c26 	beq	r3,zero,1120ce38 <__muldf3+0x2cc>
1120cdc8:	8800ce26 	beq	r17,zero,1120d104 <__muldf3+0x598>
1120cdcc:	8809883a 	mov	r4,r17
1120cdd0:	d9800215 	stw	r6,8(sp)
1120cdd4:	da400115 	stw	r9,4(sp)
1120cdd8:	da800015 	stw	r10,0(sp)
1120cddc:	120dd840 	call	1120dd84 <__clzsi2>
1120cde0:	d9800217 	ldw	r6,8(sp)
1120cde4:	da400117 	ldw	r9,4(sp)
1120cde8:	da800017 	ldw	r10,0(sp)
1120cdec:	113ffd44 	addi	r4,r2,-11
1120cdf0:	00c00704 	movi	r3,28
1120cdf4:	1900bf16 	blt	r3,r4,1120d0f4 <__muldf3+0x588>
1120cdf8:	00c00744 	movi	r3,29
1120cdfc:	123ffe04 	addi	r8,r2,-8
1120ce00:	1907c83a 	sub	r3,r3,r4
1120ce04:	8a22983a 	sll	r17,r17,r8
1120ce08:	30c6d83a 	srl	r3,r6,r3
1120ce0c:	3210983a 	sll	r8,r6,r8
1120ce10:	1c62b03a 	or	r17,r3,r17
1120ce14:	1080fcc4 	addi	r2,r2,1011
1120ce18:	0085c83a 	sub	r2,zero,r2
1120ce1c:	000b883a 	mov	r5,zero
1120ce20:	003f8306 	br	1120cc30 <__alt_data_end+0xffe8cc30>
1120ce24:	b02b883a 	mov	r21,r22
1120ce28:	0081ffc4 	movi	r2,2047
1120ce2c:	000b883a 	mov	r5,zero
1120ce30:	0029883a 	mov	r20,zero
1120ce34:	003fac06 	br	1120cce8 <__alt_data_end+0xffe8cce8>
1120ce38:	0023883a 	mov	r17,zero
1120ce3c:	0011883a 	mov	r8,zero
1120ce40:	01400044 	movi	r5,1
1120ce44:	003f7a06 	br	1120cc30 <__alt_data_end+0xffe8cc30>
1120ce48:	014000c4 	movi	r5,3
1120ce4c:	003f7806 	br	1120cc30 <__alt_data_end+0xffe8cc30>
1120ce50:	04c00104 	movi	r19,4
1120ce54:	0021883a 	mov	r16,zero
1120ce58:	0029883a 	mov	r20,zero
1120ce5c:	07000044 	movi	fp,1
1120ce60:	003f6106 	br	1120cbe8 <__alt_data_end+0xffe8cbe8>
1120ce64:	04c00304 	movi	r19,12
1120ce68:	070000c4 	movi	fp,3
1120ce6c:	003f5e06 	br	1120cbe8 <__alt_data_end+0xffe8cbe8>
1120ce70:	01400434 	movhi	r5,16
1120ce74:	002b883a 	mov	r21,zero
1120ce78:	297fffc4 	addi	r5,r5,-1
1120ce7c:	053fffc4 	movi	r20,-1
1120ce80:	0081ffc4 	movi	r2,2047
1120ce84:	003f9806 	br	1120cce8 <__alt_data_end+0xffe8cce8>
1120ce88:	8023883a 	mov	r17,r16
1120ce8c:	a011883a 	mov	r8,r20
1120ce90:	e00b883a 	mov	r5,fp
1120ce94:	003f8a06 	br	1120ccc0 <__alt_data_end+0xffe8ccc0>
1120ce98:	8023883a 	mov	r17,r16
1120ce9c:	a011883a 	mov	r8,r20
1120cea0:	482d883a 	mov	r22,r9
1120cea4:	e00b883a 	mov	r5,fp
1120cea8:	003f8506 	br	1120ccc0 <__alt_data_end+0xffe8ccc0>
1120ceac:	a00ad43a 	srli	r5,r20,16
1120ceb0:	401ad43a 	srli	r13,r8,16
1120ceb4:	a53fffcc 	andi	r20,r20,65535
1120ceb8:	423fffcc 	andi	r8,r8,65535
1120cebc:	4519383a 	mul	r12,r8,r20
1120cec0:	4147383a 	mul	r3,r8,r5
1120cec4:	6d09383a 	mul	r4,r13,r20
1120cec8:	600cd43a 	srli	r6,r12,16
1120cecc:	2b5d383a 	mul	r14,r5,r13
1120ced0:	20c9883a 	add	r4,r4,r3
1120ced4:	310d883a 	add	r6,r6,r4
1120ced8:	30c0022e 	bgeu	r6,r3,1120cee4 <__muldf3+0x378>
1120cedc:	00c00074 	movhi	r3,1
1120cee0:	70dd883a 	add	r14,r14,r3
1120cee4:	8826d43a 	srli	r19,r17,16
1120cee8:	8bffffcc 	andi	r15,r17,65535
1120ceec:	7d23383a 	mul	r17,r15,r20
1120cef0:	7949383a 	mul	r4,r15,r5
1120cef4:	9d29383a 	mul	r20,r19,r20
1120cef8:	8814d43a 	srli	r10,r17,16
1120cefc:	3012943a 	slli	r9,r6,16
1120cf00:	a129883a 	add	r20,r20,r4
1120cf04:	633fffcc 	andi	r12,r12,65535
1120cf08:	5515883a 	add	r10,r10,r20
1120cf0c:	3006d43a 	srli	r3,r6,16
1120cf10:	4b13883a 	add	r9,r9,r12
1120cf14:	2ccb383a 	mul	r5,r5,r19
1120cf18:	5100022e 	bgeu	r10,r4,1120cf24 <__muldf3+0x3b8>
1120cf1c:	01000074 	movhi	r4,1
1120cf20:	290b883a 	add	r5,r5,r4
1120cf24:	802ad43a 	srli	r21,r16,16
1120cf28:	843fffcc 	andi	r16,r16,65535
1120cf2c:	440d383a 	mul	r6,r8,r16
1120cf30:	4565383a 	mul	r18,r8,r21
1120cf34:	8349383a 	mul	r4,r16,r13
1120cf38:	500e943a 	slli	r7,r10,16
1120cf3c:	3010d43a 	srli	r8,r6,16
1120cf40:	5028d43a 	srli	r20,r10,16
1120cf44:	2489883a 	add	r4,r4,r18
1120cf48:	8abfffcc 	andi	r10,r17,65535
1120cf4c:	3a95883a 	add	r10,r7,r10
1120cf50:	4119883a 	add	r12,r8,r4
1120cf54:	a169883a 	add	r20,r20,r5
1120cf58:	1a87883a 	add	r3,r3,r10
1120cf5c:	6d5b383a 	mul	r13,r13,r21
1120cf60:	6480022e 	bgeu	r12,r18,1120cf6c <__muldf3+0x400>
1120cf64:	01000074 	movhi	r4,1
1120cf68:	691b883a 	add	r13,r13,r4
1120cf6c:	7c25383a 	mul	r18,r15,r16
1120cf70:	7d4b383a 	mul	r5,r15,r21
1120cf74:	84cf383a 	mul	r7,r16,r19
1120cf78:	901ed43a 	srli	r15,r18,16
1120cf7c:	6008d43a 	srli	r4,r12,16
1120cf80:	6010943a 	slli	r8,r12,16
1120cf84:	394f883a 	add	r7,r7,r5
1120cf88:	333fffcc 	andi	r12,r6,65535
1120cf8c:	79df883a 	add	r15,r15,r7
1120cf90:	235b883a 	add	r13,r4,r13
1120cf94:	9d63383a 	mul	r17,r19,r21
1120cf98:	4309883a 	add	r4,r8,r12
1120cf9c:	7940022e 	bgeu	r15,r5,1120cfa8 <__muldf3+0x43c>
1120cfa0:	01400074 	movhi	r5,1
1120cfa4:	8963883a 	add	r17,r17,r5
1120cfa8:	780a943a 	slli	r5,r15,16
1120cfac:	91bfffcc 	andi	r6,r18,65535
1120cfb0:	70c7883a 	add	r3,r14,r3
1120cfb4:	298d883a 	add	r6,r5,r6
1120cfb8:	1a8f803a 	cmpltu	r7,r3,r10
1120cfbc:	350b883a 	add	r5,r6,r20
1120cfc0:	20c7883a 	add	r3,r4,r3
1120cfc4:	3955883a 	add	r10,r7,r5
1120cfc8:	1909803a 	cmpltu	r4,r3,r4
1120cfcc:	6a91883a 	add	r8,r13,r10
1120cfd0:	780cd43a 	srli	r6,r15,16
1120cfd4:	2219883a 	add	r12,r4,r8
1120cfd8:	2d0b803a 	cmpltu	r5,r5,r20
1120cfdc:	51cf803a 	cmpltu	r7,r10,r7
1120cfe0:	29ceb03a 	or	r7,r5,r7
1120cfe4:	4351803a 	cmpltu	r8,r8,r13
1120cfe8:	610b803a 	cmpltu	r5,r12,r4
1120cfec:	4148b03a 	or	r4,r8,r5
1120cff0:	398f883a 	add	r7,r7,r6
1120cff4:	3909883a 	add	r4,r7,r4
1120cff8:	1810927a 	slli	r8,r3,9
1120cffc:	2449883a 	add	r4,r4,r17
1120d000:	2008927a 	slli	r4,r4,9
1120d004:	6022d5fa 	srli	r17,r12,23
1120d008:	1806d5fa 	srli	r3,r3,23
1120d00c:	4252b03a 	or	r9,r8,r9
1120d010:	600a927a 	slli	r5,r12,9
1120d014:	4810c03a 	cmpne	r8,r9,zero
1120d018:	2462b03a 	or	r17,r4,r17
1120d01c:	40c6b03a 	or	r3,r8,r3
1120d020:	8900402c 	andhi	r4,r17,256
1120d024:	1950b03a 	or	r8,r3,r5
1120d028:	20000726 	beq	r4,zero,1120d048 <__muldf3+0x4dc>
1120d02c:	4006d07a 	srli	r3,r8,1
1120d030:	880497fa 	slli	r2,r17,31
1120d034:	4200004c 	andi	r8,r8,1
1120d038:	8822d07a 	srli	r17,r17,1
1120d03c:	1a10b03a 	or	r8,r3,r8
1120d040:	1210b03a 	or	r8,r2,r8
1120d044:	5805883a 	mov	r2,r11
1120d048:	1140ffc4 	addi	r5,r2,1023
1120d04c:	0140440e 	bge	zero,r5,1120d160 <__muldf3+0x5f4>
1120d050:	40c001cc 	andi	r3,r8,7
1120d054:	18000726 	beq	r3,zero,1120d074 <__muldf3+0x508>
1120d058:	40c003cc 	andi	r3,r8,15
1120d05c:	01000104 	movi	r4,4
1120d060:	19000426 	beq	r3,r4,1120d074 <__muldf3+0x508>
1120d064:	4107883a 	add	r3,r8,r4
1120d068:	1a11803a 	cmpltu	r8,r3,r8
1120d06c:	8a23883a 	add	r17,r17,r8
1120d070:	1811883a 	mov	r8,r3
1120d074:	88c0402c 	andhi	r3,r17,256
1120d078:	18000426 	beq	r3,zero,1120d08c <__muldf3+0x520>
1120d07c:	11410004 	addi	r5,r2,1024
1120d080:	00bfc034 	movhi	r2,65280
1120d084:	10bfffc4 	addi	r2,r2,-1
1120d088:	88a2703a 	and	r17,r17,r2
1120d08c:	0081ff84 	movi	r2,2046
1120d090:	117f6416 	blt	r2,r5,1120ce24 <__alt_data_end+0xffe8ce24>
1120d094:	8828977a 	slli	r20,r17,29
1120d098:	4010d0fa 	srli	r8,r8,3
1120d09c:	8822927a 	slli	r17,r17,9
1120d0a0:	2881ffcc 	andi	r2,r5,2047
1120d0a4:	a228b03a 	or	r20,r20,r8
1120d0a8:	880ad33a 	srli	r5,r17,12
1120d0ac:	b02b883a 	mov	r21,r22
1120d0b0:	003f0d06 	br	1120cce8 <__alt_data_end+0xffe8cce8>
1120d0b4:	8080022c 	andhi	r2,r16,8
1120d0b8:	10000926 	beq	r2,zero,1120d0e0 <__muldf3+0x574>
1120d0bc:	8880022c 	andhi	r2,r17,8
1120d0c0:	1000071e 	bne	r2,zero,1120d0e0 <__muldf3+0x574>
1120d0c4:	00800434 	movhi	r2,16
1120d0c8:	89400234 	orhi	r5,r17,8
1120d0cc:	10bfffc4 	addi	r2,r2,-1
1120d0d0:	b82b883a 	mov	r21,r23
1120d0d4:	288a703a 	and	r5,r5,r2
1120d0d8:	4029883a 	mov	r20,r8
1120d0dc:	003f6806 	br	1120ce80 <__alt_data_end+0xffe8ce80>
1120d0e0:	00800434 	movhi	r2,16
1120d0e4:	81400234 	orhi	r5,r16,8
1120d0e8:	10bfffc4 	addi	r2,r2,-1
1120d0ec:	288a703a 	and	r5,r5,r2
1120d0f0:	003f6306 	br	1120ce80 <__alt_data_end+0xffe8ce80>
1120d0f4:	147ff604 	addi	r17,r2,-40
1120d0f8:	3462983a 	sll	r17,r6,r17
1120d0fc:	0011883a 	mov	r8,zero
1120d100:	003f4406 	br	1120ce14 <__alt_data_end+0xffe8ce14>
1120d104:	3009883a 	mov	r4,r6
1120d108:	d9800215 	stw	r6,8(sp)
1120d10c:	da400115 	stw	r9,4(sp)
1120d110:	da800015 	stw	r10,0(sp)
1120d114:	120dd840 	call	1120dd84 <__clzsi2>
1120d118:	10800804 	addi	r2,r2,32
1120d11c:	da800017 	ldw	r10,0(sp)
1120d120:	da400117 	ldw	r9,4(sp)
1120d124:	d9800217 	ldw	r6,8(sp)
1120d128:	003f3006 	br	1120cdec <__alt_data_end+0xffe8cdec>
1120d12c:	143ff604 	addi	r16,r2,-40
1120d130:	9c20983a 	sll	r16,r19,r16
1120d134:	0029883a 	mov	r20,zero
1120d138:	003f1606 	br	1120cd94 <__alt_data_end+0xffe8cd94>
1120d13c:	d9800215 	stw	r6,8(sp)
1120d140:	d9c00015 	stw	r7,0(sp)
1120d144:	da400115 	stw	r9,4(sp)
1120d148:	120dd840 	call	1120dd84 <__clzsi2>
1120d14c:	10800804 	addi	r2,r2,32
1120d150:	da400117 	ldw	r9,4(sp)
1120d154:	d9c00017 	ldw	r7,0(sp)
1120d158:	d9800217 	ldw	r6,8(sp)
1120d15c:	003f0306 	br	1120cd6c <__alt_data_end+0xffe8cd6c>
1120d160:	00c00044 	movi	r3,1
1120d164:	1947c83a 	sub	r3,r3,r5
1120d168:	00800e04 	movi	r2,56
1120d16c:	10feda16 	blt	r2,r3,1120ccd8 <__alt_data_end+0xffe8ccd8>
1120d170:	008007c4 	movi	r2,31
1120d174:	10c01b16 	blt	r2,r3,1120d1e4 <__muldf3+0x678>
1120d178:	00800804 	movi	r2,32
1120d17c:	10c5c83a 	sub	r2,r2,r3
1120d180:	888a983a 	sll	r5,r17,r2
1120d184:	40c8d83a 	srl	r4,r8,r3
1120d188:	4084983a 	sll	r2,r8,r2
1120d18c:	88e2d83a 	srl	r17,r17,r3
1120d190:	2906b03a 	or	r3,r5,r4
1120d194:	1004c03a 	cmpne	r2,r2,zero
1120d198:	1886b03a 	or	r3,r3,r2
1120d19c:	188001cc 	andi	r2,r3,7
1120d1a0:	10000726 	beq	r2,zero,1120d1c0 <__muldf3+0x654>
1120d1a4:	188003cc 	andi	r2,r3,15
1120d1a8:	01000104 	movi	r4,4
1120d1ac:	11000426 	beq	r2,r4,1120d1c0 <__muldf3+0x654>
1120d1b0:	1805883a 	mov	r2,r3
1120d1b4:	10c00104 	addi	r3,r2,4
1120d1b8:	1885803a 	cmpltu	r2,r3,r2
1120d1bc:	88a3883a 	add	r17,r17,r2
1120d1c0:	8880202c 	andhi	r2,r17,128
1120d1c4:	10001c26 	beq	r2,zero,1120d238 <__muldf3+0x6cc>
1120d1c8:	b02b883a 	mov	r21,r22
1120d1cc:	00800044 	movi	r2,1
1120d1d0:	000b883a 	mov	r5,zero
1120d1d4:	0029883a 	mov	r20,zero
1120d1d8:	003ec306 	br	1120cce8 <__alt_data_end+0xffe8cce8>
1120d1dc:	5805883a 	mov	r2,r11
1120d1e0:	003f9906 	br	1120d048 <__alt_data_end+0xffe8d048>
1120d1e4:	00bff844 	movi	r2,-31
1120d1e8:	1145c83a 	sub	r2,r2,r5
1120d1ec:	8888d83a 	srl	r4,r17,r2
1120d1f0:	00800804 	movi	r2,32
1120d1f4:	18801a26 	beq	r3,r2,1120d260 <__muldf3+0x6f4>
1120d1f8:	00801004 	movi	r2,64
1120d1fc:	10c5c83a 	sub	r2,r2,r3
1120d200:	8884983a 	sll	r2,r17,r2
1120d204:	1204b03a 	or	r2,r2,r8
1120d208:	1004c03a 	cmpne	r2,r2,zero
1120d20c:	2084b03a 	or	r2,r4,r2
1120d210:	144001cc 	andi	r17,r2,7
1120d214:	88000d1e 	bne	r17,zero,1120d24c <__muldf3+0x6e0>
1120d218:	000b883a 	mov	r5,zero
1120d21c:	1028d0fa 	srli	r20,r2,3
1120d220:	b02b883a 	mov	r21,r22
1120d224:	0005883a 	mov	r2,zero
1120d228:	a468b03a 	or	r20,r20,r17
1120d22c:	003eae06 	br	1120cce8 <__alt_data_end+0xffe8cce8>
1120d230:	1007883a 	mov	r3,r2
1120d234:	0023883a 	mov	r17,zero
1120d238:	880a927a 	slli	r5,r17,9
1120d23c:	1805883a 	mov	r2,r3
1120d240:	8822977a 	slli	r17,r17,29
1120d244:	280ad33a 	srli	r5,r5,12
1120d248:	003ff406 	br	1120d21c <__alt_data_end+0xffe8d21c>
1120d24c:	10c003cc 	andi	r3,r2,15
1120d250:	01000104 	movi	r4,4
1120d254:	193ff626 	beq	r3,r4,1120d230 <__alt_data_end+0xffe8d230>
1120d258:	0023883a 	mov	r17,zero
1120d25c:	003fd506 	br	1120d1b4 <__alt_data_end+0xffe8d1b4>
1120d260:	0005883a 	mov	r2,zero
1120d264:	003fe706 	br	1120d204 <__alt_data_end+0xffe8d204>
1120d268:	00800434 	movhi	r2,16
1120d26c:	89400234 	orhi	r5,r17,8
1120d270:	10bfffc4 	addi	r2,r2,-1
1120d274:	b02b883a 	mov	r21,r22
1120d278:	288a703a 	and	r5,r5,r2
1120d27c:	4029883a 	mov	r20,r8
1120d280:	003eff06 	br	1120ce80 <__alt_data_end+0xffe8ce80>

1120d284 <__subdf3>:
1120d284:	02000434 	movhi	r8,16
1120d288:	423fffc4 	addi	r8,r8,-1
1120d28c:	defffb04 	addi	sp,sp,-20
1120d290:	2a14703a 	and	r10,r5,r8
1120d294:	3812d53a 	srli	r9,r7,20
1120d298:	3a10703a 	and	r8,r7,r8
1120d29c:	2006d77a 	srli	r3,r4,29
1120d2a0:	3004d77a 	srli	r2,r6,29
1120d2a4:	dc000015 	stw	r16,0(sp)
1120d2a8:	501490fa 	slli	r10,r10,3
1120d2ac:	2820d53a 	srli	r16,r5,20
1120d2b0:	401090fa 	slli	r8,r8,3
1120d2b4:	dc800215 	stw	r18,8(sp)
1120d2b8:	dc400115 	stw	r17,4(sp)
1120d2bc:	dfc00415 	stw	ra,16(sp)
1120d2c0:	202290fa 	slli	r17,r4,3
1120d2c4:	dcc00315 	stw	r19,12(sp)
1120d2c8:	4a41ffcc 	andi	r9,r9,2047
1120d2cc:	0101ffc4 	movi	r4,2047
1120d2d0:	2824d7fa 	srli	r18,r5,31
1120d2d4:	8401ffcc 	andi	r16,r16,2047
1120d2d8:	50c6b03a 	or	r3,r10,r3
1120d2dc:	380ed7fa 	srli	r7,r7,31
1120d2e0:	408ab03a 	or	r5,r8,r2
1120d2e4:	300c90fa 	slli	r6,r6,3
1120d2e8:	49009626 	beq	r9,r4,1120d544 <__subdf3+0x2c0>
1120d2ec:	39c0005c 	xori	r7,r7,1
1120d2f0:	8245c83a 	sub	r2,r16,r9
1120d2f4:	3c807426 	beq	r7,r18,1120d4c8 <__subdf3+0x244>
1120d2f8:	0080af0e 	bge	zero,r2,1120d5b8 <__subdf3+0x334>
1120d2fc:	48002a1e 	bne	r9,zero,1120d3a8 <__subdf3+0x124>
1120d300:	2988b03a 	or	r4,r5,r6
1120d304:	20009a1e 	bne	r4,zero,1120d570 <__subdf3+0x2ec>
1120d308:	888001cc 	andi	r2,r17,7
1120d30c:	10000726 	beq	r2,zero,1120d32c <__subdf3+0xa8>
1120d310:	888003cc 	andi	r2,r17,15
1120d314:	01000104 	movi	r4,4
1120d318:	11000426 	beq	r2,r4,1120d32c <__subdf3+0xa8>
1120d31c:	890b883a 	add	r5,r17,r4
1120d320:	2c63803a 	cmpltu	r17,r5,r17
1120d324:	1c47883a 	add	r3,r3,r17
1120d328:	2823883a 	mov	r17,r5
1120d32c:	1880202c 	andhi	r2,r3,128
1120d330:	10005926 	beq	r2,zero,1120d498 <__subdf3+0x214>
1120d334:	84000044 	addi	r16,r16,1
1120d338:	0081ffc4 	movi	r2,2047
1120d33c:	8080be26 	beq	r16,r2,1120d638 <__subdf3+0x3b4>
1120d340:	017fe034 	movhi	r5,65408
1120d344:	297fffc4 	addi	r5,r5,-1
1120d348:	1946703a 	and	r3,r3,r5
1120d34c:	1804977a 	slli	r2,r3,29
1120d350:	1806927a 	slli	r3,r3,9
1120d354:	8822d0fa 	srli	r17,r17,3
1120d358:	8401ffcc 	andi	r16,r16,2047
1120d35c:	180ad33a 	srli	r5,r3,12
1120d360:	9100004c 	andi	r4,r18,1
1120d364:	1444b03a 	or	r2,r2,r17
1120d368:	80c1ffcc 	andi	r3,r16,2047
1120d36c:	1820953a 	slli	r16,r3,20
1120d370:	20c03fcc 	andi	r3,r4,255
1120d374:	180897fa 	slli	r4,r3,31
1120d378:	00c00434 	movhi	r3,16
1120d37c:	18ffffc4 	addi	r3,r3,-1
1120d380:	28c6703a 	and	r3,r5,r3
1120d384:	1c06b03a 	or	r3,r3,r16
1120d388:	1906b03a 	or	r3,r3,r4
1120d38c:	dfc00417 	ldw	ra,16(sp)
1120d390:	dcc00317 	ldw	r19,12(sp)
1120d394:	dc800217 	ldw	r18,8(sp)
1120d398:	dc400117 	ldw	r17,4(sp)
1120d39c:	dc000017 	ldw	r16,0(sp)
1120d3a0:	dec00504 	addi	sp,sp,20
1120d3a4:	f800283a 	ret
1120d3a8:	0101ffc4 	movi	r4,2047
1120d3ac:	813fd626 	beq	r16,r4,1120d308 <__alt_data_end+0xffe8d308>
1120d3b0:	29402034 	orhi	r5,r5,128
1120d3b4:	01000e04 	movi	r4,56
1120d3b8:	2080a316 	blt	r4,r2,1120d648 <__subdf3+0x3c4>
1120d3bc:	010007c4 	movi	r4,31
1120d3c0:	2080c616 	blt	r4,r2,1120d6dc <__subdf3+0x458>
1120d3c4:	01000804 	movi	r4,32
1120d3c8:	2089c83a 	sub	r4,r4,r2
1120d3cc:	2910983a 	sll	r8,r5,r4
1120d3d0:	308ed83a 	srl	r7,r6,r2
1120d3d4:	3108983a 	sll	r4,r6,r4
1120d3d8:	2884d83a 	srl	r2,r5,r2
1120d3dc:	41ccb03a 	or	r6,r8,r7
1120d3e0:	2008c03a 	cmpne	r4,r4,zero
1120d3e4:	310cb03a 	or	r6,r6,r4
1120d3e8:	898dc83a 	sub	r6,r17,r6
1120d3ec:	89a3803a 	cmpltu	r17,r17,r6
1120d3f0:	1887c83a 	sub	r3,r3,r2
1120d3f4:	1c47c83a 	sub	r3,r3,r17
1120d3f8:	3023883a 	mov	r17,r6
1120d3fc:	1880202c 	andhi	r2,r3,128
1120d400:	10002326 	beq	r2,zero,1120d490 <__subdf3+0x20c>
1120d404:	04c02034 	movhi	r19,128
1120d408:	9cffffc4 	addi	r19,r19,-1
1120d40c:	1ce6703a 	and	r19,r3,r19
1120d410:	98007a26 	beq	r19,zero,1120d5fc <__subdf3+0x378>
1120d414:	9809883a 	mov	r4,r19
1120d418:	120dd840 	call	1120dd84 <__clzsi2>
1120d41c:	113ffe04 	addi	r4,r2,-8
1120d420:	00c007c4 	movi	r3,31
1120d424:	19007b16 	blt	r3,r4,1120d614 <__subdf3+0x390>
1120d428:	00800804 	movi	r2,32
1120d42c:	1105c83a 	sub	r2,r2,r4
1120d430:	8884d83a 	srl	r2,r17,r2
1120d434:	9906983a 	sll	r3,r19,r4
1120d438:	8922983a 	sll	r17,r17,r4
1120d43c:	10c4b03a 	or	r2,r2,r3
1120d440:	24007816 	blt	r4,r16,1120d624 <__subdf3+0x3a0>
1120d444:	2421c83a 	sub	r16,r4,r16
1120d448:	80c00044 	addi	r3,r16,1
1120d44c:	010007c4 	movi	r4,31
1120d450:	20c09516 	blt	r4,r3,1120d6a8 <__subdf3+0x424>
1120d454:	01400804 	movi	r5,32
1120d458:	28cbc83a 	sub	r5,r5,r3
1120d45c:	88c8d83a 	srl	r4,r17,r3
1120d460:	8962983a 	sll	r17,r17,r5
1120d464:	114a983a 	sll	r5,r2,r5
1120d468:	10c6d83a 	srl	r3,r2,r3
1120d46c:	8804c03a 	cmpne	r2,r17,zero
1120d470:	290ab03a 	or	r5,r5,r4
1120d474:	28a2b03a 	or	r17,r5,r2
1120d478:	0021883a 	mov	r16,zero
1120d47c:	003fa206 	br	1120d308 <__alt_data_end+0xffe8d308>
1120d480:	2090b03a 	or	r8,r4,r2
1120d484:	40018e26 	beq	r8,zero,1120dac0 <__subdf3+0x83c>
1120d488:	1007883a 	mov	r3,r2
1120d48c:	2023883a 	mov	r17,r4
1120d490:	888001cc 	andi	r2,r17,7
1120d494:	103f9e1e 	bne	r2,zero,1120d310 <__alt_data_end+0xffe8d310>
1120d498:	1804977a 	slli	r2,r3,29
1120d49c:	8822d0fa 	srli	r17,r17,3
1120d4a0:	1810d0fa 	srli	r8,r3,3
1120d4a4:	9100004c 	andi	r4,r18,1
1120d4a8:	1444b03a 	or	r2,r2,r17
1120d4ac:	00c1ffc4 	movi	r3,2047
1120d4b0:	80c02826 	beq	r16,r3,1120d554 <__subdf3+0x2d0>
1120d4b4:	01400434 	movhi	r5,16
1120d4b8:	297fffc4 	addi	r5,r5,-1
1120d4bc:	80e0703a 	and	r16,r16,r3
1120d4c0:	414a703a 	and	r5,r8,r5
1120d4c4:	003fa806 	br	1120d368 <__alt_data_end+0xffe8d368>
1120d4c8:	0080630e 	bge	zero,r2,1120d658 <__subdf3+0x3d4>
1120d4cc:	48003026 	beq	r9,zero,1120d590 <__subdf3+0x30c>
1120d4d0:	0101ffc4 	movi	r4,2047
1120d4d4:	813f8c26 	beq	r16,r4,1120d308 <__alt_data_end+0xffe8d308>
1120d4d8:	29402034 	orhi	r5,r5,128
1120d4dc:	01000e04 	movi	r4,56
1120d4e0:	2080a90e 	bge	r4,r2,1120d788 <__subdf3+0x504>
1120d4e4:	298cb03a 	or	r6,r5,r6
1120d4e8:	3012c03a 	cmpne	r9,r6,zero
1120d4ec:	0005883a 	mov	r2,zero
1120d4f0:	4c53883a 	add	r9,r9,r17
1120d4f4:	4c63803a 	cmpltu	r17,r9,r17
1120d4f8:	10c7883a 	add	r3,r2,r3
1120d4fc:	88c7883a 	add	r3,r17,r3
1120d500:	4823883a 	mov	r17,r9
1120d504:	1880202c 	andhi	r2,r3,128
1120d508:	1000d026 	beq	r2,zero,1120d84c <__subdf3+0x5c8>
1120d50c:	84000044 	addi	r16,r16,1
1120d510:	0081ffc4 	movi	r2,2047
1120d514:	8080fe26 	beq	r16,r2,1120d910 <__subdf3+0x68c>
1120d518:	00bfe034 	movhi	r2,65408
1120d51c:	10bfffc4 	addi	r2,r2,-1
1120d520:	1886703a 	and	r3,r3,r2
1120d524:	880ad07a 	srli	r5,r17,1
1120d528:	180497fa 	slli	r2,r3,31
1120d52c:	8900004c 	andi	r4,r17,1
1120d530:	2922b03a 	or	r17,r5,r4
1120d534:	1806d07a 	srli	r3,r3,1
1120d538:	1462b03a 	or	r17,r2,r17
1120d53c:	3825883a 	mov	r18,r7
1120d540:	003f7106 	br	1120d308 <__alt_data_end+0xffe8d308>
1120d544:	2984b03a 	or	r2,r5,r6
1120d548:	103f6826 	beq	r2,zero,1120d2ec <__alt_data_end+0xffe8d2ec>
1120d54c:	39c03fcc 	andi	r7,r7,255
1120d550:	003f6706 	br	1120d2f0 <__alt_data_end+0xffe8d2f0>
1120d554:	4086b03a 	or	r3,r8,r2
1120d558:	18015226 	beq	r3,zero,1120daa4 <__subdf3+0x820>
1120d55c:	00c00434 	movhi	r3,16
1120d560:	41400234 	orhi	r5,r8,8
1120d564:	18ffffc4 	addi	r3,r3,-1
1120d568:	28ca703a 	and	r5,r5,r3
1120d56c:	003f7e06 	br	1120d368 <__alt_data_end+0xffe8d368>
1120d570:	10bfffc4 	addi	r2,r2,-1
1120d574:	1000491e 	bne	r2,zero,1120d69c <__subdf3+0x418>
1120d578:	898fc83a 	sub	r7,r17,r6
1120d57c:	89e3803a 	cmpltu	r17,r17,r7
1120d580:	1947c83a 	sub	r3,r3,r5
1120d584:	1c47c83a 	sub	r3,r3,r17
1120d588:	3823883a 	mov	r17,r7
1120d58c:	003f9b06 	br	1120d3fc <__alt_data_end+0xffe8d3fc>
1120d590:	2988b03a 	or	r4,r5,r6
1120d594:	203f5c26 	beq	r4,zero,1120d308 <__alt_data_end+0xffe8d308>
1120d598:	10bfffc4 	addi	r2,r2,-1
1120d59c:	1000931e 	bne	r2,zero,1120d7ec <__subdf3+0x568>
1120d5a0:	898d883a 	add	r6,r17,r6
1120d5a4:	3463803a 	cmpltu	r17,r6,r17
1120d5a8:	1947883a 	add	r3,r3,r5
1120d5ac:	88c7883a 	add	r3,r17,r3
1120d5b0:	3023883a 	mov	r17,r6
1120d5b4:	003fd306 	br	1120d504 <__alt_data_end+0xffe8d504>
1120d5b8:	1000541e 	bne	r2,zero,1120d70c <__subdf3+0x488>
1120d5bc:	80800044 	addi	r2,r16,1
1120d5c0:	1081ffcc 	andi	r2,r2,2047
1120d5c4:	01000044 	movi	r4,1
1120d5c8:	2080a20e 	bge	r4,r2,1120d854 <__subdf3+0x5d0>
1120d5cc:	8989c83a 	sub	r4,r17,r6
1120d5d0:	8905803a 	cmpltu	r2,r17,r4
1120d5d4:	1967c83a 	sub	r19,r3,r5
1120d5d8:	98a7c83a 	sub	r19,r19,r2
1120d5dc:	9880202c 	andhi	r2,r19,128
1120d5e0:	10006326 	beq	r2,zero,1120d770 <__subdf3+0x4ec>
1120d5e4:	3463c83a 	sub	r17,r6,r17
1120d5e8:	28c7c83a 	sub	r3,r5,r3
1120d5ec:	344d803a 	cmpltu	r6,r6,r17
1120d5f0:	19a7c83a 	sub	r19,r3,r6
1120d5f4:	3825883a 	mov	r18,r7
1120d5f8:	983f861e 	bne	r19,zero,1120d414 <__alt_data_end+0xffe8d414>
1120d5fc:	8809883a 	mov	r4,r17
1120d600:	120dd840 	call	1120dd84 <__clzsi2>
1120d604:	10800804 	addi	r2,r2,32
1120d608:	113ffe04 	addi	r4,r2,-8
1120d60c:	00c007c4 	movi	r3,31
1120d610:	193f850e 	bge	r3,r4,1120d428 <__alt_data_end+0xffe8d428>
1120d614:	10bff604 	addi	r2,r2,-40
1120d618:	8884983a 	sll	r2,r17,r2
1120d61c:	0023883a 	mov	r17,zero
1120d620:	243f880e 	bge	r4,r16,1120d444 <__alt_data_end+0xffe8d444>
1120d624:	00ffe034 	movhi	r3,65408
1120d628:	18ffffc4 	addi	r3,r3,-1
1120d62c:	8121c83a 	sub	r16,r16,r4
1120d630:	10c6703a 	and	r3,r2,r3
1120d634:	003f3406 	br	1120d308 <__alt_data_end+0xffe8d308>
1120d638:	9100004c 	andi	r4,r18,1
1120d63c:	000b883a 	mov	r5,zero
1120d640:	0005883a 	mov	r2,zero
1120d644:	003f4806 	br	1120d368 <__alt_data_end+0xffe8d368>
1120d648:	298cb03a 	or	r6,r5,r6
1120d64c:	300cc03a 	cmpne	r6,r6,zero
1120d650:	0005883a 	mov	r2,zero
1120d654:	003f6406 	br	1120d3e8 <__alt_data_end+0xffe8d3e8>
1120d658:	10009a1e 	bne	r2,zero,1120d8c4 <__subdf3+0x640>
1120d65c:	82400044 	addi	r9,r16,1
1120d660:	4881ffcc 	andi	r2,r9,2047
1120d664:	02800044 	movi	r10,1
1120d668:	5080670e 	bge	r10,r2,1120d808 <__subdf3+0x584>
1120d66c:	0081ffc4 	movi	r2,2047
1120d670:	4880af26 	beq	r9,r2,1120d930 <__subdf3+0x6ac>
1120d674:	898d883a 	add	r6,r17,r6
1120d678:	1945883a 	add	r2,r3,r5
1120d67c:	3447803a 	cmpltu	r3,r6,r17
1120d680:	1887883a 	add	r3,r3,r2
1120d684:	182297fa 	slli	r17,r3,31
1120d688:	300cd07a 	srli	r6,r6,1
1120d68c:	1806d07a 	srli	r3,r3,1
1120d690:	4821883a 	mov	r16,r9
1120d694:	89a2b03a 	or	r17,r17,r6
1120d698:	003f1b06 	br	1120d308 <__alt_data_end+0xffe8d308>
1120d69c:	0101ffc4 	movi	r4,2047
1120d6a0:	813f441e 	bne	r16,r4,1120d3b4 <__alt_data_end+0xffe8d3b4>
1120d6a4:	003f1806 	br	1120d308 <__alt_data_end+0xffe8d308>
1120d6a8:	843ff844 	addi	r16,r16,-31
1120d6ac:	01400804 	movi	r5,32
1120d6b0:	1408d83a 	srl	r4,r2,r16
1120d6b4:	19405026 	beq	r3,r5,1120d7f8 <__subdf3+0x574>
1120d6b8:	01401004 	movi	r5,64
1120d6bc:	28c7c83a 	sub	r3,r5,r3
1120d6c0:	10c4983a 	sll	r2,r2,r3
1120d6c4:	88a2b03a 	or	r17,r17,r2
1120d6c8:	8822c03a 	cmpne	r17,r17,zero
1120d6cc:	2462b03a 	or	r17,r4,r17
1120d6d0:	0007883a 	mov	r3,zero
1120d6d4:	0021883a 	mov	r16,zero
1120d6d8:	003f6d06 	br	1120d490 <__alt_data_end+0xffe8d490>
1120d6dc:	11fff804 	addi	r7,r2,-32
1120d6e0:	01000804 	movi	r4,32
1120d6e4:	29ced83a 	srl	r7,r5,r7
1120d6e8:	11004526 	beq	r2,r4,1120d800 <__subdf3+0x57c>
1120d6ec:	01001004 	movi	r4,64
1120d6f0:	2089c83a 	sub	r4,r4,r2
1120d6f4:	2904983a 	sll	r2,r5,r4
1120d6f8:	118cb03a 	or	r6,r2,r6
1120d6fc:	300cc03a 	cmpne	r6,r6,zero
1120d700:	398cb03a 	or	r6,r7,r6
1120d704:	0005883a 	mov	r2,zero
1120d708:	003f3706 	br	1120d3e8 <__alt_data_end+0xffe8d3e8>
1120d70c:	80002a26 	beq	r16,zero,1120d7b8 <__subdf3+0x534>
1120d710:	0101ffc4 	movi	r4,2047
1120d714:	49006626 	beq	r9,r4,1120d8b0 <__subdf3+0x62c>
1120d718:	0085c83a 	sub	r2,zero,r2
1120d71c:	18c02034 	orhi	r3,r3,128
1120d720:	01000e04 	movi	r4,56
1120d724:	20807e16 	blt	r4,r2,1120d920 <__subdf3+0x69c>
1120d728:	010007c4 	movi	r4,31
1120d72c:	2080e716 	blt	r4,r2,1120dacc <__subdf3+0x848>
1120d730:	01000804 	movi	r4,32
1120d734:	2089c83a 	sub	r4,r4,r2
1120d738:	1914983a 	sll	r10,r3,r4
1120d73c:	8890d83a 	srl	r8,r17,r2
1120d740:	8908983a 	sll	r4,r17,r4
1120d744:	1884d83a 	srl	r2,r3,r2
1120d748:	5222b03a 	or	r17,r10,r8
1120d74c:	2006c03a 	cmpne	r3,r4,zero
1120d750:	88e2b03a 	or	r17,r17,r3
1120d754:	3463c83a 	sub	r17,r6,r17
1120d758:	2885c83a 	sub	r2,r5,r2
1120d75c:	344d803a 	cmpltu	r6,r6,r17
1120d760:	1187c83a 	sub	r3,r2,r6
1120d764:	4821883a 	mov	r16,r9
1120d768:	3825883a 	mov	r18,r7
1120d76c:	003f2306 	br	1120d3fc <__alt_data_end+0xffe8d3fc>
1120d770:	24d0b03a 	or	r8,r4,r19
1120d774:	40001b1e 	bne	r8,zero,1120d7e4 <__subdf3+0x560>
1120d778:	0005883a 	mov	r2,zero
1120d77c:	0009883a 	mov	r4,zero
1120d780:	0021883a 	mov	r16,zero
1120d784:	003f4906 	br	1120d4ac <__alt_data_end+0xffe8d4ac>
1120d788:	010007c4 	movi	r4,31
1120d78c:	20803a16 	blt	r4,r2,1120d878 <__subdf3+0x5f4>
1120d790:	01000804 	movi	r4,32
1120d794:	2089c83a 	sub	r4,r4,r2
1120d798:	2912983a 	sll	r9,r5,r4
1120d79c:	3090d83a 	srl	r8,r6,r2
1120d7a0:	3108983a 	sll	r4,r6,r4
1120d7a4:	2884d83a 	srl	r2,r5,r2
1120d7a8:	4a12b03a 	or	r9,r9,r8
1120d7ac:	2008c03a 	cmpne	r4,r4,zero
1120d7b0:	4912b03a 	or	r9,r9,r4
1120d7b4:	003f4e06 	br	1120d4f0 <__alt_data_end+0xffe8d4f0>
1120d7b8:	1c48b03a 	or	r4,r3,r17
1120d7bc:	20003c26 	beq	r4,zero,1120d8b0 <__subdf3+0x62c>
1120d7c0:	0084303a 	nor	r2,zero,r2
1120d7c4:	1000381e 	bne	r2,zero,1120d8a8 <__subdf3+0x624>
1120d7c8:	3463c83a 	sub	r17,r6,r17
1120d7cc:	28c5c83a 	sub	r2,r5,r3
1120d7d0:	344d803a 	cmpltu	r6,r6,r17
1120d7d4:	1187c83a 	sub	r3,r2,r6
1120d7d8:	4821883a 	mov	r16,r9
1120d7dc:	3825883a 	mov	r18,r7
1120d7e0:	003f0606 	br	1120d3fc <__alt_data_end+0xffe8d3fc>
1120d7e4:	2023883a 	mov	r17,r4
1120d7e8:	003f0906 	br	1120d410 <__alt_data_end+0xffe8d410>
1120d7ec:	0101ffc4 	movi	r4,2047
1120d7f0:	813f3a1e 	bne	r16,r4,1120d4dc <__alt_data_end+0xffe8d4dc>
1120d7f4:	003ec406 	br	1120d308 <__alt_data_end+0xffe8d308>
1120d7f8:	0005883a 	mov	r2,zero
1120d7fc:	003fb106 	br	1120d6c4 <__alt_data_end+0xffe8d6c4>
1120d800:	0005883a 	mov	r2,zero
1120d804:	003fbc06 	br	1120d6f8 <__alt_data_end+0xffe8d6f8>
1120d808:	1c44b03a 	or	r2,r3,r17
1120d80c:	80008e1e 	bne	r16,zero,1120da48 <__subdf3+0x7c4>
1120d810:	1000c826 	beq	r2,zero,1120db34 <__subdf3+0x8b0>
1120d814:	2984b03a 	or	r2,r5,r6
1120d818:	103ebb26 	beq	r2,zero,1120d308 <__alt_data_end+0xffe8d308>
1120d81c:	8989883a 	add	r4,r17,r6
1120d820:	1945883a 	add	r2,r3,r5
1120d824:	2447803a 	cmpltu	r3,r4,r17
1120d828:	1887883a 	add	r3,r3,r2
1120d82c:	1880202c 	andhi	r2,r3,128
1120d830:	2023883a 	mov	r17,r4
1120d834:	103f1626 	beq	r2,zero,1120d490 <__alt_data_end+0xffe8d490>
1120d838:	00bfe034 	movhi	r2,65408
1120d83c:	10bfffc4 	addi	r2,r2,-1
1120d840:	5021883a 	mov	r16,r10
1120d844:	1886703a 	and	r3,r3,r2
1120d848:	003eaf06 	br	1120d308 <__alt_data_end+0xffe8d308>
1120d84c:	3825883a 	mov	r18,r7
1120d850:	003f0f06 	br	1120d490 <__alt_data_end+0xffe8d490>
1120d854:	1c44b03a 	or	r2,r3,r17
1120d858:	8000251e 	bne	r16,zero,1120d8f0 <__subdf3+0x66c>
1120d85c:	1000661e 	bne	r2,zero,1120d9f8 <__subdf3+0x774>
1120d860:	2990b03a 	or	r8,r5,r6
1120d864:	40009626 	beq	r8,zero,1120dac0 <__subdf3+0x83c>
1120d868:	2807883a 	mov	r3,r5
1120d86c:	3023883a 	mov	r17,r6
1120d870:	3825883a 	mov	r18,r7
1120d874:	003ea406 	br	1120d308 <__alt_data_end+0xffe8d308>
1120d878:	127ff804 	addi	r9,r2,-32
1120d87c:	01000804 	movi	r4,32
1120d880:	2a52d83a 	srl	r9,r5,r9
1120d884:	11008c26 	beq	r2,r4,1120dab8 <__subdf3+0x834>
1120d888:	01001004 	movi	r4,64
1120d88c:	2085c83a 	sub	r2,r4,r2
1120d890:	2884983a 	sll	r2,r5,r2
1120d894:	118cb03a 	or	r6,r2,r6
1120d898:	300cc03a 	cmpne	r6,r6,zero
1120d89c:	4992b03a 	or	r9,r9,r6
1120d8a0:	0005883a 	mov	r2,zero
1120d8a4:	003f1206 	br	1120d4f0 <__alt_data_end+0xffe8d4f0>
1120d8a8:	0101ffc4 	movi	r4,2047
1120d8ac:	493f9c1e 	bne	r9,r4,1120d720 <__alt_data_end+0xffe8d720>
1120d8b0:	2807883a 	mov	r3,r5
1120d8b4:	3023883a 	mov	r17,r6
1120d8b8:	4821883a 	mov	r16,r9
1120d8bc:	3825883a 	mov	r18,r7
1120d8c0:	003e9106 	br	1120d308 <__alt_data_end+0xffe8d308>
1120d8c4:	80001f1e 	bne	r16,zero,1120d944 <__subdf3+0x6c0>
1120d8c8:	1c48b03a 	or	r4,r3,r17
1120d8cc:	20005a26 	beq	r4,zero,1120da38 <__subdf3+0x7b4>
1120d8d0:	0084303a 	nor	r2,zero,r2
1120d8d4:	1000561e 	bne	r2,zero,1120da30 <__subdf3+0x7ac>
1120d8d8:	89a3883a 	add	r17,r17,r6
1120d8dc:	1945883a 	add	r2,r3,r5
1120d8e0:	898d803a 	cmpltu	r6,r17,r6
1120d8e4:	3087883a 	add	r3,r6,r2
1120d8e8:	4821883a 	mov	r16,r9
1120d8ec:	003f0506 	br	1120d504 <__alt_data_end+0xffe8d504>
1120d8f0:	10002b1e 	bne	r2,zero,1120d9a0 <__subdf3+0x71c>
1120d8f4:	2984b03a 	or	r2,r5,r6
1120d8f8:	10008026 	beq	r2,zero,1120dafc <__subdf3+0x878>
1120d8fc:	2807883a 	mov	r3,r5
1120d900:	3023883a 	mov	r17,r6
1120d904:	3825883a 	mov	r18,r7
1120d908:	0401ffc4 	movi	r16,2047
1120d90c:	003e7e06 	br	1120d308 <__alt_data_end+0xffe8d308>
1120d910:	3809883a 	mov	r4,r7
1120d914:	0011883a 	mov	r8,zero
1120d918:	0005883a 	mov	r2,zero
1120d91c:	003ee306 	br	1120d4ac <__alt_data_end+0xffe8d4ac>
1120d920:	1c62b03a 	or	r17,r3,r17
1120d924:	8822c03a 	cmpne	r17,r17,zero
1120d928:	0005883a 	mov	r2,zero
1120d92c:	003f8906 	br	1120d754 <__alt_data_end+0xffe8d754>
1120d930:	3809883a 	mov	r4,r7
1120d934:	4821883a 	mov	r16,r9
1120d938:	0011883a 	mov	r8,zero
1120d93c:	0005883a 	mov	r2,zero
1120d940:	003eda06 	br	1120d4ac <__alt_data_end+0xffe8d4ac>
1120d944:	0101ffc4 	movi	r4,2047
1120d948:	49003b26 	beq	r9,r4,1120da38 <__subdf3+0x7b4>
1120d94c:	0085c83a 	sub	r2,zero,r2
1120d950:	18c02034 	orhi	r3,r3,128
1120d954:	01000e04 	movi	r4,56
1120d958:	20806e16 	blt	r4,r2,1120db14 <__subdf3+0x890>
1120d95c:	010007c4 	movi	r4,31
1120d960:	20807716 	blt	r4,r2,1120db40 <__subdf3+0x8bc>
1120d964:	01000804 	movi	r4,32
1120d968:	2089c83a 	sub	r4,r4,r2
1120d96c:	1914983a 	sll	r10,r3,r4
1120d970:	8890d83a 	srl	r8,r17,r2
1120d974:	8908983a 	sll	r4,r17,r4
1120d978:	1884d83a 	srl	r2,r3,r2
1120d97c:	5222b03a 	or	r17,r10,r8
1120d980:	2006c03a 	cmpne	r3,r4,zero
1120d984:	88e2b03a 	or	r17,r17,r3
1120d988:	89a3883a 	add	r17,r17,r6
1120d98c:	1145883a 	add	r2,r2,r5
1120d990:	898d803a 	cmpltu	r6,r17,r6
1120d994:	3087883a 	add	r3,r6,r2
1120d998:	4821883a 	mov	r16,r9
1120d99c:	003ed906 	br	1120d504 <__alt_data_end+0xffe8d504>
1120d9a0:	2984b03a 	or	r2,r5,r6
1120d9a4:	10004226 	beq	r2,zero,1120dab0 <__subdf3+0x82c>
1120d9a8:	1808d0fa 	srli	r4,r3,3
1120d9ac:	8822d0fa 	srli	r17,r17,3
1120d9b0:	1806977a 	slli	r3,r3,29
1120d9b4:	2080022c 	andhi	r2,r4,8
1120d9b8:	1c62b03a 	or	r17,r3,r17
1120d9bc:	10000826 	beq	r2,zero,1120d9e0 <__subdf3+0x75c>
1120d9c0:	2812d0fa 	srli	r9,r5,3
1120d9c4:	4880022c 	andhi	r2,r9,8
1120d9c8:	1000051e 	bne	r2,zero,1120d9e0 <__subdf3+0x75c>
1120d9cc:	300cd0fa 	srli	r6,r6,3
1120d9d0:	2804977a 	slli	r2,r5,29
1120d9d4:	4809883a 	mov	r4,r9
1120d9d8:	3825883a 	mov	r18,r7
1120d9dc:	11a2b03a 	or	r17,r2,r6
1120d9e0:	8806d77a 	srli	r3,r17,29
1120d9e4:	200890fa 	slli	r4,r4,3
1120d9e8:	882290fa 	slli	r17,r17,3
1120d9ec:	0401ffc4 	movi	r16,2047
1120d9f0:	1906b03a 	or	r3,r3,r4
1120d9f4:	003e4406 	br	1120d308 <__alt_data_end+0xffe8d308>
1120d9f8:	2984b03a 	or	r2,r5,r6
1120d9fc:	103e4226 	beq	r2,zero,1120d308 <__alt_data_end+0xffe8d308>
1120da00:	8989c83a 	sub	r4,r17,r6
1120da04:	8911803a 	cmpltu	r8,r17,r4
1120da08:	1945c83a 	sub	r2,r3,r5
1120da0c:	1205c83a 	sub	r2,r2,r8
1120da10:	1200202c 	andhi	r8,r2,128
1120da14:	403e9a26 	beq	r8,zero,1120d480 <__alt_data_end+0xffe8d480>
1120da18:	3463c83a 	sub	r17,r6,r17
1120da1c:	28c5c83a 	sub	r2,r5,r3
1120da20:	344d803a 	cmpltu	r6,r6,r17
1120da24:	1187c83a 	sub	r3,r2,r6
1120da28:	3825883a 	mov	r18,r7
1120da2c:	003e3606 	br	1120d308 <__alt_data_end+0xffe8d308>
1120da30:	0101ffc4 	movi	r4,2047
1120da34:	493fc71e 	bne	r9,r4,1120d954 <__alt_data_end+0xffe8d954>
1120da38:	2807883a 	mov	r3,r5
1120da3c:	3023883a 	mov	r17,r6
1120da40:	4821883a 	mov	r16,r9
1120da44:	003e3006 	br	1120d308 <__alt_data_end+0xffe8d308>
1120da48:	10003626 	beq	r2,zero,1120db24 <__subdf3+0x8a0>
1120da4c:	2984b03a 	or	r2,r5,r6
1120da50:	10001726 	beq	r2,zero,1120dab0 <__subdf3+0x82c>
1120da54:	1808d0fa 	srli	r4,r3,3
1120da58:	8822d0fa 	srli	r17,r17,3
1120da5c:	1806977a 	slli	r3,r3,29
1120da60:	2080022c 	andhi	r2,r4,8
1120da64:	1c62b03a 	or	r17,r3,r17
1120da68:	10000726 	beq	r2,zero,1120da88 <__subdf3+0x804>
1120da6c:	2812d0fa 	srli	r9,r5,3
1120da70:	4880022c 	andhi	r2,r9,8
1120da74:	1000041e 	bne	r2,zero,1120da88 <__subdf3+0x804>
1120da78:	300cd0fa 	srli	r6,r6,3
1120da7c:	2804977a 	slli	r2,r5,29
1120da80:	4809883a 	mov	r4,r9
1120da84:	11a2b03a 	or	r17,r2,r6
1120da88:	8806d77a 	srli	r3,r17,29
1120da8c:	200890fa 	slli	r4,r4,3
1120da90:	882290fa 	slli	r17,r17,3
1120da94:	3825883a 	mov	r18,r7
1120da98:	1906b03a 	or	r3,r3,r4
1120da9c:	0401ffc4 	movi	r16,2047
1120daa0:	003e1906 	br	1120d308 <__alt_data_end+0xffe8d308>
1120daa4:	000b883a 	mov	r5,zero
1120daa8:	0005883a 	mov	r2,zero
1120daac:	003e2e06 	br	1120d368 <__alt_data_end+0xffe8d368>
1120dab0:	0401ffc4 	movi	r16,2047
1120dab4:	003e1406 	br	1120d308 <__alt_data_end+0xffe8d308>
1120dab8:	0005883a 	mov	r2,zero
1120dabc:	003f7506 	br	1120d894 <__alt_data_end+0xffe8d894>
1120dac0:	0005883a 	mov	r2,zero
1120dac4:	0009883a 	mov	r4,zero
1120dac8:	003e7806 	br	1120d4ac <__alt_data_end+0xffe8d4ac>
1120dacc:	123ff804 	addi	r8,r2,-32
1120dad0:	01000804 	movi	r4,32
1120dad4:	1a10d83a 	srl	r8,r3,r8
1120dad8:	11002526 	beq	r2,r4,1120db70 <__subdf3+0x8ec>
1120dadc:	01001004 	movi	r4,64
1120dae0:	2085c83a 	sub	r2,r4,r2
1120dae4:	1884983a 	sll	r2,r3,r2
1120dae8:	1444b03a 	or	r2,r2,r17
1120daec:	1004c03a 	cmpne	r2,r2,zero
1120daf0:	40a2b03a 	or	r17,r8,r2
1120daf4:	0005883a 	mov	r2,zero
1120daf8:	003f1606 	br	1120d754 <__alt_data_end+0xffe8d754>
1120dafc:	02000434 	movhi	r8,16
1120db00:	0009883a 	mov	r4,zero
1120db04:	423fffc4 	addi	r8,r8,-1
1120db08:	00bfffc4 	movi	r2,-1
1120db0c:	0401ffc4 	movi	r16,2047
1120db10:	003e6606 	br	1120d4ac <__alt_data_end+0xffe8d4ac>
1120db14:	1c62b03a 	or	r17,r3,r17
1120db18:	8822c03a 	cmpne	r17,r17,zero
1120db1c:	0005883a 	mov	r2,zero
1120db20:	003f9906 	br	1120d988 <__alt_data_end+0xffe8d988>
1120db24:	2807883a 	mov	r3,r5
1120db28:	3023883a 	mov	r17,r6
1120db2c:	0401ffc4 	movi	r16,2047
1120db30:	003df506 	br	1120d308 <__alt_data_end+0xffe8d308>
1120db34:	2807883a 	mov	r3,r5
1120db38:	3023883a 	mov	r17,r6
1120db3c:	003df206 	br	1120d308 <__alt_data_end+0xffe8d308>
1120db40:	123ff804 	addi	r8,r2,-32
1120db44:	01000804 	movi	r4,32
1120db48:	1a10d83a 	srl	r8,r3,r8
1120db4c:	11000a26 	beq	r2,r4,1120db78 <__subdf3+0x8f4>
1120db50:	01001004 	movi	r4,64
1120db54:	2085c83a 	sub	r2,r4,r2
1120db58:	1884983a 	sll	r2,r3,r2
1120db5c:	1444b03a 	or	r2,r2,r17
1120db60:	1004c03a 	cmpne	r2,r2,zero
1120db64:	40a2b03a 	or	r17,r8,r2
1120db68:	0005883a 	mov	r2,zero
1120db6c:	003f8606 	br	1120d988 <__alt_data_end+0xffe8d988>
1120db70:	0005883a 	mov	r2,zero
1120db74:	003fdc06 	br	1120dae8 <__alt_data_end+0xffe8dae8>
1120db78:	0005883a 	mov	r2,zero
1120db7c:	003ff706 	br	1120db5c <__alt_data_end+0xffe8db5c>

1120db80 <__fixdfsi>:
1120db80:	280cd53a 	srli	r6,r5,20
1120db84:	00c00434 	movhi	r3,16
1120db88:	18ffffc4 	addi	r3,r3,-1
1120db8c:	3181ffcc 	andi	r6,r6,2047
1120db90:	01c0ff84 	movi	r7,1022
1120db94:	28c6703a 	and	r3,r5,r3
1120db98:	280ad7fa 	srli	r5,r5,31
1120db9c:	3980120e 	bge	r7,r6,1120dbe8 <__fixdfsi+0x68>
1120dba0:	00810744 	movi	r2,1053
1120dba4:	11800c16 	blt	r2,r6,1120dbd8 <__fixdfsi+0x58>
1120dba8:	00810cc4 	movi	r2,1075
1120dbac:	1185c83a 	sub	r2,r2,r6
1120dbb0:	01c007c4 	movi	r7,31
1120dbb4:	18c00434 	orhi	r3,r3,16
1120dbb8:	38800d16 	blt	r7,r2,1120dbf0 <__fixdfsi+0x70>
1120dbbc:	31befb44 	addi	r6,r6,-1043
1120dbc0:	2084d83a 	srl	r2,r4,r2
1120dbc4:	1986983a 	sll	r3,r3,r6
1120dbc8:	1884b03a 	or	r2,r3,r2
1120dbcc:	28000726 	beq	r5,zero,1120dbec <__fixdfsi+0x6c>
1120dbd0:	0085c83a 	sub	r2,zero,r2
1120dbd4:	f800283a 	ret
1120dbd8:	00a00034 	movhi	r2,32768
1120dbdc:	10bfffc4 	addi	r2,r2,-1
1120dbe0:	2885883a 	add	r2,r5,r2
1120dbe4:	f800283a 	ret
1120dbe8:	0005883a 	mov	r2,zero
1120dbec:	f800283a 	ret
1120dbf0:	008104c4 	movi	r2,1043
1120dbf4:	1185c83a 	sub	r2,r2,r6
1120dbf8:	1884d83a 	srl	r2,r3,r2
1120dbfc:	003ff306 	br	1120dbcc <__alt_data_end+0xffe8dbcc>

1120dc00 <__floatsidf>:
1120dc00:	defffd04 	addi	sp,sp,-12
1120dc04:	dfc00215 	stw	ra,8(sp)
1120dc08:	dc400115 	stw	r17,4(sp)
1120dc0c:	dc000015 	stw	r16,0(sp)
1120dc10:	20002b26 	beq	r4,zero,1120dcc0 <__floatsidf+0xc0>
1120dc14:	2023883a 	mov	r17,r4
1120dc18:	2020d7fa 	srli	r16,r4,31
1120dc1c:	20002d16 	blt	r4,zero,1120dcd4 <__floatsidf+0xd4>
1120dc20:	8809883a 	mov	r4,r17
1120dc24:	120dd840 	call	1120dd84 <__clzsi2>
1120dc28:	01410784 	movi	r5,1054
1120dc2c:	288bc83a 	sub	r5,r5,r2
1120dc30:	01010cc4 	movi	r4,1075
1120dc34:	2149c83a 	sub	r4,r4,r5
1120dc38:	00c007c4 	movi	r3,31
1120dc3c:	1900160e 	bge	r3,r4,1120dc98 <__floatsidf+0x98>
1120dc40:	00c104c4 	movi	r3,1043
1120dc44:	1947c83a 	sub	r3,r3,r5
1120dc48:	88c6983a 	sll	r3,r17,r3
1120dc4c:	00800434 	movhi	r2,16
1120dc50:	10bfffc4 	addi	r2,r2,-1
1120dc54:	1886703a 	and	r3,r3,r2
1120dc58:	2941ffcc 	andi	r5,r5,2047
1120dc5c:	800d883a 	mov	r6,r16
1120dc60:	0005883a 	mov	r2,zero
1120dc64:	280a953a 	slli	r5,r5,20
1120dc68:	31803fcc 	andi	r6,r6,255
1120dc6c:	01000434 	movhi	r4,16
1120dc70:	300c97fa 	slli	r6,r6,31
1120dc74:	213fffc4 	addi	r4,r4,-1
1120dc78:	1906703a 	and	r3,r3,r4
1120dc7c:	1946b03a 	or	r3,r3,r5
1120dc80:	1986b03a 	or	r3,r3,r6
1120dc84:	dfc00217 	ldw	ra,8(sp)
1120dc88:	dc400117 	ldw	r17,4(sp)
1120dc8c:	dc000017 	ldw	r16,0(sp)
1120dc90:	dec00304 	addi	sp,sp,12
1120dc94:	f800283a 	ret
1120dc98:	00c002c4 	movi	r3,11
1120dc9c:	1887c83a 	sub	r3,r3,r2
1120dca0:	88c6d83a 	srl	r3,r17,r3
1120dca4:	8904983a 	sll	r2,r17,r4
1120dca8:	01000434 	movhi	r4,16
1120dcac:	213fffc4 	addi	r4,r4,-1
1120dcb0:	2941ffcc 	andi	r5,r5,2047
1120dcb4:	1906703a 	and	r3,r3,r4
1120dcb8:	800d883a 	mov	r6,r16
1120dcbc:	003fe906 	br	1120dc64 <__alt_data_end+0xffe8dc64>
1120dcc0:	000d883a 	mov	r6,zero
1120dcc4:	000b883a 	mov	r5,zero
1120dcc8:	0007883a 	mov	r3,zero
1120dccc:	0005883a 	mov	r2,zero
1120dcd0:	003fe406 	br	1120dc64 <__alt_data_end+0xffe8dc64>
1120dcd4:	0123c83a 	sub	r17,zero,r4
1120dcd8:	003fd106 	br	1120dc20 <__alt_data_end+0xffe8dc20>

1120dcdc <__floatunsidf>:
1120dcdc:	defffe04 	addi	sp,sp,-8
1120dce0:	dc000015 	stw	r16,0(sp)
1120dce4:	dfc00115 	stw	ra,4(sp)
1120dce8:	2021883a 	mov	r16,r4
1120dcec:	20002226 	beq	r4,zero,1120dd78 <__floatunsidf+0x9c>
1120dcf0:	120dd840 	call	1120dd84 <__clzsi2>
1120dcf4:	01010784 	movi	r4,1054
1120dcf8:	2089c83a 	sub	r4,r4,r2
1120dcfc:	01810cc4 	movi	r6,1075
1120dd00:	310dc83a 	sub	r6,r6,r4
1120dd04:	00c007c4 	movi	r3,31
1120dd08:	1980120e 	bge	r3,r6,1120dd54 <__floatunsidf+0x78>
1120dd0c:	00c104c4 	movi	r3,1043
1120dd10:	1907c83a 	sub	r3,r3,r4
1120dd14:	80ca983a 	sll	r5,r16,r3
1120dd18:	00800434 	movhi	r2,16
1120dd1c:	10bfffc4 	addi	r2,r2,-1
1120dd20:	2101ffcc 	andi	r4,r4,2047
1120dd24:	0021883a 	mov	r16,zero
1120dd28:	288a703a 	and	r5,r5,r2
1120dd2c:	2008953a 	slli	r4,r4,20
1120dd30:	00c00434 	movhi	r3,16
1120dd34:	18ffffc4 	addi	r3,r3,-1
1120dd38:	28c6703a 	and	r3,r5,r3
1120dd3c:	8005883a 	mov	r2,r16
1120dd40:	1906b03a 	or	r3,r3,r4
1120dd44:	dfc00117 	ldw	ra,4(sp)
1120dd48:	dc000017 	ldw	r16,0(sp)
1120dd4c:	dec00204 	addi	sp,sp,8
1120dd50:	f800283a 	ret
1120dd54:	00c002c4 	movi	r3,11
1120dd58:	188bc83a 	sub	r5,r3,r2
1120dd5c:	814ad83a 	srl	r5,r16,r5
1120dd60:	00c00434 	movhi	r3,16
1120dd64:	18ffffc4 	addi	r3,r3,-1
1120dd68:	81a0983a 	sll	r16,r16,r6
1120dd6c:	2101ffcc 	andi	r4,r4,2047
1120dd70:	28ca703a 	and	r5,r5,r3
1120dd74:	003fed06 	br	1120dd2c <__alt_data_end+0xffe8dd2c>
1120dd78:	0009883a 	mov	r4,zero
1120dd7c:	000b883a 	mov	r5,zero
1120dd80:	003fea06 	br	1120dd2c <__alt_data_end+0xffe8dd2c>

1120dd84 <__clzsi2>:
1120dd84:	00bfffd4 	movui	r2,65535
1120dd88:	11000536 	bltu	r2,r4,1120dda0 <__clzsi2+0x1c>
1120dd8c:	00803fc4 	movi	r2,255
1120dd90:	11000f36 	bltu	r2,r4,1120ddd0 <__clzsi2+0x4c>
1120dd94:	00800804 	movi	r2,32
1120dd98:	0007883a 	mov	r3,zero
1120dd9c:	00000506 	br	1120ddb4 <__clzsi2+0x30>
1120dda0:	00804034 	movhi	r2,256
1120dda4:	10bfffc4 	addi	r2,r2,-1
1120dda8:	11000c2e 	bgeu	r2,r4,1120dddc <__clzsi2+0x58>
1120ddac:	00800204 	movi	r2,8
1120ddb0:	00c00604 	movi	r3,24
1120ddb4:	20c8d83a 	srl	r4,r4,r3
1120ddb8:	00c44874 	movhi	r3,4385
1120ddbc:	18c1b604 	addi	r3,r3,1752
1120ddc0:	1909883a 	add	r4,r3,r4
1120ddc4:	20c00003 	ldbu	r3,0(r4)
1120ddc8:	10c5c83a 	sub	r2,r2,r3
1120ddcc:	f800283a 	ret
1120ddd0:	00800604 	movi	r2,24
1120ddd4:	00c00204 	movi	r3,8
1120ddd8:	003ff606 	br	1120ddb4 <__alt_data_end+0xffe8ddb4>
1120dddc:	00800404 	movi	r2,16
1120dde0:	1007883a 	mov	r3,r2
1120dde4:	003ff306 	br	1120ddb4 <__alt_data_end+0xffe8ddb4>

1120dde8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1120dde8:	defffe04 	addi	sp,sp,-8
1120ddec:	dfc00115 	stw	ra,4(sp)
1120ddf0:	df000015 	stw	fp,0(sp)
1120ddf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1120ddf8:	d0a00b17 	ldw	r2,-32724(gp)
1120ddfc:	10000326 	beq	r2,zero,1120de0c <alt_get_errno+0x24>
1120de00:	d0a00b17 	ldw	r2,-32724(gp)
1120de04:	103ee83a 	callr	r2
1120de08:	00000106 	br	1120de10 <alt_get_errno+0x28>
1120de0c:	d0a01604 	addi	r2,gp,-32680
}
1120de10:	e037883a 	mov	sp,fp
1120de14:	dfc00117 	ldw	ra,4(sp)
1120de18:	df000017 	ldw	fp,0(sp)
1120de1c:	dec00204 	addi	sp,sp,8
1120de20:	f800283a 	ret

1120de24 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1120de24:	defffb04 	addi	sp,sp,-20
1120de28:	dfc00415 	stw	ra,16(sp)
1120de2c:	df000315 	stw	fp,12(sp)
1120de30:	df000304 	addi	fp,sp,12
1120de34:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1120de38:	e0bfff17 	ldw	r2,-4(fp)
1120de3c:	10000616 	blt	r2,zero,1120de58 <close+0x34>
1120de40:	e0bfff17 	ldw	r2,-4(fp)
1120de44:	10c00324 	muli	r3,r2,12
1120de48:	00844874 	movhi	r2,4385
1120de4c:	10843804 	addi	r2,r2,4320
1120de50:	1885883a 	add	r2,r3,r2
1120de54:	00000106 	br	1120de5c <close+0x38>
1120de58:	0005883a 	mov	r2,zero
1120de5c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1120de60:	e0bffd17 	ldw	r2,-12(fp)
1120de64:	10001926 	beq	r2,zero,1120decc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1120de68:	e0bffd17 	ldw	r2,-12(fp)
1120de6c:	10800017 	ldw	r2,0(r2)
1120de70:	10800417 	ldw	r2,16(r2)
1120de74:	10000626 	beq	r2,zero,1120de90 <close+0x6c>
1120de78:	e0bffd17 	ldw	r2,-12(fp)
1120de7c:	10800017 	ldw	r2,0(r2)
1120de80:	10800417 	ldw	r2,16(r2)
1120de84:	e13ffd17 	ldw	r4,-12(fp)
1120de88:	103ee83a 	callr	r2
1120de8c:	00000106 	br	1120de94 <close+0x70>
1120de90:	0005883a 	mov	r2,zero
1120de94:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1120de98:	e13fff17 	ldw	r4,-4(fp)
1120de9c:	120e3f80 	call	1120e3f8 <alt_release_fd>
    if (rval < 0)
1120dea0:	e0bffe17 	ldw	r2,-8(fp)
1120dea4:	1000070e 	bge	r2,zero,1120dec4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
1120dea8:	120dde80 	call	1120dde8 <alt_get_errno>
1120deac:	1007883a 	mov	r3,r2
1120deb0:	e0bffe17 	ldw	r2,-8(fp)
1120deb4:	0085c83a 	sub	r2,zero,r2
1120deb8:	18800015 	stw	r2,0(r3)
      return -1;
1120debc:	00bfffc4 	movi	r2,-1
1120dec0:	00000706 	br	1120dee0 <close+0xbc>
    }
    return 0;
1120dec4:	0005883a 	mov	r2,zero
1120dec8:	00000506 	br	1120dee0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1120decc:	120dde80 	call	1120dde8 <alt_get_errno>
1120ded0:	1007883a 	mov	r3,r2
1120ded4:	00801444 	movi	r2,81
1120ded8:	18800015 	stw	r2,0(r3)
    return -1;
1120dedc:	00bfffc4 	movi	r2,-1
  }
}
1120dee0:	e037883a 	mov	sp,fp
1120dee4:	dfc00117 	ldw	ra,4(sp)
1120dee8:	df000017 	ldw	fp,0(sp)
1120deec:	dec00204 	addi	sp,sp,8
1120def0:	f800283a 	ret

1120def4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1120def4:	defffc04 	addi	sp,sp,-16
1120def8:	df000315 	stw	fp,12(sp)
1120defc:	df000304 	addi	fp,sp,12
1120df00:	e13ffd15 	stw	r4,-12(fp)
1120df04:	e17ffe15 	stw	r5,-8(fp)
1120df08:	e1bfff15 	stw	r6,-4(fp)
  return len;
1120df0c:	e0bfff17 	ldw	r2,-4(fp)
}
1120df10:	e037883a 	mov	sp,fp
1120df14:	df000017 	ldw	fp,0(sp)
1120df18:	dec00104 	addi	sp,sp,4
1120df1c:	f800283a 	ret

1120df20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1120df20:	defffe04 	addi	sp,sp,-8
1120df24:	dfc00115 	stw	ra,4(sp)
1120df28:	df000015 	stw	fp,0(sp)
1120df2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1120df30:	d0a00b17 	ldw	r2,-32724(gp)
1120df34:	10000326 	beq	r2,zero,1120df44 <alt_get_errno+0x24>
1120df38:	d0a00b17 	ldw	r2,-32724(gp)
1120df3c:	103ee83a 	callr	r2
1120df40:	00000106 	br	1120df48 <alt_get_errno+0x28>
1120df44:	d0a01604 	addi	r2,gp,-32680
}
1120df48:	e037883a 	mov	sp,fp
1120df4c:	dfc00117 	ldw	ra,4(sp)
1120df50:	df000017 	ldw	fp,0(sp)
1120df54:	dec00204 	addi	sp,sp,8
1120df58:	f800283a 	ret

1120df5c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1120df5c:	defffb04 	addi	sp,sp,-20
1120df60:	dfc00415 	stw	ra,16(sp)
1120df64:	df000315 	stw	fp,12(sp)
1120df68:	df000304 	addi	fp,sp,12
1120df6c:	e13ffe15 	stw	r4,-8(fp)
1120df70:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1120df74:	e0bffe17 	ldw	r2,-8(fp)
1120df78:	10000616 	blt	r2,zero,1120df94 <fstat+0x38>
1120df7c:	e0bffe17 	ldw	r2,-8(fp)
1120df80:	10c00324 	muli	r3,r2,12
1120df84:	00844874 	movhi	r2,4385
1120df88:	10843804 	addi	r2,r2,4320
1120df8c:	1885883a 	add	r2,r3,r2
1120df90:	00000106 	br	1120df98 <fstat+0x3c>
1120df94:	0005883a 	mov	r2,zero
1120df98:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1120df9c:	e0bffd17 	ldw	r2,-12(fp)
1120dfa0:	10001026 	beq	r2,zero,1120dfe4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1120dfa4:	e0bffd17 	ldw	r2,-12(fp)
1120dfa8:	10800017 	ldw	r2,0(r2)
1120dfac:	10800817 	ldw	r2,32(r2)
1120dfb0:	10000726 	beq	r2,zero,1120dfd0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1120dfb4:	e0bffd17 	ldw	r2,-12(fp)
1120dfb8:	10800017 	ldw	r2,0(r2)
1120dfbc:	10800817 	ldw	r2,32(r2)
1120dfc0:	e17fff17 	ldw	r5,-4(fp)
1120dfc4:	e13ffd17 	ldw	r4,-12(fp)
1120dfc8:	103ee83a 	callr	r2
1120dfcc:	00000a06 	br	1120dff8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1120dfd0:	e0bfff17 	ldw	r2,-4(fp)
1120dfd4:	00c80004 	movi	r3,8192
1120dfd8:	10c00115 	stw	r3,4(r2)
      return 0;
1120dfdc:	0005883a 	mov	r2,zero
1120dfe0:	00000506 	br	1120dff8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1120dfe4:	120df200 	call	1120df20 <alt_get_errno>
1120dfe8:	1007883a 	mov	r3,r2
1120dfec:	00801444 	movi	r2,81
1120dff0:	18800015 	stw	r2,0(r3)
    return -1;
1120dff4:	00bfffc4 	movi	r2,-1
  }
}
1120dff8:	e037883a 	mov	sp,fp
1120dffc:	dfc00117 	ldw	ra,4(sp)
1120e000:	df000017 	ldw	fp,0(sp)
1120e004:	dec00204 	addi	sp,sp,8
1120e008:	f800283a 	ret

1120e00c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1120e00c:	defffe04 	addi	sp,sp,-8
1120e010:	dfc00115 	stw	ra,4(sp)
1120e014:	df000015 	stw	fp,0(sp)
1120e018:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1120e01c:	d0a00b17 	ldw	r2,-32724(gp)
1120e020:	10000326 	beq	r2,zero,1120e030 <alt_get_errno+0x24>
1120e024:	d0a00b17 	ldw	r2,-32724(gp)
1120e028:	103ee83a 	callr	r2
1120e02c:	00000106 	br	1120e034 <alt_get_errno+0x28>
1120e030:	d0a01604 	addi	r2,gp,-32680
}
1120e034:	e037883a 	mov	sp,fp
1120e038:	dfc00117 	ldw	ra,4(sp)
1120e03c:	df000017 	ldw	fp,0(sp)
1120e040:	dec00204 	addi	sp,sp,8
1120e044:	f800283a 	ret

1120e048 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1120e048:	deffed04 	addi	sp,sp,-76
1120e04c:	dfc01215 	stw	ra,72(sp)
1120e050:	df001115 	stw	fp,68(sp)
1120e054:	df001104 	addi	fp,sp,68
1120e058:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1120e05c:	e0bfff17 	ldw	r2,-4(fp)
1120e060:	10000616 	blt	r2,zero,1120e07c <isatty+0x34>
1120e064:	e0bfff17 	ldw	r2,-4(fp)
1120e068:	10c00324 	muli	r3,r2,12
1120e06c:	00844874 	movhi	r2,4385
1120e070:	10843804 	addi	r2,r2,4320
1120e074:	1885883a 	add	r2,r3,r2
1120e078:	00000106 	br	1120e080 <isatty+0x38>
1120e07c:	0005883a 	mov	r2,zero
1120e080:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1120e084:	e0bfef17 	ldw	r2,-68(fp)
1120e088:	10000e26 	beq	r2,zero,1120e0c4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1120e08c:	e0bfef17 	ldw	r2,-68(fp)
1120e090:	10800017 	ldw	r2,0(r2)
1120e094:	10800817 	ldw	r2,32(r2)
1120e098:	1000021e 	bne	r2,zero,1120e0a4 <isatty+0x5c>
    {
      return 1;
1120e09c:	00800044 	movi	r2,1
1120e0a0:	00000d06 	br	1120e0d8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1120e0a4:	e0bff004 	addi	r2,fp,-64
1120e0a8:	100b883a 	mov	r5,r2
1120e0ac:	e13fff17 	ldw	r4,-4(fp)
1120e0b0:	120df5c0 	call	1120df5c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1120e0b4:	e0bff117 	ldw	r2,-60(fp)
1120e0b8:	10880020 	cmpeqi	r2,r2,8192
1120e0bc:	10803fcc 	andi	r2,r2,255
1120e0c0:	00000506 	br	1120e0d8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1120e0c4:	120e00c0 	call	1120e00c <alt_get_errno>
1120e0c8:	1007883a 	mov	r3,r2
1120e0cc:	00801444 	movi	r2,81
1120e0d0:	18800015 	stw	r2,0(r3)
    return 0;
1120e0d4:	0005883a 	mov	r2,zero
  }
}
1120e0d8:	e037883a 	mov	sp,fp
1120e0dc:	dfc00117 	ldw	ra,4(sp)
1120e0e0:	df000017 	ldw	fp,0(sp)
1120e0e4:	dec00204 	addi	sp,sp,8
1120e0e8:	f800283a 	ret

1120e0ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1120e0ec:	defffe04 	addi	sp,sp,-8
1120e0f0:	dfc00115 	stw	ra,4(sp)
1120e0f4:	df000015 	stw	fp,0(sp)
1120e0f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1120e0fc:	d0a00b17 	ldw	r2,-32724(gp)
1120e100:	10000326 	beq	r2,zero,1120e110 <alt_get_errno+0x24>
1120e104:	d0a00b17 	ldw	r2,-32724(gp)
1120e108:	103ee83a 	callr	r2
1120e10c:	00000106 	br	1120e114 <alt_get_errno+0x28>
1120e110:	d0a01604 	addi	r2,gp,-32680
}
1120e114:	e037883a 	mov	sp,fp
1120e118:	dfc00117 	ldw	ra,4(sp)
1120e11c:	df000017 	ldw	fp,0(sp)
1120e120:	dec00204 	addi	sp,sp,8
1120e124:	f800283a 	ret

1120e128 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1120e128:	defff904 	addi	sp,sp,-28
1120e12c:	dfc00615 	stw	ra,24(sp)
1120e130:	df000515 	stw	fp,20(sp)
1120e134:	df000504 	addi	fp,sp,20
1120e138:	e13ffd15 	stw	r4,-12(fp)
1120e13c:	e17ffe15 	stw	r5,-8(fp)
1120e140:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1120e144:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1120e148:	e0bffd17 	ldw	r2,-12(fp)
1120e14c:	10000616 	blt	r2,zero,1120e168 <lseek+0x40>
1120e150:	e0bffd17 	ldw	r2,-12(fp)
1120e154:	10c00324 	muli	r3,r2,12
1120e158:	00844874 	movhi	r2,4385
1120e15c:	10843804 	addi	r2,r2,4320
1120e160:	1885883a 	add	r2,r3,r2
1120e164:	00000106 	br	1120e16c <lseek+0x44>
1120e168:	0005883a 	mov	r2,zero
1120e16c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1120e170:	e0bffc17 	ldw	r2,-16(fp)
1120e174:	10001026 	beq	r2,zero,1120e1b8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1120e178:	e0bffc17 	ldw	r2,-16(fp)
1120e17c:	10800017 	ldw	r2,0(r2)
1120e180:	10800717 	ldw	r2,28(r2)
1120e184:	10000926 	beq	r2,zero,1120e1ac <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1120e188:	e0bffc17 	ldw	r2,-16(fp)
1120e18c:	10800017 	ldw	r2,0(r2)
1120e190:	10800717 	ldw	r2,28(r2)
1120e194:	e1bfff17 	ldw	r6,-4(fp)
1120e198:	e17ffe17 	ldw	r5,-8(fp)
1120e19c:	e13ffc17 	ldw	r4,-16(fp)
1120e1a0:	103ee83a 	callr	r2
1120e1a4:	e0bffb15 	stw	r2,-20(fp)
1120e1a8:	00000506 	br	1120e1c0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1120e1ac:	00bfde84 	movi	r2,-134
1120e1b0:	e0bffb15 	stw	r2,-20(fp)
1120e1b4:	00000206 	br	1120e1c0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1120e1b8:	00bfebc4 	movi	r2,-81
1120e1bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1120e1c0:	e0bffb17 	ldw	r2,-20(fp)
1120e1c4:	1000070e 	bge	r2,zero,1120e1e4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1120e1c8:	120e0ec0 	call	1120e0ec <alt_get_errno>
1120e1cc:	1007883a 	mov	r3,r2
1120e1d0:	e0bffb17 	ldw	r2,-20(fp)
1120e1d4:	0085c83a 	sub	r2,zero,r2
1120e1d8:	18800015 	stw	r2,0(r3)
    rc = -1;
1120e1dc:	00bfffc4 	movi	r2,-1
1120e1e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1120e1e4:	e0bffb17 	ldw	r2,-20(fp)
}
1120e1e8:	e037883a 	mov	sp,fp
1120e1ec:	dfc00117 	ldw	ra,4(sp)
1120e1f0:	df000017 	ldw	fp,0(sp)
1120e1f4:	dec00204 	addi	sp,sp,8
1120e1f8:	f800283a 	ret

1120e1fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1120e1fc:	defffd04 	addi	sp,sp,-12
1120e200:	dfc00215 	stw	ra,8(sp)
1120e204:	df000115 	stw	fp,4(sp)
1120e208:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1120e20c:	0009883a 	mov	r4,zero
1120e210:	120e6a40 	call	1120e6a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1120e214:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1120e218:	120e6dc0 	call	1120e6dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1120e21c:	01844874 	movhi	r6,4385
1120e220:	3181f904 	addi	r6,r6,2020
1120e224:	01444874 	movhi	r5,4385
1120e228:	2941f904 	addi	r5,r5,2020
1120e22c:	01044874 	movhi	r4,4385
1120e230:	2101f904 	addi	r4,r4,2020
1120e234:	120fa200 	call	1120fa20 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1120e238:	120f5fc0 	call	1120f5fc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1120e23c:	01044874 	movhi	r4,4385
1120e240:	213d9704 	addi	r4,r4,-2468
1120e244:	12100f40 	call	112100f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1120e248:	d0a01717 	ldw	r2,-32676(gp)
1120e24c:	d0e01817 	ldw	r3,-32672(gp)
1120e250:	d1201917 	ldw	r4,-32668(gp)
1120e254:	200d883a 	mov	r6,r4
1120e258:	180b883a 	mov	r5,r3
1120e25c:	1009883a 	mov	r4,r2
1120e260:	12012840 	call	11201284 <main>
1120e264:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1120e268:	01000044 	movi	r4,1
1120e26c:	120de240 	call	1120de24 <close>
  exit (result);
1120e270:	e13fff17 	ldw	r4,-4(fp)
1120e274:	12101080 	call	11210108 <exit>

1120e278 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1120e278:	defffe04 	addi	sp,sp,-8
1120e27c:	df000115 	stw	fp,4(sp)
1120e280:	df000104 	addi	fp,sp,4
1120e284:	e13fff15 	stw	r4,-4(fp)
}
1120e288:	0001883a 	nop
1120e28c:	e037883a 	mov	sp,fp
1120e290:	df000017 	ldw	fp,0(sp)
1120e294:	dec00104 	addi	sp,sp,4
1120e298:	f800283a 	ret

1120e29c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1120e29c:	defffe04 	addi	sp,sp,-8
1120e2a0:	df000115 	stw	fp,4(sp)
1120e2a4:	df000104 	addi	fp,sp,4
1120e2a8:	e13fff15 	stw	r4,-4(fp)
}
1120e2ac:	0001883a 	nop
1120e2b0:	e037883a 	mov	sp,fp
1120e2b4:	df000017 	ldw	fp,0(sp)
1120e2b8:	dec00104 	addi	sp,sp,4
1120e2bc:	f800283a 	ret

1120e2c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1120e2c0:	defffe04 	addi	sp,sp,-8
1120e2c4:	dfc00115 	stw	ra,4(sp)
1120e2c8:	df000015 	stw	fp,0(sp)
1120e2cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1120e2d0:	d0a00b17 	ldw	r2,-32724(gp)
1120e2d4:	10000326 	beq	r2,zero,1120e2e4 <alt_get_errno+0x24>
1120e2d8:	d0a00b17 	ldw	r2,-32724(gp)
1120e2dc:	103ee83a 	callr	r2
1120e2e0:	00000106 	br	1120e2e8 <alt_get_errno+0x28>
1120e2e4:	d0a01604 	addi	r2,gp,-32680
}
1120e2e8:	e037883a 	mov	sp,fp
1120e2ec:	dfc00117 	ldw	ra,4(sp)
1120e2f0:	df000017 	ldw	fp,0(sp)
1120e2f4:	dec00204 	addi	sp,sp,8
1120e2f8:	f800283a 	ret

1120e2fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1120e2fc:	defff904 	addi	sp,sp,-28
1120e300:	dfc00615 	stw	ra,24(sp)
1120e304:	df000515 	stw	fp,20(sp)
1120e308:	df000504 	addi	fp,sp,20
1120e30c:	e13ffd15 	stw	r4,-12(fp)
1120e310:	e17ffe15 	stw	r5,-8(fp)
1120e314:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1120e318:	e0bffd17 	ldw	r2,-12(fp)
1120e31c:	10000616 	blt	r2,zero,1120e338 <read+0x3c>
1120e320:	e0bffd17 	ldw	r2,-12(fp)
1120e324:	10c00324 	muli	r3,r2,12
1120e328:	00844874 	movhi	r2,4385
1120e32c:	10843804 	addi	r2,r2,4320
1120e330:	1885883a 	add	r2,r3,r2
1120e334:	00000106 	br	1120e33c <read+0x40>
1120e338:	0005883a 	mov	r2,zero
1120e33c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1120e340:	e0bffb17 	ldw	r2,-20(fp)
1120e344:	10002226 	beq	r2,zero,1120e3d0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1120e348:	e0bffb17 	ldw	r2,-20(fp)
1120e34c:	10800217 	ldw	r2,8(r2)
1120e350:	108000cc 	andi	r2,r2,3
1120e354:	10800060 	cmpeqi	r2,r2,1
1120e358:	1000181e 	bne	r2,zero,1120e3bc <read+0xc0>
        (fd->dev->read))
1120e35c:	e0bffb17 	ldw	r2,-20(fp)
1120e360:	10800017 	ldw	r2,0(r2)
1120e364:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1120e368:	10001426 	beq	r2,zero,1120e3bc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1120e36c:	e0bffb17 	ldw	r2,-20(fp)
1120e370:	10800017 	ldw	r2,0(r2)
1120e374:	10800517 	ldw	r2,20(r2)
1120e378:	e0ffff17 	ldw	r3,-4(fp)
1120e37c:	180d883a 	mov	r6,r3
1120e380:	e17ffe17 	ldw	r5,-8(fp)
1120e384:	e13ffb17 	ldw	r4,-20(fp)
1120e388:	103ee83a 	callr	r2
1120e38c:	e0bffc15 	stw	r2,-16(fp)
1120e390:	e0bffc17 	ldw	r2,-16(fp)
1120e394:	1000070e 	bge	r2,zero,1120e3b4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
1120e398:	120e2c00 	call	1120e2c0 <alt_get_errno>
1120e39c:	1007883a 	mov	r3,r2
1120e3a0:	e0bffc17 	ldw	r2,-16(fp)
1120e3a4:	0085c83a 	sub	r2,zero,r2
1120e3a8:	18800015 	stw	r2,0(r3)
          return -1;
1120e3ac:	00bfffc4 	movi	r2,-1
1120e3b0:	00000c06 	br	1120e3e4 <read+0xe8>
        }
        return rval;
1120e3b4:	e0bffc17 	ldw	r2,-16(fp)
1120e3b8:	00000a06 	br	1120e3e4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1120e3bc:	120e2c00 	call	1120e2c0 <alt_get_errno>
1120e3c0:	1007883a 	mov	r3,r2
1120e3c4:	00800344 	movi	r2,13
1120e3c8:	18800015 	stw	r2,0(r3)
1120e3cc:	00000406 	br	1120e3e0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1120e3d0:	120e2c00 	call	1120e2c0 <alt_get_errno>
1120e3d4:	1007883a 	mov	r3,r2
1120e3d8:	00801444 	movi	r2,81
1120e3dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
1120e3e0:	00bfffc4 	movi	r2,-1
}
1120e3e4:	e037883a 	mov	sp,fp
1120e3e8:	dfc00117 	ldw	ra,4(sp)
1120e3ec:	df000017 	ldw	fp,0(sp)
1120e3f0:	dec00204 	addi	sp,sp,8
1120e3f4:	f800283a 	ret

1120e3f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1120e3f8:	defffe04 	addi	sp,sp,-8
1120e3fc:	df000115 	stw	fp,4(sp)
1120e400:	df000104 	addi	fp,sp,4
1120e404:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1120e408:	e0bfff17 	ldw	r2,-4(fp)
1120e40c:	108000d0 	cmplti	r2,r2,3
1120e410:	10000d1e 	bne	r2,zero,1120e448 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1120e414:	00844874 	movhi	r2,4385
1120e418:	10843804 	addi	r2,r2,4320
1120e41c:	e0ffff17 	ldw	r3,-4(fp)
1120e420:	18c00324 	muli	r3,r3,12
1120e424:	10c5883a 	add	r2,r2,r3
1120e428:	10800204 	addi	r2,r2,8
1120e42c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1120e430:	00844874 	movhi	r2,4385
1120e434:	10843804 	addi	r2,r2,4320
1120e438:	e0ffff17 	ldw	r3,-4(fp)
1120e43c:	18c00324 	muli	r3,r3,12
1120e440:	10c5883a 	add	r2,r2,r3
1120e444:	10000015 	stw	zero,0(r2)
  }
}
1120e448:	0001883a 	nop
1120e44c:	e037883a 	mov	sp,fp
1120e450:	df000017 	ldw	fp,0(sp)
1120e454:	dec00104 	addi	sp,sp,4
1120e458:	f800283a 	ret

1120e45c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1120e45c:	defff904 	addi	sp,sp,-28
1120e460:	df000615 	stw	fp,24(sp)
1120e464:	df000604 	addi	fp,sp,24
1120e468:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1120e46c:	0005303a 	rdctl	r2,status
1120e470:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1120e474:	e0fffe17 	ldw	r3,-8(fp)
1120e478:	00bfff84 	movi	r2,-2
1120e47c:	1884703a 	and	r2,r3,r2
1120e480:	1001703a 	wrctl	status,r2
  
  return context;
1120e484:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1120e488:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1120e48c:	d0a00c17 	ldw	r2,-32720(gp)
1120e490:	10c000c4 	addi	r3,r2,3
1120e494:	00bfff04 	movi	r2,-4
1120e498:	1884703a 	and	r2,r3,r2
1120e49c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1120e4a0:	d0e00c17 	ldw	r3,-32720(gp)
1120e4a4:	e0bfff17 	ldw	r2,-4(fp)
1120e4a8:	1887883a 	add	r3,r3,r2
1120e4ac:	00844e34 	movhi	r2,4408
1120e4b0:	10800004 	addi	r2,r2,0
1120e4b4:	10c0062e 	bgeu	r2,r3,1120e4d0 <sbrk+0x74>
1120e4b8:	e0bffb17 	ldw	r2,-20(fp)
1120e4bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1120e4c0:	e0bffa17 	ldw	r2,-24(fp)
1120e4c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1120e4c8:	00bfffc4 	movi	r2,-1
1120e4cc:	00000b06 	br	1120e4fc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1120e4d0:	d0a00c17 	ldw	r2,-32720(gp)
1120e4d4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1120e4d8:	d0e00c17 	ldw	r3,-32720(gp)
1120e4dc:	e0bfff17 	ldw	r2,-4(fp)
1120e4e0:	1885883a 	add	r2,r3,r2
1120e4e4:	d0a00c15 	stw	r2,-32720(gp)
1120e4e8:	e0bffb17 	ldw	r2,-20(fp)
1120e4ec:	e0bffc15 	stw	r2,-16(fp)
1120e4f0:	e0bffc17 	ldw	r2,-16(fp)
1120e4f4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1120e4f8:	e0bffd17 	ldw	r2,-12(fp)
} 
1120e4fc:	e037883a 	mov	sp,fp
1120e500:	df000017 	ldw	fp,0(sp)
1120e504:	dec00104 	addi	sp,sp,4
1120e508:	f800283a 	ret

1120e50c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1120e50c:	defffd04 	addi	sp,sp,-12
1120e510:	dfc00215 	stw	ra,8(sp)
1120e514:	df000115 	stw	fp,4(sp)
1120e518:	df000104 	addi	fp,sp,4
1120e51c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1120e520:	e13fff17 	ldw	r4,-4(fp)
1120e524:	120f3c40 	call	1120f3c4 <alt_busy_sleep>
}
1120e528:	e037883a 	mov	sp,fp
1120e52c:	dfc00117 	ldw	ra,4(sp)
1120e530:	df000017 	ldw	fp,0(sp)
1120e534:	dec00204 	addi	sp,sp,8
1120e538:	f800283a 	ret

1120e53c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1120e53c:	defffe04 	addi	sp,sp,-8
1120e540:	dfc00115 	stw	ra,4(sp)
1120e544:	df000015 	stw	fp,0(sp)
1120e548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1120e54c:	d0a00b17 	ldw	r2,-32724(gp)
1120e550:	10000326 	beq	r2,zero,1120e560 <alt_get_errno+0x24>
1120e554:	d0a00b17 	ldw	r2,-32724(gp)
1120e558:	103ee83a 	callr	r2
1120e55c:	00000106 	br	1120e564 <alt_get_errno+0x28>
1120e560:	d0a01604 	addi	r2,gp,-32680
}
1120e564:	e037883a 	mov	sp,fp
1120e568:	dfc00117 	ldw	ra,4(sp)
1120e56c:	df000017 	ldw	fp,0(sp)
1120e570:	dec00204 	addi	sp,sp,8
1120e574:	f800283a 	ret

1120e578 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1120e578:	defff904 	addi	sp,sp,-28
1120e57c:	dfc00615 	stw	ra,24(sp)
1120e580:	df000515 	stw	fp,20(sp)
1120e584:	df000504 	addi	fp,sp,20
1120e588:	e13ffd15 	stw	r4,-12(fp)
1120e58c:	e17ffe15 	stw	r5,-8(fp)
1120e590:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1120e594:	e0bffd17 	ldw	r2,-12(fp)
1120e598:	10000616 	blt	r2,zero,1120e5b4 <write+0x3c>
1120e59c:	e0bffd17 	ldw	r2,-12(fp)
1120e5a0:	10c00324 	muli	r3,r2,12
1120e5a4:	00844874 	movhi	r2,4385
1120e5a8:	10843804 	addi	r2,r2,4320
1120e5ac:	1885883a 	add	r2,r3,r2
1120e5b0:	00000106 	br	1120e5b8 <write+0x40>
1120e5b4:	0005883a 	mov	r2,zero
1120e5b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1120e5bc:	e0bffb17 	ldw	r2,-20(fp)
1120e5c0:	10002126 	beq	r2,zero,1120e648 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1120e5c4:	e0bffb17 	ldw	r2,-20(fp)
1120e5c8:	10800217 	ldw	r2,8(r2)
1120e5cc:	108000cc 	andi	r2,r2,3
1120e5d0:	10001826 	beq	r2,zero,1120e634 <write+0xbc>
1120e5d4:	e0bffb17 	ldw	r2,-20(fp)
1120e5d8:	10800017 	ldw	r2,0(r2)
1120e5dc:	10800617 	ldw	r2,24(r2)
1120e5e0:	10001426 	beq	r2,zero,1120e634 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1120e5e4:	e0bffb17 	ldw	r2,-20(fp)
1120e5e8:	10800017 	ldw	r2,0(r2)
1120e5ec:	10800617 	ldw	r2,24(r2)
1120e5f0:	e0ffff17 	ldw	r3,-4(fp)
1120e5f4:	180d883a 	mov	r6,r3
1120e5f8:	e17ffe17 	ldw	r5,-8(fp)
1120e5fc:	e13ffb17 	ldw	r4,-20(fp)
1120e600:	103ee83a 	callr	r2
1120e604:	e0bffc15 	stw	r2,-16(fp)
1120e608:	e0bffc17 	ldw	r2,-16(fp)
1120e60c:	1000070e 	bge	r2,zero,1120e62c <write+0xb4>
      {
        ALT_ERRNO = -rval;
1120e610:	120e53c0 	call	1120e53c <alt_get_errno>
1120e614:	1007883a 	mov	r3,r2
1120e618:	e0bffc17 	ldw	r2,-16(fp)
1120e61c:	0085c83a 	sub	r2,zero,r2
1120e620:	18800015 	stw	r2,0(r3)
        return -1;
1120e624:	00bfffc4 	movi	r2,-1
1120e628:	00000c06 	br	1120e65c <write+0xe4>
      }
      return rval;
1120e62c:	e0bffc17 	ldw	r2,-16(fp)
1120e630:	00000a06 	br	1120e65c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1120e634:	120e53c0 	call	1120e53c <alt_get_errno>
1120e638:	1007883a 	mov	r3,r2
1120e63c:	00800344 	movi	r2,13
1120e640:	18800015 	stw	r2,0(r3)
1120e644:	00000406 	br	1120e658 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1120e648:	120e53c0 	call	1120e53c <alt_get_errno>
1120e64c:	1007883a 	mov	r3,r2
1120e650:	00801444 	movi	r2,81
1120e654:	18800015 	stw	r2,0(r3)
  }
  return -1;
1120e658:	00bfffc4 	movi	r2,-1
}
1120e65c:	e037883a 	mov	sp,fp
1120e660:	dfc00117 	ldw	ra,4(sp)
1120e664:	df000017 	ldw	fp,0(sp)
1120e668:	dec00204 	addi	sp,sp,8
1120e66c:	f800283a 	ret

1120e670 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1120e670:	defffd04 	addi	sp,sp,-12
1120e674:	dfc00215 	stw	ra,8(sp)
1120e678:	df000115 	stw	fp,4(sp)
1120e67c:	df000104 	addi	fp,sp,4
1120e680:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1120e684:	d1600804 	addi	r5,gp,-32736
1120e688:	e13fff17 	ldw	r4,-4(fp)
1120e68c:	120f5580 	call	1120f558 <alt_dev_llist_insert>
}
1120e690:	e037883a 	mov	sp,fp
1120e694:	dfc00117 	ldw	ra,4(sp)
1120e698:	df000017 	ldw	fp,0(sp)
1120e69c:	dec00204 	addi	sp,sp,8
1120e6a0:	f800283a 	ret

1120e6a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1120e6a4:	defffd04 	addi	sp,sp,-12
1120e6a8:	dfc00215 	stw	ra,8(sp)
1120e6ac:	df000115 	stw	fp,4(sp)
1120e6b0:	df000104 	addi	fp,sp,4
1120e6b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
1120e6b8:	120fe940 	call	1120fe94 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1120e6bc:	00800044 	movi	r2,1
1120e6c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1120e6c4:	0001883a 	nop
1120e6c8:	e037883a 	mov	sp,fp
1120e6cc:	dfc00117 	ldw	ra,4(sp)
1120e6d0:	df000017 	ldw	fp,0(sp)
1120e6d4:	dec00204 	addi	sp,sp,8
1120e6d8:	f800283a 	ret

1120e6dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1120e6dc:	defffe04 	addi	sp,sp,-8
1120e6e0:	dfc00115 	stw	ra,4(sp)
1120e6e4:	df000015 	stw	fp,0(sp)
1120e6e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
1120e6ec:	01c01904 	movi	r7,100
1120e6f0:	000d883a 	mov	r6,zero
1120e6f4:	000b883a 	mov	r5,zero
1120e6f8:	01040034 	movhi	r4,4096
1120e6fc:	120f21c0 	call	1120f21c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
1120e700:	01800044 	movi	r6,1
1120e704:	000b883a 	mov	r5,zero
1120e708:	01044874 	movhi	r4,4385
1120e70c:	2104a204 	addi	r4,r4,4744
1120e710:	120e8a00 	call	1120e8a0 <altera_avalon_jtag_uart_init>
1120e714:	01044874 	movhi	r4,4385
1120e718:	21049804 	addi	r4,r4,4704
1120e71c:	120e6700 	call	1120e670 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
1120e720:	0001883a 	nop
}
1120e724:	0001883a 	nop
1120e728:	e037883a 	mov	sp,fp
1120e72c:	dfc00117 	ldw	ra,4(sp)
1120e730:	df000017 	ldw	fp,0(sp)
1120e734:	dec00204 	addi	sp,sp,8
1120e738:	f800283a 	ret

1120e73c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1120e73c:	defffa04 	addi	sp,sp,-24
1120e740:	dfc00515 	stw	ra,20(sp)
1120e744:	df000415 	stw	fp,16(sp)
1120e748:	df000404 	addi	fp,sp,16
1120e74c:	e13ffd15 	stw	r4,-12(fp)
1120e750:	e17ffe15 	stw	r5,-8(fp)
1120e754:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1120e758:	e0bffd17 	ldw	r2,-12(fp)
1120e75c:	10800017 	ldw	r2,0(r2)
1120e760:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1120e764:	e0bffc17 	ldw	r2,-16(fp)
1120e768:	10c00a04 	addi	r3,r2,40
1120e76c:	e0bffd17 	ldw	r2,-12(fp)
1120e770:	10800217 	ldw	r2,8(r2)
1120e774:	100f883a 	mov	r7,r2
1120e778:	e1bfff17 	ldw	r6,-4(fp)
1120e77c:	e17ffe17 	ldw	r5,-8(fp)
1120e780:	1809883a 	mov	r4,r3
1120e784:	120ed640 	call	1120ed64 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1120e788:	e037883a 	mov	sp,fp
1120e78c:	dfc00117 	ldw	ra,4(sp)
1120e790:	df000017 	ldw	fp,0(sp)
1120e794:	dec00204 	addi	sp,sp,8
1120e798:	f800283a 	ret

1120e79c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1120e79c:	defffa04 	addi	sp,sp,-24
1120e7a0:	dfc00515 	stw	ra,20(sp)
1120e7a4:	df000415 	stw	fp,16(sp)
1120e7a8:	df000404 	addi	fp,sp,16
1120e7ac:	e13ffd15 	stw	r4,-12(fp)
1120e7b0:	e17ffe15 	stw	r5,-8(fp)
1120e7b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1120e7b8:	e0bffd17 	ldw	r2,-12(fp)
1120e7bc:	10800017 	ldw	r2,0(r2)
1120e7c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1120e7c4:	e0bffc17 	ldw	r2,-16(fp)
1120e7c8:	10c00a04 	addi	r3,r2,40
1120e7cc:	e0bffd17 	ldw	r2,-12(fp)
1120e7d0:	10800217 	ldw	r2,8(r2)
1120e7d4:	100f883a 	mov	r7,r2
1120e7d8:	e1bfff17 	ldw	r6,-4(fp)
1120e7dc:	e17ffe17 	ldw	r5,-8(fp)
1120e7e0:	1809883a 	mov	r4,r3
1120e7e4:	120ef800 	call	1120ef80 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1120e7e8:	e037883a 	mov	sp,fp
1120e7ec:	dfc00117 	ldw	ra,4(sp)
1120e7f0:	df000017 	ldw	fp,0(sp)
1120e7f4:	dec00204 	addi	sp,sp,8
1120e7f8:	f800283a 	ret

1120e7fc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1120e7fc:	defffc04 	addi	sp,sp,-16
1120e800:	dfc00315 	stw	ra,12(sp)
1120e804:	df000215 	stw	fp,8(sp)
1120e808:	df000204 	addi	fp,sp,8
1120e80c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1120e810:	e0bfff17 	ldw	r2,-4(fp)
1120e814:	10800017 	ldw	r2,0(r2)
1120e818:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1120e81c:	e0bffe17 	ldw	r2,-8(fp)
1120e820:	10c00a04 	addi	r3,r2,40
1120e824:	e0bfff17 	ldw	r2,-4(fp)
1120e828:	10800217 	ldw	r2,8(r2)
1120e82c:	100b883a 	mov	r5,r2
1120e830:	1809883a 	mov	r4,r3
1120e834:	120ec0c0 	call	1120ec0c <altera_avalon_jtag_uart_close>
}
1120e838:	e037883a 	mov	sp,fp
1120e83c:	dfc00117 	ldw	ra,4(sp)
1120e840:	df000017 	ldw	fp,0(sp)
1120e844:	dec00204 	addi	sp,sp,8
1120e848:	f800283a 	ret

1120e84c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1120e84c:	defffa04 	addi	sp,sp,-24
1120e850:	dfc00515 	stw	ra,20(sp)
1120e854:	df000415 	stw	fp,16(sp)
1120e858:	df000404 	addi	fp,sp,16
1120e85c:	e13ffd15 	stw	r4,-12(fp)
1120e860:	e17ffe15 	stw	r5,-8(fp)
1120e864:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1120e868:	e0bffd17 	ldw	r2,-12(fp)
1120e86c:	10800017 	ldw	r2,0(r2)
1120e870:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1120e874:	e0bffc17 	ldw	r2,-16(fp)
1120e878:	10800a04 	addi	r2,r2,40
1120e87c:	e1bfff17 	ldw	r6,-4(fp)
1120e880:	e17ffe17 	ldw	r5,-8(fp)
1120e884:	1009883a 	mov	r4,r2
1120e888:	120ec740 	call	1120ec74 <altera_avalon_jtag_uart_ioctl>
}
1120e88c:	e037883a 	mov	sp,fp
1120e890:	dfc00117 	ldw	ra,4(sp)
1120e894:	df000017 	ldw	fp,0(sp)
1120e898:	dec00204 	addi	sp,sp,8
1120e89c:	f800283a 	ret

1120e8a0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1120e8a0:	defffa04 	addi	sp,sp,-24
1120e8a4:	dfc00515 	stw	ra,20(sp)
1120e8a8:	df000415 	stw	fp,16(sp)
1120e8ac:	df000404 	addi	fp,sp,16
1120e8b0:	e13ffd15 	stw	r4,-12(fp)
1120e8b4:	e17ffe15 	stw	r5,-8(fp)
1120e8b8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1120e8bc:	e0bffd17 	ldw	r2,-12(fp)
1120e8c0:	00c00044 	movi	r3,1
1120e8c4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1120e8c8:	e0bffd17 	ldw	r2,-12(fp)
1120e8cc:	10800017 	ldw	r2,0(r2)
1120e8d0:	10800104 	addi	r2,r2,4
1120e8d4:	1007883a 	mov	r3,r2
1120e8d8:	e0bffd17 	ldw	r2,-12(fp)
1120e8dc:	10800817 	ldw	r2,32(r2)
1120e8e0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1120e8e4:	e0bffe17 	ldw	r2,-8(fp)
1120e8e8:	e0ffff17 	ldw	r3,-4(fp)
1120e8ec:	d8000015 	stw	zero,0(sp)
1120e8f0:	e1fffd17 	ldw	r7,-12(fp)
1120e8f4:	01844874 	movhi	r6,4385
1120e8f8:	31ba5804 	addi	r6,r6,-5792
1120e8fc:	180b883a 	mov	r5,r3
1120e900:	1009883a 	mov	r4,r2
1120e904:	120f6bc0 	call	1120f6bc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1120e908:	e0bffd17 	ldw	r2,-12(fp)
1120e90c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1120e910:	e0bffd17 	ldw	r2,-12(fp)
1120e914:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1120e918:	d0e01b17 	ldw	r3,-32660(gp)
1120e91c:	e1fffd17 	ldw	r7,-12(fp)
1120e920:	01844874 	movhi	r6,4385
1120e924:	31badb04 	addi	r6,r6,-5268
1120e928:	180b883a 	mov	r5,r3
1120e92c:	1009883a 	mov	r4,r2
1120e930:	120f2980 	call	1120f298 <alt_alarm_start>
1120e934:	1000040e 	bge	r2,zero,1120e948 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1120e938:	e0fffd17 	ldw	r3,-12(fp)
1120e93c:	00a00034 	movhi	r2,32768
1120e940:	10bfffc4 	addi	r2,r2,-1
1120e944:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1120e948:	0001883a 	nop
1120e94c:	e037883a 	mov	sp,fp
1120e950:	dfc00117 	ldw	ra,4(sp)
1120e954:	df000017 	ldw	fp,0(sp)
1120e958:	dec00204 	addi	sp,sp,8
1120e95c:	f800283a 	ret

1120e960 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1120e960:	defff804 	addi	sp,sp,-32
1120e964:	df000715 	stw	fp,28(sp)
1120e968:	df000704 	addi	fp,sp,28
1120e96c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1120e970:	e0bfff17 	ldw	r2,-4(fp)
1120e974:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1120e978:	e0bffb17 	ldw	r2,-20(fp)
1120e97c:	10800017 	ldw	r2,0(r2)
1120e980:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1120e984:	e0bffc17 	ldw	r2,-16(fp)
1120e988:	10800104 	addi	r2,r2,4
1120e98c:	10800037 	ldwio	r2,0(r2)
1120e990:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1120e994:	e0bffd17 	ldw	r2,-12(fp)
1120e998:	1080c00c 	andi	r2,r2,768
1120e99c:	10006d26 	beq	r2,zero,1120eb54 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1120e9a0:	e0bffd17 	ldw	r2,-12(fp)
1120e9a4:	1080400c 	andi	r2,r2,256
1120e9a8:	10003526 	beq	r2,zero,1120ea80 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1120e9ac:	00800074 	movhi	r2,1
1120e9b0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1120e9b4:	e0bffb17 	ldw	r2,-20(fp)
1120e9b8:	10800a17 	ldw	r2,40(r2)
1120e9bc:	10800044 	addi	r2,r2,1
1120e9c0:	1081ffcc 	andi	r2,r2,2047
1120e9c4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1120e9c8:	e0bffb17 	ldw	r2,-20(fp)
1120e9cc:	10c00b17 	ldw	r3,44(r2)
1120e9d0:	e0bffe17 	ldw	r2,-8(fp)
1120e9d4:	18801526 	beq	r3,r2,1120ea2c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1120e9d8:	e0bffc17 	ldw	r2,-16(fp)
1120e9dc:	10800037 	ldwio	r2,0(r2)
1120e9e0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1120e9e4:	e0bff917 	ldw	r2,-28(fp)
1120e9e8:	10a0000c 	andi	r2,r2,32768
1120e9ec:	10001126 	beq	r2,zero,1120ea34 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1120e9f0:	e0bffb17 	ldw	r2,-20(fp)
1120e9f4:	10800a17 	ldw	r2,40(r2)
1120e9f8:	e0fff917 	ldw	r3,-28(fp)
1120e9fc:	1809883a 	mov	r4,r3
1120ea00:	e0fffb17 	ldw	r3,-20(fp)
1120ea04:	1885883a 	add	r2,r3,r2
1120ea08:	10800e04 	addi	r2,r2,56
1120ea0c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1120ea10:	e0bffb17 	ldw	r2,-20(fp)
1120ea14:	10800a17 	ldw	r2,40(r2)
1120ea18:	10800044 	addi	r2,r2,1
1120ea1c:	10c1ffcc 	andi	r3,r2,2047
1120ea20:	e0bffb17 	ldw	r2,-20(fp)
1120ea24:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1120ea28:	003fe206 	br	1120e9b4 <__alt_data_end+0xffe8e9b4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1120ea2c:	0001883a 	nop
1120ea30:	00000106 	br	1120ea38 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1120ea34:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1120ea38:	e0bff917 	ldw	r2,-28(fp)
1120ea3c:	10bfffec 	andhi	r2,r2,65535
1120ea40:	10000f26 	beq	r2,zero,1120ea80 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1120ea44:	e0bffb17 	ldw	r2,-20(fp)
1120ea48:	10c00817 	ldw	r3,32(r2)
1120ea4c:	00bfff84 	movi	r2,-2
1120ea50:	1886703a 	and	r3,r3,r2
1120ea54:	e0bffb17 	ldw	r2,-20(fp)
1120ea58:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1120ea5c:	e0bffc17 	ldw	r2,-16(fp)
1120ea60:	10800104 	addi	r2,r2,4
1120ea64:	1007883a 	mov	r3,r2
1120ea68:	e0bffb17 	ldw	r2,-20(fp)
1120ea6c:	10800817 	ldw	r2,32(r2)
1120ea70:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1120ea74:	e0bffc17 	ldw	r2,-16(fp)
1120ea78:	10800104 	addi	r2,r2,4
1120ea7c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1120ea80:	e0bffd17 	ldw	r2,-12(fp)
1120ea84:	1080800c 	andi	r2,r2,512
1120ea88:	103fbe26 	beq	r2,zero,1120e984 <__alt_data_end+0xffe8e984>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1120ea8c:	e0bffd17 	ldw	r2,-12(fp)
1120ea90:	1004d43a 	srli	r2,r2,16
1120ea94:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1120ea98:	00001406 	br	1120eaec <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1120ea9c:	e0bffc17 	ldw	r2,-16(fp)
1120eaa0:	e0fffb17 	ldw	r3,-20(fp)
1120eaa4:	18c00d17 	ldw	r3,52(r3)
1120eaa8:	e13ffb17 	ldw	r4,-20(fp)
1120eaac:	20c7883a 	add	r3,r4,r3
1120eab0:	18c20e04 	addi	r3,r3,2104
1120eab4:	18c00003 	ldbu	r3,0(r3)
1120eab8:	18c03fcc 	andi	r3,r3,255
1120eabc:	18c0201c 	xori	r3,r3,128
1120eac0:	18ffe004 	addi	r3,r3,-128
1120eac4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1120eac8:	e0bffb17 	ldw	r2,-20(fp)
1120eacc:	10800d17 	ldw	r2,52(r2)
1120ead0:	10800044 	addi	r2,r2,1
1120ead4:	10c1ffcc 	andi	r3,r2,2047
1120ead8:	e0bffb17 	ldw	r2,-20(fp)
1120eadc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1120eae0:	e0bffa17 	ldw	r2,-24(fp)
1120eae4:	10bfffc4 	addi	r2,r2,-1
1120eae8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1120eaec:	e0bffa17 	ldw	r2,-24(fp)
1120eaf0:	10000526 	beq	r2,zero,1120eb08 <altera_avalon_jtag_uart_irq+0x1a8>
1120eaf4:	e0bffb17 	ldw	r2,-20(fp)
1120eaf8:	10c00d17 	ldw	r3,52(r2)
1120eafc:	e0bffb17 	ldw	r2,-20(fp)
1120eb00:	10800c17 	ldw	r2,48(r2)
1120eb04:	18bfe51e 	bne	r3,r2,1120ea9c <__alt_data_end+0xffe8ea9c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1120eb08:	e0bffa17 	ldw	r2,-24(fp)
1120eb0c:	103f9d26 	beq	r2,zero,1120e984 <__alt_data_end+0xffe8e984>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1120eb10:	e0bffb17 	ldw	r2,-20(fp)
1120eb14:	10c00817 	ldw	r3,32(r2)
1120eb18:	00bfff44 	movi	r2,-3
1120eb1c:	1886703a 	and	r3,r3,r2
1120eb20:	e0bffb17 	ldw	r2,-20(fp)
1120eb24:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1120eb28:	e0bffb17 	ldw	r2,-20(fp)
1120eb2c:	10800017 	ldw	r2,0(r2)
1120eb30:	10800104 	addi	r2,r2,4
1120eb34:	1007883a 	mov	r3,r2
1120eb38:	e0bffb17 	ldw	r2,-20(fp)
1120eb3c:	10800817 	ldw	r2,32(r2)
1120eb40:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1120eb44:	e0bffc17 	ldw	r2,-16(fp)
1120eb48:	10800104 	addi	r2,r2,4
1120eb4c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1120eb50:	003f8c06 	br	1120e984 <__alt_data_end+0xffe8e984>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1120eb54:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1120eb58:	0001883a 	nop
1120eb5c:	e037883a 	mov	sp,fp
1120eb60:	df000017 	ldw	fp,0(sp)
1120eb64:	dec00104 	addi	sp,sp,4
1120eb68:	f800283a 	ret

1120eb6c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1120eb6c:	defff804 	addi	sp,sp,-32
1120eb70:	df000715 	stw	fp,28(sp)
1120eb74:	df000704 	addi	fp,sp,28
1120eb78:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1120eb7c:	e0bffb17 	ldw	r2,-20(fp)
1120eb80:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1120eb84:	e0bff917 	ldw	r2,-28(fp)
1120eb88:	10800017 	ldw	r2,0(r2)
1120eb8c:	10800104 	addi	r2,r2,4
1120eb90:	10800037 	ldwio	r2,0(r2)
1120eb94:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1120eb98:	e0bffa17 	ldw	r2,-24(fp)
1120eb9c:	1081000c 	andi	r2,r2,1024
1120eba0:	10000b26 	beq	r2,zero,1120ebd0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1120eba4:	e0bff917 	ldw	r2,-28(fp)
1120eba8:	10800017 	ldw	r2,0(r2)
1120ebac:	10800104 	addi	r2,r2,4
1120ebb0:	1007883a 	mov	r3,r2
1120ebb4:	e0bff917 	ldw	r2,-28(fp)
1120ebb8:	10800817 	ldw	r2,32(r2)
1120ebbc:	10810014 	ori	r2,r2,1024
1120ebc0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1120ebc4:	e0bff917 	ldw	r2,-28(fp)
1120ebc8:	10000915 	stw	zero,36(r2)
1120ebcc:	00000a06 	br	1120ebf8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1120ebd0:	e0bff917 	ldw	r2,-28(fp)
1120ebd4:	10c00917 	ldw	r3,36(r2)
1120ebd8:	00a00034 	movhi	r2,32768
1120ebdc:	10bfff04 	addi	r2,r2,-4
1120ebe0:	10c00536 	bltu	r2,r3,1120ebf8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1120ebe4:	e0bff917 	ldw	r2,-28(fp)
1120ebe8:	10800917 	ldw	r2,36(r2)
1120ebec:	10c00044 	addi	r3,r2,1
1120ebf0:	e0bff917 	ldw	r2,-28(fp)
1120ebf4:	10c00915 	stw	r3,36(r2)
1120ebf8:	d0a01b17 	ldw	r2,-32660(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1120ebfc:	e037883a 	mov	sp,fp
1120ec00:	df000017 	ldw	fp,0(sp)
1120ec04:	dec00104 	addi	sp,sp,4
1120ec08:	f800283a 	ret

1120ec0c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1120ec0c:	defffd04 	addi	sp,sp,-12
1120ec10:	df000215 	stw	fp,8(sp)
1120ec14:	df000204 	addi	fp,sp,8
1120ec18:	e13ffe15 	stw	r4,-8(fp)
1120ec1c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1120ec20:	00000506 	br	1120ec38 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1120ec24:	e0bfff17 	ldw	r2,-4(fp)
1120ec28:	1090000c 	andi	r2,r2,16384
1120ec2c:	10000226 	beq	r2,zero,1120ec38 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1120ec30:	00bffd44 	movi	r2,-11
1120ec34:	00000b06 	br	1120ec64 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1120ec38:	e0bffe17 	ldw	r2,-8(fp)
1120ec3c:	10c00d17 	ldw	r3,52(r2)
1120ec40:	e0bffe17 	ldw	r2,-8(fp)
1120ec44:	10800c17 	ldw	r2,48(r2)
1120ec48:	18800526 	beq	r3,r2,1120ec60 <altera_avalon_jtag_uart_close+0x54>
1120ec4c:	e0bffe17 	ldw	r2,-8(fp)
1120ec50:	10c00917 	ldw	r3,36(r2)
1120ec54:	e0bffe17 	ldw	r2,-8(fp)
1120ec58:	10800117 	ldw	r2,4(r2)
1120ec5c:	18bff136 	bltu	r3,r2,1120ec24 <__alt_data_end+0xffe8ec24>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1120ec60:	0005883a 	mov	r2,zero
}
1120ec64:	e037883a 	mov	sp,fp
1120ec68:	df000017 	ldw	fp,0(sp)
1120ec6c:	dec00104 	addi	sp,sp,4
1120ec70:	f800283a 	ret

1120ec74 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1120ec74:	defffa04 	addi	sp,sp,-24
1120ec78:	df000515 	stw	fp,20(sp)
1120ec7c:	df000504 	addi	fp,sp,20
1120ec80:	e13ffd15 	stw	r4,-12(fp)
1120ec84:	e17ffe15 	stw	r5,-8(fp)
1120ec88:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1120ec8c:	00bff9c4 	movi	r2,-25
1120ec90:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1120ec94:	e0bffe17 	ldw	r2,-8(fp)
1120ec98:	10da8060 	cmpeqi	r3,r2,27137
1120ec9c:	1800031e 	bne	r3,zero,1120ecac <altera_avalon_jtag_uart_ioctl+0x38>
1120eca0:	109a80a0 	cmpeqi	r2,r2,27138
1120eca4:	1000181e 	bne	r2,zero,1120ed08 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1120eca8:	00002906 	br	1120ed50 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1120ecac:	e0bffd17 	ldw	r2,-12(fp)
1120ecb0:	10c00117 	ldw	r3,4(r2)
1120ecb4:	00a00034 	movhi	r2,32768
1120ecb8:	10bfffc4 	addi	r2,r2,-1
1120ecbc:	18802126 	beq	r3,r2,1120ed44 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1120ecc0:	e0bfff17 	ldw	r2,-4(fp)
1120ecc4:	10800017 	ldw	r2,0(r2)
1120ecc8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1120eccc:	e0bffc17 	ldw	r2,-16(fp)
1120ecd0:	10800090 	cmplti	r2,r2,2
1120ecd4:	1000061e 	bne	r2,zero,1120ecf0 <altera_avalon_jtag_uart_ioctl+0x7c>
1120ecd8:	e0fffc17 	ldw	r3,-16(fp)
1120ecdc:	00a00034 	movhi	r2,32768
1120ece0:	10bfffc4 	addi	r2,r2,-1
1120ece4:	18800226 	beq	r3,r2,1120ecf0 <altera_avalon_jtag_uart_ioctl+0x7c>
1120ece8:	e0bffc17 	ldw	r2,-16(fp)
1120ecec:	00000206 	br	1120ecf8 <altera_avalon_jtag_uart_ioctl+0x84>
1120ecf0:	00a00034 	movhi	r2,32768
1120ecf4:	10bfff84 	addi	r2,r2,-2
1120ecf8:	e0fffd17 	ldw	r3,-12(fp)
1120ecfc:	18800115 	stw	r2,4(r3)
      rc = 0;
1120ed00:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1120ed04:	00000f06 	br	1120ed44 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1120ed08:	e0bffd17 	ldw	r2,-12(fp)
1120ed0c:	10c00117 	ldw	r3,4(r2)
1120ed10:	00a00034 	movhi	r2,32768
1120ed14:	10bfffc4 	addi	r2,r2,-1
1120ed18:	18800c26 	beq	r3,r2,1120ed4c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1120ed1c:	e0bffd17 	ldw	r2,-12(fp)
1120ed20:	10c00917 	ldw	r3,36(r2)
1120ed24:	e0bffd17 	ldw	r2,-12(fp)
1120ed28:	10800117 	ldw	r2,4(r2)
1120ed2c:	1885803a 	cmpltu	r2,r3,r2
1120ed30:	10c03fcc 	andi	r3,r2,255
1120ed34:	e0bfff17 	ldw	r2,-4(fp)
1120ed38:	10c00015 	stw	r3,0(r2)
      rc = 0;
1120ed3c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1120ed40:	00000206 	br	1120ed4c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1120ed44:	0001883a 	nop
1120ed48:	00000106 	br	1120ed50 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1120ed4c:	0001883a 	nop

  default:
    break;
  }

  return rc;
1120ed50:	e0bffb17 	ldw	r2,-20(fp)
}
1120ed54:	e037883a 	mov	sp,fp
1120ed58:	df000017 	ldw	fp,0(sp)
1120ed5c:	dec00104 	addi	sp,sp,4
1120ed60:	f800283a 	ret

1120ed64 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1120ed64:	defff304 	addi	sp,sp,-52
1120ed68:	dfc00c15 	stw	ra,48(sp)
1120ed6c:	df000b15 	stw	fp,44(sp)
1120ed70:	df000b04 	addi	fp,sp,44
1120ed74:	e13ffc15 	stw	r4,-16(fp)
1120ed78:	e17ffd15 	stw	r5,-12(fp)
1120ed7c:	e1bffe15 	stw	r6,-8(fp)
1120ed80:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1120ed84:	e0bffd17 	ldw	r2,-12(fp)
1120ed88:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1120ed8c:	00004706 	br	1120eeac <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1120ed90:	e0bffc17 	ldw	r2,-16(fp)
1120ed94:	10800a17 	ldw	r2,40(r2)
1120ed98:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1120ed9c:	e0bffc17 	ldw	r2,-16(fp)
1120eda0:	10800b17 	ldw	r2,44(r2)
1120eda4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1120eda8:	e0fff717 	ldw	r3,-36(fp)
1120edac:	e0bff817 	ldw	r2,-32(fp)
1120edb0:	18800536 	bltu	r3,r2,1120edc8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1120edb4:	e0fff717 	ldw	r3,-36(fp)
1120edb8:	e0bff817 	ldw	r2,-32(fp)
1120edbc:	1885c83a 	sub	r2,r3,r2
1120edc0:	e0bff615 	stw	r2,-40(fp)
1120edc4:	00000406 	br	1120edd8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1120edc8:	00c20004 	movi	r3,2048
1120edcc:	e0bff817 	ldw	r2,-32(fp)
1120edd0:	1885c83a 	sub	r2,r3,r2
1120edd4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1120edd8:	e0bff617 	ldw	r2,-40(fp)
1120eddc:	10001e26 	beq	r2,zero,1120ee58 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1120ede0:	e0fffe17 	ldw	r3,-8(fp)
1120ede4:	e0bff617 	ldw	r2,-40(fp)
1120ede8:	1880022e 	bgeu	r3,r2,1120edf4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1120edec:	e0bffe17 	ldw	r2,-8(fp)
1120edf0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1120edf4:	e0bffc17 	ldw	r2,-16(fp)
1120edf8:	10c00e04 	addi	r3,r2,56
1120edfc:	e0bff817 	ldw	r2,-32(fp)
1120ee00:	1885883a 	add	r2,r3,r2
1120ee04:	e1bff617 	ldw	r6,-40(fp)
1120ee08:	100b883a 	mov	r5,r2
1120ee0c:	e13ff517 	ldw	r4,-44(fp)
1120ee10:	1206fe00 	call	11206fe0 <memcpy>
      ptr   += n;
1120ee14:	e0fff517 	ldw	r3,-44(fp)
1120ee18:	e0bff617 	ldw	r2,-40(fp)
1120ee1c:	1885883a 	add	r2,r3,r2
1120ee20:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1120ee24:	e0fffe17 	ldw	r3,-8(fp)
1120ee28:	e0bff617 	ldw	r2,-40(fp)
1120ee2c:	1885c83a 	sub	r2,r3,r2
1120ee30:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1120ee34:	e0fff817 	ldw	r3,-32(fp)
1120ee38:	e0bff617 	ldw	r2,-40(fp)
1120ee3c:	1885883a 	add	r2,r3,r2
1120ee40:	10c1ffcc 	andi	r3,r2,2047
1120ee44:	e0bffc17 	ldw	r2,-16(fp)
1120ee48:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1120ee4c:	e0bffe17 	ldw	r2,-8(fp)
1120ee50:	00bfcf16 	blt	zero,r2,1120ed90 <__alt_data_end+0xffe8ed90>
1120ee54:	00000106 	br	1120ee5c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1120ee58:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1120ee5c:	e0fff517 	ldw	r3,-44(fp)
1120ee60:	e0bffd17 	ldw	r2,-12(fp)
1120ee64:	1880141e 	bne	r3,r2,1120eeb8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1120ee68:	e0bfff17 	ldw	r2,-4(fp)
1120ee6c:	1090000c 	andi	r2,r2,16384
1120ee70:	1000131e 	bne	r2,zero,1120eec0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1120ee74:	0001883a 	nop
1120ee78:	e0bffc17 	ldw	r2,-16(fp)
1120ee7c:	10c00a17 	ldw	r3,40(r2)
1120ee80:	e0bff717 	ldw	r2,-36(fp)
1120ee84:	1880051e 	bne	r3,r2,1120ee9c <altera_avalon_jtag_uart_read+0x138>
1120ee88:	e0bffc17 	ldw	r2,-16(fp)
1120ee8c:	10c00917 	ldw	r3,36(r2)
1120ee90:	e0bffc17 	ldw	r2,-16(fp)
1120ee94:	10800117 	ldw	r2,4(r2)
1120ee98:	18bff736 	bltu	r3,r2,1120ee78 <__alt_data_end+0xffe8ee78>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1120ee9c:	e0bffc17 	ldw	r2,-16(fp)
1120eea0:	10c00a17 	ldw	r3,40(r2)
1120eea4:	e0bff717 	ldw	r2,-36(fp)
1120eea8:	18800726 	beq	r3,r2,1120eec8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1120eeac:	e0bffe17 	ldw	r2,-8(fp)
1120eeb0:	00bfb716 	blt	zero,r2,1120ed90 <__alt_data_end+0xffe8ed90>
1120eeb4:	00000506 	br	1120eecc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1120eeb8:	0001883a 	nop
1120eebc:	00000306 	br	1120eecc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1120eec0:	0001883a 	nop
1120eec4:	00000106 	br	1120eecc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1120eec8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1120eecc:	e0fff517 	ldw	r3,-44(fp)
1120eed0:	e0bffd17 	ldw	r2,-12(fp)
1120eed4:	18801826 	beq	r3,r2,1120ef38 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1120eed8:	0005303a 	rdctl	r2,status
1120eedc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1120eee0:	e0fffb17 	ldw	r3,-20(fp)
1120eee4:	00bfff84 	movi	r2,-2
1120eee8:	1884703a 	and	r2,r3,r2
1120eeec:	1001703a 	wrctl	status,r2
  
  return context;
1120eef0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1120eef4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1120eef8:	e0bffc17 	ldw	r2,-16(fp)
1120eefc:	10800817 	ldw	r2,32(r2)
1120ef00:	10c00054 	ori	r3,r2,1
1120ef04:	e0bffc17 	ldw	r2,-16(fp)
1120ef08:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1120ef0c:	e0bffc17 	ldw	r2,-16(fp)
1120ef10:	10800017 	ldw	r2,0(r2)
1120ef14:	10800104 	addi	r2,r2,4
1120ef18:	1007883a 	mov	r3,r2
1120ef1c:	e0bffc17 	ldw	r2,-16(fp)
1120ef20:	10800817 	ldw	r2,32(r2)
1120ef24:	18800035 	stwio	r2,0(r3)
1120ef28:	e0bffa17 	ldw	r2,-24(fp)
1120ef2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1120ef30:	e0bff917 	ldw	r2,-28(fp)
1120ef34:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1120ef38:	e0fff517 	ldw	r3,-44(fp)
1120ef3c:	e0bffd17 	ldw	r2,-12(fp)
1120ef40:	18800426 	beq	r3,r2,1120ef54 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1120ef44:	e0fff517 	ldw	r3,-44(fp)
1120ef48:	e0bffd17 	ldw	r2,-12(fp)
1120ef4c:	1885c83a 	sub	r2,r3,r2
1120ef50:	00000606 	br	1120ef6c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1120ef54:	e0bfff17 	ldw	r2,-4(fp)
1120ef58:	1090000c 	andi	r2,r2,16384
1120ef5c:	10000226 	beq	r2,zero,1120ef68 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1120ef60:	00bffd44 	movi	r2,-11
1120ef64:	00000106 	br	1120ef6c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1120ef68:	00bffec4 	movi	r2,-5
}
1120ef6c:	e037883a 	mov	sp,fp
1120ef70:	dfc00117 	ldw	ra,4(sp)
1120ef74:	df000017 	ldw	fp,0(sp)
1120ef78:	dec00204 	addi	sp,sp,8
1120ef7c:	f800283a 	ret

1120ef80 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1120ef80:	defff304 	addi	sp,sp,-52
1120ef84:	dfc00c15 	stw	ra,48(sp)
1120ef88:	df000b15 	stw	fp,44(sp)
1120ef8c:	df000b04 	addi	fp,sp,44
1120ef90:	e13ffc15 	stw	r4,-16(fp)
1120ef94:	e17ffd15 	stw	r5,-12(fp)
1120ef98:	e1bffe15 	stw	r6,-8(fp)
1120ef9c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1120efa0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1120efa4:	e0bffd17 	ldw	r2,-12(fp)
1120efa8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1120efac:	00003706 	br	1120f08c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1120efb0:	e0bffc17 	ldw	r2,-16(fp)
1120efb4:	10800c17 	ldw	r2,48(r2)
1120efb8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1120efbc:	e0bffc17 	ldw	r2,-16(fp)
1120efc0:	10800d17 	ldw	r2,52(r2)
1120efc4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1120efc8:	e0fff917 	ldw	r3,-28(fp)
1120efcc:	e0bff517 	ldw	r2,-44(fp)
1120efd0:	1880062e 	bgeu	r3,r2,1120efec <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1120efd4:	e0fff517 	ldw	r3,-44(fp)
1120efd8:	e0bff917 	ldw	r2,-28(fp)
1120efdc:	1885c83a 	sub	r2,r3,r2
1120efe0:	10bfffc4 	addi	r2,r2,-1
1120efe4:	e0bff615 	stw	r2,-40(fp)
1120efe8:	00000b06 	br	1120f018 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1120efec:	e0bff517 	ldw	r2,-44(fp)
1120eff0:	10000526 	beq	r2,zero,1120f008 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1120eff4:	00c20004 	movi	r3,2048
1120eff8:	e0bff917 	ldw	r2,-28(fp)
1120effc:	1885c83a 	sub	r2,r3,r2
1120f000:	e0bff615 	stw	r2,-40(fp)
1120f004:	00000406 	br	1120f018 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1120f008:	00c1ffc4 	movi	r3,2047
1120f00c:	e0bff917 	ldw	r2,-28(fp)
1120f010:	1885c83a 	sub	r2,r3,r2
1120f014:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1120f018:	e0bff617 	ldw	r2,-40(fp)
1120f01c:	10001e26 	beq	r2,zero,1120f098 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1120f020:	e0fffe17 	ldw	r3,-8(fp)
1120f024:	e0bff617 	ldw	r2,-40(fp)
1120f028:	1880022e 	bgeu	r3,r2,1120f034 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1120f02c:	e0bffe17 	ldw	r2,-8(fp)
1120f030:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1120f034:	e0bffc17 	ldw	r2,-16(fp)
1120f038:	10c20e04 	addi	r3,r2,2104
1120f03c:	e0bff917 	ldw	r2,-28(fp)
1120f040:	1885883a 	add	r2,r3,r2
1120f044:	e1bff617 	ldw	r6,-40(fp)
1120f048:	e17ffd17 	ldw	r5,-12(fp)
1120f04c:	1009883a 	mov	r4,r2
1120f050:	1206fe00 	call	11206fe0 <memcpy>
      ptr   += n;
1120f054:	e0fffd17 	ldw	r3,-12(fp)
1120f058:	e0bff617 	ldw	r2,-40(fp)
1120f05c:	1885883a 	add	r2,r3,r2
1120f060:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1120f064:	e0fffe17 	ldw	r3,-8(fp)
1120f068:	e0bff617 	ldw	r2,-40(fp)
1120f06c:	1885c83a 	sub	r2,r3,r2
1120f070:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1120f074:	e0fff917 	ldw	r3,-28(fp)
1120f078:	e0bff617 	ldw	r2,-40(fp)
1120f07c:	1885883a 	add	r2,r3,r2
1120f080:	10c1ffcc 	andi	r3,r2,2047
1120f084:	e0bffc17 	ldw	r2,-16(fp)
1120f088:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1120f08c:	e0bffe17 	ldw	r2,-8(fp)
1120f090:	00bfc716 	blt	zero,r2,1120efb0 <__alt_data_end+0xffe8efb0>
1120f094:	00000106 	br	1120f09c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1120f098:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1120f09c:	0005303a 	rdctl	r2,status
1120f0a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1120f0a4:	e0fffb17 	ldw	r3,-20(fp)
1120f0a8:	00bfff84 	movi	r2,-2
1120f0ac:	1884703a 	and	r2,r3,r2
1120f0b0:	1001703a 	wrctl	status,r2
  
  return context;
1120f0b4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1120f0b8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1120f0bc:	e0bffc17 	ldw	r2,-16(fp)
1120f0c0:	10800817 	ldw	r2,32(r2)
1120f0c4:	10c00094 	ori	r3,r2,2
1120f0c8:	e0bffc17 	ldw	r2,-16(fp)
1120f0cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1120f0d0:	e0bffc17 	ldw	r2,-16(fp)
1120f0d4:	10800017 	ldw	r2,0(r2)
1120f0d8:	10800104 	addi	r2,r2,4
1120f0dc:	1007883a 	mov	r3,r2
1120f0e0:	e0bffc17 	ldw	r2,-16(fp)
1120f0e4:	10800817 	ldw	r2,32(r2)
1120f0e8:	18800035 	stwio	r2,0(r3)
1120f0ec:	e0bffa17 	ldw	r2,-24(fp)
1120f0f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1120f0f4:	e0bff817 	ldw	r2,-32(fp)
1120f0f8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1120f0fc:	e0bffe17 	ldw	r2,-8(fp)
1120f100:	0080100e 	bge	zero,r2,1120f144 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1120f104:	e0bfff17 	ldw	r2,-4(fp)
1120f108:	1090000c 	andi	r2,r2,16384
1120f10c:	1000101e 	bne	r2,zero,1120f150 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1120f110:	0001883a 	nop
1120f114:	e0bffc17 	ldw	r2,-16(fp)
1120f118:	10c00d17 	ldw	r3,52(r2)
1120f11c:	e0bff517 	ldw	r2,-44(fp)
1120f120:	1880051e 	bne	r3,r2,1120f138 <altera_avalon_jtag_uart_write+0x1b8>
1120f124:	e0bffc17 	ldw	r2,-16(fp)
1120f128:	10c00917 	ldw	r3,36(r2)
1120f12c:	e0bffc17 	ldw	r2,-16(fp)
1120f130:	10800117 	ldw	r2,4(r2)
1120f134:	18bff736 	bltu	r3,r2,1120f114 <__alt_data_end+0xffe8f114>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1120f138:	e0bffc17 	ldw	r2,-16(fp)
1120f13c:	10800917 	ldw	r2,36(r2)
1120f140:	1000051e 	bne	r2,zero,1120f158 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1120f144:	e0bffe17 	ldw	r2,-8(fp)
1120f148:	00bfd016 	blt	zero,r2,1120f08c <__alt_data_end+0xffe8f08c>
1120f14c:	00000306 	br	1120f15c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1120f150:	0001883a 	nop
1120f154:	00000106 	br	1120f15c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1120f158:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1120f15c:	e0fffd17 	ldw	r3,-12(fp)
1120f160:	e0bff717 	ldw	r2,-36(fp)
1120f164:	18800426 	beq	r3,r2,1120f178 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1120f168:	e0fffd17 	ldw	r3,-12(fp)
1120f16c:	e0bff717 	ldw	r2,-36(fp)
1120f170:	1885c83a 	sub	r2,r3,r2
1120f174:	00000606 	br	1120f190 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1120f178:	e0bfff17 	ldw	r2,-4(fp)
1120f17c:	1090000c 	andi	r2,r2,16384
1120f180:	10000226 	beq	r2,zero,1120f18c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1120f184:	00bffd44 	movi	r2,-11
1120f188:	00000106 	br	1120f190 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1120f18c:	00bffec4 	movi	r2,-5
}
1120f190:	e037883a 	mov	sp,fp
1120f194:	dfc00117 	ldw	ra,4(sp)
1120f198:	df000017 	ldw	fp,0(sp)
1120f19c:	dec00204 	addi	sp,sp,8
1120f1a0:	f800283a 	ret

1120f1a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
1120f1a4:	defffa04 	addi	sp,sp,-24
1120f1a8:	dfc00515 	stw	ra,20(sp)
1120f1ac:	df000415 	stw	fp,16(sp)
1120f1b0:	df000404 	addi	fp,sp,16
1120f1b4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
1120f1b8:	0007883a 	mov	r3,zero
1120f1bc:	e0bfff17 	ldw	r2,-4(fp)
1120f1c0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
1120f1c4:	e0bfff17 	ldw	r2,-4(fp)
1120f1c8:	10800104 	addi	r2,r2,4
1120f1cc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1120f1d0:	0005303a 	rdctl	r2,status
1120f1d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1120f1d8:	e0fffd17 	ldw	r3,-12(fp)
1120f1dc:	00bfff84 	movi	r2,-2
1120f1e0:	1884703a 	and	r2,r3,r2
1120f1e4:	1001703a 	wrctl	status,r2
  
  return context;
1120f1e8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
1120f1ec:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
1120f1f0:	120fd8c0 	call	1120fd8c <alt_tick>
1120f1f4:	e0bffc17 	ldw	r2,-16(fp)
1120f1f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1120f1fc:	e0bffe17 	ldw	r2,-8(fp)
1120f200:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
1120f204:	0001883a 	nop
1120f208:	e037883a 	mov	sp,fp
1120f20c:	dfc00117 	ldw	ra,4(sp)
1120f210:	df000017 	ldw	fp,0(sp)
1120f214:	dec00204 	addi	sp,sp,8
1120f218:	f800283a 	ret

1120f21c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
1120f21c:	defff804 	addi	sp,sp,-32
1120f220:	dfc00715 	stw	ra,28(sp)
1120f224:	df000615 	stw	fp,24(sp)
1120f228:	df000604 	addi	fp,sp,24
1120f22c:	e13ffc15 	stw	r4,-16(fp)
1120f230:	e17ffd15 	stw	r5,-12(fp)
1120f234:	e1bffe15 	stw	r6,-8(fp)
1120f238:	e1ffff15 	stw	r7,-4(fp)
1120f23c:	e0bfff17 	ldw	r2,-4(fp)
1120f240:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
1120f244:	d0a01b17 	ldw	r2,-32660(gp)
1120f248:	1000021e 	bne	r2,zero,1120f254 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
1120f24c:	e0bffb17 	ldw	r2,-20(fp)
1120f250:	d0a01b15 	stw	r2,-32660(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
1120f254:	e0bffc17 	ldw	r2,-16(fp)
1120f258:	10800104 	addi	r2,r2,4
1120f25c:	00c001c4 	movi	r3,7
1120f260:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
1120f264:	d8000015 	stw	zero,0(sp)
1120f268:	e1fffc17 	ldw	r7,-16(fp)
1120f26c:	01844874 	movhi	r6,4385
1120f270:	31bc6904 	addi	r6,r6,-3676
1120f274:	e17ffe17 	ldw	r5,-8(fp)
1120f278:	e13ffd17 	ldw	r4,-12(fp)
1120f27c:	120f6bc0 	call	1120f6bc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
1120f280:	0001883a 	nop
1120f284:	e037883a 	mov	sp,fp
1120f288:	dfc00117 	ldw	ra,4(sp)
1120f28c:	df000017 	ldw	fp,0(sp)
1120f290:	dec00204 	addi	sp,sp,8
1120f294:	f800283a 	ret

1120f298 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1120f298:	defff504 	addi	sp,sp,-44
1120f29c:	df000a15 	stw	fp,40(sp)
1120f2a0:	df000a04 	addi	fp,sp,40
1120f2a4:	e13ffc15 	stw	r4,-16(fp)
1120f2a8:	e17ffd15 	stw	r5,-12(fp)
1120f2ac:	e1bffe15 	stw	r6,-8(fp)
1120f2b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1120f2b4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1120f2b8:	d0a01b17 	ldw	r2,-32660(gp)
  
  if (alt_ticks_per_second ())
1120f2bc:	10003c26 	beq	r2,zero,1120f3b0 <alt_alarm_start+0x118>
  {
    if (alarm)
1120f2c0:	e0bffc17 	ldw	r2,-16(fp)
1120f2c4:	10003826 	beq	r2,zero,1120f3a8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1120f2c8:	e0bffc17 	ldw	r2,-16(fp)
1120f2cc:	e0fffe17 	ldw	r3,-8(fp)
1120f2d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1120f2d4:	e0bffc17 	ldw	r2,-16(fp)
1120f2d8:	e0ffff17 	ldw	r3,-4(fp)
1120f2dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1120f2e0:	0005303a 	rdctl	r2,status
1120f2e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1120f2e8:	e0fff917 	ldw	r3,-28(fp)
1120f2ec:	00bfff84 	movi	r2,-2
1120f2f0:	1884703a 	and	r2,r3,r2
1120f2f4:	1001703a 	wrctl	status,r2
  
  return context;
1120f2f8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1120f2fc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1120f300:	d0a01c17 	ldw	r2,-32656(gp)
      
      current_nticks = alt_nticks();
1120f304:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1120f308:	e0fffd17 	ldw	r3,-12(fp)
1120f30c:	e0bff617 	ldw	r2,-40(fp)
1120f310:	1885883a 	add	r2,r3,r2
1120f314:	10c00044 	addi	r3,r2,1
1120f318:	e0bffc17 	ldw	r2,-16(fp)
1120f31c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1120f320:	e0bffc17 	ldw	r2,-16(fp)
1120f324:	10c00217 	ldw	r3,8(r2)
1120f328:	e0bff617 	ldw	r2,-40(fp)
1120f32c:	1880042e 	bgeu	r3,r2,1120f340 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
1120f330:	e0bffc17 	ldw	r2,-16(fp)
1120f334:	00c00044 	movi	r3,1
1120f338:	10c00405 	stb	r3,16(r2)
1120f33c:	00000206 	br	1120f348 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
1120f340:	e0bffc17 	ldw	r2,-16(fp)
1120f344:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1120f348:	e0bffc17 	ldw	r2,-16(fp)
1120f34c:	d0e00e04 	addi	r3,gp,-32712
1120f350:	e0fffa15 	stw	r3,-24(fp)
1120f354:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1120f358:	e0bffb17 	ldw	r2,-20(fp)
1120f35c:	e0fffa17 	ldw	r3,-24(fp)
1120f360:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1120f364:	e0bffa17 	ldw	r2,-24(fp)
1120f368:	10c00017 	ldw	r3,0(r2)
1120f36c:	e0bffb17 	ldw	r2,-20(fp)
1120f370:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1120f374:	e0bffa17 	ldw	r2,-24(fp)
1120f378:	10800017 	ldw	r2,0(r2)
1120f37c:	e0fffb17 	ldw	r3,-20(fp)
1120f380:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1120f384:	e0bffa17 	ldw	r2,-24(fp)
1120f388:	e0fffb17 	ldw	r3,-20(fp)
1120f38c:	10c00015 	stw	r3,0(r2)
1120f390:	e0bff817 	ldw	r2,-32(fp)
1120f394:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1120f398:	e0bff717 	ldw	r2,-36(fp)
1120f39c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1120f3a0:	0005883a 	mov	r2,zero
1120f3a4:	00000306 	br	1120f3b4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1120f3a8:	00bffa84 	movi	r2,-22
1120f3ac:	00000106 	br	1120f3b4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
1120f3b0:	00bfde84 	movi	r2,-134
  }
}
1120f3b4:	e037883a 	mov	sp,fp
1120f3b8:	df000017 	ldw	fp,0(sp)
1120f3bc:	dec00104 	addi	sp,sp,4
1120f3c0:	f800283a 	ret

1120f3c4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1120f3c4:	defffa04 	addi	sp,sp,-24
1120f3c8:	dfc00515 	stw	ra,20(sp)
1120f3cc:	df000415 	stw	fp,16(sp)
1120f3d0:	df000404 	addi	fp,sp,16
1120f3d4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
1120f3d8:	008000c4 	movi	r2,3
1120f3dc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1120f3e0:	e0fffd17 	ldw	r3,-12(fp)
1120f3e4:	008003f4 	movhi	r2,15
1120f3e8:	10909004 	addi	r2,r2,16960
1120f3ec:	1885383a 	mul	r2,r3,r2
1120f3f0:	100b883a 	mov	r5,r2
1120f3f4:	0100bef4 	movhi	r4,763
1120f3f8:	213c2004 	addi	r4,r4,-3968
1120f3fc:	12014380 	call	11201438 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1120f400:	100b883a 	mov	r5,r2
1120f404:	01200034 	movhi	r4,32768
1120f408:	213fffc4 	addi	r4,r4,-1
1120f40c:	12014380 	call	11201438 <__udivsi3>
1120f410:	100b883a 	mov	r5,r2
1120f414:	e13fff17 	ldw	r4,-4(fp)
1120f418:	12014380 	call	11201438 <__udivsi3>
1120f41c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1120f420:	e0bffe17 	ldw	r2,-8(fp)
1120f424:	10002a26 	beq	r2,zero,1120f4d0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1120f428:	e03ffc15 	stw	zero,-16(fp)
1120f42c:	00001706 	br	1120f48c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1120f430:	00a00034 	movhi	r2,32768
1120f434:	10bfffc4 	addi	r2,r2,-1
1120f438:	10bfffc4 	addi	r2,r2,-1
1120f43c:	103ffe1e 	bne	r2,zero,1120f438 <__alt_data_end+0xffe8f438>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1120f440:	e0fffd17 	ldw	r3,-12(fp)
1120f444:	008003f4 	movhi	r2,15
1120f448:	10909004 	addi	r2,r2,16960
1120f44c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1120f450:	100b883a 	mov	r5,r2
1120f454:	0100bef4 	movhi	r4,763
1120f458:	213c2004 	addi	r4,r4,-3968
1120f45c:	12014380 	call	11201438 <__udivsi3>
1120f460:	100b883a 	mov	r5,r2
1120f464:	01200034 	movhi	r4,32768
1120f468:	213fffc4 	addi	r4,r4,-1
1120f46c:	12014380 	call	11201438 <__udivsi3>
1120f470:	1007883a 	mov	r3,r2
1120f474:	e0bfff17 	ldw	r2,-4(fp)
1120f478:	10c5c83a 	sub	r2,r2,r3
1120f47c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1120f480:	e0bffc17 	ldw	r2,-16(fp)
1120f484:	10800044 	addi	r2,r2,1
1120f488:	e0bffc15 	stw	r2,-16(fp)
1120f48c:	e0fffc17 	ldw	r3,-16(fp)
1120f490:	e0bffe17 	ldw	r2,-8(fp)
1120f494:	18bfe616 	blt	r3,r2,1120f430 <__alt_data_end+0xffe8f430>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1120f498:	e0fffd17 	ldw	r3,-12(fp)
1120f49c:	008003f4 	movhi	r2,15
1120f4a0:	10909004 	addi	r2,r2,16960
1120f4a4:	1885383a 	mul	r2,r3,r2
1120f4a8:	100b883a 	mov	r5,r2
1120f4ac:	0100bef4 	movhi	r4,763
1120f4b0:	213c2004 	addi	r4,r4,-3968
1120f4b4:	12014380 	call	11201438 <__udivsi3>
1120f4b8:	1007883a 	mov	r3,r2
1120f4bc:	e0bfff17 	ldw	r2,-4(fp)
1120f4c0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1120f4c4:	10bfffc4 	addi	r2,r2,-1
1120f4c8:	103ffe1e 	bne	r2,zero,1120f4c4 <__alt_data_end+0xffe8f4c4>
1120f4cc:	00000d06 	br	1120f504 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1120f4d0:	e0fffd17 	ldw	r3,-12(fp)
1120f4d4:	008003f4 	movhi	r2,15
1120f4d8:	10909004 	addi	r2,r2,16960
1120f4dc:	1885383a 	mul	r2,r3,r2
1120f4e0:	100b883a 	mov	r5,r2
1120f4e4:	0100bef4 	movhi	r4,763
1120f4e8:	213c2004 	addi	r4,r4,-3968
1120f4ec:	12014380 	call	11201438 <__udivsi3>
1120f4f0:	1007883a 	mov	r3,r2
1120f4f4:	e0bfff17 	ldw	r2,-4(fp)
1120f4f8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1120f4fc:	10bfffc4 	addi	r2,r2,-1
1120f500:	00bffe16 	blt	zero,r2,1120f4fc <__alt_data_end+0xffe8f4fc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
1120f504:	0005883a 	mov	r2,zero
}
1120f508:	e037883a 	mov	sp,fp
1120f50c:	dfc00117 	ldw	ra,4(sp)
1120f510:	df000017 	ldw	fp,0(sp)
1120f514:	dec00204 	addi	sp,sp,8
1120f518:	f800283a 	ret

1120f51c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1120f51c:	defffe04 	addi	sp,sp,-8
1120f520:	dfc00115 	stw	ra,4(sp)
1120f524:	df000015 	stw	fp,0(sp)
1120f528:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1120f52c:	d0a00b17 	ldw	r2,-32724(gp)
1120f530:	10000326 	beq	r2,zero,1120f540 <alt_get_errno+0x24>
1120f534:	d0a00b17 	ldw	r2,-32724(gp)
1120f538:	103ee83a 	callr	r2
1120f53c:	00000106 	br	1120f544 <alt_get_errno+0x28>
1120f540:	d0a01604 	addi	r2,gp,-32680
}
1120f544:	e037883a 	mov	sp,fp
1120f548:	dfc00117 	ldw	ra,4(sp)
1120f54c:	df000017 	ldw	fp,0(sp)
1120f550:	dec00204 	addi	sp,sp,8
1120f554:	f800283a 	ret

1120f558 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1120f558:	defffa04 	addi	sp,sp,-24
1120f55c:	dfc00515 	stw	ra,20(sp)
1120f560:	df000415 	stw	fp,16(sp)
1120f564:	df000404 	addi	fp,sp,16
1120f568:	e13ffe15 	stw	r4,-8(fp)
1120f56c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1120f570:	e0bffe17 	ldw	r2,-8(fp)
1120f574:	10000326 	beq	r2,zero,1120f584 <alt_dev_llist_insert+0x2c>
1120f578:	e0bffe17 	ldw	r2,-8(fp)
1120f57c:	10800217 	ldw	r2,8(r2)
1120f580:	1000061e 	bne	r2,zero,1120f59c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1120f584:	120f51c0 	call	1120f51c <alt_get_errno>
1120f588:	1007883a 	mov	r3,r2
1120f58c:	00800584 	movi	r2,22
1120f590:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1120f594:	00bffa84 	movi	r2,-22
1120f598:	00001306 	br	1120f5e8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1120f59c:	e0bffe17 	ldw	r2,-8(fp)
1120f5a0:	e0ffff17 	ldw	r3,-4(fp)
1120f5a4:	e0fffc15 	stw	r3,-16(fp)
1120f5a8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1120f5ac:	e0bffd17 	ldw	r2,-12(fp)
1120f5b0:	e0fffc17 	ldw	r3,-16(fp)
1120f5b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1120f5b8:	e0bffc17 	ldw	r2,-16(fp)
1120f5bc:	10c00017 	ldw	r3,0(r2)
1120f5c0:	e0bffd17 	ldw	r2,-12(fp)
1120f5c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1120f5c8:	e0bffc17 	ldw	r2,-16(fp)
1120f5cc:	10800017 	ldw	r2,0(r2)
1120f5d0:	e0fffd17 	ldw	r3,-12(fp)
1120f5d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1120f5d8:	e0bffc17 	ldw	r2,-16(fp)
1120f5dc:	e0fffd17 	ldw	r3,-12(fp)
1120f5e0:	10c00015 	stw	r3,0(r2)

  return 0;  
1120f5e4:	0005883a 	mov	r2,zero
}
1120f5e8:	e037883a 	mov	sp,fp
1120f5ec:	dfc00117 	ldw	ra,4(sp)
1120f5f0:	df000017 	ldw	fp,0(sp)
1120f5f4:	dec00204 	addi	sp,sp,8
1120f5f8:	f800283a 	ret

1120f5fc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1120f5fc:	defffd04 	addi	sp,sp,-12
1120f600:	dfc00215 	stw	ra,8(sp)
1120f604:	df000115 	stw	fp,4(sp)
1120f608:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1120f60c:	00844874 	movhi	r2,4385
1120f610:	10812104 	addi	r2,r2,1156
1120f614:	e0bfff15 	stw	r2,-4(fp)
1120f618:	00000606 	br	1120f634 <_do_ctors+0x38>
        (*ctor) (); 
1120f61c:	e0bfff17 	ldw	r2,-4(fp)
1120f620:	10800017 	ldw	r2,0(r2)
1120f624:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1120f628:	e0bfff17 	ldw	r2,-4(fp)
1120f62c:	10bfff04 	addi	r2,r2,-4
1120f630:	e0bfff15 	stw	r2,-4(fp)
1120f634:	e0ffff17 	ldw	r3,-4(fp)
1120f638:	00844874 	movhi	r2,4385
1120f63c:	10812204 	addi	r2,r2,1160
1120f640:	18bff62e 	bgeu	r3,r2,1120f61c <__alt_data_end+0xffe8f61c>
        (*ctor) (); 
}
1120f644:	0001883a 	nop
1120f648:	e037883a 	mov	sp,fp
1120f64c:	dfc00117 	ldw	ra,4(sp)
1120f650:	df000017 	ldw	fp,0(sp)
1120f654:	dec00204 	addi	sp,sp,8
1120f658:	f800283a 	ret

1120f65c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1120f65c:	defffd04 	addi	sp,sp,-12
1120f660:	dfc00215 	stw	ra,8(sp)
1120f664:	df000115 	stw	fp,4(sp)
1120f668:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1120f66c:	00844874 	movhi	r2,4385
1120f670:	10812104 	addi	r2,r2,1156
1120f674:	e0bfff15 	stw	r2,-4(fp)
1120f678:	00000606 	br	1120f694 <_do_dtors+0x38>
        (*dtor) (); 
1120f67c:	e0bfff17 	ldw	r2,-4(fp)
1120f680:	10800017 	ldw	r2,0(r2)
1120f684:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1120f688:	e0bfff17 	ldw	r2,-4(fp)
1120f68c:	10bfff04 	addi	r2,r2,-4
1120f690:	e0bfff15 	stw	r2,-4(fp)
1120f694:	e0ffff17 	ldw	r3,-4(fp)
1120f698:	00844874 	movhi	r2,4385
1120f69c:	10812204 	addi	r2,r2,1160
1120f6a0:	18bff62e 	bgeu	r3,r2,1120f67c <__alt_data_end+0xffe8f67c>
        (*dtor) (); 
}
1120f6a4:	0001883a 	nop
1120f6a8:	e037883a 	mov	sp,fp
1120f6ac:	dfc00117 	ldw	ra,4(sp)
1120f6b0:	df000017 	ldw	fp,0(sp)
1120f6b4:	dec00204 	addi	sp,sp,8
1120f6b8:	f800283a 	ret

1120f6bc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1120f6bc:	defff904 	addi	sp,sp,-28
1120f6c0:	dfc00615 	stw	ra,24(sp)
1120f6c4:	df000515 	stw	fp,20(sp)
1120f6c8:	df000504 	addi	fp,sp,20
1120f6cc:	e13ffc15 	stw	r4,-16(fp)
1120f6d0:	e17ffd15 	stw	r5,-12(fp)
1120f6d4:	e1bffe15 	stw	r6,-8(fp)
1120f6d8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1120f6dc:	e0800217 	ldw	r2,8(fp)
1120f6e0:	d8800015 	stw	r2,0(sp)
1120f6e4:	e1ffff17 	ldw	r7,-4(fp)
1120f6e8:	e1bffe17 	ldw	r6,-8(fp)
1120f6ec:	e17ffd17 	ldw	r5,-12(fp)
1120f6f0:	e13ffc17 	ldw	r4,-16(fp)
1120f6f4:	120f86c0 	call	1120f86c <alt_iic_isr_register>
}  
1120f6f8:	e037883a 	mov	sp,fp
1120f6fc:	dfc00117 	ldw	ra,4(sp)
1120f700:	df000017 	ldw	fp,0(sp)
1120f704:	dec00204 	addi	sp,sp,8
1120f708:	f800283a 	ret

1120f70c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1120f70c:	defff904 	addi	sp,sp,-28
1120f710:	df000615 	stw	fp,24(sp)
1120f714:	df000604 	addi	fp,sp,24
1120f718:	e13ffe15 	stw	r4,-8(fp)
1120f71c:	e17fff15 	stw	r5,-4(fp)
1120f720:	e0bfff17 	ldw	r2,-4(fp)
1120f724:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1120f728:	0005303a 	rdctl	r2,status
1120f72c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1120f730:	e0fffb17 	ldw	r3,-20(fp)
1120f734:	00bfff84 	movi	r2,-2
1120f738:	1884703a 	and	r2,r3,r2
1120f73c:	1001703a 	wrctl	status,r2
  
  return context;
1120f740:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1120f744:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1120f748:	00c00044 	movi	r3,1
1120f74c:	e0bffa17 	ldw	r2,-24(fp)
1120f750:	1884983a 	sll	r2,r3,r2
1120f754:	1007883a 	mov	r3,r2
1120f758:	d0a01a17 	ldw	r2,-32664(gp)
1120f75c:	1884b03a 	or	r2,r3,r2
1120f760:	d0a01a15 	stw	r2,-32664(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1120f764:	d0a01a17 	ldw	r2,-32664(gp)
1120f768:	100170fa 	wrctl	ienable,r2
1120f76c:	e0bffc17 	ldw	r2,-16(fp)
1120f770:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1120f774:	e0bffd17 	ldw	r2,-12(fp)
1120f778:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1120f77c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1120f780:	0001883a 	nop
}
1120f784:	e037883a 	mov	sp,fp
1120f788:	df000017 	ldw	fp,0(sp)
1120f78c:	dec00104 	addi	sp,sp,4
1120f790:	f800283a 	ret

1120f794 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1120f794:	defff904 	addi	sp,sp,-28
1120f798:	df000615 	stw	fp,24(sp)
1120f79c:	df000604 	addi	fp,sp,24
1120f7a0:	e13ffe15 	stw	r4,-8(fp)
1120f7a4:	e17fff15 	stw	r5,-4(fp)
1120f7a8:	e0bfff17 	ldw	r2,-4(fp)
1120f7ac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1120f7b0:	0005303a 	rdctl	r2,status
1120f7b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1120f7b8:	e0fffb17 	ldw	r3,-20(fp)
1120f7bc:	00bfff84 	movi	r2,-2
1120f7c0:	1884703a 	and	r2,r3,r2
1120f7c4:	1001703a 	wrctl	status,r2
  
  return context;
1120f7c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1120f7cc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1120f7d0:	00c00044 	movi	r3,1
1120f7d4:	e0bffa17 	ldw	r2,-24(fp)
1120f7d8:	1884983a 	sll	r2,r3,r2
1120f7dc:	0084303a 	nor	r2,zero,r2
1120f7e0:	1007883a 	mov	r3,r2
1120f7e4:	d0a01a17 	ldw	r2,-32664(gp)
1120f7e8:	1884703a 	and	r2,r3,r2
1120f7ec:	d0a01a15 	stw	r2,-32664(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1120f7f0:	d0a01a17 	ldw	r2,-32664(gp)
1120f7f4:	100170fa 	wrctl	ienable,r2
1120f7f8:	e0bffc17 	ldw	r2,-16(fp)
1120f7fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1120f800:	e0bffd17 	ldw	r2,-12(fp)
1120f804:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1120f808:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1120f80c:	0001883a 	nop
}
1120f810:	e037883a 	mov	sp,fp
1120f814:	df000017 	ldw	fp,0(sp)
1120f818:	dec00104 	addi	sp,sp,4
1120f81c:	f800283a 	ret

1120f820 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1120f820:	defffc04 	addi	sp,sp,-16
1120f824:	df000315 	stw	fp,12(sp)
1120f828:	df000304 	addi	fp,sp,12
1120f82c:	e13ffe15 	stw	r4,-8(fp)
1120f830:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1120f834:	000530fa 	rdctl	r2,ienable
1120f838:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1120f83c:	00c00044 	movi	r3,1
1120f840:	e0bfff17 	ldw	r2,-4(fp)
1120f844:	1884983a 	sll	r2,r3,r2
1120f848:	1007883a 	mov	r3,r2
1120f84c:	e0bffd17 	ldw	r2,-12(fp)
1120f850:	1884703a 	and	r2,r3,r2
1120f854:	1004c03a 	cmpne	r2,r2,zero
1120f858:	10803fcc 	andi	r2,r2,255
}
1120f85c:	e037883a 	mov	sp,fp
1120f860:	df000017 	ldw	fp,0(sp)
1120f864:	dec00104 	addi	sp,sp,4
1120f868:	f800283a 	ret

1120f86c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1120f86c:	defff504 	addi	sp,sp,-44
1120f870:	dfc00a15 	stw	ra,40(sp)
1120f874:	df000915 	stw	fp,36(sp)
1120f878:	df000904 	addi	fp,sp,36
1120f87c:	e13ffc15 	stw	r4,-16(fp)
1120f880:	e17ffd15 	stw	r5,-12(fp)
1120f884:	e1bffe15 	stw	r6,-8(fp)
1120f888:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1120f88c:	00bffa84 	movi	r2,-22
1120f890:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1120f894:	e0bffd17 	ldw	r2,-12(fp)
1120f898:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1120f89c:	e0bff817 	ldw	r2,-32(fp)
1120f8a0:	10800808 	cmpgei	r2,r2,32
1120f8a4:	1000271e 	bne	r2,zero,1120f944 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1120f8a8:	0005303a 	rdctl	r2,status
1120f8ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1120f8b0:	e0fffb17 	ldw	r3,-20(fp)
1120f8b4:	00bfff84 	movi	r2,-2
1120f8b8:	1884703a 	and	r2,r3,r2
1120f8bc:	1001703a 	wrctl	status,r2
  
  return context;
1120f8c0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1120f8c4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1120f8c8:	00844874 	movhi	r2,4385
1120f8cc:	1088d704 	addi	r2,r2,9052
1120f8d0:	e0fff817 	ldw	r3,-32(fp)
1120f8d4:	180690fa 	slli	r3,r3,3
1120f8d8:	10c5883a 	add	r2,r2,r3
1120f8dc:	e0fffe17 	ldw	r3,-8(fp)
1120f8e0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1120f8e4:	00844874 	movhi	r2,4385
1120f8e8:	1088d704 	addi	r2,r2,9052
1120f8ec:	e0fff817 	ldw	r3,-32(fp)
1120f8f0:	180690fa 	slli	r3,r3,3
1120f8f4:	10c5883a 	add	r2,r2,r3
1120f8f8:	10800104 	addi	r2,r2,4
1120f8fc:	e0ffff17 	ldw	r3,-4(fp)
1120f900:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1120f904:	e0bffe17 	ldw	r2,-8(fp)
1120f908:	10000526 	beq	r2,zero,1120f920 <alt_iic_isr_register+0xb4>
1120f90c:	e0bff817 	ldw	r2,-32(fp)
1120f910:	100b883a 	mov	r5,r2
1120f914:	e13ffc17 	ldw	r4,-16(fp)
1120f918:	120f70c0 	call	1120f70c <alt_ic_irq_enable>
1120f91c:	00000406 	br	1120f930 <alt_iic_isr_register+0xc4>
1120f920:	e0bff817 	ldw	r2,-32(fp)
1120f924:	100b883a 	mov	r5,r2
1120f928:	e13ffc17 	ldw	r4,-16(fp)
1120f92c:	120f7940 	call	1120f794 <alt_ic_irq_disable>
1120f930:	e0bff715 	stw	r2,-36(fp)
1120f934:	e0bffa17 	ldw	r2,-24(fp)
1120f938:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1120f93c:	e0bff917 	ldw	r2,-28(fp)
1120f940:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1120f944:	e0bff717 	ldw	r2,-36(fp)
}
1120f948:	e037883a 	mov	sp,fp
1120f94c:	dfc00117 	ldw	ra,4(sp)
1120f950:	df000017 	ldw	fp,0(sp)
1120f954:	dec00204 	addi	sp,sp,8
1120f958:	f800283a 	ret

1120f95c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1120f95c:	defff904 	addi	sp,sp,-28
1120f960:	dfc00615 	stw	ra,24(sp)
1120f964:	df000515 	stw	fp,20(sp)
1120f968:	df000504 	addi	fp,sp,20
1120f96c:	e13ffc15 	stw	r4,-16(fp)
1120f970:	e17ffd15 	stw	r5,-12(fp)
1120f974:	e1bffe15 	stw	r6,-8(fp)
1120f978:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
1120f97c:	e1bfff17 	ldw	r6,-4(fp)
1120f980:	e17ffe17 	ldw	r5,-8(fp)
1120f984:	e13ffd17 	ldw	r4,-12(fp)
1120f988:	120fb9c0 	call	1120fb9c <open>
1120f98c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
1120f990:	e0bffb17 	ldw	r2,-20(fp)
1120f994:	10001c16 	blt	r2,zero,1120fa08 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
1120f998:	00844874 	movhi	r2,4385
1120f99c:	10843804 	addi	r2,r2,4320
1120f9a0:	e0fffb17 	ldw	r3,-20(fp)
1120f9a4:	18c00324 	muli	r3,r3,12
1120f9a8:	10c5883a 	add	r2,r2,r3
1120f9ac:	10c00017 	ldw	r3,0(r2)
1120f9b0:	e0bffc17 	ldw	r2,-16(fp)
1120f9b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1120f9b8:	00844874 	movhi	r2,4385
1120f9bc:	10843804 	addi	r2,r2,4320
1120f9c0:	e0fffb17 	ldw	r3,-20(fp)
1120f9c4:	18c00324 	muli	r3,r3,12
1120f9c8:	10c5883a 	add	r2,r2,r3
1120f9cc:	10800104 	addi	r2,r2,4
1120f9d0:	10c00017 	ldw	r3,0(r2)
1120f9d4:	e0bffc17 	ldw	r2,-16(fp)
1120f9d8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1120f9dc:	00844874 	movhi	r2,4385
1120f9e0:	10843804 	addi	r2,r2,4320
1120f9e4:	e0fffb17 	ldw	r3,-20(fp)
1120f9e8:	18c00324 	muli	r3,r3,12
1120f9ec:	10c5883a 	add	r2,r2,r3
1120f9f0:	10800204 	addi	r2,r2,8
1120f9f4:	10c00017 	ldw	r3,0(r2)
1120f9f8:	e0bffc17 	ldw	r2,-16(fp)
1120f9fc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1120fa00:	e13ffb17 	ldw	r4,-20(fp)
1120fa04:	120e3f80 	call	1120e3f8 <alt_release_fd>
  }
} 
1120fa08:	0001883a 	nop
1120fa0c:	e037883a 	mov	sp,fp
1120fa10:	dfc00117 	ldw	ra,4(sp)
1120fa14:	df000017 	ldw	fp,0(sp)
1120fa18:	dec00204 	addi	sp,sp,8
1120fa1c:	f800283a 	ret

1120fa20 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1120fa20:	defffb04 	addi	sp,sp,-20
1120fa24:	dfc00415 	stw	ra,16(sp)
1120fa28:	df000315 	stw	fp,12(sp)
1120fa2c:	df000304 	addi	fp,sp,12
1120fa30:	e13ffd15 	stw	r4,-12(fp)
1120fa34:	e17ffe15 	stw	r5,-8(fp)
1120fa38:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1120fa3c:	01c07fc4 	movi	r7,511
1120fa40:	01800044 	movi	r6,1
1120fa44:	e17ffd17 	ldw	r5,-12(fp)
1120fa48:	01044874 	movhi	r4,4385
1120fa4c:	21043b04 	addi	r4,r4,4332
1120fa50:	120f95c0 	call	1120f95c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1120fa54:	01c07fc4 	movi	r7,511
1120fa58:	000d883a 	mov	r6,zero
1120fa5c:	e17ffe17 	ldw	r5,-8(fp)
1120fa60:	01044874 	movhi	r4,4385
1120fa64:	21043804 	addi	r4,r4,4320
1120fa68:	120f95c0 	call	1120f95c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1120fa6c:	01c07fc4 	movi	r7,511
1120fa70:	01800044 	movi	r6,1
1120fa74:	e17fff17 	ldw	r5,-4(fp)
1120fa78:	01044874 	movhi	r4,4385
1120fa7c:	21043e04 	addi	r4,r4,4344
1120fa80:	120f95c0 	call	1120f95c <alt_open_fd>
}  
1120fa84:	0001883a 	nop
1120fa88:	e037883a 	mov	sp,fp
1120fa8c:	dfc00117 	ldw	ra,4(sp)
1120fa90:	df000017 	ldw	fp,0(sp)
1120fa94:	dec00204 	addi	sp,sp,8
1120fa98:	f800283a 	ret

1120fa9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1120fa9c:	defffe04 	addi	sp,sp,-8
1120faa0:	dfc00115 	stw	ra,4(sp)
1120faa4:	df000015 	stw	fp,0(sp)
1120faa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1120faac:	d0a00b17 	ldw	r2,-32724(gp)
1120fab0:	10000326 	beq	r2,zero,1120fac0 <alt_get_errno+0x24>
1120fab4:	d0a00b17 	ldw	r2,-32724(gp)
1120fab8:	103ee83a 	callr	r2
1120fabc:	00000106 	br	1120fac4 <alt_get_errno+0x28>
1120fac0:	d0a01604 	addi	r2,gp,-32680
}
1120fac4:	e037883a 	mov	sp,fp
1120fac8:	dfc00117 	ldw	ra,4(sp)
1120facc:	df000017 	ldw	fp,0(sp)
1120fad0:	dec00204 	addi	sp,sp,8
1120fad4:	f800283a 	ret

1120fad8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1120fad8:	defffd04 	addi	sp,sp,-12
1120fadc:	df000215 	stw	fp,8(sp)
1120fae0:	df000204 	addi	fp,sp,8
1120fae4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1120fae8:	e0bfff17 	ldw	r2,-4(fp)
1120faec:	10800217 	ldw	r2,8(r2)
1120faf0:	10d00034 	orhi	r3,r2,16384
1120faf4:	e0bfff17 	ldw	r2,-4(fp)
1120faf8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1120fafc:	e03ffe15 	stw	zero,-8(fp)
1120fb00:	00001d06 	br	1120fb78 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1120fb04:	00844874 	movhi	r2,4385
1120fb08:	10843804 	addi	r2,r2,4320
1120fb0c:	e0fffe17 	ldw	r3,-8(fp)
1120fb10:	18c00324 	muli	r3,r3,12
1120fb14:	10c5883a 	add	r2,r2,r3
1120fb18:	10c00017 	ldw	r3,0(r2)
1120fb1c:	e0bfff17 	ldw	r2,-4(fp)
1120fb20:	10800017 	ldw	r2,0(r2)
1120fb24:	1880111e 	bne	r3,r2,1120fb6c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1120fb28:	00844874 	movhi	r2,4385
1120fb2c:	10843804 	addi	r2,r2,4320
1120fb30:	e0fffe17 	ldw	r3,-8(fp)
1120fb34:	18c00324 	muli	r3,r3,12
1120fb38:	10c5883a 	add	r2,r2,r3
1120fb3c:	10800204 	addi	r2,r2,8
1120fb40:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1120fb44:	1000090e 	bge	r2,zero,1120fb6c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1120fb48:	e0bffe17 	ldw	r2,-8(fp)
1120fb4c:	10c00324 	muli	r3,r2,12
1120fb50:	00844874 	movhi	r2,4385
1120fb54:	10843804 	addi	r2,r2,4320
1120fb58:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1120fb5c:	e0bfff17 	ldw	r2,-4(fp)
1120fb60:	18800226 	beq	r3,r2,1120fb6c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1120fb64:	00bffcc4 	movi	r2,-13
1120fb68:	00000806 	br	1120fb8c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1120fb6c:	e0bffe17 	ldw	r2,-8(fp)
1120fb70:	10800044 	addi	r2,r2,1
1120fb74:	e0bffe15 	stw	r2,-8(fp)
1120fb78:	d0a00a17 	ldw	r2,-32728(gp)
1120fb7c:	1007883a 	mov	r3,r2
1120fb80:	e0bffe17 	ldw	r2,-8(fp)
1120fb84:	18bfdf2e 	bgeu	r3,r2,1120fb04 <__alt_data_end+0xffe8fb04>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1120fb88:	0005883a 	mov	r2,zero
}
1120fb8c:	e037883a 	mov	sp,fp
1120fb90:	df000017 	ldw	fp,0(sp)
1120fb94:	dec00104 	addi	sp,sp,4
1120fb98:	f800283a 	ret

1120fb9c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1120fb9c:	defff604 	addi	sp,sp,-40
1120fba0:	dfc00915 	stw	ra,36(sp)
1120fba4:	df000815 	stw	fp,32(sp)
1120fba8:	df000804 	addi	fp,sp,32
1120fbac:	e13ffd15 	stw	r4,-12(fp)
1120fbb0:	e17ffe15 	stw	r5,-8(fp)
1120fbb4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1120fbb8:	00bfffc4 	movi	r2,-1
1120fbbc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1120fbc0:	00bffb44 	movi	r2,-19
1120fbc4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1120fbc8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1120fbcc:	d1600804 	addi	r5,gp,-32736
1120fbd0:	e13ffd17 	ldw	r4,-12(fp)
1120fbd4:	120feb80 	call	1120feb8 <alt_find_dev>
1120fbd8:	e0bff815 	stw	r2,-32(fp)
1120fbdc:	e0bff817 	ldw	r2,-32(fp)
1120fbe0:	1000051e 	bne	r2,zero,1120fbf8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1120fbe4:	e13ffd17 	ldw	r4,-12(fp)
1120fbe8:	120ff480 	call	1120ff48 <alt_find_file>
1120fbec:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1120fbf0:	00800044 	movi	r2,1
1120fbf4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1120fbf8:	e0bff817 	ldw	r2,-32(fp)
1120fbfc:	10002926 	beq	r2,zero,1120fca4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
1120fc00:	e13ff817 	ldw	r4,-32(fp)
1120fc04:	12100500 	call	11210050 <alt_get_fd>
1120fc08:	e0bff915 	stw	r2,-28(fp)
1120fc0c:	e0bff917 	ldw	r2,-28(fp)
1120fc10:	1000030e 	bge	r2,zero,1120fc20 <open+0x84>
    {
      status = index;
1120fc14:	e0bff917 	ldw	r2,-28(fp)
1120fc18:	e0bffa15 	stw	r2,-24(fp)
1120fc1c:	00002306 	br	1120fcac <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
1120fc20:	e0bff917 	ldw	r2,-28(fp)
1120fc24:	10c00324 	muli	r3,r2,12
1120fc28:	00844874 	movhi	r2,4385
1120fc2c:	10843804 	addi	r2,r2,4320
1120fc30:	1885883a 	add	r2,r3,r2
1120fc34:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1120fc38:	e0fffe17 	ldw	r3,-8(fp)
1120fc3c:	00900034 	movhi	r2,16384
1120fc40:	10bfffc4 	addi	r2,r2,-1
1120fc44:	1886703a 	and	r3,r3,r2
1120fc48:	e0bffc17 	ldw	r2,-16(fp)
1120fc4c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1120fc50:	e0bffb17 	ldw	r2,-20(fp)
1120fc54:	1000051e 	bne	r2,zero,1120fc6c <open+0xd0>
1120fc58:	e13ffc17 	ldw	r4,-16(fp)
1120fc5c:	120fad80 	call	1120fad8 <alt_file_locked>
1120fc60:	e0bffa15 	stw	r2,-24(fp)
1120fc64:	e0bffa17 	ldw	r2,-24(fp)
1120fc68:	10001016 	blt	r2,zero,1120fcac <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1120fc6c:	e0bff817 	ldw	r2,-32(fp)
1120fc70:	10800317 	ldw	r2,12(r2)
1120fc74:	10000826 	beq	r2,zero,1120fc98 <open+0xfc>
1120fc78:	e0bff817 	ldw	r2,-32(fp)
1120fc7c:	10800317 	ldw	r2,12(r2)
1120fc80:	e1ffff17 	ldw	r7,-4(fp)
1120fc84:	e1bffe17 	ldw	r6,-8(fp)
1120fc88:	e17ffd17 	ldw	r5,-12(fp)
1120fc8c:	e13ffc17 	ldw	r4,-16(fp)
1120fc90:	103ee83a 	callr	r2
1120fc94:	00000106 	br	1120fc9c <open+0x100>
1120fc98:	0005883a 	mov	r2,zero
1120fc9c:	e0bffa15 	stw	r2,-24(fp)
1120fca0:	00000206 	br	1120fcac <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
1120fca4:	00bffb44 	movi	r2,-19
1120fca8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1120fcac:	e0bffa17 	ldw	r2,-24(fp)
1120fcb0:	1000090e 	bge	r2,zero,1120fcd8 <open+0x13c>
  {
    alt_release_fd (index);  
1120fcb4:	e13ff917 	ldw	r4,-28(fp)
1120fcb8:	120e3f80 	call	1120e3f8 <alt_release_fd>
    ALT_ERRNO = -status;
1120fcbc:	120fa9c0 	call	1120fa9c <alt_get_errno>
1120fcc0:	1007883a 	mov	r3,r2
1120fcc4:	e0bffa17 	ldw	r2,-24(fp)
1120fcc8:	0085c83a 	sub	r2,zero,r2
1120fccc:	18800015 	stw	r2,0(r3)
    return -1;
1120fcd0:	00bfffc4 	movi	r2,-1
1120fcd4:	00000106 	br	1120fcdc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
1120fcd8:	e0bff917 	ldw	r2,-28(fp)
}
1120fcdc:	e037883a 	mov	sp,fp
1120fce0:	dfc00117 	ldw	ra,4(sp)
1120fce4:	df000017 	ldw	fp,0(sp)
1120fce8:	dec00204 	addi	sp,sp,8
1120fcec:	f800283a 	ret

1120fcf0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1120fcf0:	defffa04 	addi	sp,sp,-24
1120fcf4:	df000515 	stw	fp,20(sp)
1120fcf8:	df000504 	addi	fp,sp,20
1120fcfc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1120fd00:	0005303a 	rdctl	r2,status
1120fd04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1120fd08:	e0fffc17 	ldw	r3,-16(fp)
1120fd0c:	00bfff84 	movi	r2,-2
1120fd10:	1884703a 	and	r2,r3,r2
1120fd14:	1001703a 	wrctl	status,r2
  
  return context;
1120fd18:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1120fd1c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1120fd20:	e0bfff17 	ldw	r2,-4(fp)
1120fd24:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1120fd28:	e0bffd17 	ldw	r2,-12(fp)
1120fd2c:	10800017 	ldw	r2,0(r2)
1120fd30:	e0fffd17 	ldw	r3,-12(fp)
1120fd34:	18c00117 	ldw	r3,4(r3)
1120fd38:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1120fd3c:	e0bffd17 	ldw	r2,-12(fp)
1120fd40:	10800117 	ldw	r2,4(r2)
1120fd44:	e0fffd17 	ldw	r3,-12(fp)
1120fd48:	18c00017 	ldw	r3,0(r3)
1120fd4c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1120fd50:	e0bffd17 	ldw	r2,-12(fp)
1120fd54:	e0fffd17 	ldw	r3,-12(fp)
1120fd58:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1120fd5c:	e0bffd17 	ldw	r2,-12(fp)
1120fd60:	e0fffd17 	ldw	r3,-12(fp)
1120fd64:	10c00015 	stw	r3,0(r2)
1120fd68:	e0bffb17 	ldw	r2,-20(fp)
1120fd6c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1120fd70:	e0bffe17 	ldw	r2,-8(fp)
1120fd74:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1120fd78:	0001883a 	nop
1120fd7c:	e037883a 	mov	sp,fp
1120fd80:	df000017 	ldw	fp,0(sp)
1120fd84:	dec00104 	addi	sp,sp,4
1120fd88:	f800283a 	ret

1120fd8c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1120fd8c:	defffb04 	addi	sp,sp,-20
1120fd90:	dfc00415 	stw	ra,16(sp)
1120fd94:	df000315 	stw	fp,12(sp)
1120fd98:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1120fd9c:	d0a00e17 	ldw	r2,-32712(gp)
1120fda0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1120fda4:	d0a01c17 	ldw	r2,-32656(gp)
1120fda8:	10800044 	addi	r2,r2,1
1120fdac:	d0a01c15 	stw	r2,-32656(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1120fdb0:	00002e06 	br	1120fe6c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1120fdb4:	e0bffd17 	ldw	r2,-12(fp)
1120fdb8:	10800017 	ldw	r2,0(r2)
1120fdbc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1120fdc0:	e0bffd17 	ldw	r2,-12(fp)
1120fdc4:	10800403 	ldbu	r2,16(r2)
1120fdc8:	10803fcc 	andi	r2,r2,255
1120fdcc:	10000426 	beq	r2,zero,1120fde0 <alt_tick+0x54>
1120fdd0:	d0a01c17 	ldw	r2,-32656(gp)
1120fdd4:	1000021e 	bne	r2,zero,1120fde0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1120fdd8:	e0bffd17 	ldw	r2,-12(fp)
1120fddc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1120fde0:	e0bffd17 	ldw	r2,-12(fp)
1120fde4:	10800217 	ldw	r2,8(r2)
1120fde8:	d0e01c17 	ldw	r3,-32656(gp)
1120fdec:	18801d36 	bltu	r3,r2,1120fe64 <alt_tick+0xd8>
1120fdf0:	e0bffd17 	ldw	r2,-12(fp)
1120fdf4:	10800403 	ldbu	r2,16(r2)
1120fdf8:	10803fcc 	andi	r2,r2,255
1120fdfc:	1000191e 	bne	r2,zero,1120fe64 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1120fe00:	e0bffd17 	ldw	r2,-12(fp)
1120fe04:	10800317 	ldw	r2,12(r2)
1120fe08:	e0fffd17 	ldw	r3,-12(fp)
1120fe0c:	18c00517 	ldw	r3,20(r3)
1120fe10:	1809883a 	mov	r4,r3
1120fe14:	103ee83a 	callr	r2
1120fe18:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1120fe1c:	e0bfff17 	ldw	r2,-4(fp)
1120fe20:	1000031e 	bne	r2,zero,1120fe30 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1120fe24:	e13ffd17 	ldw	r4,-12(fp)
1120fe28:	120fcf00 	call	1120fcf0 <alt_alarm_stop>
1120fe2c:	00000d06 	br	1120fe64 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1120fe30:	e0bffd17 	ldw	r2,-12(fp)
1120fe34:	10c00217 	ldw	r3,8(r2)
1120fe38:	e0bfff17 	ldw	r2,-4(fp)
1120fe3c:	1887883a 	add	r3,r3,r2
1120fe40:	e0bffd17 	ldw	r2,-12(fp)
1120fe44:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1120fe48:	e0bffd17 	ldw	r2,-12(fp)
1120fe4c:	10c00217 	ldw	r3,8(r2)
1120fe50:	d0a01c17 	ldw	r2,-32656(gp)
1120fe54:	1880032e 	bgeu	r3,r2,1120fe64 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1120fe58:	e0bffd17 	ldw	r2,-12(fp)
1120fe5c:	00c00044 	movi	r3,1
1120fe60:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1120fe64:	e0bffe17 	ldw	r2,-8(fp)
1120fe68:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1120fe6c:	e0fffd17 	ldw	r3,-12(fp)
1120fe70:	d0a00e04 	addi	r2,gp,-32712
1120fe74:	18bfcf1e 	bne	r3,r2,1120fdb4 <__alt_data_end+0xffe8fdb4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1120fe78:	0001883a 	nop
}
1120fe7c:	0001883a 	nop
1120fe80:	e037883a 	mov	sp,fp
1120fe84:	dfc00117 	ldw	ra,4(sp)
1120fe88:	df000017 	ldw	fp,0(sp)
1120fe8c:	dec00204 	addi	sp,sp,8
1120fe90:	f800283a 	ret

1120fe94 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1120fe94:	deffff04 	addi	sp,sp,-4
1120fe98:	df000015 	stw	fp,0(sp)
1120fe9c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1120fea0:	000170fa 	wrctl	ienable,zero
}
1120fea4:	0001883a 	nop
1120fea8:	e037883a 	mov	sp,fp
1120feac:	df000017 	ldw	fp,0(sp)
1120feb0:	dec00104 	addi	sp,sp,4
1120feb4:	f800283a 	ret

1120feb8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1120feb8:	defffa04 	addi	sp,sp,-24
1120febc:	dfc00515 	stw	ra,20(sp)
1120fec0:	df000415 	stw	fp,16(sp)
1120fec4:	df000404 	addi	fp,sp,16
1120fec8:	e13ffe15 	stw	r4,-8(fp)
1120fecc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1120fed0:	e0bfff17 	ldw	r2,-4(fp)
1120fed4:	10800017 	ldw	r2,0(r2)
1120fed8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1120fedc:	e13ffe17 	ldw	r4,-8(fp)
1120fee0:	12016540 	call	11201654 <strlen>
1120fee4:	10800044 	addi	r2,r2,1
1120fee8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1120feec:	00000d06 	br	1120ff24 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1120fef0:	e0bffc17 	ldw	r2,-16(fp)
1120fef4:	10800217 	ldw	r2,8(r2)
1120fef8:	e0fffd17 	ldw	r3,-12(fp)
1120fefc:	180d883a 	mov	r6,r3
1120ff00:	e17ffe17 	ldw	r5,-8(fp)
1120ff04:	1009883a 	mov	r4,r2
1120ff08:	12101400 	call	11210140 <memcmp>
1120ff0c:	1000021e 	bne	r2,zero,1120ff18 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1120ff10:	e0bffc17 	ldw	r2,-16(fp)
1120ff14:	00000706 	br	1120ff34 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1120ff18:	e0bffc17 	ldw	r2,-16(fp)
1120ff1c:	10800017 	ldw	r2,0(r2)
1120ff20:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1120ff24:	e0fffc17 	ldw	r3,-16(fp)
1120ff28:	e0bfff17 	ldw	r2,-4(fp)
1120ff2c:	18bff01e 	bne	r3,r2,1120fef0 <__alt_data_end+0xffe8fef0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1120ff30:	0005883a 	mov	r2,zero
}
1120ff34:	e037883a 	mov	sp,fp
1120ff38:	dfc00117 	ldw	ra,4(sp)
1120ff3c:	df000017 	ldw	fp,0(sp)
1120ff40:	dec00204 	addi	sp,sp,8
1120ff44:	f800283a 	ret

1120ff48 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1120ff48:	defffb04 	addi	sp,sp,-20
1120ff4c:	dfc00415 	stw	ra,16(sp)
1120ff50:	df000315 	stw	fp,12(sp)
1120ff54:	df000304 	addi	fp,sp,12
1120ff58:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1120ff5c:	d0a00617 	ldw	r2,-32744(gp)
1120ff60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1120ff64:	00003106 	br	1121002c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1120ff68:	e0bffd17 	ldw	r2,-12(fp)
1120ff6c:	10800217 	ldw	r2,8(r2)
1120ff70:	1009883a 	mov	r4,r2
1120ff74:	12016540 	call	11201654 <strlen>
1120ff78:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1120ff7c:	e0bffd17 	ldw	r2,-12(fp)
1120ff80:	10c00217 	ldw	r3,8(r2)
1120ff84:	e0bffe17 	ldw	r2,-8(fp)
1120ff88:	10bfffc4 	addi	r2,r2,-1
1120ff8c:	1885883a 	add	r2,r3,r2
1120ff90:	10800003 	ldbu	r2,0(r2)
1120ff94:	10803fcc 	andi	r2,r2,255
1120ff98:	1080201c 	xori	r2,r2,128
1120ff9c:	10bfe004 	addi	r2,r2,-128
1120ffa0:	10800bd8 	cmpnei	r2,r2,47
1120ffa4:	1000031e 	bne	r2,zero,1120ffb4 <alt_find_file+0x6c>
    {
      len -= 1;
1120ffa8:	e0bffe17 	ldw	r2,-8(fp)
1120ffac:	10bfffc4 	addi	r2,r2,-1
1120ffb0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1120ffb4:	e0bffe17 	ldw	r2,-8(fp)
1120ffb8:	e0ffff17 	ldw	r3,-4(fp)
1120ffbc:	1885883a 	add	r2,r3,r2
1120ffc0:	10800003 	ldbu	r2,0(r2)
1120ffc4:	10803fcc 	andi	r2,r2,255
1120ffc8:	1080201c 	xori	r2,r2,128
1120ffcc:	10bfe004 	addi	r2,r2,-128
1120ffd0:	10800be0 	cmpeqi	r2,r2,47
1120ffd4:	1000081e 	bne	r2,zero,1120fff8 <alt_find_file+0xb0>
1120ffd8:	e0bffe17 	ldw	r2,-8(fp)
1120ffdc:	e0ffff17 	ldw	r3,-4(fp)
1120ffe0:	1885883a 	add	r2,r3,r2
1120ffe4:	10800003 	ldbu	r2,0(r2)
1120ffe8:	10803fcc 	andi	r2,r2,255
1120ffec:	1080201c 	xori	r2,r2,128
1120fff0:	10bfe004 	addi	r2,r2,-128
1120fff4:	10000a1e 	bne	r2,zero,11210020 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1120fff8:	e0bffd17 	ldw	r2,-12(fp)
1120fffc:	10800217 	ldw	r2,8(r2)
11210000:	e0fffe17 	ldw	r3,-8(fp)
11210004:	180d883a 	mov	r6,r3
11210008:	e17fff17 	ldw	r5,-4(fp)
1121000c:	1009883a 	mov	r4,r2
11210010:	12101400 	call	11210140 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
11210014:	1000021e 	bne	r2,zero,11210020 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
11210018:	e0bffd17 	ldw	r2,-12(fp)
1121001c:	00000706 	br	1121003c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
11210020:	e0bffd17 	ldw	r2,-12(fp)
11210024:	10800017 	ldw	r2,0(r2)
11210028:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1121002c:	e0fffd17 	ldw	r3,-12(fp)
11210030:	d0a00604 	addi	r2,gp,-32744
11210034:	18bfcc1e 	bne	r3,r2,1120ff68 <__alt_data_end+0xffe8ff68>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
11210038:	0005883a 	mov	r2,zero
}
1121003c:	e037883a 	mov	sp,fp
11210040:	dfc00117 	ldw	ra,4(sp)
11210044:	df000017 	ldw	fp,0(sp)
11210048:	dec00204 	addi	sp,sp,8
1121004c:	f800283a 	ret

11210050 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
11210050:	defffc04 	addi	sp,sp,-16
11210054:	df000315 	stw	fp,12(sp)
11210058:	df000304 	addi	fp,sp,12
1121005c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
11210060:	00bffa04 	movi	r2,-24
11210064:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
11210068:	e03ffd15 	stw	zero,-12(fp)
1121006c:	00001906 	br	112100d4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
11210070:	00844874 	movhi	r2,4385
11210074:	10843804 	addi	r2,r2,4320
11210078:	e0fffd17 	ldw	r3,-12(fp)
1121007c:	18c00324 	muli	r3,r3,12
11210080:	10c5883a 	add	r2,r2,r3
11210084:	10800017 	ldw	r2,0(r2)
11210088:	10000f1e 	bne	r2,zero,112100c8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
1121008c:	00844874 	movhi	r2,4385
11210090:	10843804 	addi	r2,r2,4320
11210094:	e0fffd17 	ldw	r3,-12(fp)
11210098:	18c00324 	muli	r3,r3,12
1121009c:	10c5883a 	add	r2,r2,r3
112100a0:	e0ffff17 	ldw	r3,-4(fp)
112100a4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
112100a8:	d0e00a17 	ldw	r3,-32728(gp)
112100ac:	e0bffd17 	ldw	r2,-12(fp)
112100b0:	1880020e 	bge	r3,r2,112100bc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
112100b4:	e0bffd17 	ldw	r2,-12(fp)
112100b8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
112100bc:	e0bffd17 	ldw	r2,-12(fp)
112100c0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
112100c4:	00000606 	br	112100e0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
112100c8:	e0bffd17 	ldw	r2,-12(fp)
112100cc:	10800044 	addi	r2,r2,1
112100d0:	e0bffd15 	stw	r2,-12(fp)
112100d4:	e0bffd17 	ldw	r2,-12(fp)
112100d8:	10800810 	cmplti	r2,r2,32
112100dc:	103fe41e 	bne	r2,zero,11210070 <__alt_data_end+0xffe90070>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
112100e0:	e0bffe17 	ldw	r2,-8(fp)
}
112100e4:	e037883a 	mov	sp,fp
112100e8:	df000017 	ldw	fp,0(sp)
112100ec:	dec00104 	addi	sp,sp,4
112100f0:	f800283a 	ret

112100f4 <atexit>:
112100f4:	200b883a 	mov	r5,r4
112100f8:	000f883a 	mov	r7,zero
112100fc:	000d883a 	mov	r6,zero
11210100:	0009883a 	mov	r4,zero
11210104:	12101bc1 	jmpi	112101bc <__register_exitproc>

11210108 <exit>:
11210108:	defffe04 	addi	sp,sp,-8
1121010c:	000b883a 	mov	r5,zero
11210110:	dc000015 	stw	r16,0(sp)
11210114:	dfc00115 	stw	ra,4(sp)
11210118:	2021883a 	mov	r16,r4
1121011c:	12102d40 	call	112102d4 <__call_exitprocs>
11210120:	00844874 	movhi	r2,4385
11210124:	1088b004 	addi	r2,r2,8896
11210128:	11000017 	ldw	r4,0(r2)
1121012c:	20800f17 	ldw	r2,60(r4)
11210130:	10000126 	beq	r2,zero,11210138 <exit+0x30>
11210134:	103ee83a 	callr	r2
11210138:	8009883a 	mov	r4,r16
1121013c:	12104540 	call	11210454 <_exit>

11210140 <memcmp>:
11210140:	01c000c4 	movi	r7,3
11210144:	3980192e 	bgeu	r7,r6,112101ac <memcmp+0x6c>
11210148:	2144b03a 	or	r2,r4,r5
1121014c:	11c4703a 	and	r2,r2,r7
11210150:	10000f26 	beq	r2,zero,11210190 <memcmp+0x50>
11210154:	20800003 	ldbu	r2,0(r4)
11210158:	28c00003 	ldbu	r3,0(r5)
1121015c:	10c0151e 	bne	r2,r3,112101b4 <memcmp+0x74>
11210160:	31bfff84 	addi	r6,r6,-2
11210164:	01ffffc4 	movi	r7,-1
11210168:	00000406 	br	1121017c <memcmp+0x3c>
1121016c:	20800003 	ldbu	r2,0(r4)
11210170:	28c00003 	ldbu	r3,0(r5)
11210174:	31bfffc4 	addi	r6,r6,-1
11210178:	10c00e1e 	bne	r2,r3,112101b4 <memcmp+0x74>
1121017c:	21000044 	addi	r4,r4,1
11210180:	29400044 	addi	r5,r5,1
11210184:	31fff91e 	bne	r6,r7,1121016c <__alt_data_end+0xffe9016c>
11210188:	0005883a 	mov	r2,zero
1121018c:	f800283a 	ret
11210190:	20c00017 	ldw	r3,0(r4)
11210194:	28800017 	ldw	r2,0(r5)
11210198:	18bfee1e 	bne	r3,r2,11210154 <__alt_data_end+0xffe90154>
1121019c:	31bfff04 	addi	r6,r6,-4
112101a0:	21000104 	addi	r4,r4,4
112101a4:	29400104 	addi	r5,r5,4
112101a8:	39bff936 	bltu	r7,r6,11210190 <__alt_data_end+0xffe90190>
112101ac:	303fe91e 	bne	r6,zero,11210154 <__alt_data_end+0xffe90154>
112101b0:	003ff506 	br	11210188 <__alt_data_end+0xffe90188>
112101b4:	10c5c83a 	sub	r2,r2,r3
112101b8:	f800283a 	ret

112101bc <__register_exitproc>:
112101bc:	defffa04 	addi	sp,sp,-24
112101c0:	dc000315 	stw	r16,12(sp)
112101c4:	04044874 	movhi	r16,4385
112101c8:	8408b004 	addi	r16,r16,8896
112101cc:	80c00017 	ldw	r3,0(r16)
112101d0:	dc400415 	stw	r17,16(sp)
112101d4:	dfc00515 	stw	ra,20(sp)
112101d8:	18805217 	ldw	r2,328(r3)
112101dc:	2023883a 	mov	r17,r4
112101e0:	10003726 	beq	r2,zero,112102c0 <__register_exitproc+0x104>
112101e4:	10c00117 	ldw	r3,4(r2)
112101e8:	010007c4 	movi	r4,31
112101ec:	20c00e16 	blt	r4,r3,11210228 <__register_exitproc+0x6c>
112101f0:	1a000044 	addi	r8,r3,1
112101f4:	8800221e 	bne	r17,zero,11210280 <__register_exitproc+0xc4>
112101f8:	18c00084 	addi	r3,r3,2
112101fc:	18c7883a 	add	r3,r3,r3
11210200:	18c7883a 	add	r3,r3,r3
11210204:	12000115 	stw	r8,4(r2)
11210208:	10c7883a 	add	r3,r2,r3
1121020c:	19400015 	stw	r5,0(r3)
11210210:	0005883a 	mov	r2,zero
11210214:	dfc00517 	ldw	ra,20(sp)
11210218:	dc400417 	ldw	r17,16(sp)
1121021c:	dc000317 	ldw	r16,12(sp)
11210220:	dec00604 	addi	sp,sp,24
11210224:	f800283a 	ret
11210228:	00800034 	movhi	r2,0
1121022c:	10800004 	addi	r2,r2,0
11210230:	10002626 	beq	r2,zero,112102cc <__register_exitproc+0x110>
11210234:	01006404 	movi	r4,400
11210238:	d9400015 	stw	r5,0(sp)
1121023c:	d9800115 	stw	r6,4(sp)
11210240:	d9c00215 	stw	r7,8(sp)
11210244:	00000000 	call	10000000 <__reset+0xbec0000>
11210248:	d9400017 	ldw	r5,0(sp)
1121024c:	d9800117 	ldw	r6,4(sp)
11210250:	d9c00217 	ldw	r7,8(sp)
11210254:	10001d26 	beq	r2,zero,112102cc <__register_exitproc+0x110>
11210258:	81000017 	ldw	r4,0(r16)
1121025c:	10000115 	stw	zero,4(r2)
11210260:	02000044 	movi	r8,1
11210264:	22405217 	ldw	r9,328(r4)
11210268:	0007883a 	mov	r3,zero
1121026c:	12400015 	stw	r9,0(r2)
11210270:	20805215 	stw	r2,328(r4)
11210274:	10006215 	stw	zero,392(r2)
11210278:	10006315 	stw	zero,396(r2)
1121027c:	883fde26 	beq	r17,zero,112101f8 <__alt_data_end+0xffe901f8>
11210280:	18c9883a 	add	r4,r3,r3
11210284:	2109883a 	add	r4,r4,r4
11210288:	1109883a 	add	r4,r2,r4
1121028c:	21802215 	stw	r6,136(r4)
11210290:	01800044 	movi	r6,1
11210294:	12406217 	ldw	r9,392(r2)
11210298:	30cc983a 	sll	r6,r6,r3
1121029c:	4992b03a 	or	r9,r9,r6
112102a0:	12406215 	stw	r9,392(r2)
112102a4:	21c04215 	stw	r7,264(r4)
112102a8:	01000084 	movi	r4,2
112102ac:	893fd21e 	bne	r17,r4,112101f8 <__alt_data_end+0xffe901f8>
112102b0:	11006317 	ldw	r4,396(r2)
112102b4:	218cb03a 	or	r6,r4,r6
112102b8:	11806315 	stw	r6,396(r2)
112102bc:	003fce06 	br	112101f8 <__alt_data_end+0xffe901f8>
112102c0:	18805304 	addi	r2,r3,332
112102c4:	18805215 	stw	r2,328(r3)
112102c8:	003fc606 	br	112101e4 <__alt_data_end+0xffe901e4>
112102cc:	00bfffc4 	movi	r2,-1
112102d0:	003fd006 	br	11210214 <__alt_data_end+0xffe90214>

112102d4 <__call_exitprocs>:
112102d4:	defff504 	addi	sp,sp,-44
112102d8:	df000915 	stw	fp,36(sp)
112102dc:	dd400615 	stw	r21,24(sp)
112102e0:	dc800315 	stw	r18,12(sp)
112102e4:	dfc00a15 	stw	ra,40(sp)
112102e8:	ddc00815 	stw	r23,32(sp)
112102ec:	dd800715 	stw	r22,28(sp)
112102f0:	dd000515 	stw	r20,20(sp)
112102f4:	dcc00415 	stw	r19,16(sp)
112102f8:	dc400215 	stw	r17,8(sp)
112102fc:	dc000115 	stw	r16,4(sp)
11210300:	d9000015 	stw	r4,0(sp)
11210304:	2839883a 	mov	fp,r5
11210308:	04800044 	movi	r18,1
1121030c:	057fffc4 	movi	r21,-1
11210310:	00844874 	movhi	r2,4385
11210314:	1088b004 	addi	r2,r2,8896
11210318:	12000017 	ldw	r8,0(r2)
1121031c:	45005217 	ldw	r20,328(r8)
11210320:	44c05204 	addi	r19,r8,328
11210324:	a0001c26 	beq	r20,zero,11210398 <__call_exitprocs+0xc4>
11210328:	a0800117 	ldw	r2,4(r20)
1121032c:	15ffffc4 	addi	r23,r2,-1
11210330:	b8000d16 	blt	r23,zero,11210368 <__call_exitprocs+0x94>
11210334:	14000044 	addi	r16,r2,1
11210338:	8421883a 	add	r16,r16,r16
1121033c:	8421883a 	add	r16,r16,r16
11210340:	84402004 	addi	r17,r16,128
11210344:	a463883a 	add	r17,r20,r17
11210348:	a421883a 	add	r16,r20,r16
1121034c:	e0001e26 	beq	fp,zero,112103c8 <__call_exitprocs+0xf4>
11210350:	80804017 	ldw	r2,256(r16)
11210354:	e0801c26 	beq	fp,r2,112103c8 <__call_exitprocs+0xf4>
11210358:	bdffffc4 	addi	r23,r23,-1
1121035c:	843fff04 	addi	r16,r16,-4
11210360:	8c7fff04 	addi	r17,r17,-4
11210364:	bd7ff91e 	bne	r23,r21,1121034c <__alt_data_end+0xffe9034c>
11210368:	00800034 	movhi	r2,0
1121036c:	10800004 	addi	r2,r2,0
11210370:	10000926 	beq	r2,zero,11210398 <__call_exitprocs+0xc4>
11210374:	a0800117 	ldw	r2,4(r20)
11210378:	1000301e 	bne	r2,zero,1121043c <__call_exitprocs+0x168>
1121037c:	a0800017 	ldw	r2,0(r20)
11210380:	10003226 	beq	r2,zero,1121044c <__call_exitprocs+0x178>
11210384:	a009883a 	mov	r4,r20
11210388:	98800015 	stw	r2,0(r19)
1121038c:	00000000 	call	10000000 <__reset+0xbec0000>
11210390:	9d000017 	ldw	r20,0(r19)
11210394:	a03fe41e 	bne	r20,zero,11210328 <__alt_data_end+0xffe90328>
11210398:	dfc00a17 	ldw	ra,40(sp)
1121039c:	df000917 	ldw	fp,36(sp)
112103a0:	ddc00817 	ldw	r23,32(sp)
112103a4:	dd800717 	ldw	r22,28(sp)
112103a8:	dd400617 	ldw	r21,24(sp)
112103ac:	dd000517 	ldw	r20,20(sp)
112103b0:	dcc00417 	ldw	r19,16(sp)
112103b4:	dc800317 	ldw	r18,12(sp)
112103b8:	dc400217 	ldw	r17,8(sp)
112103bc:	dc000117 	ldw	r16,4(sp)
112103c0:	dec00b04 	addi	sp,sp,44
112103c4:	f800283a 	ret
112103c8:	a0800117 	ldw	r2,4(r20)
112103cc:	80c00017 	ldw	r3,0(r16)
112103d0:	10bfffc4 	addi	r2,r2,-1
112103d4:	15c01426 	beq	r2,r23,11210428 <__call_exitprocs+0x154>
112103d8:	80000015 	stw	zero,0(r16)
112103dc:	183fde26 	beq	r3,zero,11210358 <__alt_data_end+0xffe90358>
112103e0:	95c8983a 	sll	r4,r18,r23
112103e4:	a0806217 	ldw	r2,392(r20)
112103e8:	a5800117 	ldw	r22,4(r20)
112103ec:	2084703a 	and	r2,r4,r2
112103f0:	10000b26 	beq	r2,zero,11210420 <__call_exitprocs+0x14c>
112103f4:	a0806317 	ldw	r2,396(r20)
112103f8:	2088703a 	and	r4,r4,r2
112103fc:	20000c1e 	bne	r4,zero,11210430 <__call_exitprocs+0x15c>
11210400:	89400017 	ldw	r5,0(r17)
11210404:	d9000017 	ldw	r4,0(sp)
11210408:	183ee83a 	callr	r3
1121040c:	a0800117 	ldw	r2,4(r20)
11210410:	15bfbf1e 	bne	r2,r22,11210310 <__alt_data_end+0xffe90310>
11210414:	98800017 	ldw	r2,0(r19)
11210418:	153fcf26 	beq	r2,r20,11210358 <__alt_data_end+0xffe90358>
1121041c:	003fbc06 	br	11210310 <__alt_data_end+0xffe90310>
11210420:	183ee83a 	callr	r3
11210424:	003ff906 	br	1121040c <__alt_data_end+0xffe9040c>
11210428:	a5c00115 	stw	r23,4(r20)
1121042c:	003feb06 	br	112103dc <__alt_data_end+0xffe903dc>
11210430:	89000017 	ldw	r4,0(r17)
11210434:	183ee83a 	callr	r3
11210438:	003ff406 	br	1121040c <__alt_data_end+0xffe9040c>
1121043c:	a0800017 	ldw	r2,0(r20)
11210440:	a027883a 	mov	r19,r20
11210444:	1029883a 	mov	r20,r2
11210448:	003fb606 	br	11210324 <__alt_data_end+0xffe90324>
1121044c:	0005883a 	mov	r2,zero
11210450:	003ffb06 	br	11210440 <__alt_data_end+0xffe90440>

11210454 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
11210454:	defffd04 	addi	sp,sp,-12
11210458:	df000215 	stw	fp,8(sp)
1121045c:	df000204 	addi	fp,sp,8
11210460:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
11210464:	0001883a 	nop
11210468:	e0bfff17 	ldw	r2,-4(fp)
1121046c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
11210470:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
11210474:	10000226 	beq	r2,zero,11210480 <_exit+0x2c>
    ALT_SIM_FAIL();
11210478:	002af070 	cmpltui	zero,zero,43969
1121047c:	00000106 	br	11210484 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
11210480:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
11210484:	003fff06 	br	11210484 <__alt_data_end+0xffe90484>
