
HELLO_NIOS.elf:     file format elf32-littlenios2
HELLO_NIOS.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x112002c0

Program Header:
    LOAD off    0x00001000 vaddr 0x04940000 paddr 0x04940000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00001120 vaddr 0x11200120 paddr 0x11200120 align 2**12
         filesz 0x0000714c memsz 0x0000729c flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  04940000  04940000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  11200120  11200120  00001120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000054fc  112002c0  112002c0  000012c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  112057bc  112057bc  000067bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  11205800  11205800  00006800  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  1120726c  1120726c  0000826c  2**2
                  ALLOC, SMALL_DATA
  6 .ext_flash    00000000  04940020  04940020  0000826c  2**0
                  CONTENTS
  7 .onchip_memory 00000000  112073bc  112073bc  0000826c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000826c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000009c0  00000000  00000000  00008290  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016194  00000000  00000000  00008c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005e98  00000000  00000000  0001ede4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000067fe  00000000  00000000  00024c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000014a8  00000000  00000000  0002b47c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002239  00000000  00000000  0002c924  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004a4c  00000000  00000000  0002eb5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000050  00000000  00000000  000335ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000648  00000000  00000000  00033600  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00035fa2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00035fa5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00035fa8  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00035fa9  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00035faa  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00035fae  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00035fb2  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00035fb6  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00035fbf  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00035fc8  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  00035fd1  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000043  00000000  00000000  00035fdb  2**0
                  CONTENTS, READONLY
 30 .jdi          00004812  00000000  00000000  0003601e  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005c41d  00000000  00000000  0003a830  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04940000 l    d  .entry	00000000 .entry
11200120 l    d  .exceptions	00000000 .exceptions
112002c0 l    d  .text	00000000 .text
112057bc l    d  .rodata	00000000 .rodata
11205800 l    d  .rwdata	00000000 .rwdata
1120726c l    d  .bss	00000000 .bss
04940020 l    d  .ext_flash	00000000 .ext_flash
112073bc l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HELLO_NIOS_bsp//obj/HAL/src/crt0.o
11200304 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
11200194 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
112004c0 l     F .text	00000008 __fp_unlock
112004d4 l     F .text	0000019c __sinit.part.1
11200670 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
11205800 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
1120311c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
11203228 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
11203254 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
11203340 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
11203420 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
112035f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1120725c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
11203870 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
112039a4 l     F .text	00000034 alt_dev_reg
112061d4 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
11203c94 l     F .text	0000020c altera_avalon_jtag_uart_irq
11203ea0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
112044d8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
11204850 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
11204c90 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
11204dd0 l     F .text	0000003c alt_get_errno
11204e0c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
11202f14 g     F .text	00000054 _isatty_r
11203530 g     F .text	0000007c alt_main
11200354 g     F .text	000000c0 _puts_r
112072bc g     O .bss	00000100 alt_irq
11202c3c g     F .text	00000060 _lseek_r
112073bc g       *ABS*	00000000 __alt_heap_start
112021f0 g     F .text	0000005c __sseek
11200810 g     F .text	00000010 __sinit
11200678 g     F .text	00000068 __sfmoreglue
112035d0 g     F .text	00000024 __malloc_unlock
112018dc g     F .text	0000015c memmove
112007f8 g     F .text	00000018 _cleanup
112051c8 g     F .text	00000024 altera_nios2_gen2_irq_init
04940000 g     F .entry	00000000 __reset
11202eb8 g     F .text	0000005c _fstat_r
11207278 g     O .bss	00000004 errno
1120216c g     F .text	00000008 __seofread
11207280 g     O .bss	00000004 alt_argv
1120f234 g       *ABS*	00000000 _gp
11203840 g     F .text	00000030 usleep
11206054 g     O .rwdata	00000180 alt_fd_list
112051ec g     F .text	00000090 alt_find_dev
11201794 g     F .text	00000148 memcpy
112004c8 g     F .text	0000000c _cleanup_r
11204d54 g     F .text	0000007c alt_io_redirect
112057bc g       *ABS*	00000000 __DTOR_END__
11200414 g     F .text	00000014 puts
11204098 g     F .text	0000021c altera_avalon_jtag_uart_read
11203060 g     F .text	00000064 .hidden __udivsi3
1120337c g     F .text	000000a4 isatty
11207274 g     O .bss	00000004 __malloc_top_pad
11200860 g     F .text	000004bc __sfvwrite_r
112020c4 g     F .text	00000054 _sbrk_r
11202e58 g     F .text	00000060 _read_r
11207254 g     O .rwdata	00000004 alt_max_fd
1120245c g     F .text	000000f0 _fclose_r
112027d8 g     F .text	00000030 fflush
11207270 g     O .bss	00000004 __malloc_max_sbrked_mem
1120345c g     F .text	000000d4 lseek
11207234 g     O .rwdata	00000004 _global_impure_ptr
11201b60 g     F .text	00000564 _realloc_r
112073bc g       *ABS*	00000000 __bss_end
11204ba0 g     F .text	000000f0 alt_iic_isr_register
112050c0 g     F .text	00000108 alt_tick
11200830 g     F .text	00000018 __fp_lock_all
11204b54 g     F .text	0000004c alt_ic_irq_enabled
11205024 g     F .text	0000009c alt_alarm_stop
11207288 g     O .bss	00000004 alt_irq_active
112001ec g     F .exceptions	000000d4 alt_irq_handler
1120602c g     O .rwdata	00000028 alt_dev_null
11200000 g       *ABS*	00000000 __alt_mem_onchip_memory
1120724c g     O .rwdata	00000008 alt_dev_list
112038ac g     F .text	000000f8 write
11203290 g     F .text	000000b0 fstat
112030c4 g     F .text	00000058 .hidden __umodsi3
112073bc g       *ABS*	00000000 end
11203bd4 g     F .text	000000c0 altera_avalon_jtag_uart_init
112057bc g       *ABS*	00000000 __CTOR_LIST__
11380000 g       *ABS*	00000000 __alt_stack_pointer
11204550 g     F .text	0000007c alt_avalon_timer_sc_init
112042b4 g     F .text	00000224 altera_avalon_jtag_uart_write
11200820 g     F .text	00000004 __sfp_lock_acquire
112016b0 g     F .text	000000e4 memchr
1120292c g     F .text	00000310 _free_r
11205608 g     F .text	00000180 __call_exitprocs
1120723c g     O .rwdata	00000004 __malloc_sbrk_base
112002c0 g     F .text	00000048 _start
1120728c g     O .bss	00000004 _alt_tick_rate
11207290 g     O .bss	00000004 _alt_nticks
11203630 g     F .text	000000fc read
11203a10 g     F .text	00000060 alt_sys_init
112054f0 g     F .text	00000118 __register_exitproc
11203f40 g     F .text	00000068 altera_avalon_jtag_uart_close
11207294 g     O .bss	00000028 __malloc_current_mallinfo
11203a70 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
11205384 g     F .text	000000a4 alt_get_fd
112046f8 g     F .text	00000158 alt_busy_sleep
11202408 g     F .text	00000054 _close_r
11205474 g     F .text	0000007c memcmp
11203b30 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
112073bc g       *ABS*	00000000 __alt_stack_base
11203b80 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
112022b4 g     F .text	00000154 __swsetup_r
112006e0 g     F .text	00000118 __sfp
11205c24 g     O .rwdata	00000408 __malloc_av_
1120082c g     F .text	00000004 __sinit_lock_release
11202118 g     F .text	00000054 __sread
1120527c g     F .text	00000108 alt_find_file
1120488c g     F .text	000000a4 alt_dev_llist_insert
112035ac g     F .text	00000024 __malloc_lock
11203790 g     F .text	000000b0 sbrk
1120277c g     F .text	0000005c _fflush_r
1120726c g       *ABS*	00000000 __bss_start
11201a38 g     F .text	00000128 memset
11200308 g     F .text	0000004c main
11207284 g     O .bss	00000004 alt_envp
1120726c g     O .bss	00000004 __malloc_max_total_mem
11203ad0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1120224c g     F .text	00000008 __sclose
11380000 g       *ABS*	00000000 __alt_heap_limit
1120254c g     F .text	00000014 fclose
11200ea4 g     F .text	0000080c _malloc_r
11207258 g     O .rwdata	00000004 alt_errno
11200d1c g     F .text	000000c4 _fwalk
11202f68 g     F .text	00000084 .hidden __divsi3
11202808 g     F .text	00000124 _malloc_trim_r
112057bc g       *ABS*	00000000 __CTOR_END__
112057bc g       *ABS*	00000000 __DTOR_LIST__
112039d8 g     F .text	00000038 alt_irq_init
1120372c g     F .text	00000064 alt_release_fd
11205428 g     F .text	00000014 atexit
11202254 g     F .text	00000060 _write_r
11207238 g     O .rwdata	00000004 _impure_ptr
1120727c g     O .bss	00000004 alt_argc
11202560 g     F .text	0000021c __sflush_r
11204990 g     F .text	00000060 _do_dtors
11200120 g       .exceptions	00000000 alt_irq_entry
11200848 g     F .text	00000018 __fp_unlock_all
11207244 g     O .rwdata	00000008 alt_fs_list
112049f0 g     F .text	00000050 alt_ic_isr_register
1120726c g       *ABS*	00000000 _edata
112073bc g       *ABS*	00000000 _end
11203fa8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
11204ac8 g     F .text	0000008c alt_ic_irq_disable
11202174 g     F .text	0000007c __swrite
11207240 g     O .rwdata	00000004 __malloc_trim_threshold
1120543c g     F .text	00000038 exit
11200de0 g     F .text	000000c4 _fwalk_reent
11202fec g     F .text	00000074 .hidden __modsi3
11380000 g       *ABS*	00000000 __alt_data_end
11200120 g     F .exceptions	00000000 alt_exception
11200824 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_ext_flash
11205788 g     F .text	00000034 _exit
112045cc g     F .text	0000012c alt_alarm_start
11202c9c g     F .text	000001bc __smakebuf_r
11200428 g     F .text	00000098 strlen
11204ed0 g     F .text	00000154 open
11207260 g     O .rwdata	00000004 alt_priority_mask
11204a40 g     F .text	00000088 alt_ic_irq_enable
11207264 g     O .rwdata	00000008 alt_alarm_list
11204930 g     F .text	00000060 _do_ctors
11203158 g     F .text	000000d0 close
11200828 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .exceptions:

11200120 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
11200120:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
11200124:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
11200128:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1120012c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
11200130:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
11200134:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
11200138:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1120013c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
11200140:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
11200144:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
11200148:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1120014c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
11200150:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
11200154:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
11200158:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1120015c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
11200160:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
11200164:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
11200168:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1120016c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
11200170:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
11200174:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
11200178:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1120017c:	10000326 	beq	r2,zero,1120018c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
11200180:	20000226 	beq	r4,zero,1120018c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
11200184:	12001ec0 	call	112001ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
11200188:	00000306 	br	11200198 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1120018c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
11200190:	e8bfff17 	ldw	r2,-4(ea)

11200194 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
11200194:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
11200198:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1120019c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
112001a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
112001a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
112001a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
112001ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
112001b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
112001b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
112001b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
112001bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
112001c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
112001c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
112001c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
112001cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
112001d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
112001d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
112001d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
112001dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
112001e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
112001e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
112001e8:	ef80083a 	eret

112001ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
112001ec:	defff904 	addi	sp,sp,-28
112001f0:	dfc00615 	stw	ra,24(sp)
112001f4:	df000515 	stw	fp,20(sp)
112001f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
112001fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
11200200:	0005313a 	rdctl	r2,ipending
11200204:	e0bffe15 	stw	r2,-8(fp)

  return active;
11200208:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1120020c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
11200210:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
11200214:	00800044 	movi	r2,1
11200218:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1120021c:	e0fffb17 	ldw	r3,-20(fp)
11200220:	e0bffc17 	ldw	r2,-16(fp)
11200224:	1884703a 	and	r2,r3,r2
11200228:	10001426 	beq	r2,zero,1120027c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1120022c:	00844834 	movhi	r2,4384
11200230:	109caf04 	addi	r2,r2,29372
11200234:	e0fffd17 	ldw	r3,-12(fp)
11200238:	180690fa 	slli	r3,r3,3
1120023c:	10c5883a 	add	r2,r2,r3
11200240:	10c00017 	ldw	r3,0(r2)
11200244:	00844834 	movhi	r2,4384
11200248:	109caf04 	addi	r2,r2,29372
1120024c:	e13ffd17 	ldw	r4,-12(fp)
11200250:	200890fa 	slli	r4,r4,3
11200254:	1105883a 	add	r2,r2,r4
11200258:	10800104 	addi	r2,r2,4
1120025c:	10800017 	ldw	r2,0(r2)
11200260:	1009883a 	mov	r4,r2
11200264:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
11200268:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1120026c:	0005313a 	rdctl	r2,ipending
11200270:	e0bfff15 	stw	r2,-4(fp)

  return active;
11200274:	e0bfff17 	ldw	r2,-4(fp)
11200278:	00000706 	br	11200298 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1120027c:	e0bffc17 	ldw	r2,-16(fp)
11200280:	1085883a 	add	r2,r2,r2
11200284:	e0bffc15 	stw	r2,-16(fp)
      i++;
11200288:	e0bffd17 	ldw	r2,-12(fp)
1120028c:	10800044 	addi	r2,r2,1
11200290:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
11200294:	003fe106 	br	1120021c <__alt_data_end+0xffe8021c>

    active = alt_irq_pending ();
11200298:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1120029c:	e0bffb17 	ldw	r2,-20(fp)
112002a0:	103fdb1e 	bne	r2,zero,11200210 <__alt_data_end+0xffe80210>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
112002a4:	0001883a 	nop
}
112002a8:	0001883a 	nop
112002ac:	e037883a 	mov	sp,fp
112002b0:	dfc00117 	ldw	ra,4(sp)
112002b4:	df000017 	ldw	fp,0(sp)
112002b8:	dec00204 	addi	sp,sp,8
112002bc:	f800283a 	ret

Disassembly of section .text:

112002c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
112002c0:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
112002c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
112002c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
112002cc:	00bffd16 	blt	zero,r2,112002c4 <__alt_data_end+0xffe802c4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
112002d0:	06c44e34 	movhi	sp,4408
    ori sp, sp, %lo(__alt_stack_pointer)
112002d4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
112002d8:	06844834 	movhi	gp,4384
    ori gp, gp, %lo(_gp)
112002dc:	d6bc8d14 	ori	gp,gp,62004
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
112002e0:	00844834 	movhi	r2,4384
    ori r2, r2, %lo(__bss_start)
112002e4:	109c9b14 	ori	r2,r2,29292

    movhi r3, %hi(__bss_end)
112002e8:	00c44834 	movhi	r3,4384
    ori r3, r3, %lo(__bss_end)
112002ec:	18dcef14 	ori	r3,r3,29628

    beq r2, r3, 1f
112002f0:	10c00326 	beq	r2,r3,11200300 <_start+0x40>

0:
    stw zero, (r2)
112002f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
112002f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
112002fc:	10fffd36 	bltu	r2,r3,112002f4 <__alt_data_end+0xffe802f4>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
11200300:	12035300 	call	11203530 <alt_main>

11200304 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
11200304:	003fff06 	br	11200304 <__alt_data_end+0xffe80304>

11200308 <main>:
#include "altera_avalon_pio_regs.h"
#include "io.h"
#include "stdio.h"

int main()
{
11200308:	defffd04 	addi	sp,sp,-12
1120030c:	dfc00215 	stw	ra,8(sp)
11200310:	df000115 	stw	fp,4(sp)
11200314:	df000104 	addi	fp,sp,4
	int led = 0;
11200318:	e03fff15 	stw	zero,-4(fp)
	printf("DE5-Net Hello!\n");
1120031c:	01044834 	movhi	r4,4384
11200320:	2115ef04 	addi	r4,r4,22460
11200324:	12004140 	call	11200414 <puts>

	while(1){
		IOWR(LED_BASE, 0x00, led);
11200328:	00840034 	movhi	r2,4096
1120032c:	10800c04 	addi	r2,r2,48
11200330:	e0ffff17 	ldw	r3,-4(fp)
11200334:	10c00035 	stwio	r3,0(r2)
		led = ~led;
11200338:	e0bfff17 	ldw	r2,-4(fp)
1120033c:	0084303a 	nor	r2,zero,r2
11200340:	e0bfff15 	stw	r2,-4(fp)
		usleep(500*1000);
11200344:	01000234 	movhi	r4,8
11200348:	21284804 	addi	r4,r4,-24288
1120034c:	12038400 	call	11203840 <usleep>
	}
11200350:	003ff506 	br	11200328 <__alt_data_end+0xffe80328>

11200354 <_puts_r>:
11200354:	defff604 	addi	sp,sp,-40
11200358:	dc000715 	stw	r16,28(sp)
1120035c:	2021883a 	mov	r16,r4
11200360:	2809883a 	mov	r4,r5
11200364:	dc400815 	stw	r17,32(sp)
11200368:	dfc00915 	stw	ra,36(sp)
1120036c:	2823883a 	mov	r17,r5
11200370:	12004280 	call	11200428 <strlen>
11200374:	10c00044 	addi	r3,r2,1
11200378:	d8800115 	stw	r2,4(sp)
1120037c:	00844834 	movhi	r2,4384
11200380:	1095f304 	addi	r2,r2,22476
11200384:	d8800215 	stw	r2,8(sp)
11200388:	00800044 	movi	r2,1
1120038c:	d8800315 	stw	r2,12(sp)
11200390:	00800084 	movi	r2,2
11200394:	dc400015 	stw	r17,0(sp)
11200398:	d8c00615 	stw	r3,24(sp)
1120039c:	dec00415 	stw	sp,16(sp)
112003a0:	d8800515 	stw	r2,20(sp)
112003a4:	80000226 	beq	r16,zero,112003b0 <_puts_r+0x5c>
112003a8:	80800e17 	ldw	r2,56(r16)
112003ac:	10001426 	beq	r2,zero,11200400 <_puts_r+0xac>
112003b0:	81400217 	ldw	r5,8(r16)
112003b4:	2880030b 	ldhu	r2,12(r5)
112003b8:	10c8000c 	andi	r3,r2,8192
112003bc:	1800061e 	bne	r3,zero,112003d8 <_puts_r+0x84>
112003c0:	29001917 	ldw	r4,100(r5)
112003c4:	00f7ffc4 	movi	r3,-8193
112003c8:	10880014 	ori	r2,r2,8192
112003cc:	20c6703a 	and	r3,r4,r3
112003d0:	2880030d 	sth	r2,12(r5)
112003d4:	28c01915 	stw	r3,100(r5)
112003d8:	d9800404 	addi	r6,sp,16
112003dc:	8009883a 	mov	r4,r16
112003e0:	12008600 	call	11200860 <__sfvwrite_r>
112003e4:	1000091e 	bne	r2,zero,1120040c <_puts_r+0xb8>
112003e8:	00800284 	movi	r2,10
112003ec:	dfc00917 	ldw	ra,36(sp)
112003f0:	dc400817 	ldw	r17,32(sp)
112003f4:	dc000717 	ldw	r16,28(sp)
112003f8:	dec00a04 	addi	sp,sp,40
112003fc:	f800283a 	ret
11200400:	8009883a 	mov	r4,r16
11200404:	12008100 	call	11200810 <__sinit>
11200408:	003fe906 	br	112003b0 <__alt_data_end+0xffe803b0>
1120040c:	00bfffc4 	movi	r2,-1
11200410:	003ff606 	br	112003ec <__alt_data_end+0xffe803ec>

11200414 <puts>:
11200414:	00844834 	movhi	r2,4384
11200418:	109c8e04 	addi	r2,r2,29240
1120041c:	200b883a 	mov	r5,r4
11200420:	11000017 	ldw	r4,0(r2)
11200424:	12003541 	jmpi	11200354 <_puts_r>

11200428 <strlen>:
11200428:	208000cc 	andi	r2,r4,3
1120042c:	10002026 	beq	r2,zero,112004b0 <strlen+0x88>
11200430:	20800007 	ldb	r2,0(r4)
11200434:	10002026 	beq	r2,zero,112004b8 <strlen+0x90>
11200438:	2005883a 	mov	r2,r4
1120043c:	00000206 	br	11200448 <strlen+0x20>
11200440:	10c00007 	ldb	r3,0(r2)
11200444:	18001826 	beq	r3,zero,112004a8 <strlen+0x80>
11200448:	10800044 	addi	r2,r2,1
1120044c:	10c000cc 	andi	r3,r2,3
11200450:	183ffb1e 	bne	r3,zero,11200440 <__alt_data_end+0xffe80440>
11200454:	10c00017 	ldw	r3,0(r2)
11200458:	01ffbff4 	movhi	r7,65279
1120045c:	39ffbfc4 	addi	r7,r7,-257
11200460:	00ca303a 	nor	r5,zero,r3
11200464:	01a02074 	movhi	r6,32897
11200468:	19c7883a 	add	r3,r3,r7
1120046c:	31a02004 	addi	r6,r6,-32640
11200470:	1946703a 	and	r3,r3,r5
11200474:	1986703a 	and	r3,r3,r6
11200478:	1800091e 	bne	r3,zero,112004a0 <strlen+0x78>
1120047c:	10800104 	addi	r2,r2,4
11200480:	10c00017 	ldw	r3,0(r2)
11200484:	19cb883a 	add	r5,r3,r7
11200488:	00c6303a 	nor	r3,zero,r3
1120048c:	28c6703a 	and	r3,r5,r3
11200490:	1986703a 	and	r3,r3,r6
11200494:	183ff926 	beq	r3,zero,1120047c <__alt_data_end+0xffe8047c>
11200498:	00000106 	br	112004a0 <strlen+0x78>
1120049c:	10800044 	addi	r2,r2,1
112004a0:	10c00007 	ldb	r3,0(r2)
112004a4:	183ffd1e 	bne	r3,zero,1120049c <__alt_data_end+0xffe8049c>
112004a8:	1105c83a 	sub	r2,r2,r4
112004ac:	f800283a 	ret
112004b0:	2005883a 	mov	r2,r4
112004b4:	003fe706 	br	11200454 <__alt_data_end+0xffe80454>
112004b8:	0005883a 	mov	r2,zero
112004bc:	f800283a 	ret

112004c0 <__fp_unlock>:
112004c0:	0005883a 	mov	r2,zero
112004c4:	f800283a 	ret

112004c8 <_cleanup_r>:
112004c8:	01444834 	movhi	r5,4384
112004cc:	29491704 	addi	r5,r5,9308
112004d0:	1200de01 	jmpi	11200de0 <_fwalk_reent>

112004d4 <__sinit.part.1>:
112004d4:	defff704 	addi	sp,sp,-36
112004d8:	00c44834 	movhi	r3,4384
112004dc:	dfc00815 	stw	ra,32(sp)
112004e0:	ddc00715 	stw	r23,28(sp)
112004e4:	dd800615 	stw	r22,24(sp)
112004e8:	dd400515 	stw	r21,20(sp)
112004ec:	dd000415 	stw	r20,16(sp)
112004f0:	dcc00315 	stw	r19,12(sp)
112004f4:	dc800215 	stw	r18,8(sp)
112004f8:	dc400115 	stw	r17,4(sp)
112004fc:	dc000015 	stw	r16,0(sp)
11200500:	18c13204 	addi	r3,r3,1224
11200504:	24000117 	ldw	r16,4(r4)
11200508:	20c00f15 	stw	r3,60(r4)
1120050c:	2080bb04 	addi	r2,r4,748
11200510:	00c000c4 	movi	r3,3
11200514:	20c0b915 	stw	r3,740(r4)
11200518:	2080ba15 	stw	r2,744(r4)
1120051c:	2000b815 	stw	zero,736(r4)
11200520:	05c00204 	movi	r23,8
11200524:	00800104 	movi	r2,4
11200528:	2025883a 	mov	r18,r4
1120052c:	b80d883a 	mov	r6,r23
11200530:	81001704 	addi	r4,r16,92
11200534:	000b883a 	mov	r5,zero
11200538:	80000015 	stw	zero,0(r16)
1120053c:	80000115 	stw	zero,4(r16)
11200540:	80000215 	stw	zero,8(r16)
11200544:	8080030d 	sth	r2,12(r16)
11200548:	80001915 	stw	zero,100(r16)
1120054c:	8000038d 	sth	zero,14(r16)
11200550:	80000415 	stw	zero,16(r16)
11200554:	80000515 	stw	zero,20(r16)
11200558:	80000615 	stw	zero,24(r16)
1120055c:	1201a380 	call	11201a38 <memset>
11200560:	05844834 	movhi	r22,4384
11200564:	94400217 	ldw	r17,8(r18)
11200568:	05444834 	movhi	r21,4384
1120056c:	05044834 	movhi	r20,4384
11200570:	04c44834 	movhi	r19,4384
11200574:	b5884604 	addi	r22,r22,8472
11200578:	ad485d04 	addi	r21,r21,8564
1120057c:	a5087c04 	addi	r20,r20,8688
11200580:	9cc89304 	addi	r19,r19,8780
11200584:	85800815 	stw	r22,32(r16)
11200588:	85400915 	stw	r21,36(r16)
1120058c:	85000a15 	stw	r20,40(r16)
11200590:	84c00b15 	stw	r19,44(r16)
11200594:	84000715 	stw	r16,28(r16)
11200598:	00800284 	movi	r2,10
1120059c:	8880030d 	sth	r2,12(r17)
112005a0:	00800044 	movi	r2,1
112005a4:	b80d883a 	mov	r6,r23
112005a8:	89001704 	addi	r4,r17,92
112005ac:	000b883a 	mov	r5,zero
112005b0:	88000015 	stw	zero,0(r17)
112005b4:	88000115 	stw	zero,4(r17)
112005b8:	88000215 	stw	zero,8(r17)
112005bc:	88001915 	stw	zero,100(r17)
112005c0:	8880038d 	sth	r2,14(r17)
112005c4:	88000415 	stw	zero,16(r17)
112005c8:	88000515 	stw	zero,20(r17)
112005cc:	88000615 	stw	zero,24(r17)
112005d0:	1201a380 	call	11201a38 <memset>
112005d4:	94000317 	ldw	r16,12(r18)
112005d8:	00800484 	movi	r2,18
112005dc:	8c400715 	stw	r17,28(r17)
112005e0:	8d800815 	stw	r22,32(r17)
112005e4:	8d400915 	stw	r21,36(r17)
112005e8:	8d000a15 	stw	r20,40(r17)
112005ec:	8cc00b15 	stw	r19,44(r17)
112005f0:	8080030d 	sth	r2,12(r16)
112005f4:	00800084 	movi	r2,2
112005f8:	80000015 	stw	zero,0(r16)
112005fc:	80000115 	stw	zero,4(r16)
11200600:	80000215 	stw	zero,8(r16)
11200604:	80001915 	stw	zero,100(r16)
11200608:	8080038d 	sth	r2,14(r16)
1120060c:	80000415 	stw	zero,16(r16)
11200610:	80000515 	stw	zero,20(r16)
11200614:	80000615 	stw	zero,24(r16)
11200618:	b80d883a 	mov	r6,r23
1120061c:	000b883a 	mov	r5,zero
11200620:	81001704 	addi	r4,r16,92
11200624:	1201a380 	call	11201a38 <memset>
11200628:	00800044 	movi	r2,1
1120062c:	84000715 	stw	r16,28(r16)
11200630:	85800815 	stw	r22,32(r16)
11200634:	85400915 	stw	r21,36(r16)
11200638:	85000a15 	stw	r20,40(r16)
1120063c:	84c00b15 	stw	r19,44(r16)
11200640:	90800e15 	stw	r2,56(r18)
11200644:	dfc00817 	ldw	ra,32(sp)
11200648:	ddc00717 	ldw	r23,28(sp)
1120064c:	dd800617 	ldw	r22,24(sp)
11200650:	dd400517 	ldw	r21,20(sp)
11200654:	dd000417 	ldw	r20,16(sp)
11200658:	dcc00317 	ldw	r19,12(sp)
1120065c:	dc800217 	ldw	r18,8(sp)
11200660:	dc400117 	ldw	r17,4(sp)
11200664:	dc000017 	ldw	r16,0(sp)
11200668:	dec00904 	addi	sp,sp,36
1120066c:	f800283a 	ret

11200670 <__fp_lock>:
11200670:	0005883a 	mov	r2,zero
11200674:	f800283a 	ret

11200678 <__sfmoreglue>:
11200678:	defffc04 	addi	sp,sp,-16
1120067c:	dc400115 	stw	r17,4(sp)
11200680:	2c7fffc4 	addi	r17,r5,-1
11200684:	8c401a24 	muli	r17,r17,104
11200688:	dc800215 	stw	r18,8(sp)
1120068c:	2825883a 	mov	r18,r5
11200690:	89401d04 	addi	r5,r17,116
11200694:	dc000015 	stw	r16,0(sp)
11200698:	dfc00315 	stw	ra,12(sp)
1120069c:	1200ea40 	call	11200ea4 <_malloc_r>
112006a0:	1021883a 	mov	r16,r2
112006a4:	10000726 	beq	r2,zero,112006c4 <__sfmoreglue+0x4c>
112006a8:	11000304 	addi	r4,r2,12
112006ac:	10000015 	stw	zero,0(r2)
112006b0:	14800115 	stw	r18,4(r2)
112006b4:	11000215 	stw	r4,8(r2)
112006b8:	89801a04 	addi	r6,r17,104
112006bc:	000b883a 	mov	r5,zero
112006c0:	1201a380 	call	11201a38 <memset>
112006c4:	8005883a 	mov	r2,r16
112006c8:	dfc00317 	ldw	ra,12(sp)
112006cc:	dc800217 	ldw	r18,8(sp)
112006d0:	dc400117 	ldw	r17,4(sp)
112006d4:	dc000017 	ldw	r16,0(sp)
112006d8:	dec00404 	addi	sp,sp,16
112006dc:	f800283a 	ret

112006e0 <__sfp>:
112006e0:	defffb04 	addi	sp,sp,-20
112006e4:	dc000015 	stw	r16,0(sp)
112006e8:	04044834 	movhi	r16,4384
112006ec:	841c8d04 	addi	r16,r16,29236
112006f0:	dcc00315 	stw	r19,12(sp)
112006f4:	2027883a 	mov	r19,r4
112006f8:	81000017 	ldw	r4,0(r16)
112006fc:	dfc00415 	stw	ra,16(sp)
11200700:	dc800215 	stw	r18,8(sp)
11200704:	20800e17 	ldw	r2,56(r4)
11200708:	dc400115 	stw	r17,4(sp)
1120070c:	1000021e 	bne	r2,zero,11200718 <__sfp+0x38>
11200710:	12004d40 	call	112004d4 <__sinit.part.1>
11200714:	81000017 	ldw	r4,0(r16)
11200718:	2480b804 	addi	r18,r4,736
1120071c:	047fffc4 	movi	r17,-1
11200720:	91000117 	ldw	r4,4(r18)
11200724:	94000217 	ldw	r16,8(r18)
11200728:	213fffc4 	addi	r4,r4,-1
1120072c:	20000a16 	blt	r4,zero,11200758 <__sfp+0x78>
11200730:	8080030f 	ldh	r2,12(r16)
11200734:	10000c26 	beq	r2,zero,11200768 <__sfp+0x88>
11200738:	80c01d04 	addi	r3,r16,116
1120073c:	00000206 	br	11200748 <__sfp+0x68>
11200740:	18bfe60f 	ldh	r2,-104(r3)
11200744:	10000826 	beq	r2,zero,11200768 <__sfp+0x88>
11200748:	213fffc4 	addi	r4,r4,-1
1120074c:	1c3ffd04 	addi	r16,r3,-12
11200750:	18c01a04 	addi	r3,r3,104
11200754:	247ffa1e 	bne	r4,r17,11200740 <__alt_data_end+0xffe80740>
11200758:	90800017 	ldw	r2,0(r18)
1120075c:	10001d26 	beq	r2,zero,112007d4 <__sfp+0xf4>
11200760:	1025883a 	mov	r18,r2
11200764:	003fee06 	br	11200720 <__alt_data_end+0xffe80720>
11200768:	00bfffc4 	movi	r2,-1
1120076c:	8080038d 	sth	r2,14(r16)
11200770:	00800044 	movi	r2,1
11200774:	8080030d 	sth	r2,12(r16)
11200778:	80001915 	stw	zero,100(r16)
1120077c:	80000015 	stw	zero,0(r16)
11200780:	80000215 	stw	zero,8(r16)
11200784:	80000115 	stw	zero,4(r16)
11200788:	80000415 	stw	zero,16(r16)
1120078c:	80000515 	stw	zero,20(r16)
11200790:	80000615 	stw	zero,24(r16)
11200794:	01800204 	movi	r6,8
11200798:	000b883a 	mov	r5,zero
1120079c:	81001704 	addi	r4,r16,92
112007a0:	1201a380 	call	11201a38 <memset>
112007a4:	8005883a 	mov	r2,r16
112007a8:	80000c15 	stw	zero,48(r16)
112007ac:	80000d15 	stw	zero,52(r16)
112007b0:	80001115 	stw	zero,68(r16)
112007b4:	80001215 	stw	zero,72(r16)
112007b8:	dfc00417 	ldw	ra,16(sp)
112007bc:	dcc00317 	ldw	r19,12(sp)
112007c0:	dc800217 	ldw	r18,8(sp)
112007c4:	dc400117 	ldw	r17,4(sp)
112007c8:	dc000017 	ldw	r16,0(sp)
112007cc:	dec00504 	addi	sp,sp,20
112007d0:	f800283a 	ret
112007d4:	01400104 	movi	r5,4
112007d8:	9809883a 	mov	r4,r19
112007dc:	12006780 	call	11200678 <__sfmoreglue>
112007e0:	90800015 	stw	r2,0(r18)
112007e4:	103fde1e 	bne	r2,zero,11200760 <__alt_data_end+0xffe80760>
112007e8:	00800304 	movi	r2,12
112007ec:	98800015 	stw	r2,0(r19)
112007f0:	0005883a 	mov	r2,zero
112007f4:	003ff006 	br	112007b8 <__alt_data_end+0xffe807b8>

112007f8 <_cleanup>:
112007f8:	00844834 	movhi	r2,4384
112007fc:	109c8d04 	addi	r2,r2,29236
11200800:	11000017 	ldw	r4,0(r2)
11200804:	01444834 	movhi	r5,4384
11200808:	29491704 	addi	r5,r5,9308
1120080c:	1200de01 	jmpi	11200de0 <_fwalk_reent>

11200810 <__sinit>:
11200810:	20800e17 	ldw	r2,56(r4)
11200814:	10000126 	beq	r2,zero,1120081c <__sinit+0xc>
11200818:	f800283a 	ret
1120081c:	12004d41 	jmpi	112004d4 <__sinit.part.1>

11200820 <__sfp_lock_acquire>:
11200820:	f800283a 	ret

11200824 <__sfp_lock_release>:
11200824:	f800283a 	ret

11200828 <__sinit_lock_acquire>:
11200828:	f800283a 	ret

1120082c <__sinit_lock_release>:
1120082c:	f800283a 	ret

11200830 <__fp_lock_all>:
11200830:	00844834 	movhi	r2,4384
11200834:	109c8e04 	addi	r2,r2,29240
11200838:	11000017 	ldw	r4,0(r2)
1120083c:	01444834 	movhi	r5,4384
11200840:	29419c04 	addi	r5,r5,1648
11200844:	1200d1c1 	jmpi	11200d1c <_fwalk>

11200848 <__fp_unlock_all>:
11200848:	00844834 	movhi	r2,4384
1120084c:	109c8e04 	addi	r2,r2,29240
11200850:	11000017 	ldw	r4,0(r2)
11200854:	01444834 	movhi	r5,4384
11200858:	29413004 	addi	r5,r5,1216
1120085c:	1200d1c1 	jmpi	11200d1c <_fwalk>

11200860 <__sfvwrite_r>:
11200860:	30800217 	ldw	r2,8(r6)
11200864:	10006726 	beq	r2,zero,11200a04 <__sfvwrite_r+0x1a4>
11200868:	28c0030b 	ldhu	r3,12(r5)
1120086c:	defff404 	addi	sp,sp,-48
11200870:	dd400715 	stw	r21,28(sp)
11200874:	dd000615 	stw	r20,24(sp)
11200878:	dc000215 	stw	r16,8(sp)
1120087c:	dfc00b15 	stw	ra,44(sp)
11200880:	df000a15 	stw	fp,40(sp)
11200884:	ddc00915 	stw	r23,36(sp)
11200888:	dd800815 	stw	r22,32(sp)
1120088c:	dcc00515 	stw	r19,20(sp)
11200890:	dc800415 	stw	r18,16(sp)
11200894:	dc400315 	stw	r17,12(sp)
11200898:	1880020c 	andi	r2,r3,8
1120089c:	2821883a 	mov	r16,r5
112008a0:	202b883a 	mov	r21,r4
112008a4:	3029883a 	mov	r20,r6
112008a8:	10002726 	beq	r2,zero,11200948 <__sfvwrite_r+0xe8>
112008ac:	28800417 	ldw	r2,16(r5)
112008b0:	10002526 	beq	r2,zero,11200948 <__sfvwrite_r+0xe8>
112008b4:	1880008c 	andi	r2,r3,2
112008b8:	a4400017 	ldw	r17,0(r20)
112008bc:	10002a26 	beq	r2,zero,11200968 <__sfvwrite_r+0x108>
112008c0:	05a00034 	movhi	r22,32768
112008c4:	0027883a 	mov	r19,zero
112008c8:	0025883a 	mov	r18,zero
112008cc:	b5bf0004 	addi	r22,r22,-1024
112008d0:	980d883a 	mov	r6,r19
112008d4:	a809883a 	mov	r4,r21
112008d8:	90004626 	beq	r18,zero,112009f4 <__sfvwrite_r+0x194>
112008dc:	900f883a 	mov	r7,r18
112008e0:	b480022e 	bgeu	r22,r18,112008ec <__sfvwrite_r+0x8c>
112008e4:	01e00034 	movhi	r7,32768
112008e8:	39ff0004 	addi	r7,r7,-1024
112008ec:	80800917 	ldw	r2,36(r16)
112008f0:	81400717 	ldw	r5,28(r16)
112008f4:	103ee83a 	callr	r2
112008f8:	0080570e 	bge	zero,r2,11200a58 <__sfvwrite_r+0x1f8>
112008fc:	a0c00217 	ldw	r3,8(r20)
11200900:	98a7883a 	add	r19,r19,r2
11200904:	90a5c83a 	sub	r18,r18,r2
11200908:	1885c83a 	sub	r2,r3,r2
1120090c:	a0800215 	stw	r2,8(r20)
11200910:	103fef1e 	bne	r2,zero,112008d0 <__alt_data_end+0xffe808d0>
11200914:	0005883a 	mov	r2,zero
11200918:	dfc00b17 	ldw	ra,44(sp)
1120091c:	df000a17 	ldw	fp,40(sp)
11200920:	ddc00917 	ldw	r23,36(sp)
11200924:	dd800817 	ldw	r22,32(sp)
11200928:	dd400717 	ldw	r21,28(sp)
1120092c:	dd000617 	ldw	r20,24(sp)
11200930:	dcc00517 	ldw	r19,20(sp)
11200934:	dc800417 	ldw	r18,16(sp)
11200938:	dc400317 	ldw	r17,12(sp)
1120093c:	dc000217 	ldw	r16,8(sp)
11200940:	dec00c04 	addi	sp,sp,48
11200944:	f800283a 	ret
11200948:	800b883a 	mov	r5,r16
1120094c:	a809883a 	mov	r4,r21
11200950:	12022b40 	call	112022b4 <__swsetup_r>
11200954:	1000eb1e 	bne	r2,zero,11200d04 <__sfvwrite_r+0x4a4>
11200958:	80c0030b 	ldhu	r3,12(r16)
1120095c:	a4400017 	ldw	r17,0(r20)
11200960:	1880008c 	andi	r2,r3,2
11200964:	103fd61e 	bne	r2,zero,112008c0 <__alt_data_end+0xffe808c0>
11200968:	1880004c 	andi	r2,r3,1
1120096c:	10003f1e 	bne	r2,zero,11200a6c <__sfvwrite_r+0x20c>
11200970:	0039883a 	mov	fp,zero
11200974:	0025883a 	mov	r18,zero
11200978:	90001a26 	beq	r18,zero,112009e4 <__sfvwrite_r+0x184>
1120097c:	1880800c 	andi	r2,r3,512
11200980:	84c00217 	ldw	r19,8(r16)
11200984:	10002126 	beq	r2,zero,11200a0c <__sfvwrite_r+0x1ac>
11200988:	982f883a 	mov	r23,r19
1120098c:	94c09336 	bltu	r18,r19,11200bdc <__sfvwrite_r+0x37c>
11200990:	1881200c 	andi	r2,r3,1152
11200994:	10009e1e 	bne	r2,zero,11200c10 <__sfvwrite_r+0x3b0>
11200998:	81000017 	ldw	r4,0(r16)
1120099c:	b80d883a 	mov	r6,r23
112009a0:	e00b883a 	mov	r5,fp
112009a4:	12018dc0 	call	112018dc <memmove>
112009a8:	80c00217 	ldw	r3,8(r16)
112009ac:	81000017 	ldw	r4,0(r16)
112009b0:	9005883a 	mov	r2,r18
112009b4:	1ce7c83a 	sub	r19,r3,r19
112009b8:	25cf883a 	add	r7,r4,r23
112009bc:	84c00215 	stw	r19,8(r16)
112009c0:	81c00015 	stw	r7,0(r16)
112009c4:	a0c00217 	ldw	r3,8(r20)
112009c8:	e0b9883a 	add	fp,fp,r2
112009cc:	90a5c83a 	sub	r18,r18,r2
112009d0:	18a7c83a 	sub	r19,r3,r2
112009d4:	a4c00215 	stw	r19,8(r20)
112009d8:	983fce26 	beq	r19,zero,11200914 <__alt_data_end+0xffe80914>
112009dc:	80c0030b 	ldhu	r3,12(r16)
112009e0:	903fe61e 	bne	r18,zero,1120097c <__alt_data_end+0xffe8097c>
112009e4:	8f000017 	ldw	fp,0(r17)
112009e8:	8c800117 	ldw	r18,4(r17)
112009ec:	8c400204 	addi	r17,r17,8
112009f0:	003fe106 	br	11200978 <__alt_data_end+0xffe80978>
112009f4:	8cc00017 	ldw	r19,0(r17)
112009f8:	8c800117 	ldw	r18,4(r17)
112009fc:	8c400204 	addi	r17,r17,8
11200a00:	003fb306 	br	112008d0 <__alt_data_end+0xffe808d0>
11200a04:	0005883a 	mov	r2,zero
11200a08:	f800283a 	ret
11200a0c:	81000017 	ldw	r4,0(r16)
11200a10:	80800417 	ldw	r2,16(r16)
11200a14:	11005736 	bltu	r2,r4,11200b74 <__sfvwrite_r+0x314>
11200a18:	85c00517 	ldw	r23,20(r16)
11200a1c:	95c05536 	bltu	r18,r23,11200b74 <__sfvwrite_r+0x314>
11200a20:	00a00034 	movhi	r2,32768
11200a24:	10bfffc4 	addi	r2,r2,-1
11200a28:	9009883a 	mov	r4,r18
11200a2c:	1480012e 	bgeu	r2,r18,11200a34 <__sfvwrite_r+0x1d4>
11200a30:	1009883a 	mov	r4,r2
11200a34:	b80b883a 	mov	r5,r23
11200a38:	1202f680 	call	11202f68 <__divsi3>
11200a3c:	15cf383a 	mul	r7,r2,r23
11200a40:	81400717 	ldw	r5,28(r16)
11200a44:	80800917 	ldw	r2,36(r16)
11200a48:	e00d883a 	mov	r6,fp
11200a4c:	a809883a 	mov	r4,r21
11200a50:	103ee83a 	callr	r2
11200a54:	00bfdb16 	blt	zero,r2,112009c4 <__alt_data_end+0xffe809c4>
11200a58:	8080030b 	ldhu	r2,12(r16)
11200a5c:	10801014 	ori	r2,r2,64
11200a60:	8080030d 	sth	r2,12(r16)
11200a64:	00bfffc4 	movi	r2,-1
11200a68:	003fab06 	br	11200918 <__alt_data_end+0xffe80918>
11200a6c:	0027883a 	mov	r19,zero
11200a70:	0011883a 	mov	r8,zero
11200a74:	0039883a 	mov	fp,zero
11200a78:	0025883a 	mov	r18,zero
11200a7c:	90001f26 	beq	r18,zero,11200afc <__sfvwrite_r+0x29c>
11200a80:	40005a26 	beq	r8,zero,11200bec <__sfvwrite_r+0x38c>
11200a84:	982d883a 	mov	r22,r19
11200a88:	94c0012e 	bgeu	r18,r19,11200a90 <__sfvwrite_r+0x230>
11200a8c:	902d883a 	mov	r22,r18
11200a90:	81000017 	ldw	r4,0(r16)
11200a94:	80800417 	ldw	r2,16(r16)
11200a98:	b02f883a 	mov	r23,r22
11200a9c:	81c00517 	ldw	r7,20(r16)
11200aa0:	1100032e 	bgeu	r2,r4,11200ab0 <__sfvwrite_r+0x250>
11200aa4:	80c00217 	ldw	r3,8(r16)
11200aa8:	38c7883a 	add	r3,r7,r3
11200aac:	1d801816 	blt	r3,r22,11200b10 <__sfvwrite_r+0x2b0>
11200ab0:	b1c03e16 	blt	r22,r7,11200bac <__sfvwrite_r+0x34c>
11200ab4:	80800917 	ldw	r2,36(r16)
11200ab8:	81400717 	ldw	r5,28(r16)
11200abc:	e00d883a 	mov	r6,fp
11200ac0:	da000115 	stw	r8,4(sp)
11200ac4:	a809883a 	mov	r4,r21
11200ac8:	103ee83a 	callr	r2
11200acc:	102f883a 	mov	r23,r2
11200ad0:	da000117 	ldw	r8,4(sp)
11200ad4:	00bfe00e 	bge	zero,r2,11200a58 <__alt_data_end+0xffe80a58>
11200ad8:	9de7c83a 	sub	r19,r19,r23
11200adc:	98001f26 	beq	r19,zero,11200b5c <__sfvwrite_r+0x2fc>
11200ae0:	a0800217 	ldw	r2,8(r20)
11200ae4:	e5f9883a 	add	fp,fp,r23
11200ae8:	95e5c83a 	sub	r18,r18,r23
11200aec:	15efc83a 	sub	r23,r2,r23
11200af0:	a5c00215 	stw	r23,8(r20)
11200af4:	b83f8726 	beq	r23,zero,11200914 <__alt_data_end+0xffe80914>
11200af8:	903fe11e 	bne	r18,zero,11200a80 <__alt_data_end+0xffe80a80>
11200afc:	8f000017 	ldw	fp,0(r17)
11200b00:	8c800117 	ldw	r18,4(r17)
11200b04:	0011883a 	mov	r8,zero
11200b08:	8c400204 	addi	r17,r17,8
11200b0c:	003fdb06 	br	11200a7c <__alt_data_end+0xffe80a7c>
11200b10:	180d883a 	mov	r6,r3
11200b14:	e00b883a 	mov	r5,fp
11200b18:	da000115 	stw	r8,4(sp)
11200b1c:	d8c00015 	stw	r3,0(sp)
11200b20:	12018dc0 	call	112018dc <memmove>
11200b24:	d8c00017 	ldw	r3,0(sp)
11200b28:	80800017 	ldw	r2,0(r16)
11200b2c:	800b883a 	mov	r5,r16
11200b30:	a809883a 	mov	r4,r21
11200b34:	10c5883a 	add	r2,r2,r3
11200b38:	80800015 	stw	r2,0(r16)
11200b3c:	d8c00015 	stw	r3,0(sp)
11200b40:	120277c0 	call	1120277c <_fflush_r>
11200b44:	d8c00017 	ldw	r3,0(sp)
11200b48:	da000117 	ldw	r8,4(sp)
11200b4c:	103fc21e 	bne	r2,zero,11200a58 <__alt_data_end+0xffe80a58>
11200b50:	182f883a 	mov	r23,r3
11200b54:	9de7c83a 	sub	r19,r19,r23
11200b58:	983fe11e 	bne	r19,zero,11200ae0 <__alt_data_end+0xffe80ae0>
11200b5c:	800b883a 	mov	r5,r16
11200b60:	a809883a 	mov	r4,r21
11200b64:	120277c0 	call	1120277c <_fflush_r>
11200b68:	103fbb1e 	bne	r2,zero,11200a58 <__alt_data_end+0xffe80a58>
11200b6c:	0011883a 	mov	r8,zero
11200b70:	003fdb06 	br	11200ae0 <__alt_data_end+0xffe80ae0>
11200b74:	94c0012e 	bgeu	r18,r19,11200b7c <__sfvwrite_r+0x31c>
11200b78:	9027883a 	mov	r19,r18
11200b7c:	980d883a 	mov	r6,r19
11200b80:	e00b883a 	mov	r5,fp
11200b84:	12018dc0 	call	112018dc <memmove>
11200b88:	80800217 	ldw	r2,8(r16)
11200b8c:	80c00017 	ldw	r3,0(r16)
11200b90:	14c5c83a 	sub	r2,r2,r19
11200b94:	1cc7883a 	add	r3,r3,r19
11200b98:	80800215 	stw	r2,8(r16)
11200b9c:	80c00015 	stw	r3,0(r16)
11200ba0:	10004326 	beq	r2,zero,11200cb0 <__sfvwrite_r+0x450>
11200ba4:	9805883a 	mov	r2,r19
11200ba8:	003f8606 	br	112009c4 <__alt_data_end+0xffe809c4>
11200bac:	b00d883a 	mov	r6,r22
11200bb0:	e00b883a 	mov	r5,fp
11200bb4:	da000115 	stw	r8,4(sp)
11200bb8:	12018dc0 	call	112018dc <memmove>
11200bbc:	80800217 	ldw	r2,8(r16)
11200bc0:	80c00017 	ldw	r3,0(r16)
11200bc4:	da000117 	ldw	r8,4(sp)
11200bc8:	1585c83a 	sub	r2,r2,r22
11200bcc:	1dad883a 	add	r22,r3,r22
11200bd0:	80800215 	stw	r2,8(r16)
11200bd4:	85800015 	stw	r22,0(r16)
11200bd8:	003fbf06 	br	11200ad8 <__alt_data_end+0xffe80ad8>
11200bdc:	81000017 	ldw	r4,0(r16)
11200be0:	9027883a 	mov	r19,r18
11200be4:	902f883a 	mov	r23,r18
11200be8:	003f6c06 	br	1120099c <__alt_data_end+0xffe8099c>
11200bec:	900d883a 	mov	r6,r18
11200bf0:	01400284 	movi	r5,10
11200bf4:	e009883a 	mov	r4,fp
11200bf8:	12016b00 	call	112016b0 <memchr>
11200bfc:	10003e26 	beq	r2,zero,11200cf8 <__sfvwrite_r+0x498>
11200c00:	10800044 	addi	r2,r2,1
11200c04:	1727c83a 	sub	r19,r2,fp
11200c08:	02000044 	movi	r8,1
11200c0c:	003f9d06 	br	11200a84 <__alt_data_end+0xffe80a84>
11200c10:	80800517 	ldw	r2,20(r16)
11200c14:	81400417 	ldw	r5,16(r16)
11200c18:	81c00017 	ldw	r7,0(r16)
11200c1c:	10a7883a 	add	r19,r2,r2
11200c20:	9885883a 	add	r2,r19,r2
11200c24:	1026d7fa 	srli	r19,r2,31
11200c28:	396dc83a 	sub	r22,r7,r5
11200c2c:	b1000044 	addi	r4,r22,1
11200c30:	9885883a 	add	r2,r19,r2
11200c34:	1027d07a 	srai	r19,r2,1
11200c38:	2485883a 	add	r2,r4,r18
11200c3c:	980d883a 	mov	r6,r19
11200c40:	9880022e 	bgeu	r19,r2,11200c4c <__sfvwrite_r+0x3ec>
11200c44:	1027883a 	mov	r19,r2
11200c48:	100d883a 	mov	r6,r2
11200c4c:	18c1000c 	andi	r3,r3,1024
11200c50:	18001c26 	beq	r3,zero,11200cc4 <__sfvwrite_r+0x464>
11200c54:	300b883a 	mov	r5,r6
11200c58:	a809883a 	mov	r4,r21
11200c5c:	1200ea40 	call	11200ea4 <_malloc_r>
11200c60:	102f883a 	mov	r23,r2
11200c64:	10002926 	beq	r2,zero,11200d0c <__sfvwrite_r+0x4ac>
11200c68:	81400417 	ldw	r5,16(r16)
11200c6c:	b00d883a 	mov	r6,r22
11200c70:	1009883a 	mov	r4,r2
11200c74:	12017940 	call	11201794 <memcpy>
11200c78:	8080030b 	ldhu	r2,12(r16)
11200c7c:	00fedfc4 	movi	r3,-1153
11200c80:	10c4703a 	and	r2,r2,r3
11200c84:	10802014 	ori	r2,r2,128
11200c88:	8080030d 	sth	r2,12(r16)
11200c8c:	bd89883a 	add	r4,r23,r22
11200c90:	9d8fc83a 	sub	r7,r19,r22
11200c94:	85c00415 	stw	r23,16(r16)
11200c98:	84c00515 	stw	r19,20(r16)
11200c9c:	81000015 	stw	r4,0(r16)
11200ca0:	9027883a 	mov	r19,r18
11200ca4:	81c00215 	stw	r7,8(r16)
11200ca8:	902f883a 	mov	r23,r18
11200cac:	003f3b06 	br	1120099c <__alt_data_end+0xffe8099c>
11200cb0:	800b883a 	mov	r5,r16
11200cb4:	a809883a 	mov	r4,r21
11200cb8:	120277c0 	call	1120277c <_fflush_r>
11200cbc:	103fb926 	beq	r2,zero,11200ba4 <__alt_data_end+0xffe80ba4>
11200cc0:	003f6506 	br	11200a58 <__alt_data_end+0xffe80a58>
11200cc4:	a809883a 	mov	r4,r21
11200cc8:	1201b600 	call	11201b60 <_realloc_r>
11200ccc:	102f883a 	mov	r23,r2
11200cd0:	103fee1e 	bne	r2,zero,11200c8c <__alt_data_end+0xffe80c8c>
11200cd4:	81400417 	ldw	r5,16(r16)
11200cd8:	a809883a 	mov	r4,r21
11200cdc:	120292c0 	call	1120292c <_free_r>
11200ce0:	8080030b 	ldhu	r2,12(r16)
11200ce4:	00ffdfc4 	movi	r3,-129
11200ce8:	1884703a 	and	r2,r3,r2
11200cec:	00c00304 	movi	r3,12
11200cf0:	a8c00015 	stw	r3,0(r21)
11200cf4:	003f5906 	br	11200a5c <__alt_data_end+0xffe80a5c>
11200cf8:	94c00044 	addi	r19,r18,1
11200cfc:	02000044 	movi	r8,1
11200d00:	003f6006 	br	11200a84 <__alt_data_end+0xffe80a84>
11200d04:	00bfffc4 	movi	r2,-1
11200d08:	003f0306 	br	11200918 <__alt_data_end+0xffe80918>
11200d0c:	00800304 	movi	r2,12
11200d10:	a8800015 	stw	r2,0(r21)
11200d14:	8080030b 	ldhu	r2,12(r16)
11200d18:	003f5006 	br	11200a5c <__alt_data_end+0xffe80a5c>

11200d1c <_fwalk>:
11200d1c:	defff704 	addi	sp,sp,-36
11200d20:	dd000415 	stw	r20,16(sp)
11200d24:	dfc00815 	stw	ra,32(sp)
11200d28:	ddc00715 	stw	r23,28(sp)
11200d2c:	dd800615 	stw	r22,24(sp)
11200d30:	dd400515 	stw	r21,20(sp)
11200d34:	dcc00315 	stw	r19,12(sp)
11200d38:	dc800215 	stw	r18,8(sp)
11200d3c:	dc400115 	stw	r17,4(sp)
11200d40:	dc000015 	stw	r16,0(sp)
11200d44:	2500b804 	addi	r20,r4,736
11200d48:	a0002326 	beq	r20,zero,11200dd8 <_fwalk+0xbc>
11200d4c:	282b883a 	mov	r21,r5
11200d50:	002f883a 	mov	r23,zero
11200d54:	05800044 	movi	r22,1
11200d58:	04ffffc4 	movi	r19,-1
11200d5c:	a4400117 	ldw	r17,4(r20)
11200d60:	a4800217 	ldw	r18,8(r20)
11200d64:	8c7fffc4 	addi	r17,r17,-1
11200d68:	88000d16 	blt	r17,zero,11200da0 <_fwalk+0x84>
11200d6c:	94000304 	addi	r16,r18,12
11200d70:	94800384 	addi	r18,r18,14
11200d74:	8080000b 	ldhu	r2,0(r16)
11200d78:	8c7fffc4 	addi	r17,r17,-1
11200d7c:	813ffd04 	addi	r4,r16,-12
11200d80:	b080042e 	bgeu	r22,r2,11200d94 <_fwalk+0x78>
11200d84:	9080000f 	ldh	r2,0(r18)
11200d88:	14c00226 	beq	r2,r19,11200d94 <_fwalk+0x78>
11200d8c:	a83ee83a 	callr	r21
11200d90:	b8aeb03a 	or	r23,r23,r2
11200d94:	84001a04 	addi	r16,r16,104
11200d98:	94801a04 	addi	r18,r18,104
11200d9c:	8cfff51e 	bne	r17,r19,11200d74 <__alt_data_end+0xffe80d74>
11200da0:	a5000017 	ldw	r20,0(r20)
11200da4:	a03fed1e 	bne	r20,zero,11200d5c <__alt_data_end+0xffe80d5c>
11200da8:	b805883a 	mov	r2,r23
11200dac:	dfc00817 	ldw	ra,32(sp)
11200db0:	ddc00717 	ldw	r23,28(sp)
11200db4:	dd800617 	ldw	r22,24(sp)
11200db8:	dd400517 	ldw	r21,20(sp)
11200dbc:	dd000417 	ldw	r20,16(sp)
11200dc0:	dcc00317 	ldw	r19,12(sp)
11200dc4:	dc800217 	ldw	r18,8(sp)
11200dc8:	dc400117 	ldw	r17,4(sp)
11200dcc:	dc000017 	ldw	r16,0(sp)
11200dd0:	dec00904 	addi	sp,sp,36
11200dd4:	f800283a 	ret
11200dd8:	002f883a 	mov	r23,zero
11200ddc:	003ff206 	br	11200da8 <__alt_data_end+0xffe80da8>

11200de0 <_fwalk_reent>:
11200de0:	defff704 	addi	sp,sp,-36
11200de4:	dd000415 	stw	r20,16(sp)
11200de8:	dfc00815 	stw	ra,32(sp)
11200dec:	ddc00715 	stw	r23,28(sp)
11200df0:	dd800615 	stw	r22,24(sp)
11200df4:	dd400515 	stw	r21,20(sp)
11200df8:	dcc00315 	stw	r19,12(sp)
11200dfc:	dc800215 	stw	r18,8(sp)
11200e00:	dc400115 	stw	r17,4(sp)
11200e04:	dc000015 	stw	r16,0(sp)
11200e08:	2500b804 	addi	r20,r4,736
11200e0c:	a0002326 	beq	r20,zero,11200e9c <_fwalk_reent+0xbc>
11200e10:	282b883a 	mov	r21,r5
11200e14:	2027883a 	mov	r19,r4
11200e18:	002f883a 	mov	r23,zero
11200e1c:	05800044 	movi	r22,1
11200e20:	04bfffc4 	movi	r18,-1
11200e24:	a4400117 	ldw	r17,4(r20)
11200e28:	a4000217 	ldw	r16,8(r20)
11200e2c:	8c7fffc4 	addi	r17,r17,-1
11200e30:	88000c16 	blt	r17,zero,11200e64 <_fwalk_reent+0x84>
11200e34:	84000304 	addi	r16,r16,12
11200e38:	8080000b 	ldhu	r2,0(r16)
11200e3c:	8c7fffc4 	addi	r17,r17,-1
11200e40:	817ffd04 	addi	r5,r16,-12
11200e44:	b080052e 	bgeu	r22,r2,11200e5c <_fwalk_reent+0x7c>
11200e48:	8080008f 	ldh	r2,2(r16)
11200e4c:	9809883a 	mov	r4,r19
11200e50:	14800226 	beq	r2,r18,11200e5c <_fwalk_reent+0x7c>
11200e54:	a83ee83a 	callr	r21
11200e58:	b8aeb03a 	or	r23,r23,r2
11200e5c:	84001a04 	addi	r16,r16,104
11200e60:	8cbff51e 	bne	r17,r18,11200e38 <__alt_data_end+0xffe80e38>
11200e64:	a5000017 	ldw	r20,0(r20)
11200e68:	a03fee1e 	bne	r20,zero,11200e24 <__alt_data_end+0xffe80e24>
11200e6c:	b805883a 	mov	r2,r23
11200e70:	dfc00817 	ldw	ra,32(sp)
11200e74:	ddc00717 	ldw	r23,28(sp)
11200e78:	dd800617 	ldw	r22,24(sp)
11200e7c:	dd400517 	ldw	r21,20(sp)
11200e80:	dd000417 	ldw	r20,16(sp)
11200e84:	dcc00317 	ldw	r19,12(sp)
11200e88:	dc800217 	ldw	r18,8(sp)
11200e8c:	dc400117 	ldw	r17,4(sp)
11200e90:	dc000017 	ldw	r16,0(sp)
11200e94:	dec00904 	addi	sp,sp,36
11200e98:	f800283a 	ret
11200e9c:	002f883a 	mov	r23,zero
11200ea0:	003ff206 	br	11200e6c <__alt_data_end+0xffe80e6c>

11200ea4 <_malloc_r>:
11200ea4:	defff504 	addi	sp,sp,-44
11200ea8:	dc800315 	stw	r18,12(sp)
11200eac:	dfc00a15 	stw	ra,40(sp)
11200eb0:	df000915 	stw	fp,36(sp)
11200eb4:	ddc00815 	stw	r23,32(sp)
11200eb8:	dd800715 	stw	r22,28(sp)
11200ebc:	dd400615 	stw	r21,24(sp)
11200ec0:	dd000515 	stw	r20,20(sp)
11200ec4:	dcc00415 	stw	r19,16(sp)
11200ec8:	dc400215 	stw	r17,8(sp)
11200ecc:	dc000115 	stw	r16,4(sp)
11200ed0:	288002c4 	addi	r2,r5,11
11200ed4:	00c00584 	movi	r3,22
11200ed8:	2025883a 	mov	r18,r4
11200edc:	18807f2e 	bgeu	r3,r2,112010dc <_malloc_r+0x238>
11200ee0:	047ffe04 	movi	r17,-8
11200ee4:	1462703a 	and	r17,r2,r17
11200ee8:	8800a316 	blt	r17,zero,11201178 <_malloc_r+0x2d4>
11200eec:	8940a236 	bltu	r17,r5,11201178 <_malloc_r+0x2d4>
11200ef0:	12035ac0 	call	112035ac <__malloc_lock>
11200ef4:	00807dc4 	movi	r2,503
11200ef8:	1441e92e 	bgeu	r2,r17,112016a0 <_malloc_r+0x7fc>
11200efc:	8804d27a 	srli	r2,r17,9
11200f00:	1000a126 	beq	r2,zero,11201188 <_malloc_r+0x2e4>
11200f04:	00c00104 	movi	r3,4
11200f08:	18811e36 	bltu	r3,r2,11201384 <_malloc_r+0x4e0>
11200f0c:	8804d1ba 	srli	r2,r17,6
11200f10:	12000e44 	addi	r8,r2,57
11200f14:	11c00e04 	addi	r7,r2,56
11200f18:	4209883a 	add	r4,r8,r8
11200f1c:	04c44834 	movhi	r19,4384
11200f20:	2109883a 	add	r4,r4,r4
11200f24:	9cd70904 	addi	r19,r19,23588
11200f28:	2109883a 	add	r4,r4,r4
11200f2c:	9909883a 	add	r4,r19,r4
11200f30:	24000117 	ldw	r16,4(r4)
11200f34:	213ffe04 	addi	r4,r4,-8
11200f38:	24009726 	beq	r4,r16,11201198 <_malloc_r+0x2f4>
11200f3c:	80800117 	ldw	r2,4(r16)
11200f40:	01bfff04 	movi	r6,-4
11200f44:	014003c4 	movi	r5,15
11200f48:	1184703a 	and	r2,r2,r6
11200f4c:	1447c83a 	sub	r3,r2,r17
11200f50:	28c00716 	blt	r5,r3,11200f70 <_malloc_r+0xcc>
11200f54:	1800920e 	bge	r3,zero,112011a0 <_malloc_r+0x2fc>
11200f58:	84000317 	ldw	r16,12(r16)
11200f5c:	24008e26 	beq	r4,r16,11201198 <_malloc_r+0x2f4>
11200f60:	80800117 	ldw	r2,4(r16)
11200f64:	1184703a 	and	r2,r2,r6
11200f68:	1447c83a 	sub	r3,r2,r17
11200f6c:	28fff90e 	bge	r5,r3,11200f54 <__alt_data_end+0xffe80f54>
11200f70:	3809883a 	mov	r4,r7
11200f74:	01844834 	movhi	r6,4384
11200f78:	9c000417 	ldw	r16,16(r19)
11200f7c:	31970904 	addi	r6,r6,23588
11200f80:	32000204 	addi	r8,r6,8
11200f84:	82013426 	beq	r16,r8,11201458 <_malloc_r+0x5b4>
11200f88:	80c00117 	ldw	r3,4(r16)
11200f8c:	00bfff04 	movi	r2,-4
11200f90:	188e703a 	and	r7,r3,r2
11200f94:	3c45c83a 	sub	r2,r7,r17
11200f98:	00c003c4 	movi	r3,15
11200f9c:	18811f16 	blt	r3,r2,1120141c <_malloc_r+0x578>
11200fa0:	32000515 	stw	r8,20(r6)
11200fa4:	32000415 	stw	r8,16(r6)
11200fa8:	10007f0e 	bge	r2,zero,112011a8 <_malloc_r+0x304>
11200fac:	00807fc4 	movi	r2,511
11200fb0:	11c0fd36 	bltu	r2,r7,112013a8 <_malloc_r+0x504>
11200fb4:	3806d0fa 	srli	r3,r7,3
11200fb8:	01c00044 	movi	r7,1
11200fbc:	30800117 	ldw	r2,4(r6)
11200fc0:	19400044 	addi	r5,r3,1
11200fc4:	294b883a 	add	r5,r5,r5
11200fc8:	1807d0ba 	srai	r3,r3,2
11200fcc:	294b883a 	add	r5,r5,r5
11200fd0:	294b883a 	add	r5,r5,r5
11200fd4:	298b883a 	add	r5,r5,r6
11200fd8:	38c6983a 	sll	r3,r7,r3
11200fdc:	29c00017 	ldw	r7,0(r5)
11200fe0:	2a7ffe04 	addi	r9,r5,-8
11200fe4:	1886b03a 	or	r3,r3,r2
11200fe8:	82400315 	stw	r9,12(r16)
11200fec:	81c00215 	stw	r7,8(r16)
11200ff0:	30c00115 	stw	r3,4(r6)
11200ff4:	2c000015 	stw	r16,0(r5)
11200ff8:	3c000315 	stw	r16,12(r7)
11200ffc:	2005d0ba 	srai	r2,r4,2
11201000:	01400044 	movi	r5,1
11201004:	288a983a 	sll	r5,r5,r2
11201008:	19406f36 	bltu	r3,r5,112011c8 <_malloc_r+0x324>
1120100c:	28c4703a 	and	r2,r5,r3
11201010:	10000a1e 	bne	r2,zero,1120103c <_malloc_r+0x198>
11201014:	00bfff04 	movi	r2,-4
11201018:	294b883a 	add	r5,r5,r5
1120101c:	2088703a 	and	r4,r4,r2
11201020:	28c4703a 	and	r2,r5,r3
11201024:	21000104 	addi	r4,r4,4
11201028:	1000041e 	bne	r2,zero,1120103c <_malloc_r+0x198>
1120102c:	294b883a 	add	r5,r5,r5
11201030:	28c4703a 	and	r2,r5,r3
11201034:	21000104 	addi	r4,r4,4
11201038:	103ffc26 	beq	r2,zero,1120102c <__alt_data_end+0xffe8102c>
1120103c:	02bfff04 	movi	r10,-4
11201040:	024003c4 	movi	r9,15
11201044:	21800044 	addi	r6,r4,1
11201048:	318d883a 	add	r6,r6,r6
1120104c:	318d883a 	add	r6,r6,r6
11201050:	318d883a 	add	r6,r6,r6
11201054:	998d883a 	add	r6,r19,r6
11201058:	333ffe04 	addi	r12,r6,-8
1120105c:	2017883a 	mov	r11,r4
11201060:	31800104 	addi	r6,r6,4
11201064:	34000017 	ldw	r16,0(r6)
11201068:	31fffd04 	addi	r7,r6,-12
1120106c:	81c0041e 	bne	r16,r7,11201080 <_malloc_r+0x1dc>
11201070:	0000fb06 	br	11201460 <_malloc_r+0x5bc>
11201074:	1801030e 	bge	r3,zero,11201484 <_malloc_r+0x5e0>
11201078:	84000317 	ldw	r16,12(r16)
1120107c:	81c0f826 	beq	r16,r7,11201460 <_malloc_r+0x5bc>
11201080:	80800117 	ldw	r2,4(r16)
11201084:	1284703a 	and	r2,r2,r10
11201088:	1447c83a 	sub	r3,r2,r17
1120108c:	48fff90e 	bge	r9,r3,11201074 <__alt_data_end+0xffe81074>
11201090:	80800317 	ldw	r2,12(r16)
11201094:	81000217 	ldw	r4,8(r16)
11201098:	89400054 	ori	r5,r17,1
1120109c:	81400115 	stw	r5,4(r16)
112010a0:	20800315 	stw	r2,12(r4)
112010a4:	11000215 	stw	r4,8(r2)
112010a8:	8463883a 	add	r17,r16,r17
112010ac:	9c400515 	stw	r17,20(r19)
112010b0:	9c400415 	stw	r17,16(r19)
112010b4:	18800054 	ori	r2,r3,1
112010b8:	88800115 	stw	r2,4(r17)
112010bc:	8a000315 	stw	r8,12(r17)
112010c0:	8a000215 	stw	r8,8(r17)
112010c4:	88e3883a 	add	r17,r17,r3
112010c8:	88c00015 	stw	r3,0(r17)
112010cc:	9009883a 	mov	r4,r18
112010d0:	12035d00 	call	112035d0 <__malloc_unlock>
112010d4:	80800204 	addi	r2,r16,8
112010d8:	00001b06 	br	11201148 <_malloc_r+0x2a4>
112010dc:	04400404 	movi	r17,16
112010e0:	89402536 	bltu	r17,r5,11201178 <_malloc_r+0x2d4>
112010e4:	12035ac0 	call	112035ac <__malloc_lock>
112010e8:	00800184 	movi	r2,6
112010ec:	01000084 	movi	r4,2
112010f0:	04c44834 	movhi	r19,4384
112010f4:	1085883a 	add	r2,r2,r2
112010f8:	9cd70904 	addi	r19,r19,23588
112010fc:	1085883a 	add	r2,r2,r2
11201100:	9885883a 	add	r2,r19,r2
11201104:	14000117 	ldw	r16,4(r2)
11201108:	10fffe04 	addi	r3,r2,-8
1120110c:	80c0d926 	beq	r16,r3,11201474 <_malloc_r+0x5d0>
11201110:	80c00117 	ldw	r3,4(r16)
11201114:	81000317 	ldw	r4,12(r16)
11201118:	00bfff04 	movi	r2,-4
1120111c:	1884703a 	and	r2,r3,r2
11201120:	81400217 	ldw	r5,8(r16)
11201124:	8085883a 	add	r2,r16,r2
11201128:	10c00117 	ldw	r3,4(r2)
1120112c:	29000315 	stw	r4,12(r5)
11201130:	21400215 	stw	r5,8(r4)
11201134:	18c00054 	ori	r3,r3,1
11201138:	10c00115 	stw	r3,4(r2)
1120113c:	9009883a 	mov	r4,r18
11201140:	12035d00 	call	112035d0 <__malloc_unlock>
11201144:	80800204 	addi	r2,r16,8
11201148:	dfc00a17 	ldw	ra,40(sp)
1120114c:	df000917 	ldw	fp,36(sp)
11201150:	ddc00817 	ldw	r23,32(sp)
11201154:	dd800717 	ldw	r22,28(sp)
11201158:	dd400617 	ldw	r21,24(sp)
1120115c:	dd000517 	ldw	r20,20(sp)
11201160:	dcc00417 	ldw	r19,16(sp)
11201164:	dc800317 	ldw	r18,12(sp)
11201168:	dc400217 	ldw	r17,8(sp)
1120116c:	dc000117 	ldw	r16,4(sp)
11201170:	dec00b04 	addi	sp,sp,44
11201174:	f800283a 	ret
11201178:	00800304 	movi	r2,12
1120117c:	90800015 	stw	r2,0(r18)
11201180:	0005883a 	mov	r2,zero
11201184:	003ff006 	br	11201148 <__alt_data_end+0xffe81148>
11201188:	01002004 	movi	r4,128
1120118c:	02001004 	movi	r8,64
11201190:	01c00fc4 	movi	r7,63
11201194:	003f6106 	br	11200f1c <__alt_data_end+0xffe80f1c>
11201198:	4009883a 	mov	r4,r8
1120119c:	003f7506 	br	11200f74 <__alt_data_end+0xffe80f74>
112011a0:	81000317 	ldw	r4,12(r16)
112011a4:	003fde06 	br	11201120 <__alt_data_end+0xffe81120>
112011a8:	81c5883a 	add	r2,r16,r7
112011ac:	11400117 	ldw	r5,4(r2)
112011b0:	9009883a 	mov	r4,r18
112011b4:	29400054 	ori	r5,r5,1
112011b8:	11400115 	stw	r5,4(r2)
112011bc:	12035d00 	call	112035d0 <__malloc_unlock>
112011c0:	80800204 	addi	r2,r16,8
112011c4:	003fe006 	br	11201148 <__alt_data_end+0xffe81148>
112011c8:	9c000217 	ldw	r16,8(r19)
112011cc:	00bfff04 	movi	r2,-4
112011d0:	85800117 	ldw	r22,4(r16)
112011d4:	b0ac703a 	and	r22,r22,r2
112011d8:	b4400336 	bltu	r22,r17,112011e8 <_malloc_r+0x344>
112011dc:	b445c83a 	sub	r2,r22,r17
112011e0:	00c003c4 	movi	r3,15
112011e4:	18805d16 	blt	r3,r2,1120135c <_malloc_r+0x4b8>
112011e8:	05c44834 	movhi	r23,4384
112011ec:	00844834 	movhi	r2,4384
112011f0:	109c9d04 	addi	r2,r2,29300
112011f4:	bddc8f04 	addi	r23,r23,29244
112011f8:	15400017 	ldw	r21,0(r2)
112011fc:	b8c00017 	ldw	r3,0(r23)
11201200:	00bfffc4 	movi	r2,-1
11201204:	858d883a 	add	r6,r16,r22
11201208:	8d6b883a 	add	r21,r17,r21
1120120c:	1880ea26 	beq	r3,r2,112015b8 <_malloc_r+0x714>
11201210:	ad4403c4 	addi	r21,r21,4111
11201214:	00bc0004 	movi	r2,-4096
11201218:	a8aa703a 	and	r21,r21,r2
1120121c:	a80b883a 	mov	r5,r21
11201220:	9009883a 	mov	r4,r18
11201224:	d9800015 	stw	r6,0(sp)
11201228:	12020c40 	call	112020c4 <_sbrk_r>
1120122c:	1029883a 	mov	r20,r2
11201230:	00bfffc4 	movi	r2,-1
11201234:	d9800017 	ldw	r6,0(sp)
11201238:	a080e826 	beq	r20,r2,112015dc <_malloc_r+0x738>
1120123c:	a180a636 	bltu	r20,r6,112014d8 <_malloc_r+0x634>
11201240:	07044834 	movhi	fp,4384
11201244:	e71ca504 	addi	fp,fp,29332
11201248:	e0800017 	ldw	r2,0(fp)
1120124c:	a887883a 	add	r3,r21,r2
11201250:	e0c00015 	stw	r3,0(fp)
11201254:	3500e626 	beq	r6,r20,112015f0 <_malloc_r+0x74c>
11201258:	b9000017 	ldw	r4,0(r23)
1120125c:	00bfffc4 	movi	r2,-1
11201260:	2080ee26 	beq	r4,r2,1120161c <_malloc_r+0x778>
11201264:	a185c83a 	sub	r2,r20,r6
11201268:	10c5883a 	add	r2,r2,r3
1120126c:	e0800015 	stw	r2,0(fp)
11201270:	a0c001cc 	andi	r3,r20,7
11201274:	1800bc26 	beq	r3,zero,11201568 <_malloc_r+0x6c4>
11201278:	a0e9c83a 	sub	r20,r20,r3
1120127c:	00840204 	movi	r2,4104
11201280:	a5000204 	addi	r20,r20,8
11201284:	10c7c83a 	sub	r3,r2,r3
11201288:	a545883a 	add	r2,r20,r21
1120128c:	1083ffcc 	andi	r2,r2,4095
11201290:	18abc83a 	sub	r21,r3,r2
11201294:	a80b883a 	mov	r5,r21
11201298:	9009883a 	mov	r4,r18
1120129c:	12020c40 	call	112020c4 <_sbrk_r>
112012a0:	00ffffc4 	movi	r3,-1
112012a4:	10c0e126 	beq	r2,r3,1120162c <_malloc_r+0x788>
112012a8:	1505c83a 	sub	r2,r2,r20
112012ac:	1545883a 	add	r2,r2,r21
112012b0:	10800054 	ori	r2,r2,1
112012b4:	e0c00017 	ldw	r3,0(fp)
112012b8:	9d000215 	stw	r20,8(r19)
112012bc:	a0800115 	stw	r2,4(r20)
112012c0:	a8c7883a 	add	r3,r21,r3
112012c4:	e0c00015 	stw	r3,0(fp)
112012c8:	84c00e26 	beq	r16,r19,11201304 <_malloc_r+0x460>
112012cc:	018003c4 	movi	r6,15
112012d0:	3580a72e 	bgeu	r6,r22,11201570 <_malloc_r+0x6cc>
112012d4:	81400117 	ldw	r5,4(r16)
112012d8:	013ffe04 	movi	r4,-8
112012dc:	b0bffd04 	addi	r2,r22,-12
112012e0:	1104703a 	and	r2,r2,r4
112012e4:	2900004c 	andi	r4,r5,1
112012e8:	2088b03a 	or	r4,r4,r2
112012ec:	81000115 	stw	r4,4(r16)
112012f0:	01400144 	movi	r5,5
112012f4:	8089883a 	add	r4,r16,r2
112012f8:	21400115 	stw	r5,4(r4)
112012fc:	21400215 	stw	r5,8(r4)
11201300:	3080cd36 	bltu	r6,r2,11201638 <_malloc_r+0x794>
11201304:	00844834 	movhi	r2,4384
11201308:	109c9c04 	addi	r2,r2,29296
1120130c:	11000017 	ldw	r4,0(r2)
11201310:	20c0012e 	bgeu	r4,r3,11201318 <_malloc_r+0x474>
11201314:	10c00015 	stw	r3,0(r2)
11201318:	00844834 	movhi	r2,4384
1120131c:	109c9b04 	addi	r2,r2,29292
11201320:	11000017 	ldw	r4,0(r2)
11201324:	9c000217 	ldw	r16,8(r19)
11201328:	20c0012e 	bgeu	r4,r3,11201330 <_malloc_r+0x48c>
1120132c:	10c00015 	stw	r3,0(r2)
11201330:	80c00117 	ldw	r3,4(r16)
11201334:	00bfff04 	movi	r2,-4
11201338:	1886703a 	and	r3,r3,r2
1120133c:	1c45c83a 	sub	r2,r3,r17
11201340:	1c400236 	bltu	r3,r17,1120134c <_malloc_r+0x4a8>
11201344:	00c003c4 	movi	r3,15
11201348:	18800416 	blt	r3,r2,1120135c <_malloc_r+0x4b8>
1120134c:	9009883a 	mov	r4,r18
11201350:	12035d00 	call	112035d0 <__malloc_unlock>
11201354:	0005883a 	mov	r2,zero
11201358:	003f7b06 	br	11201148 <__alt_data_end+0xffe81148>
1120135c:	88c00054 	ori	r3,r17,1
11201360:	80c00115 	stw	r3,4(r16)
11201364:	8463883a 	add	r17,r16,r17
11201368:	10800054 	ori	r2,r2,1
1120136c:	9c400215 	stw	r17,8(r19)
11201370:	88800115 	stw	r2,4(r17)
11201374:	9009883a 	mov	r4,r18
11201378:	12035d00 	call	112035d0 <__malloc_unlock>
1120137c:	80800204 	addi	r2,r16,8
11201380:	003f7106 	br	11201148 <__alt_data_end+0xffe81148>
11201384:	00c00504 	movi	r3,20
11201388:	18804a2e 	bgeu	r3,r2,112014b4 <_malloc_r+0x610>
1120138c:	00c01504 	movi	r3,84
11201390:	18806e36 	bltu	r3,r2,1120154c <_malloc_r+0x6a8>
11201394:	8804d33a 	srli	r2,r17,12
11201398:	12001bc4 	addi	r8,r2,111
1120139c:	11c01b84 	addi	r7,r2,110
112013a0:	4209883a 	add	r4,r8,r8
112013a4:	003edd06 	br	11200f1c <__alt_data_end+0xffe80f1c>
112013a8:	3804d27a 	srli	r2,r7,9
112013ac:	00c00104 	movi	r3,4
112013b0:	1880442e 	bgeu	r3,r2,112014c4 <_malloc_r+0x620>
112013b4:	00c00504 	movi	r3,20
112013b8:	18808136 	bltu	r3,r2,112015c0 <_malloc_r+0x71c>
112013bc:	11401704 	addi	r5,r2,92
112013c0:	10c016c4 	addi	r3,r2,91
112013c4:	294b883a 	add	r5,r5,r5
112013c8:	294b883a 	add	r5,r5,r5
112013cc:	294b883a 	add	r5,r5,r5
112013d0:	994b883a 	add	r5,r19,r5
112013d4:	28800017 	ldw	r2,0(r5)
112013d8:	01844834 	movhi	r6,4384
112013dc:	297ffe04 	addi	r5,r5,-8
112013e0:	31970904 	addi	r6,r6,23588
112013e4:	28806526 	beq	r5,r2,1120157c <_malloc_r+0x6d8>
112013e8:	01bfff04 	movi	r6,-4
112013ec:	10c00117 	ldw	r3,4(r2)
112013f0:	1986703a 	and	r3,r3,r6
112013f4:	38c0022e 	bgeu	r7,r3,11201400 <_malloc_r+0x55c>
112013f8:	10800217 	ldw	r2,8(r2)
112013fc:	28bffb1e 	bne	r5,r2,112013ec <__alt_data_end+0xffe813ec>
11201400:	11400317 	ldw	r5,12(r2)
11201404:	98c00117 	ldw	r3,4(r19)
11201408:	81400315 	stw	r5,12(r16)
1120140c:	80800215 	stw	r2,8(r16)
11201410:	2c000215 	stw	r16,8(r5)
11201414:	14000315 	stw	r16,12(r2)
11201418:	003ef806 	br	11200ffc <__alt_data_end+0xffe80ffc>
1120141c:	88c00054 	ori	r3,r17,1
11201420:	80c00115 	stw	r3,4(r16)
11201424:	8463883a 	add	r17,r16,r17
11201428:	34400515 	stw	r17,20(r6)
1120142c:	34400415 	stw	r17,16(r6)
11201430:	10c00054 	ori	r3,r2,1
11201434:	8a000315 	stw	r8,12(r17)
11201438:	8a000215 	stw	r8,8(r17)
1120143c:	88c00115 	stw	r3,4(r17)
11201440:	88a3883a 	add	r17,r17,r2
11201444:	88800015 	stw	r2,0(r17)
11201448:	9009883a 	mov	r4,r18
1120144c:	12035d00 	call	112035d0 <__malloc_unlock>
11201450:	80800204 	addi	r2,r16,8
11201454:	003f3c06 	br	11201148 <__alt_data_end+0xffe81148>
11201458:	30c00117 	ldw	r3,4(r6)
1120145c:	003ee706 	br	11200ffc <__alt_data_end+0xffe80ffc>
11201460:	5ac00044 	addi	r11,r11,1
11201464:	588000cc 	andi	r2,r11,3
11201468:	31800204 	addi	r6,r6,8
1120146c:	103efd1e 	bne	r2,zero,11201064 <__alt_data_end+0xffe81064>
11201470:	00002406 	br	11201504 <_malloc_r+0x660>
11201474:	14000317 	ldw	r16,12(r2)
11201478:	143f251e 	bne	r2,r16,11201110 <__alt_data_end+0xffe81110>
1120147c:	21000084 	addi	r4,r4,2
11201480:	003ebc06 	br	11200f74 <__alt_data_end+0xffe80f74>
11201484:	8085883a 	add	r2,r16,r2
11201488:	10c00117 	ldw	r3,4(r2)
1120148c:	81000317 	ldw	r4,12(r16)
11201490:	81400217 	ldw	r5,8(r16)
11201494:	18c00054 	ori	r3,r3,1
11201498:	10c00115 	stw	r3,4(r2)
1120149c:	29000315 	stw	r4,12(r5)
112014a0:	21400215 	stw	r5,8(r4)
112014a4:	9009883a 	mov	r4,r18
112014a8:	12035d00 	call	112035d0 <__malloc_unlock>
112014ac:	80800204 	addi	r2,r16,8
112014b0:	003f2506 	br	11201148 <__alt_data_end+0xffe81148>
112014b4:	12001704 	addi	r8,r2,92
112014b8:	11c016c4 	addi	r7,r2,91
112014bc:	4209883a 	add	r4,r8,r8
112014c0:	003e9606 	br	11200f1c <__alt_data_end+0xffe80f1c>
112014c4:	3804d1ba 	srli	r2,r7,6
112014c8:	11400e44 	addi	r5,r2,57
112014cc:	10c00e04 	addi	r3,r2,56
112014d0:	294b883a 	add	r5,r5,r5
112014d4:	003fbc06 	br	112013c8 <__alt_data_end+0xffe813c8>
112014d8:	84ff5926 	beq	r16,r19,11201240 <__alt_data_end+0xffe81240>
112014dc:	00844834 	movhi	r2,4384
112014e0:	10970904 	addi	r2,r2,23588
112014e4:	14000217 	ldw	r16,8(r2)
112014e8:	00bfff04 	movi	r2,-4
112014ec:	80c00117 	ldw	r3,4(r16)
112014f0:	1886703a 	and	r3,r3,r2
112014f4:	003f9106 	br	1120133c <__alt_data_end+0xffe8133c>
112014f8:	60800217 	ldw	r2,8(r12)
112014fc:	213fffc4 	addi	r4,r4,-1
11201500:	1300651e 	bne	r2,r12,11201698 <_malloc_r+0x7f4>
11201504:	208000cc 	andi	r2,r4,3
11201508:	633ffe04 	addi	r12,r12,-8
1120150c:	103ffa1e 	bne	r2,zero,112014f8 <__alt_data_end+0xffe814f8>
11201510:	98800117 	ldw	r2,4(r19)
11201514:	0146303a 	nor	r3,zero,r5
11201518:	1884703a 	and	r2,r3,r2
1120151c:	98800115 	stw	r2,4(r19)
11201520:	294b883a 	add	r5,r5,r5
11201524:	117f2836 	bltu	r2,r5,112011c8 <__alt_data_end+0xffe811c8>
11201528:	283f2726 	beq	r5,zero,112011c8 <__alt_data_end+0xffe811c8>
1120152c:	2886703a 	and	r3,r5,r2
11201530:	5809883a 	mov	r4,r11
11201534:	183ec31e 	bne	r3,zero,11201044 <__alt_data_end+0xffe81044>
11201538:	294b883a 	add	r5,r5,r5
1120153c:	2886703a 	and	r3,r5,r2
11201540:	21000104 	addi	r4,r4,4
11201544:	183ffc26 	beq	r3,zero,11201538 <__alt_data_end+0xffe81538>
11201548:	003ebe06 	br	11201044 <__alt_data_end+0xffe81044>
1120154c:	00c05504 	movi	r3,340
11201550:	18801236 	bltu	r3,r2,1120159c <_malloc_r+0x6f8>
11201554:	8804d3fa 	srli	r2,r17,15
11201558:	12001e04 	addi	r8,r2,120
1120155c:	11c01dc4 	addi	r7,r2,119
11201560:	4209883a 	add	r4,r8,r8
11201564:	003e6d06 	br	11200f1c <__alt_data_end+0xffe80f1c>
11201568:	00c40004 	movi	r3,4096
1120156c:	003f4606 	br	11201288 <__alt_data_end+0xffe81288>
11201570:	00800044 	movi	r2,1
11201574:	a0800115 	stw	r2,4(r20)
11201578:	003f7406 	br	1120134c <__alt_data_end+0xffe8134c>
1120157c:	1805d0ba 	srai	r2,r3,2
11201580:	01c00044 	movi	r7,1
11201584:	30c00117 	ldw	r3,4(r6)
11201588:	388e983a 	sll	r7,r7,r2
1120158c:	2805883a 	mov	r2,r5
11201590:	38c6b03a 	or	r3,r7,r3
11201594:	30c00115 	stw	r3,4(r6)
11201598:	003f9b06 	br	11201408 <__alt_data_end+0xffe81408>
1120159c:	00c15504 	movi	r3,1364
112015a0:	18801a36 	bltu	r3,r2,1120160c <_malloc_r+0x768>
112015a4:	8804d4ba 	srli	r2,r17,18
112015a8:	12001f44 	addi	r8,r2,125
112015ac:	11c01f04 	addi	r7,r2,124
112015b0:	4209883a 	add	r4,r8,r8
112015b4:	003e5906 	br	11200f1c <__alt_data_end+0xffe80f1c>
112015b8:	ad400404 	addi	r21,r21,16
112015bc:	003f1706 	br	1120121c <__alt_data_end+0xffe8121c>
112015c0:	00c01504 	movi	r3,84
112015c4:	18802336 	bltu	r3,r2,11201654 <_malloc_r+0x7b0>
112015c8:	3804d33a 	srli	r2,r7,12
112015cc:	11401bc4 	addi	r5,r2,111
112015d0:	10c01b84 	addi	r3,r2,110
112015d4:	294b883a 	add	r5,r5,r5
112015d8:	003f7b06 	br	112013c8 <__alt_data_end+0xffe813c8>
112015dc:	9c000217 	ldw	r16,8(r19)
112015e0:	00bfff04 	movi	r2,-4
112015e4:	80c00117 	ldw	r3,4(r16)
112015e8:	1886703a 	and	r3,r3,r2
112015ec:	003f5306 	br	1120133c <__alt_data_end+0xffe8133c>
112015f0:	3083ffcc 	andi	r2,r6,4095
112015f4:	103f181e 	bne	r2,zero,11201258 <__alt_data_end+0xffe81258>
112015f8:	99000217 	ldw	r4,8(r19)
112015fc:	b545883a 	add	r2,r22,r21
11201600:	10800054 	ori	r2,r2,1
11201604:	20800115 	stw	r2,4(r4)
11201608:	003f3e06 	br	11201304 <__alt_data_end+0xffe81304>
1120160c:	01003f84 	movi	r4,254
11201610:	02001fc4 	movi	r8,127
11201614:	01c01f84 	movi	r7,126
11201618:	003e4006 	br	11200f1c <__alt_data_end+0xffe80f1c>
1120161c:	00844834 	movhi	r2,4384
11201620:	109c8f04 	addi	r2,r2,29244
11201624:	15000015 	stw	r20,0(r2)
11201628:	003f1106 	br	11201270 <__alt_data_end+0xffe81270>
1120162c:	00800044 	movi	r2,1
11201630:	002b883a 	mov	r21,zero
11201634:	003f1f06 	br	112012b4 <__alt_data_end+0xffe812b4>
11201638:	81400204 	addi	r5,r16,8
1120163c:	9009883a 	mov	r4,r18
11201640:	120292c0 	call	1120292c <_free_r>
11201644:	00844834 	movhi	r2,4384
11201648:	109ca504 	addi	r2,r2,29332
1120164c:	10c00017 	ldw	r3,0(r2)
11201650:	003f2c06 	br	11201304 <__alt_data_end+0xffe81304>
11201654:	00c05504 	movi	r3,340
11201658:	18800536 	bltu	r3,r2,11201670 <_malloc_r+0x7cc>
1120165c:	3804d3fa 	srli	r2,r7,15
11201660:	11401e04 	addi	r5,r2,120
11201664:	10c01dc4 	addi	r3,r2,119
11201668:	294b883a 	add	r5,r5,r5
1120166c:	003f5606 	br	112013c8 <__alt_data_end+0xffe813c8>
11201670:	00c15504 	movi	r3,1364
11201674:	18800536 	bltu	r3,r2,1120168c <_malloc_r+0x7e8>
11201678:	3804d4ba 	srli	r2,r7,18
1120167c:	11401f44 	addi	r5,r2,125
11201680:	10c01f04 	addi	r3,r2,124
11201684:	294b883a 	add	r5,r5,r5
11201688:	003f4f06 	br	112013c8 <__alt_data_end+0xffe813c8>
1120168c:	01403f84 	movi	r5,254
11201690:	00c01f84 	movi	r3,126
11201694:	003f4c06 	br	112013c8 <__alt_data_end+0xffe813c8>
11201698:	98800117 	ldw	r2,4(r19)
1120169c:	003fa006 	br	11201520 <__alt_data_end+0xffe81520>
112016a0:	8808d0fa 	srli	r4,r17,3
112016a4:	20800044 	addi	r2,r4,1
112016a8:	1085883a 	add	r2,r2,r2
112016ac:	003e9006 	br	112010f0 <__alt_data_end+0xffe810f0>

112016b0 <memchr>:
112016b0:	208000cc 	andi	r2,r4,3
112016b4:	280f883a 	mov	r7,r5
112016b8:	10003426 	beq	r2,zero,1120178c <memchr+0xdc>
112016bc:	30bfffc4 	addi	r2,r6,-1
112016c0:	30001a26 	beq	r6,zero,1120172c <memchr+0x7c>
112016c4:	20c00003 	ldbu	r3,0(r4)
112016c8:	29803fcc 	andi	r6,r5,255
112016cc:	30c0051e 	bne	r6,r3,112016e4 <memchr+0x34>
112016d0:	00001806 	br	11201734 <memchr+0x84>
112016d4:	10001526 	beq	r2,zero,1120172c <memchr+0x7c>
112016d8:	20c00003 	ldbu	r3,0(r4)
112016dc:	10bfffc4 	addi	r2,r2,-1
112016e0:	30c01426 	beq	r6,r3,11201734 <memchr+0x84>
112016e4:	21000044 	addi	r4,r4,1
112016e8:	20c000cc 	andi	r3,r4,3
112016ec:	183ff91e 	bne	r3,zero,112016d4 <__alt_data_end+0xffe816d4>
112016f0:	020000c4 	movi	r8,3
112016f4:	40801136 	bltu	r8,r2,1120173c <memchr+0x8c>
112016f8:	10000c26 	beq	r2,zero,1120172c <memchr+0x7c>
112016fc:	20c00003 	ldbu	r3,0(r4)
11201700:	29403fcc 	andi	r5,r5,255
11201704:	28c00b26 	beq	r5,r3,11201734 <memchr+0x84>
11201708:	20c00044 	addi	r3,r4,1
1120170c:	39803fcc 	andi	r6,r7,255
11201710:	2089883a 	add	r4,r4,r2
11201714:	00000306 	br	11201724 <memchr+0x74>
11201718:	18c00044 	addi	r3,r3,1
1120171c:	197fffc3 	ldbu	r5,-1(r3)
11201720:	31400526 	beq	r6,r5,11201738 <memchr+0x88>
11201724:	1805883a 	mov	r2,r3
11201728:	20fffb1e 	bne	r4,r3,11201718 <__alt_data_end+0xffe81718>
1120172c:	0005883a 	mov	r2,zero
11201730:	f800283a 	ret
11201734:	2005883a 	mov	r2,r4
11201738:	f800283a 	ret
1120173c:	28c03fcc 	andi	r3,r5,255
11201740:	1812923a 	slli	r9,r3,8
11201744:	02ffbff4 	movhi	r11,65279
11201748:	02a02074 	movhi	r10,32897
1120174c:	48d2b03a 	or	r9,r9,r3
11201750:	4806943a 	slli	r3,r9,16
11201754:	5affbfc4 	addi	r11,r11,-257
11201758:	52a02004 	addi	r10,r10,-32640
1120175c:	48d2b03a 	or	r9,r9,r3
11201760:	20c00017 	ldw	r3,0(r4)
11201764:	48c6f03a 	xor	r3,r9,r3
11201768:	1acd883a 	add	r6,r3,r11
1120176c:	00c6303a 	nor	r3,zero,r3
11201770:	30c6703a 	and	r3,r6,r3
11201774:	1a86703a 	and	r3,r3,r10
11201778:	183fe01e 	bne	r3,zero,112016fc <__alt_data_end+0xffe816fc>
1120177c:	10bfff04 	addi	r2,r2,-4
11201780:	21000104 	addi	r4,r4,4
11201784:	40bff636 	bltu	r8,r2,11201760 <__alt_data_end+0xffe81760>
11201788:	003fdb06 	br	112016f8 <__alt_data_end+0xffe816f8>
1120178c:	3005883a 	mov	r2,r6
11201790:	003fd706 	br	112016f0 <__alt_data_end+0xffe816f0>

11201794 <memcpy>:
11201794:	defffd04 	addi	sp,sp,-12
11201798:	dfc00215 	stw	ra,8(sp)
1120179c:	dc400115 	stw	r17,4(sp)
112017a0:	dc000015 	stw	r16,0(sp)
112017a4:	00c003c4 	movi	r3,15
112017a8:	2005883a 	mov	r2,r4
112017ac:	1980452e 	bgeu	r3,r6,112018c4 <memcpy+0x130>
112017b0:	2906b03a 	or	r3,r5,r4
112017b4:	18c000cc 	andi	r3,r3,3
112017b8:	1800441e 	bne	r3,zero,112018cc <memcpy+0x138>
112017bc:	347ffc04 	addi	r17,r6,-16
112017c0:	8822d13a 	srli	r17,r17,4
112017c4:	28c00104 	addi	r3,r5,4
112017c8:	23400104 	addi	r13,r4,4
112017cc:	8820913a 	slli	r16,r17,4
112017d0:	2b000204 	addi	r12,r5,8
112017d4:	22c00204 	addi	r11,r4,8
112017d8:	84000504 	addi	r16,r16,20
112017dc:	2a800304 	addi	r10,r5,12
112017e0:	22400304 	addi	r9,r4,12
112017e4:	2c21883a 	add	r16,r5,r16
112017e8:	2811883a 	mov	r8,r5
112017ec:	200f883a 	mov	r7,r4
112017f0:	41000017 	ldw	r4,0(r8)
112017f4:	1fc00017 	ldw	ra,0(r3)
112017f8:	63c00017 	ldw	r15,0(r12)
112017fc:	39000015 	stw	r4,0(r7)
11201800:	53800017 	ldw	r14,0(r10)
11201804:	6fc00015 	stw	ra,0(r13)
11201808:	5bc00015 	stw	r15,0(r11)
1120180c:	4b800015 	stw	r14,0(r9)
11201810:	18c00404 	addi	r3,r3,16
11201814:	39c00404 	addi	r7,r7,16
11201818:	42000404 	addi	r8,r8,16
1120181c:	6b400404 	addi	r13,r13,16
11201820:	63000404 	addi	r12,r12,16
11201824:	5ac00404 	addi	r11,r11,16
11201828:	52800404 	addi	r10,r10,16
1120182c:	4a400404 	addi	r9,r9,16
11201830:	1c3fef1e 	bne	r3,r16,112017f0 <__alt_data_end+0xffe817f0>
11201834:	89c00044 	addi	r7,r17,1
11201838:	380e913a 	slli	r7,r7,4
1120183c:	310003cc 	andi	r4,r6,15
11201840:	02c000c4 	movi	r11,3
11201844:	11c7883a 	add	r3,r2,r7
11201848:	29cb883a 	add	r5,r5,r7
1120184c:	5900212e 	bgeu	r11,r4,112018d4 <memcpy+0x140>
11201850:	1813883a 	mov	r9,r3
11201854:	2811883a 	mov	r8,r5
11201858:	200f883a 	mov	r7,r4
1120185c:	42800017 	ldw	r10,0(r8)
11201860:	4a400104 	addi	r9,r9,4
11201864:	39ffff04 	addi	r7,r7,-4
11201868:	4abfff15 	stw	r10,-4(r9)
1120186c:	42000104 	addi	r8,r8,4
11201870:	59fffa36 	bltu	r11,r7,1120185c <__alt_data_end+0xffe8185c>
11201874:	213fff04 	addi	r4,r4,-4
11201878:	2008d0ba 	srli	r4,r4,2
1120187c:	318000cc 	andi	r6,r6,3
11201880:	21000044 	addi	r4,r4,1
11201884:	2109883a 	add	r4,r4,r4
11201888:	2109883a 	add	r4,r4,r4
1120188c:	1907883a 	add	r3,r3,r4
11201890:	290b883a 	add	r5,r5,r4
11201894:	30000626 	beq	r6,zero,112018b0 <memcpy+0x11c>
11201898:	198d883a 	add	r6,r3,r6
1120189c:	29c00003 	ldbu	r7,0(r5)
112018a0:	18c00044 	addi	r3,r3,1
112018a4:	29400044 	addi	r5,r5,1
112018a8:	19ffffc5 	stb	r7,-1(r3)
112018ac:	19bffb1e 	bne	r3,r6,1120189c <__alt_data_end+0xffe8189c>
112018b0:	dfc00217 	ldw	ra,8(sp)
112018b4:	dc400117 	ldw	r17,4(sp)
112018b8:	dc000017 	ldw	r16,0(sp)
112018bc:	dec00304 	addi	sp,sp,12
112018c0:	f800283a 	ret
112018c4:	2007883a 	mov	r3,r4
112018c8:	003ff206 	br	11201894 <__alt_data_end+0xffe81894>
112018cc:	2007883a 	mov	r3,r4
112018d0:	003ff106 	br	11201898 <__alt_data_end+0xffe81898>
112018d4:	200d883a 	mov	r6,r4
112018d8:	003fee06 	br	11201894 <__alt_data_end+0xffe81894>

112018dc <memmove>:
112018dc:	2005883a 	mov	r2,r4
112018e0:	29000b2e 	bgeu	r5,r4,11201910 <memmove+0x34>
112018e4:	298f883a 	add	r7,r5,r6
112018e8:	21c0092e 	bgeu	r4,r7,11201910 <memmove+0x34>
112018ec:	2187883a 	add	r3,r4,r6
112018f0:	198bc83a 	sub	r5,r3,r6
112018f4:	30004826 	beq	r6,zero,11201a18 <memmove+0x13c>
112018f8:	39ffffc4 	addi	r7,r7,-1
112018fc:	39000003 	ldbu	r4,0(r7)
11201900:	18ffffc4 	addi	r3,r3,-1
11201904:	19000005 	stb	r4,0(r3)
11201908:	28fffb1e 	bne	r5,r3,112018f8 <__alt_data_end+0xffe818f8>
1120190c:	f800283a 	ret
11201910:	00c003c4 	movi	r3,15
11201914:	1980412e 	bgeu	r3,r6,11201a1c <memmove+0x140>
11201918:	2886b03a 	or	r3,r5,r2
1120191c:	18c000cc 	andi	r3,r3,3
11201920:	1800401e 	bne	r3,zero,11201a24 <memmove+0x148>
11201924:	33fffc04 	addi	r15,r6,-16
11201928:	781ed13a 	srli	r15,r15,4
1120192c:	28c00104 	addi	r3,r5,4
11201930:	13400104 	addi	r13,r2,4
11201934:	781c913a 	slli	r14,r15,4
11201938:	2b000204 	addi	r12,r5,8
1120193c:	12c00204 	addi	r11,r2,8
11201940:	73800504 	addi	r14,r14,20
11201944:	2a800304 	addi	r10,r5,12
11201948:	12400304 	addi	r9,r2,12
1120194c:	2b9d883a 	add	r14,r5,r14
11201950:	2811883a 	mov	r8,r5
11201954:	100f883a 	mov	r7,r2
11201958:	41000017 	ldw	r4,0(r8)
1120195c:	39c00404 	addi	r7,r7,16
11201960:	18c00404 	addi	r3,r3,16
11201964:	393ffc15 	stw	r4,-16(r7)
11201968:	193ffc17 	ldw	r4,-16(r3)
1120196c:	6b400404 	addi	r13,r13,16
11201970:	5ac00404 	addi	r11,r11,16
11201974:	693ffc15 	stw	r4,-16(r13)
11201978:	61000017 	ldw	r4,0(r12)
1120197c:	4a400404 	addi	r9,r9,16
11201980:	42000404 	addi	r8,r8,16
11201984:	593ffc15 	stw	r4,-16(r11)
11201988:	51000017 	ldw	r4,0(r10)
1120198c:	63000404 	addi	r12,r12,16
11201990:	52800404 	addi	r10,r10,16
11201994:	493ffc15 	stw	r4,-16(r9)
11201998:	1bbfef1e 	bne	r3,r14,11201958 <__alt_data_end+0xffe81958>
1120199c:	79000044 	addi	r4,r15,1
112019a0:	2008913a 	slli	r4,r4,4
112019a4:	328003cc 	andi	r10,r6,15
112019a8:	02c000c4 	movi	r11,3
112019ac:	1107883a 	add	r3,r2,r4
112019b0:	290b883a 	add	r5,r5,r4
112019b4:	5a801e2e 	bgeu	r11,r10,11201a30 <memmove+0x154>
112019b8:	1813883a 	mov	r9,r3
112019bc:	2811883a 	mov	r8,r5
112019c0:	500f883a 	mov	r7,r10
112019c4:	41000017 	ldw	r4,0(r8)
112019c8:	4a400104 	addi	r9,r9,4
112019cc:	39ffff04 	addi	r7,r7,-4
112019d0:	493fff15 	stw	r4,-4(r9)
112019d4:	42000104 	addi	r8,r8,4
112019d8:	59fffa36 	bltu	r11,r7,112019c4 <__alt_data_end+0xffe819c4>
112019dc:	513fff04 	addi	r4,r10,-4
112019e0:	2008d0ba 	srli	r4,r4,2
112019e4:	318000cc 	andi	r6,r6,3
112019e8:	21000044 	addi	r4,r4,1
112019ec:	2109883a 	add	r4,r4,r4
112019f0:	2109883a 	add	r4,r4,r4
112019f4:	1907883a 	add	r3,r3,r4
112019f8:	290b883a 	add	r5,r5,r4
112019fc:	30000b26 	beq	r6,zero,11201a2c <memmove+0x150>
11201a00:	198d883a 	add	r6,r3,r6
11201a04:	29c00003 	ldbu	r7,0(r5)
11201a08:	18c00044 	addi	r3,r3,1
11201a0c:	29400044 	addi	r5,r5,1
11201a10:	19ffffc5 	stb	r7,-1(r3)
11201a14:	19bffb1e 	bne	r3,r6,11201a04 <__alt_data_end+0xffe81a04>
11201a18:	f800283a 	ret
11201a1c:	1007883a 	mov	r3,r2
11201a20:	003ff606 	br	112019fc <__alt_data_end+0xffe819fc>
11201a24:	1007883a 	mov	r3,r2
11201a28:	003ff506 	br	11201a00 <__alt_data_end+0xffe81a00>
11201a2c:	f800283a 	ret
11201a30:	500d883a 	mov	r6,r10
11201a34:	003ff106 	br	112019fc <__alt_data_end+0xffe819fc>

11201a38 <memset>:
11201a38:	20c000cc 	andi	r3,r4,3
11201a3c:	2005883a 	mov	r2,r4
11201a40:	18004426 	beq	r3,zero,11201b54 <memset+0x11c>
11201a44:	31ffffc4 	addi	r7,r6,-1
11201a48:	30004026 	beq	r6,zero,11201b4c <memset+0x114>
11201a4c:	2813883a 	mov	r9,r5
11201a50:	200d883a 	mov	r6,r4
11201a54:	2007883a 	mov	r3,r4
11201a58:	00000406 	br	11201a6c <memset+0x34>
11201a5c:	3a3fffc4 	addi	r8,r7,-1
11201a60:	31800044 	addi	r6,r6,1
11201a64:	38003926 	beq	r7,zero,11201b4c <memset+0x114>
11201a68:	400f883a 	mov	r7,r8
11201a6c:	18c00044 	addi	r3,r3,1
11201a70:	32400005 	stb	r9,0(r6)
11201a74:	1a0000cc 	andi	r8,r3,3
11201a78:	403ff81e 	bne	r8,zero,11201a5c <__alt_data_end+0xffe81a5c>
11201a7c:	010000c4 	movi	r4,3
11201a80:	21c02d2e 	bgeu	r4,r7,11201b38 <memset+0x100>
11201a84:	29003fcc 	andi	r4,r5,255
11201a88:	200c923a 	slli	r6,r4,8
11201a8c:	3108b03a 	or	r4,r6,r4
11201a90:	200c943a 	slli	r6,r4,16
11201a94:	218cb03a 	or	r6,r4,r6
11201a98:	010003c4 	movi	r4,15
11201a9c:	21c0182e 	bgeu	r4,r7,11201b00 <memset+0xc8>
11201aa0:	3b3ffc04 	addi	r12,r7,-16
11201aa4:	6018d13a 	srli	r12,r12,4
11201aa8:	1a000104 	addi	r8,r3,4
11201aac:	1ac00204 	addi	r11,r3,8
11201ab0:	6008913a 	slli	r4,r12,4
11201ab4:	1a800304 	addi	r10,r3,12
11201ab8:	1813883a 	mov	r9,r3
11201abc:	21000504 	addi	r4,r4,20
11201ac0:	1909883a 	add	r4,r3,r4
11201ac4:	49800015 	stw	r6,0(r9)
11201ac8:	41800015 	stw	r6,0(r8)
11201acc:	59800015 	stw	r6,0(r11)
11201ad0:	51800015 	stw	r6,0(r10)
11201ad4:	42000404 	addi	r8,r8,16
11201ad8:	4a400404 	addi	r9,r9,16
11201adc:	5ac00404 	addi	r11,r11,16
11201ae0:	52800404 	addi	r10,r10,16
11201ae4:	413ff71e 	bne	r8,r4,11201ac4 <__alt_data_end+0xffe81ac4>
11201ae8:	63000044 	addi	r12,r12,1
11201aec:	6018913a 	slli	r12,r12,4
11201af0:	39c003cc 	andi	r7,r7,15
11201af4:	010000c4 	movi	r4,3
11201af8:	1b07883a 	add	r3,r3,r12
11201afc:	21c00e2e 	bgeu	r4,r7,11201b38 <memset+0x100>
11201b00:	1813883a 	mov	r9,r3
11201b04:	3811883a 	mov	r8,r7
11201b08:	010000c4 	movi	r4,3
11201b0c:	49800015 	stw	r6,0(r9)
11201b10:	423fff04 	addi	r8,r8,-4
11201b14:	4a400104 	addi	r9,r9,4
11201b18:	223ffc36 	bltu	r4,r8,11201b0c <__alt_data_end+0xffe81b0c>
11201b1c:	393fff04 	addi	r4,r7,-4
11201b20:	2008d0ba 	srli	r4,r4,2
11201b24:	39c000cc 	andi	r7,r7,3
11201b28:	21000044 	addi	r4,r4,1
11201b2c:	2109883a 	add	r4,r4,r4
11201b30:	2109883a 	add	r4,r4,r4
11201b34:	1907883a 	add	r3,r3,r4
11201b38:	38000526 	beq	r7,zero,11201b50 <memset+0x118>
11201b3c:	19cf883a 	add	r7,r3,r7
11201b40:	19400005 	stb	r5,0(r3)
11201b44:	18c00044 	addi	r3,r3,1
11201b48:	38fffd1e 	bne	r7,r3,11201b40 <__alt_data_end+0xffe81b40>
11201b4c:	f800283a 	ret
11201b50:	f800283a 	ret
11201b54:	2007883a 	mov	r3,r4
11201b58:	300f883a 	mov	r7,r6
11201b5c:	003fc706 	br	11201a7c <__alt_data_end+0xffe81a7c>

11201b60 <_realloc_r>:
11201b60:	defff604 	addi	sp,sp,-40
11201b64:	dc800215 	stw	r18,8(sp)
11201b68:	dfc00915 	stw	ra,36(sp)
11201b6c:	df000815 	stw	fp,32(sp)
11201b70:	ddc00715 	stw	r23,28(sp)
11201b74:	dd800615 	stw	r22,24(sp)
11201b78:	dd400515 	stw	r21,20(sp)
11201b7c:	dd000415 	stw	r20,16(sp)
11201b80:	dcc00315 	stw	r19,12(sp)
11201b84:	dc400115 	stw	r17,4(sp)
11201b88:	dc000015 	stw	r16,0(sp)
11201b8c:	3025883a 	mov	r18,r6
11201b90:	2800b726 	beq	r5,zero,11201e70 <_realloc_r+0x310>
11201b94:	282b883a 	mov	r21,r5
11201b98:	2029883a 	mov	r20,r4
11201b9c:	12035ac0 	call	112035ac <__malloc_lock>
11201ba0:	a8bfff17 	ldw	r2,-4(r21)
11201ba4:	043fff04 	movi	r16,-4
11201ba8:	90c002c4 	addi	r3,r18,11
11201bac:	01000584 	movi	r4,22
11201bb0:	acfffe04 	addi	r19,r21,-8
11201bb4:	1420703a 	and	r16,r2,r16
11201bb8:	20c0332e 	bgeu	r4,r3,11201c88 <_realloc_r+0x128>
11201bbc:	047ffe04 	movi	r17,-8
11201bc0:	1c62703a 	and	r17,r3,r17
11201bc4:	8807883a 	mov	r3,r17
11201bc8:	88005816 	blt	r17,zero,11201d2c <_realloc_r+0x1cc>
11201bcc:	8c805736 	bltu	r17,r18,11201d2c <_realloc_r+0x1cc>
11201bd0:	80c0300e 	bge	r16,r3,11201c94 <_realloc_r+0x134>
11201bd4:	07044834 	movhi	fp,4384
11201bd8:	e7170904 	addi	fp,fp,23588
11201bdc:	e1c00217 	ldw	r7,8(fp)
11201be0:	9c09883a 	add	r4,r19,r16
11201be4:	22000117 	ldw	r8,4(r4)
11201be8:	21c06326 	beq	r4,r7,11201d78 <_realloc_r+0x218>
11201bec:	017fff84 	movi	r5,-2
11201bf0:	414a703a 	and	r5,r8,r5
11201bf4:	214b883a 	add	r5,r4,r5
11201bf8:	29800117 	ldw	r6,4(r5)
11201bfc:	3180004c 	andi	r6,r6,1
11201c00:	30003f26 	beq	r6,zero,11201d00 <_realloc_r+0x1a0>
11201c04:	1080004c 	andi	r2,r2,1
11201c08:	10008326 	beq	r2,zero,11201e18 <_realloc_r+0x2b8>
11201c0c:	900b883a 	mov	r5,r18
11201c10:	a009883a 	mov	r4,r20
11201c14:	1200ea40 	call	11200ea4 <_malloc_r>
11201c18:	1025883a 	mov	r18,r2
11201c1c:	10011e26 	beq	r2,zero,11202098 <_realloc_r+0x538>
11201c20:	a93fff17 	ldw	r4,-4(r21)
11201c24:	10fffe04 	addi	r3,r2,-8
11201c28:	00bfff84 	movi	r2,-2
11201c2c:	2084703a 	and	r2,r4,r2
11201c30:	9885883a 	add	r2,r19,r2
11201c34:	1880ee26 	beq	r3,r2,11201ff0 <_realloc_r+0x490>
11201c38:	81bfff04 	addi	r6,r16,-4
11201c3c:	00800904 	movi	r2,36
11201c40:	1180b836 	bltu	r2,r6,11201f24 <_realloc_r+0x3c4>
11201c44:	00c004c4 	movi	r3,19
11201c48:	19809636 	bltu	r3,r6,11201ea4 <_realloc_r+0x344>
11201c4c:	9005883a 	mov	r2,r18
11201c50:	a807883a 	mov	r3,r21
11201c54:	19000017 	ldw	r4,0(r3)
11201c58:	11000015 	stw	r4,0(r2)
11201c5c:	19000117 	ldw	r4,4(r3)
11201c60:	11000115 	stw	r4,4(r2)
11201c64:	18c00217 	ldw	r3,8(r3)
11201c68:	10c00215 	stw	r3,8(r2)
11201c6c:	a80b883a 	mov	r5,r21
11201c70:	a009883a 	mov	r4,r20
11201c74:	120292c0 	call	1120292c <_free_r>
11201c78:	a009883a 	mov	r4,r20
11201c7c:	12035d00 	call	112035d0 <__malloc_unlock>
11201c80:	9005883a 	mov	r2,r18
11201c84:	00001206 	br	11201cd0 <_realloc_r+0x170>
11201c88:	00c00404 	movi	r3,16
11201c8c:	1823883a 	mov	r17,r3
11201c90:	003fce06 	br	11201bcc <__alt_data_end+0xffe81bcc>
11201c94:	a825883a 	mov	r18,r21
11201c98:	8445c83a 	sub	r2,r16,r17
11201c9c:	00c003c4 	movi	r3,15
11201ca0:	18802636 	bltu	r3,r2,11201d3c <_realloc_r+0x1dc>
11201ca4:	99800117 	ldw	r6,4(r19)
11201ca8:	9c07883a 	add	r3,r19,r16
11201cac:	3180004c 	andi	r6,r6,1
11201cb0:	3420b03a 	or	r16,r6,r16
11201cb4:	9c000115 	stw	r16,4(r19)
11201cb8:	18800117 	ldw	r2,4(r3)
11201cbc:	10800054 	ori	r2,r2,1
11201cc0:	18800115 	stw	r2,4(r3)
11201cc4:	a009883a 	mov	r4,r20
11201cc8:	12035d00 	call	112035d0 <__malloc_unlock>
11201ccc:	9005883a 	mov	r2,r18
11201cd0:	dfc00917 	ldw	ra,36(sp)
11201cd4:	df000817 	ldw	fp,32(sp)
11201cd8:	ddc00717 	ldw	r23,28(sp)
11201cdc:	dd800617 	ldw	r22,24(sp)
11201ce0:	dd400517 	ldw	r21,20(sp)
11201ce4:	dd000417 	ldw	r20,16(sp)
11201ce8:	dcc00317 	ldw	r19,12(sp)
11201cec:	dc800217 	ldw	r18,8(sp)
11201cf0:	dc400117 	ldw	r17,4(sp)
11201cf4:	dc000017 	ldw	r16,0(sp)
11201cf8:	dec00a04 	addi	sp,sp,40
11201cfc:	f800283a 	ret
11201d00:	017fff04 	movi	r5,-4
11201d04:	414a703a 	and	r5,r8,r5
11201d08:	814d883a 	add	r6,r16,r5
11201d0c:	30c01f16 	blt	r6,r3,11201d8c <_realloc_r+0x22c>
11201d10:	20800317 	ldw	r2,12(r4)
11201d14:	20c00217 	ldw	r3,8(r4)
11201d18:	a825883a 	mov	r18,r21
11201d1c:	3021883a 	mov	r16,r6
11201d20:	18800315 	stw	r2,12(r3)
11201d24:	10c00215 	stw	r3,8(r2)
11201d28:	003fdb06 	br	11201c98 <__alt_data_end+0xffe81c98>
11201d2c:	00800304 	movi	r2,12
11201d30:	a0800015 	stw	r2,0(r20)
11201d34:	0005883a 	mov	r2,zero
11201d38:	003fe506 	br	11201cd0 <__alt_data_end+0xffe81cd0>
11201d3c:	98c00117 	ldw	r3,4(r19)
11201d40:	9c4b883a 	add	r5,r19,r17
11201d44:	11000054 	ori	r4,r2,1
11201d48:	18c0004c 	andi	r3,r3,1
11201d4c:	1c62b03a 	or	r17,r3,r17
11201d50:	9c400115 	stw	r17,4(r19)
11201d54:	29000115 	stw	r4,4(r5)
11201d58:	2885883a 	add	r2,r5,r2
11201d5c:	10c00117 	ldw	r3,4(r2)
11201d60:	29400204 	addi	r5,r5,8
11201d64:	a009883a 	mov	r4,r20
11201d68:	18c00054 	ori	r3,r3,1
11201d6c:	10c00115 	stw	r3,4(r2)
11201d70:	120292c0 	call	1120292c <_free_r>
11201d74:	003fd306 	br	11201cc4 <__alt_data_end+0xffe81cc4>
11201d78:	017fff04 	movi	r5,-4
11201d7c:	414a703a 	and	r5,r8,r5
11201d80:	89800404 	addi	r6,r17,16
11201d84:	8151883a 	add	r8,r16,r5
11201d88:	4180590e 	bge	r8,r6,11201ef0 <_realloc_r+0x390>
11201d8c:	1080004c 	andi	r2,r2,1
11201d90:	103f9e1e 	bne	r2,zero,11201c0c <__alt_data_end+0xffe81c0c>
11201d94:	adbffe17 	ldw	r22,-8(r21)
11201d98:	00bfff04 	movi	r2,-4
11201d9c:	9dadc83a 	sub	r22,r19,r22
11201da0:	b1800117 	ldw	r6,4(r22)
11201da4:	3084703a 	and	r2,r6,r2
11201da8:	20002026 	beq	r4,zero,11201e2c <_realloc_r+0x2cc>
11201dac:	80af883a 	add	r23,r16,r2
11201db0:	b96f883a 	add	r23,r23,r5
11201db4:	21c05f26 	beq	r4,r7,11201f34 <_realloc_r+0x3d4>
11201db8:	b8c01c16 	blt	r23,r3,11201e2c <_realloc_r+0x2cc>
11201dbc:	20800317 	ldw	r2,12(r4)
11201dc0:	20c00217 	ldw	r3,8(r4)
11201dc4:	81bfff04 	addi	r6,r16,-4
11201dc8:	01000904 	movi	r4,36
11201dcc:	18800315 	stw	r2,12(r3)
11201dd0:	10c00215 	stw	r3,8(r2)
11201dd4:	b0c00217 	ldw	r3,8(r22)
11201dd8:	b0800317 	ldw	r2,12(r22)
11201ddc:	b4800204 	addi	r18,r22,8
11201de0:	18800315 	stw	r2,12(r3)
11201de4:	10c00215 	stw	r3,8(r2)
11201de8:	21801b36 	bltu	r4,r6,11201e58 <_realloc_r+0x2f8>
11201dec:	008004c4 	movi	r2,19
11201df0:	1180352e 	bgeu	r2,r6,11201ec8 <_realloc_r+0x368>
11201df4:	a8800017 	ldw	r2,0(r21)
11201df8:	b0800215 	stw	r2,8(r22)
11201dfc:	a8800117 	ldw	r2,4(r21)
11201e00:	b0800315 	stw	r2,12(r22)
11201e04:	008006c4 	movi	r2,27
11201e08:	11807f36 	bltu	r2,r6,11202008 <_realloc_r+0x4a8>
11201e0c:	b0800404 	addi	r2,r22,16
11201e10:	ad400204 	addi	r21,r21,8
11201e14:	00002d06 	br	11201ecc <_realloc_r+0x36c>
11201e18:	adbffe17 	ldw	r22,-8(r21)
11201e1c:	00bfff04 	movi	r2,-4
11201e20:	9dadc83a 	sub	r22,r19,r22
11201e24:	b1000117 	ldw	r4,4(r22)
11201e28:	2084703a 	and	r2,r4,r2
11201e2c:	b03f7726 	beq	r22,zero,11201c0c <__alt_data_end+0xffe81c0c>
11201e30:	80af883a 	add	r23,r16,r2
11201e34:	b8ff7516 	blt	r23,r3,11201c0c <__alt_data_end+0xffe81c0c>
11201e38:	b0800317 	ldw	r2,12(r22)
11201e3c:	b0c00217 	ldw	r3,8(r22)
11201e40:	81bfff04 	addi	r6,r16,-4
11201e44:	01000904 	movi	r4,36
11201e48:	18800315 	stw	r2,12(r3)
11201e4c:	10c00215 	stw	r3,8(r2)
11201e50:	b4800204 	addi	r18,r22,8
11201e54:	21bfe52e 	bgeu	r4,r6,11201dec <__alt_data_end+0xffe81dec>
11201e58:	a80b883a 	mov	r5,r21
11201e5c:	9009883a 	mov	r4,r18
11201e60:	12018dc0 	call	112018dc <memmove>
11201e64:	b821883a 	mov	r16,r23
11201e68:	b027883a 	mov	r19,r22
11201e6c:	003f8a06 	br	11201c98 <__alt_data_end+0xffe81c98>
11201e70:	300b883a 	mov	r5,r6
11201e74:	dfc00917 	ldw	ra,36(sp)
11201e78:	df000817 	ldw	fp,32(sp)
11201e7c:	ddc00717 	ldw	r23,28(sp)
11201e80:	dd800617 	ldw	r22,24(sp)
11201e84:	dd400517 	ldw	r21,20(sp)
11201e88:	dd000417 	ldw	r20,16(sp)
11201e8c:	dcc00317 	ldw	r19,12(sp)
11201e90:	dc800217 	ldw	r18,8(sp)
11201e94:	dc400117 	ldw	r17,4(sp)
11201e98:	dc000017 	ldw	r16,0(sp)
11201e9c:	dec00a04 	addi	sp,sp,40
11201ea0:	1200ea41 	jmpi	11200ea4 <_malloc_r>
11201ea4:	a8c00017 	ldw	r3,0(r21)
11201ea8:	90c00015 	stw	r3,0(r18)
11201eac:	a8c00117 	ldw	r3,4(r21)
11201eb0:	90c00115 	stw	r3,4(r18)
11201eb4:	00c006c4 	movi	r3,27
11201eb8:	19804536 	bltu	r3,r6,11201fd0 <_realloc_r+0x470>
11201ebc:	90800204 	addi	r2,r18,8
11201ec0:	a8c00204 	addi	r3,r21,8
11201ec4:	003f6306 	br	11201c54 <__alt_data_end+0xffe81c54>
11201ec8:	9005883a 	mov	r2,r18
11201ecc:	a8c00017 	ldw	r3,0(r21)
11201ed0:	b821883a 	mov	r16,r23
11201ed4:	b027883a 	mov	r19,r22
11201ed8:	10c00015 	stw	r3,0(r2)
11201edc:	a8c00117 	ldw	r3,4(r21)
11201ee0:	10c00115 	stw	r3,4(r2)
11201ee4:	a8c00217 	ldw	r3,8(r21)
11201ee8:	10c00215 	stw	r3,8(r2)
11201eec:	003f6a06 	br	11201c98 <__alt_data_end+0xffe81c98>
11201ef0:	9c67883a 	add	r19,r19,r17
11201ef4:	4445c83a 	sub	r2,r8,r17
11201ef8:	e4c00215 	stw	r19,8(fp)
11201efc:	10800054 	ori	r2,r2,1
11201f00:	98800115 	stw	r2,4(r19)
11201f04:	a8bfff17 	ldw	r2,-4(r21)
11201f08:	a009883a 	mov	r4,r20
11201f0c:	1080004c 	andi	r2,r2,1
11201f10:	1462b03a 	or	r17,r2,r17
11201f14:	ac7fff15 	stw	r17,-4(r21)
11201f18:	12035d00 	call	112035d0 <__malloc_unlock>
11201f1c:	a805883a 	mov	r2,r21
11201f20:	003f6b06 	br	11201cd0 <__alt_data_end+0xffe81cd0>
11201f24:	a80b883a 	mov	r5,r21
11201f28:	9009883a 	mov	r4,r18
11201f2c:	12018dc0 	call	112018dc <memmove>
11201f30:	003f4e06 	br	11201c6c <__alt_data_end+0xffe81c6c>
11201f34:	89000404 	addi	r4,r17,16
11201f38:	b93fbc16 	blt	r23,r4,11201e2c <__alt_data_end+0xffe81e2c>
11201f3c:	b0800317 	ldw	r2,12(r22)
11201f40:	b0c00217 	ldw	r3,8(r22)
11201f44:	81bfff04 	addi	r6,r16,-4
11201f48:	01000904 	movi	r4,36
11201f4c:	18800315 	stw	r2,12(r3)
11201f50:	10c00215 	stw	r3,8(r2)
11201f54:	b4800204 	addi	r18,r22,8
11201f58:	21804336 	bltu	r4,r6,11202068 <_realloc_r+0x508>
11201f5c:	008004c4 	movi	r2,19
11201f60:	11803f2e 	bgeu	r2,r6,11202060 <_realloc_r+0x500>
11201f64:	a8800017 	ldw	r2,0(r21)
11201f68:	b0800215 	stw	r2,8(r22)
11201f6c:	a8800117 	ldw	r2,4(r21)
11201f70:	b0800315 	stw	r2,12(r22)
11201f74:	008006c4 	movi	r2,27
11201f78:	11803f36 	bltu	r2,r6,11202078 <_realloc_r+0x518>
11201f7c:	b0800404 	addi	r2,r22,16
11201f80:	ad400204 	addi	r21,r21,8
11201f84:	a8c00017 	ldw	r3,0(r21)
11201f88:	10c00015 	stw	r3,0(r2)
11201f8c:	a8c00117 	ldw	r3,4(r21)
11201f90:	10c00115 	stw	r3,4(r2)
11201f94:	a8c00217 	ldw	r3,8(r21)
11201f98:	10c00215 	stw	r3,8(r2)
11201f9c:	b447883a 	add	r3,r22,r17
11201fa0:	bc45c83a 	sub	r2,r23,r17
11201fa4:	e0c00215 	stw	r3,8(fp)
11201fa8:	10800054 	ori	r2,r2,1
11201fac:	18800115 	stw	r2,4(r3)
11201fb0:	b0800117 	ldw	r2,4(r22)
11201fb4:	a009883a 	mov	r4,r20
11201fb8:	1080004c 	andi	r2,r2,1
11201fbc:	1462b03a 	or	r17,r2,r17
11201fc0:	b4400115 	stw	r17,4(r22)
11201fc4:	12035d00 	call	112035d0 <__malloc_unlock>
11201fc8:	9005883a 	mov	r2,r18
11201fcc:	003f4006 	br	11201cd0 <__alt_data_end+0xffe81cd0>
11201fd0:	a8c00217 	ldw	r3,8(r21)
11201fd4:	90c00215 	stw	r3,8(r18)
11201fd8:	a8c00317 	ldw	r3,12(r21)
11201fdc:	90c00315 	stw	r3,12(r18)
11201fe0:	30801126 	beq	r6,r2,11202028 <_realloc_r+0x4c8>
11201fe4:	90800404 	addi	r2,r18,16
11201fe8:	a8c00404 	addi	r3,r21,16
11201fec:	003f1906 	br	11201c54 <__alt_data_end+0xffe81c54>
11201ff0:	90ffff17 	ldw	r3,-4(r18)
11201ff4:	00bfff04 	movi	r2,-4
11201ff8:	a825883a 	mov	r18,r21
11201ffc:	1884703a 	and	r2,r3,r2
11202000:	80a1883a 	add	r16,r16,r2
11202004:	003f2406 	br	11201c98 <__alt_data_end+0xffe81c98>
11202008:	a8800217 	ldw	r2,8(r21)
1120200c:	b0800415 	stw	r2,16(r22)
11202010:	a8800317 	ldw	r2,12(r21)
11202014:	b0800515 	stw	r2,20(r22)
11202018:	31000a26 	beq	r6,r4,11202044 <_realloc_r+0x4e4>
1120201c:	b0800604 	addi	r2,r22,24
11202020:	ad400404 	addi	r21,r21,16
11202024:	003fa906 	br	11201ecc <__alt_data_end+0xffe81ecc>
11202028:	a9000417 	ldw	r4,16(r21)
1120202c:	90800604 	addi	r2,r18,24
11202030:	a8c00604 	addi	r3,r21,24
11202034:	91000415 	stw	r4,16(r18)
11202038:	a9000517 	ldw	r4,20(r21)
1120203c:	91000515 	stw	r4,20(r18)
11202040:	003f0406 	br	11201c54 <__alt_data_end+0xffe81c54>
11202044:	a8c00417 	ldw	r3,16(r21)
11202048:	ad400604 	addi	r21,r21,24
1120204c:	b0800804 	addi	r2,r22,32
11202050:	b0c00615 	stw	r3,24(r22)
11202054:	a8ffff17 	ldw	r3,-4(r21)
11202058:	b0c00715 	stw	r3,28(r22)
1120205c:	003f9b06 	br	11201ecc <__alt_data_end+0xffe81ecc>
11202060:	9005883a 	mov	r2,r18
11202064:	003fc706 	br	11201f84 <__alt_data_end+0xffe81f84>
11202068:	a80b883a 	mov	r5,r21
1120206c:	9009883a 	mov	r4,r18
11202070:	12018dc0 	call	112018dc <memmove>
11202074:	003fc906 	br	11201f9c <__alt_data_end+0xffe81f9c>
11202078:	a8800217 	ldw	r2,8(r21)
1120207c:	b0800415 	stw	r2,16(r22)
11202080:	a8800317 	ldw	r2,12(r21)
11202084:	b0800515 	stw	r2,20(r22)
11202088:	31000726 	beq	r6,r4,112020a8 <_realloc_r+0x548>
1120208c:	b0800604 	addi	r2,r22,24
11202090:	ad400404 	addi	r21,r21,16
11202094:	003fbb06 	br	11201f84 <__alt_data_end+0xffe81f84>
11202098:	a009883a 	mov	r4,r20
1120209c:	12035d00 	call	112035d0 <__malloc_unlock>
112020a0:	0005883a 	mov	r2,zero
112020a4:	003f0a06 	br	11201cd0 <__alt_data_end+0xffe81cd0>
112020a8:	a8c00417 	ldw	r3,16(r21)
112020ac:	ad400604 	addi	r21,r21,24
112020b0:	b0800804 	addi	r2,r22,32
112020b4:	b0c00615 	stw	r3,24(r22)
112020b8:	a8ffff17 	ldw	r3,-4(r21)
112020bc:	b0c00715 	stw	r3,28(r22)
112020c0:	003fb006 	br	11201f84 <__alt_data_end+0xffe81f84>

112020c4 <_sbrk_r>:
112020c4:	defffd04 	addi	sp,sp,-12
112020c8:	dc000015 	stw	r16,0(sp)
112020cc:	04044834 	movhi	r16,4384
112020d0:	dc400115 	stw	r17,4(sp)
112020d4:	841c9e04 	addi	r16,r16,29304
112020d8:	2023883a 	mov	r17,r4
112020dc:	2809883a 	mov	r4,r5
112020e0:	dfc00215 	stw	ra,8(sp)
112020e4:	80000015 	stw	zero,0(r16)
112020e8:	12037900 	call	11203790 <sbrk>
112020ec:	00ffffc4 	movi	r3,-1
112020f0:	10c00526 	beq	r2,r3,11202108 <_sbrk_r+0x44>
112020f4:	dfc00217 	ldw	ra,8(sp)
112020f8:	dc400117 	ldw	r17,4(sp)
112020fc:	dc000017 	ldw	r16,0(sp)
11202100:	dec00304 	addi	sp,sp,12
11202104:	f800283a 	ret
11202108:	80c00017 	ldw	r3,0(r16)
1120210c:	183ff926 	beq	r3,zero,112020f4 <__alt_data_end+0xffe820f4>
11202110:	88c00015 	stw	r3,0(r17)
11202114:	003ff706 	br	112020f4 <__alt_data_end+0xffe820f4>

11202118 <__sread>:
11202118:	defffe04 	addi	sp,sp,-8
1120211c:	dc000015 	stw	r16,0(sp)
11202120:	2821883a 	mov	r16,r5
11202124:	2940038f 	ldh	r5,14(r5)
11202128:	dfc00115 	stw	ra,4(sp)
1120212c:	1202e580 	call	11202e58 <_read_r>
11202130:	10000716 	blt	r2,zero,11202150 <__sread+0x38>
11202134:	80c01417 	ldw	r3,80(r16)
11202138:	1887883a 	add	r3,r3,r2
1120213c:	80c01415 	stw	r3,80(r16)
11202140:	dfc00117 	ldw	ra,4(sp)
11202144:	dc000017 	ldw	r16,0(sp)
11202148:	dec00204 	addi	sp,sp,8
1120214c:	f800283a 	ret
11202150:	80c0030b 	ldhu	r3,12(r16)
11202154:	18fbffcc 	andi	r3,r3,61439
11202158:	80c0030d 	sth	r3,12(r16)
1120215c:	dfc00117 	ldw	ra,4(sp)
11202160:	dc000017 	ldw	r16,0(sp)
11202164:	dec00204 	addi	sp,sp,8
11202168:	f800283a 	ret

1120216c <__seofread>:
1120216c:	0005883a 	mov	r2,zero
11202170:	f800283a 	ret

11202174 <__swrite>:
11202174:	2880030b 	ldhu	r2,12(r5)
11202178:	defffb04 	addi	sp,sp,-20
1120217c:	dcc00315 	stw	r19,12(sp)
11202180:	dc800215 	stw	r18,8(sp)
11202184:	dc400115 	stw	r17,4(sp)
11202188:	dc000015 	stw	r16,0(sp)
1120218c:	dfc00415 	stw	ra,16(sp)
11202190:	10c0400c 	andi	r3,r2,256
11202194:	2821883a 	mov	r16,r5
11202198:	2023883a 	mov	r17,r4
1120219c:	3025883a 	mov	r18,r6
112021a0:	3827883a 	mov	r19,r7
112021a4:	18000526 	beq	r3,zero,112021bc <__swrite+0x48>
112021a8:	2940038f 	ldh	r5,14(r5)
112021ac:	01c00084 	movi	r7,2
112021b0:	000d883a 	mov	r6,zero
112021b4:	1202c3c0 	call	11202c3c <_lseek_r>
112021b8:	8080030b 	ldhu	r2,12(r16)
112021bc:	8140038f 	ldh	r5,14(r16)
112021c0:	10bbffcc 	andi	r2,r2,61439
112021c4:	980f883a 	mov	r7,r19
112021c8:	900d883a 	mov	r6,r18
112021cc:	8809883a 	mov	r4,r17
112021d0:	8080030d 	sth	r2,12(r16)
112021d4:	dfc00417 	ldw	ra,16(sp)
112021d8:	dcc00317 	ldw	r19,12(sp)
112021dc:	dc800217 	ldw	r18,8(sp)
112021e0:	dc400117 	ldw	r17,4(sp)
112021e4:	dc000017 	ldw	r16,0(sp)
112021e8:	dec00504 	addi	sp,sp,20
112021ec:	12022541 	jmpi	11202254 <_write_r>

112021f0 <__sseek>:
112021f0:	defffe04 	addi	sp,sp,-8
112021f4:	dc000015 	stw	r16,0(sp)
112021f8:	2821883a 	mov	r16,r5
112021fc:	2940038f 	ldh	r5,14(r5)
11202200:	dfc00115 	stw	ra,4(sp)
11202204:	1202c3c0 	call	11202c3c <_lseek_r>
11202208:	00ffffc4 	movi	r3,-1
1120220c:	10c00826 	beq	r2,r3,11202230 <__sseek+0x40>
11202210:	80c0030b 	ldhu	r3,12(r16)
11202214:	80801415 	stw	r2,80(r16)
11202218:	18c40014 	ori	r3,r3,4096
1120221c:	80c0030d 	sth	r3,12(r16)
11202220:	dfc00117 	ldw	ra,4(sp)
11202224:	dc000017 	ldw	r16,0(sp)
11202228:	dec00204 	addi	sp,sp,8
1120222c:	f800283a 	ret
11202230:	80c0030b 	ldhu	r3,12(r16)
11202234:	18fbffcc 	andi	r3,r3,61439
11202238:	80c0030d 	sth	r3,12(r16)
1120223c:	dfc00117 	ldw	ra,4(sp)
11202240:	dc000017 	ldw	r16,0(sp)
11202244:	dec00204 	addi	sp,sp,8
11202248:	f800283a 	ret

1120224c <__sclose>:
1120224c:	2940038f 	ldh	r5,14(r5)
11202250:	12024081 	jmpi	11202408 <_close_r>

11202254 <_write_r>:
11202254:	defffd04 	addi	sp,sp,-12
11202258:	2805883a 	mov	r2,r5
1120225c:	dc000015 	stw	r16,0(sp)
11202260:	04044834 	movhi	r16,4384
11202264:	dc400115 	stw	r17,4(sp)
11202268:	300b883a 	mov	r5,r6
1120226c:	841c9e04 	addi	r16,r16,29304
11202270:	2023883a 	mov	r17,r4
11202274:	380d883a 	mov	r6,r7
11202278:	1009883a 	mov	r4,r2
1120227c:	dfc00215 	stw	ra,8(sp)
11202280:	80000015 	stw	zero,0(r16)
11202284:	12038ac0 	call	112038ac <write>
11202288:	00ffffc4 	movi	r3,-1
1120228c:	10c00526 	beq	r2,r3,112022a4 <_write_r+0x50>
11202290:	dfc00217 	ldw	ra,8(sp)
11202294:	dc400117 	ldw	r17,4(sp)
11202298:	dc000017 	ldw	r16,0(sp)
1120229c:	dec00304 	addi	sp,sp,12
112022a0:	f800283a 	ret
112022a4:	80c00017 	ldw	r3,0(r16)
112022a8:	183ff926 	beq	r3,zero,11202290 <__alt_data_end+0xffe82290>
112022ac:	88c00015 	stw	r3,0(r17)
112022b0:	003ff706 	br	11202290 <__alt_data_end+0xffe82290>

112022b4 <__swsetup_r>:
112022b4:	00844834 	movhi	r2,4384
112022b8:	defffd04 	addi	sp,sp,-12
112022bc:	109c8e04 	addi	r2,r2,29240
112022c0:	dc400115 	stw	r17,4(sp)
112022c4:	2023883a 	mov	r17,r4
112022c8:	11000017 	ldw	r4,0(r2)
112022cc:	dc000015 	stw	r16,0(sp)
112022d0:	dfc00215 	stw	ra,8(sp)
112022d4:	2821883a 	mov	r16,r5
112022d8:	20000226 	beq	r4,zero,112022e4 <__swsetup_r+0x30>
112022dc:	20800e17 	ldw	r2,56(r4)
112022e0:	10003126 	beq	r2,zero,112023a8 <__swsetup_r+0xf4>
112022e4:	8080030b 	ldhu	r2,12(r16)
112022e8:	10c0020c 	andi	r3,r2,8
112022ec:	1009883a 	mov	r4,r2
112022f0:	18000f26 	beq	r3,zero,11202330 <__swsetup_r+0x7c>
112022f4:	80c00417 	ldw	r3,16(r16)
112022f8:	18001526 	beq	r3,zero,11202350 <__swsetup_r+0x9c>
112022fc:	1100004c 	andi	r4,r2,1
11202300:	20001c1e 	bne	r4,zero,11202374 <__swsetup_r+0xc0>
11202304:	1080008c 	andi	r2,r2,2
11202308:	1000291e 	bne	r2,zero,112023b0 <__swsetup_r+0xfc>
1120230c:	80800517 	ldw	r2,20(r16)
11202310:	80800215 	stw	r2,8(r16)
11202314:	18001c26 	beq	r3,zero,11202388 <__swsetup_r+0xd4>
11202318:	0005883a 	mov	r2,zero
1120231c:	dfc00217 	ldw	ra,8(sp)
11202320:	dc400117 	ldw	r17,4(sp)
11202324:	dc000017 	ldw	r16,0(sp)
11202328:	dec00304 	addi	sp,sp,12
1120232c:	f800283a 	ret
11202330:	2080040c 	andi	r2,r4,16
11202334:	10002e26 	beq	r2,zero,112023f0 <__swsetup_r+0x13c>
11202338:	2080010c 	andi	r2,r4,4
1120233c:	10001e1e 	bne	r2,zero,112023b8 <__swsetup_r+0x104>
11202340:	80c00417 	ldw	r3,16(r16)
11202344:	20800214 	ori	r2,r4,8
11202348:	8080030d 	sth	r2,12(r16)
1120234c:	183feb1e 	bne	r3,zero,112022fc <__alt_data_end+0xffe822fc>
11202350:	1100a00c 	andi	r4,r2,640
11202354:	01408004 	movi	r5,512
11202358:	217fe826 	beq	r4,r5,112022fc <__alt_data_end+0xffe822fc>
1120235c:	800b883a 	mov	r5,r16
11202360:	8809883a 	mov	r4,r17
11202364:	1202c9c0 	call	11202c9c <__smakebuf_r>
11202368:	8080030b 	ldhu	r2,12(r16)
1120236c:	80c00417 	ldw	r3,16(r16)
11202370:	003fe206 	br	112022fc <__alt_data_end+0xffe822fc>
11202374:	80800517 	ldw	r2,20(r16)
11202378:	80000215 	stw	zero,8(r16)
1120237c:	0085c83a 	sub	r2,zero,r2
11202380:	80800615 	stw	r2,24(r16)
11202384:	183fe41e 	bne	r3,zero,11202318 <__alt_data_end+0xffe82318>
11202388:	80c0030b 	ldhu	r3,12(r16)
1120238c:	0005883a 	mov	r2,zero
11202390:	1900200c 	andi	r4,r3,128
11202394:	203fe126 	beq	r4,zero,1120231c <__alt_data_end+0xffe8231c>
11202398:	18c01014 	ori	r3,r3,64
1120239c:	80c0030d 	sth	r3,12(r16)
112023a0:	00bfffc4 	movi	r2,-1
112023a4:	003fdd06 	br	1120231c <__alt_data_end+0xffe8231c>
112023a8:	12008100 	call	11200810 <__sinit>
112023ac:	003fcd06 	br	112022e4 <__alt_data_end+0xffe822e4>
112023b0:	0005883a 	mov	r2,zero
112023b4:	003fd606 	br	11202310 <__alt_data_end+0xffe82310>
112023b8:	81400c17 	ldw	r5,48(r16)
112023bc:	28000626 	beq	r5,zero,112023d8 <__swsetup_r+0x124>
112023c0:	80801004 	addi	r2,r16,64
112023c4:	28800326 	beq	r5,r2,112023d4 <__swsetup_r+0x120>
112023c8:	8809883a 	mov	r4,r17
112023cc:	120292c0 	call	1120292c <_free_r>
112023d0:	8100030b 	ldhu	r4,12(r16)
112023d4:	80000c15 	stw	zero,48(r16)
112023d8:	80c00417 	ldw	r3,16(r16)
112023dc:	00bff6c4 	movi	r2,-37
112023e0:	1108703a 	and	r4,r2,r4
112023e4:	80000115 	stw	zero,4(r16)
112023e8:	80c00015 	stw	r3,0(r16)
112023ec:	003fd506 	br	11202344 <__alt_data_end+0xffe82344>
112023f0:	00800244 	movi	r2,9
112023f4:	88800015 	stw	r2,0(r17)
112023f8:	20801014 	ori	r2,r4,64
112023fc:	8080030d 	sth	r2,12(r16)
11202400:	00bfffc4 	movi	r2,-1
11202404:	003fc506 	br	1120231c <__alt_data_end+0xffe8231c>

11202408 <_close_r>:
11202408:	defffd04 	addi	sp,sp,-12
1120240c:	dc000015 	stw	r16,0(sp)
11202410:	04044834 	movhi	r16,4384
11202414:	dc400115 	stw	r17,4(sp)
11202418:	841c9e04 	addi	r16,r16,29304
1120241c:	2023883a 	mov	r17,r4
11202420:	2809883a 	mov	r4,r5
11202424:	dfc00215 	stw	ra,8(sp)
11202428:	80000015 	stw	zero,0(r16)
1120242c:	12031580 	call	11203158 <close>
11202430:	00ffffc4 	movi	r3,-1
11202434:	10c00526 	beq	r2,r3,1120244c <_close_r+0x44>
11202438:	dfc00217 	ldw	ra,8(sp)
1120243c:	dc400117 	ldw	r17,4(sp)
11202440:	dc000017 	ldw	r16,0(sp)
11202444:	dec00304 	addi	sp,sp,12
11202448:	f800283a 	ret
1120244c:	80c00017 	ldw	r3,0(r16)
11202450:	183ff926 	beq	r3,zero,11202438 <__alt_data_end+0xffe82438>
11202454:	88c00015 	stw	r3,0(r17)
11202458:	003ff706 	br	11202438 <__alt_data_end+0xffe82438>

1120245c <_fclose_r>:
1120245c:	28003926 	beq	r5,zero,11202544 <_fclose_r+0xe8>
11202460:	defffc04 	addi	sp,sp,-16
11202464:	dc400115 	stw	r17,4(sp)
11202468:	dc000015 	stw	r16,0(sp)
1120246c:	dfc00315 	stw	ra,12(sp)
11202470:	dc800215 	stw	r18,8(sp)
11202474:	2023883a 	mov	r17,r4
11202478:	2821883a 	mov	r16,r5
1120247c:	20000226 	beq	r4,zero,11202488 <_fclose_r+0x2c>
11202480:	20800e17 	ldw	r2,56(r4)
11202484:	10002726 	beq	r2,zero,11202524 <_fclose_r+0xc8>
11202488:	8080030f 	ldh	r2,12(r16)
1120248c:	1000071e 	bne	r2,zero,112024ac <_fclose_r+0x50>
11202490:	0005883a 	mov	r2,zero
11202494:	dfc00317 	ldw	ra,12(sp)
11202498:	dc800217 	ldw	r18,8(sp)
1120249c:	dc400117 	ldw	r17,4(sp)
112024a0:	dc000017 	ldw	r16,0(sp)
112024a4:	dec00404 	addi	sp,sp,16
112024a8:	f800283a 	ret
112024ac:	800b883a 	mov	r5,r16
112024b0:	8809883a 	mov	r4,r17
112024b4:	12025600 	call	11202560 <__sflush_r>
112024b8:	1025883a 	mov	r18,r2
112024bc:	80800b17 	ldw	r2,44(r16)
112024c0:	10000426 	beq	r2,zero,112024d4 <_fclose_r+0x78>
112024c4:	81400717 	ldw	r5,28(r16)
112024c8:	8809883a 	mov	r4,r17
112024cc:	103ee83a 	callr	r2
112024d0:	10001616 	blt	r2,zero,1120252c <_fclose_r+0xd0>
112024d4:	8080030b 	ldhu	r2,12(r16)
112024d8:	1080200c 	andi	r2,r2,128
112024dc:	1000151e 	bne	r2,zero,11202534 <_fclose_r+0xd8>
112024e0:	81400c17 	ldw	r5,48(r16)
112024e4:	28000526 	beq	r5,zero,112024fc <_fclose_r+0xa0>
112024e8:	80801004 	addi	r2,r16,64
112024ec:	28800226 	beq	r5,r2,112024f8 <_fclose_r+0x9c>
112024f0:	8809883a 	mov	r4,r17
112024f4:	120292c0 	call	1120292c <_free_r>
112024f8:	80000c15 	stw	zero,48(r16)
112024fc:	81401117 	ldw	r5,68(r16)
11202500:	28000326 	beq	r5,zero,11202510 <_fclose_r+0xb4>
11202504:	8809883a 	mov	r4,r17
11202508:	120292c0 	call	1120292c <_free_r>
1120250c:	80001115 	stw	zero,68(r16)
11202510:	12008200 	call	11200820 <__sfp_lock_acquire>
11202514:	8000030d 	sth	zero,12(r16)
11202518:	12008240 	call	11200824 <__sfp_lock_release>
1120251c:	9005883a 	mov	r2,r18
11202520:	003fdc06 	br	11202494 <__alt_data_end+0xffe82494>
11202524:	12008100 	call	11200810 <__sinit>
11202528:	003fd706 	br	11202488 <__alt_data_end+0xffe82488>
1120252c:	04bfffc4 	movi	r18,-1
11202530:	003fe806 	br	112024d4 <__alt_data_end+0xffe824d4>
11202534:	81400417 	ldw	r5,16(r16)
11202538:	8809883a 	mov	r4,r17
1120253c:	120292c0 	call	1120292c <_free_r>
11202540:	003fe706 	br	112024e0 <__alt_data_end+0xffe824e0>
11202544:	0005883a 	mov	r2,zero
11202548:	f800283a 	ret

1120254c <fclose>:
1120254c:	00844834 	movhi	r2,4384
11202550:	109c8e04 	addi	r2,r2,29240
11202554:	200b883a 	mov	r5,r4
11202558:	11000017 	ldw	r4,0(r2)
1120255c:	120245c1 	jmpi	1120245c <_fclose_r>

11202560 <__sflush_r>:
11202560:	2880030b 	ldhu	r2,12(r5)
11202564:	defffb04 	addi	sp,sp,-20
11202568:	dcc00315 	stw	r19,12(sp)
1120256c:	dc400115 	stw	r17,4(sp)
11202570:	dfc00415 	stw	ra,16(sp)
11202574:	dc800215 	stw	r18,8(sp)
11202578:	dc000015 	stw	r16,0(sp)
1120257c:	10c0020c 	andi	r3,r2,8
11202580:	2823883a 	mov	r17,r5
11202584:	2027883a 	mov	r19,r4
11202588:	1800311e 	bne	r3,zero,11202650 <__sflush_r+0xf0>
1120258c:	28c00117 	ldw	r3,4(r5)
11202590:	10820014 	ori	r2,r2,2048
11202594:	2880030d 	sth	r2,12(r5)
11202598:	00c04b0e 	bge	zero,r3,112026c8 <__sflush_r+0x168>
1120259c:	8a000a17 	ldw	r8,40(r17)
112025a0:	40002326 	beq	r8,zero,11202630 <__sflush_r+0xd0>
112025a4:	9c000017 	ldw	r16,0(r19)
112025a8:	10c4000c 	andi	r3,r2,4096
112025ac:	98000015 	stw	zero,0(r19)
112025b0:	18004826 	beq	r3,zero,112026d4 <__sflush_r+0x174>
112025b4:	89801417 	ldw	r6,80(r17)
112025b8:	10c0010c 	andi	r3,r2,4
112025bc:	18000626 	beq	r3,zero,112025d8 <__sflush_r+0x78>
112025c0:	88c00117 	ldw	r3,4(r17)
112025c4:	88800c17 	ldw	r2,48(r17)
112025c8:	30cdc83a 	sub	r6,r6,r3
112025cc:	10000226 	beq	r2,zero,112025d8 <__sflush_r+0x78>
112025d0:	88800f17 	ldw	r2,60(r17)
112025d4:	308dc83a 	sub	r6,r6,r2
112025d8:	89400717 	ldw	r5,28(r17)
112025dc:	000f883a 	mov	r7,zero
112025e0:	9809883a 	mov	r4,r19
112025e4:	403ee83a 	callr	r8
112025e8:	00ffffc4 	movi	r3,-1
112025ec:	10c04426 	beq	r2,r3,11202700 <__sflush_r+0x1a0>
112025f0:	88c0030b 	ldhu	r3,12(r17)
112025f4:	89000417 	ldw	r4,16(r17)
112025f8:	88000115 	stw	zero,4(r17)
112025fc:	197dffcc 	andi	r5,r3,63487
11202600:	8940030d 	sth	r5,12(r17)
11202604:	89000015 	stw	r4,0(r17)
11202608:	18c4000c 	andi	r3,r3,4096
1120260c:	18002c1e 	bne	r3,zero,112026c0 <__sflush_r+0x160>
11202610:	89400c17 	ldw	r5,48(r17)
11202614:	9c000015 	stw	r16,0(r19)
11202618:	28000526 	beq	r5,zero,11202630 <__sflush_r+0xd0>
1120261c:	88801004 	addi	r2,r17,64
11202620:	28800226 	beq	r5,r2,1120262c <__sflush_r+0xcc>
11202624:	9809883a 	mov	r4,r19
11202628:	120292c0 	call	1120292c <_free_r>
1120262c:	88000c15 	stw	zero,48(r17)
11202630:	0005883a 	mov	r2,zero
11202634:	dfc00417 	ldw	ra,16(sp)
11202638:	dcc00317 	ldw	r19,12(sp)
1120263c:	dc800217 	ldw	r18,8(sp)
11202640:	dc400117 	ldw	r17,4(sp)
11202644:	dc000017 	ldw	r16,0(sp)
11202648:	dec00504 	addi	sp,sp,20
1120264c:	f800283a 	ret
11202650:	2c800417 	ldw	r18,16(r5)
11202654:	903ff626 	beq	r18,zero,11202630 <__alt_data_end+0xffe82630>
11202658:	2c000017 	ldw	r16,0(r5)
1120265c:	108000cc 	andi	r2,r2,3
11202660:	2c800015 	stw	r18,0(r5)
11202664:	84a1c83a 	sub	r16,r16,r18
11202668:	1000131e 	bne	r2,zero,112026b8 <__sflush_r+0x158>
1120266c:	28800517 	ldw	r2,20(r5)
11202670:	88800215 	stw	r2,8(r17)
11202674:	04000316 	blt	zero,r16,11202684 <__sflush_r+0x124>
11202678:	003fed06 	br	11202630 <__alt_data_end+0xffe82630>
1120267c:	90a5883a 	add	r18,r18,r2
11202680:	043feb0e 	bge	zero,r16,11202630 <__alt_data_end+0xffe82630>
11202684:	88800917 	ldw	r2,36(r17)
11202688:	89400717 	ldw	r5,28(r17)
1120268c:	800f883a 	mov	r7,r16
11202690:	900d883a 	mov	r6,r18
11202694:	9809883a 	mov	r4,r19
11202698:	103ee83a 	callr	r2
1120269c:	80a1c83a 	sub	r16,r16,r2
112026a0:	00bff616 	blt	zero,r2,1120267c <__alt_data_end+0xffe8267c>
112026a4:	88c0030b 	ldhu	r3,12(r17)
112026a8:	00bfffc4 	movi	r2,-1
112026ac:	18c01014 	ori	r3,r3,64
112026b0:	88c0030d 	sth	r3,12(r17)
112026b4:	003fdf06 	br	11202634 <__alt_data_end+0xffe82634>
112026b8:	0005883a 	mov	r2,zero
112026bc:	003fec06 	br	11202670 <__alt_data_end+0xffe82670>
112026c0:	88801415 	stw	r2,80(r17)
112026c4:	003fd206 	br	11202610 <__alt_data_end+0xffe82610>
112026c8:	28c00f17 	ldw	r3,60(r5)
112026cc:	00ffb316 	blt	zero,r3,1120259c <__alt_data_end+0xffe8259c>
112026d0:	003fd706 	br	11202630 <__alt_data_end+0xffe82630>
112026d4:	89400717 	ldw	r5,28(r17)
112026d8:	000d883a 	mov	r6,zero
112026dc:	01c00044 	movi	r7,1
112026e0:	9809883a 	mov	r4,r19
112026e4:	403ee83a 	callr	r8
112026e8:	100d883a 	mov	r6,r2
112026ec:	00bfffc4 	movi	r2,-1
112026f0:	30801426 	beq	r6,r2,11202744 <__sflush_r+0x1e4>
112026f4:	8880030b 	ldhu	r2,12(r17)
112026f8:	8a000a17 	ldw	r8,40(r17)
112026fc:	003fae06 	br	112025b8 <__alt_data_end+0xffe825b8>
11202700:	98c00017 	ldw	r3,0(r19)
11202704:	183fba26 	beq	r3,zero,112025f0 <__alt_data_end+0xffe825f0>
11202708:	01000744 	movi	r4,29
1120270c:	19000626 	beq	r3,r4,11202728 <__sflush_r+0x1c8>
11202710:	01000584 	movi	r4,22
11202714:	19000426 	beq	r3,r4,11202728 <__sflush_r+0x1c8>
11202718:	88c0030b 	ldhu	r3,12(r17)
1120271c:	18c01014 	ori	r3,r3,64
11202720:	88c0030d 	sth	r3,12(r17)
11202724:	003fc306 	br	11202634 <__alt_data_end+0xffe82634>
11202728:	8880030b 	ldhu	r2,12(r17)
1120272c:	88c00417 	ldw	r3,16(r17)
11202730:	88000115 	stw	zero,4(r17)
11202734:	10bdffcc 	andi	r2,r2,63487
11202738:	8880030d 	sth	r2,12(r17)
1120273c:	88c00015 	stw	r3,0(r17)
11202740:	003fb306 	br	11202610 <__alt_data_end+0xffe82610>
11202744:	98800017 	ldw	r2,0(r19)
11202748:	103fea26 	beq	r2,zero,112026f4 <__alt_data_end+0xffe826f4>
1120274c:	00c00744 	movi	r3,29
11202750:	10c00226 	beq	r2,r3,1120275c <__sflush_r+0x1fc>
11202754:	00c00584 	movi	r3,22
11202758:	10c0031e 	bne	r2,r3,11202768 <__sflush_r+0x208>
1120275c:	9c000015 	stw	r16,0(r19)
11202760:	0005883a 	mov	r2,zero
11202764:	003fb306 	br	11202634 <__alt_data_end+0xffe82634>
11202768:	88c0030b 	ldhu	r3,12(r17)
1120276c:	3005883a 	mov	r2,r6
11202770:	18c01014 	ori	r3,r3,64
11202774:	88c0030d 	sth	r3,12(r17)
11202778:	003fae06 	br	11202634 <__alt_data_end+0xffe82634>

1120277c <_fflush_r>:
1120277c:	defffd04 	addi	sp,sp,-12
11202780:	dc000115 	stw	r16,4(sp)
11202784:	dfc00215 	stw	ra,8(sp)
11202788:	2021883a 	mov	r16,r4
1120278c:	20000226 	beq	r4,zero,11202798 <_fflush_r+0x1c>
11202790:	20800e17 	ldw	r2,56(r4)
11202794:	10000c26 	beq	r2,zero,112027c8 <_fflush_r+0x4c>
11202798:	2880030f 	ldh	r2,12(r5)
1120279c:	1000051e 	bne	r2,zero,112027b4 <_fflush_r+0x38>
112027a0:	0005883a 	mov	r2,zero
112027a4:	dfc00217 	ldw	ra,8(sp)
112027a8:	dc000117 	ldw	r16,4(sp)
112027ac:	dec00304 	addi	sp,sp,12
112027b0:	f800283a 	ret
112027b4:	8009883a 	mov	r4,r16
112027b8:	dfc00217 	ldw	ra,8(sp)
112027bc:	dc000117 	ldw	r16,4(sp)
112027c0:	dec00304 	addi	sp,sp,12
112027c4:	12025601 	jmpi	11202560 <__sflush_r>
112027c8:	d9400015 	stw	r5,0(sp)
112027cc:	12008100 	call	11200810 <__sinit>
112027d0:	d9400017 	ldw	r5,0(sp)
112027d4:	003ff006 	br	11202798 <__alt_data_end+0xffe82798>

112027d8 <fflush>:
112027d8:	20000526 	beq	r4,zero,112027f0 <fflush+0x18>
112027dc:	00844834 	movhi	r2,4384
112027e0:	109c8e04 	addi	r2,r2,29240
112027e4:	200b883a 	mov	r5,r4
112027e8:	11000017 	ldw	r4,0(r2)
112027ec:	120277c1 	jmpi	1120277c <_fflush_r>
112027f0:	00844834 	movhi	r2,4384
112027f4:	109c8d04 	addi	r2,r2,29236
112027f8:	11000017 	ldw	r4,0(r2)
112027fc:	01444834 	movhi	r5,4384
11202800:	2949df04 	addi	r5,r5,10108
11202804:	1200de01 	jmpi	11200de0 <_fwalk_reent>

11202808 <_malloc_trim_r>:
11202808:	defffb04 	addi	sp,sp,-20
1120280c:	dcc00315 	stw	r19,12(sp)
11202810:	04c44834 	movhi	r19,4384
11202814:	dc800215 	stw	r18,8(sp)
11202818:	dc400115 	stw	r17,4(sp)
1120281c:	dc000015 	stw	r16,0(sp)
11202820:	dfc00415 	stw	ra,16(sp)
11202824:	2821883a 	mov	r16,r5
11202828:	9cd70904 	addi	r19,r19,23588
1120282c:	2025883a 	mov	r18,r4
11202830:	12035ac0 	call	112035ac <__malloc_lock>
11202834:	98800217 	ldw	r2,8(r19)
11202838:	14400117 	ldw	r17,4(r2)
1120283c:	00bfff04 	movi	r2,-4
11202840:	88a2703a 	and	r17,r17,r2
11202844:	8c21c83a 	sub	r16,r17,r16
11202848:	8403fbc4 	addi	r16,r16,4079
1120284c:	8020d33a 	srli	r16,r16,12
11202850:	0083ffc4 	movi	r2,4095
11202854:	843fffc4 	addi	r16,r16,-1
11202858:	8020933a 	slli	r16,r16,12
1120285c:	1400060e 	bge	r2,r16,11202878 <_malloc_trim_r+0x70>
11202860:	000b883a 	mov	r5,zero
11202864:	9009883a 	mov	r4,r18
11202868:	12020c40 	call	112020c4 <_sbrk_r>
1120286c:	98c00217 	ldw	r3,8(r19)
11202870:	1c47883a 	add	r3,r3,r17
11202874:	10c00a26 	beq	r2,r3,112028a0 <_malloc_trim_r+0x98>
11202878:	9009883a 	mov	r4,r18
1120287c:	12035d00 	call	112035d0 <__malloc_unlock>
11202880:	0005883a 	mov	r2,zero
11202884:	dfc00417 	ldw	ra,16(sp)
11202888:	dcc00317 	ldw	r19,12(sp)
1120288c:	dc800217 	ldw	r18,8(sp)
11202890:	dc400117 	ldw	r17,4(sp)
11202894:	dc000017 	ldw	r16,0(sp)
11202898:	dec00504 	addi	sp,sp,20
1120289c:	f800283a 	ret
112028a0:	040bc83a 	sub	r5,zero,r16
112028a4:	9009883a 	mov	r4,r18
112028a8:	12020c40 	call	112020c4 <_sbrk_r>
112028ac:	00ffffc4 	movi	r3,-1
112028b0:	10c00d26 	beq	r2,r3,112028e8 <_malloc_trim_r+0xe0>
112028b4:	00c44834 	movhi	r3,4384
112028b8:	18dca504 	addi	r3,r3,29332
112028bc:	18800017 	ldw	r2,0(r3)
112028c0:	99000217 	ldw	r4,8(r19)
112028c4:	8c23c83a 	sub	r17,r17,r16
112028c8:	8c400054 	ori	r17,r17,1
112028cc:	1421c83a 	sub	r16,r2,r16
112028d0:	24400115 	stw	r17,4(r4)
112028d4:	9009883a 	mov	r4,r18
112028d8:	1c000015 	stw	r16,0(r3)
112028dc:	12035d00 	call	112035d0 <__malloc_unlock>
112028e0:	00800044 	movi	r2,1
112028e4:	003fe706 	br	11202884 <__alt_data_end+0xffe82884>
112028e8:	000b883a 	mov	r5,zero
112028ec:	9009883a 	mov	r4,r18
112028f0:	12020c40 	call	112020c4 <_sbrk_r>
112028f4:	99000217 	ldw	r4,8(r19)
112028f8:	014003c4 	movi	r5,15
112028fc:	1107c83a 	sub	r3,r2,r4
11202900:	28ffdd0e 	bge	r5,r3,11202878 <__alt_data_end+0xffe82878>
11202904:	01444834 	movhi	r5,4384
11202908:	295c8f04 	addi	r5,r5,29244
1120290c:	29400017 	ldw	r5,0(r5)
11202910:	18c00054 	ori	r3,r3,1
11202914:	20c00115 	stw	r3,4(r4)
11202918:	00c44834 	movhi	r3,4384
1120291c:	1145c83a 	sub	r2,r2,r5
11202920:	18dca504 	addi	r3,r3,29332
11202924:	18800015 	stw	r2,0(r3)
11202928:	003fd306 	br	11202878 <__alt_data_end+0xffe82878>

1120292c <_free_r>:
1120292c:	28004126 	beq	r5,zero,11202a34 <_free_r+0x108>
11202930:	defffd04 	addi	sp,sp,-12
11202934:	dc400115 	stw	r17,4(sp)
11202938:	dc000015 	stw	r16,0(sp)
1120293c:	2023883a 	mov	r17,r4
11202940:	2821883a 	mov	r16,r5
11202944:	dfc00215 	stw	ra,8(sp)
11202948:	12035ac0 	call	112035ac <__malloc_lock>
1120294c:	81ffff17 	ldw	r7,-4(r16)
11202950:	00bfff84 	movi	r2,-2
11202954:	01044834 	movhi	r4,4384
11202958:	81bffe04 	addi	r6,r16,-8
1120295c:	3884703a 	and	r2,r7,r2
11202960:	21170904 	addi	r4,r4,23588
11202964:	308b883a 	add	r5,r6,r2
11202968:	2a400117 	ldw	r9,4(r5)
1120296c:	22000217 	ldw	r8,8(r4)
11202970:	00ffff04 	movi	r3,-4
11202974:	48c6703a 	and	r3,r9,r3
11202978:	2a005726 	beq	r5,r8,11202ad8 <_free_r+0x1ac>
1120297c:	28c00115 	stw	r3,4(r5)
11202980:	39c0004c 	andi	r7,r7,1
11202984:	3800091e 	bne	r7,zero,112029ac <_free_r+0x80>
11202988:	823ffe17 	ldw	r8,-8(r16)
1120298c:	22400204 	addi	r9,r4,8
11202990:	320dc83a 	sub	r6,r6,r8
11202994:	31c00217 	ldw	r7,8(r6)
11202998:	1205883a 	add	r2,r2,r8
1120299c:	3a406526 	beq	r7,r9,11202b34 <_free_r+0x208>
112029a0:	32000317 	ldw	r8,12(r6)
112029a4:	3a000315 	stw	r8,12(r7)
112029a8:	41c00215 	stw	r7,8(r8)
112029ac:	28cf883a 	add	r7,r5,r3
112029b0:	39c00117 	ldw	r7,4(r7)
112029b4:	39c0004c 	andi	r7,r7,1
112029b8:	38003a26 	beq	r7,zero,11202aa4 <_free_r+0x178>
112029bc:	10c00054 	ori	r3,r2,1
112029c0:	30c00115 	stw	r3,4(r6)
112029c4:	3087883a 	add	r3,r6,r2
112029c8:	18800015 	stw	r2,0(r3)
112029cc:	00c07fc4 	movi	r3,511
112029d0:	18801936 	bltu	r3,r2,11202a38 <_free_r+0x10c>
112029d4:	1004d0fa 	srli	r2,r2,3
112029d8:	01c00044 	movi	r7,1
112029dc:	21400117 	ldw	r5,4(r4)
112029e0:	10c00044 	addi	r3,r2,1
112029e4:	18c7883a 	add	r3,r3,r3
112029e8:	1005d0ba 	srai	r2,r2,2
112029ec:	18c7883a 	add	r3,r3,r3
112029f0:	18c7883a 	add	r3,r3,r3
112029f4:	1907883a 	add	r3,r3,r4
112029f8:	3884983a 	sll	r2,r7,r2
112029fc:	19c00017 	ldw	r7,0(r3)
11202a00:	1a3ffe04 	addi	r8,r3,-8
11202a04:	1144b03a 	or	r2,r2,r5
11202a08:	32000315 	stw	r8,12(r6)
11202a0c:	31c00215 	stw	r7,8(r6)
11202a10:	20800115 	stw	r2,4(r4)
11202a14:	19800015 	stw	r6,0(r3)
11202a18:	39800315 	stw	r6,12(r7)
11202a1c:	8809883a 	mov	r4,r17
11202a20:	dfc00217 	ldw	ra,8(sp)
11202a24:	dc400117 	ldw	r17,4(sp)
11202a28:	dc000017 	ldw	r16,0(sp)
11202a2c:	dec00304 	addi	sp,sp,12
11202a30:	12035d01 	jmpi	112035d0 <__malloc_unlock>
11202a34:	f800283a 	ret
11202a38:	100ad27a 	srli	r5,r2,9
11202a3c:	00c00104 	movi	r3,4
11202a40:	19404a36 	bltu	r3,r5,11202b6c <_free_r+0x240>
11202a44:	100ad1ba 	srli	r5,r2,6
11202a48:	28c00e44 	addi	r3,r5,57
11202a4c:	18c7883a 	add	r3,r3,r3
11202a50:	29400e04 	addi	r5,r5,56
11202a54:	18c7883a 	add	r3,r3,r3
11202a58:	18c7883a 	add	r3,r3,r3
11202a5c:	1909883a 	add	r4,r3,r4
11202a60:	20c00017 	ldw	r3,0(r4)
11202a64:	01c44834 	movhi	r7,4384
11202a68:	213ffe04 	addi	r4,r4,-8
11202a6c:	39d70904 	addi	r7,r7,23588
11202a70:	20c04426 	beq	r4,r3,11202b84 <_free_r+0x258>
11202a74:	01ffff04 	movi	r7,-4
11202a78:	19400117 	ldw	r5,4(r3)
11202a7c:	29ca703a 	and	r5,r5,r7
11202a80:	1140022e 	bgeu	r2,r5,11202a8c <_free_r+0x160>
11202a84:	18c00217 	ldw	r3,8(r3)
11202a88:	20fffb1e 	bne	r4,r3,11202a78 <__alt_data_end+0xffe82a78>
11202a8c:	19000317 	ldw	r4,12(r3)
11202a90:	31000315 	stw	r4,12(r6)
11202a94:	30c00215 	stw	r3,8(r6)
11202a98:	21800215 	stw	r6,8(r4)
11202a9c:	19800315 	stw	r6,12(r3)
11202aa0:	003fde06 	br	11202a1c <__alt_data_end+0xffe82a1c>
11202aa4:	29c00217 	ldw	r7,8(r5)
11202aa8:	10c5883a 	add	r2,r2,r3
11202aac:	00c44834 	movhi	r3,4384
11202ab0:	18d70b04 	addi	r3,r3,23596
11202ab4:	38c03b26 	beq	r7,r3,11202ba4 <_free_r+0x278>
11202ab8:	2a000317 	ldw	r8,12(r5)
11202abc:	11400054 	ori	r5,r2,1
11202ac0:	3087883a 	add	r3,r6,r2
11202ac4:	3a000315 	stw	r8,12(r7)
11202ac8:	41c00215 	stw	r7,8(r8)
11202acc:	31400115 	stw	r5,4(r6)
11202ad0:	18800015 	stw	r2,0(r3)
11202ad4:	003fbd06 	br	112029cc <__alt_data_end+0xffe829cc>
11202ad8:	39c0004c 	andi	r7,r7,1
11202adc:	10c5883a 	add	r2,r2,r3
11202ae0:	3800071e 	bne	r7,zero,11202b00 <_free_r+0x1d4>
11202ae4:	81fffe17 	ldw	r7,-8(r16)
11202ae8:	31cdc83a 	sub	r6,r6,r7
11202aec:	30c00317 	ldw	r3,12(r6)
11202af0:	31400217 	ldw	r5,8(r6)
11202af4:	11c5883a 	add	r2,r2,r7
11202af8:	28c00315 	stw	r3,12(r5)
11202afc:	19400215 	stw	r5,8(r3)
11202b00:	10c00054 	ori	r3,r2,1
11202b04:	30c00115 	stw	r3,4(r6)
11202b08:	00c44834 	movhi	r3,4384
11202b0c:	18dc9004 	addi	r3,r3,29248
11202b10:	18c00017 	ldw	r3,0(r3)
11202b14:	21800215 	stw	r6,8(r4)
11202b18:	10ffc036 	bltu	r2,r3,11202a1c <__alt_data_end+0xffe82a1c>
11202b1c:	00844834 	movhi	r2,4384
11202b20:	109c9d04 	addi	r2,r2,29300
11202b24:	11400017 	ldw	r5,0(r2)
11202b28:	8809883a 	mov	r4,r17
11202b2c:	12028080 	call	11202808 <_malloc_trim_r>
11202b30:	003fba06 	br	11202a1c <__alt_data_end+0xffe82a1c>
11202b34:	28c9883a 	add	r4,r5,r3
11202b38:	21000117 	ldw	r4,4(r4)
11202b3c:	2100004c 	andi	r4,r4,1
11202b40:	2000391e 	bne	r4,zero,11202c28 <_free_r+0x2fc>
11202b44:	29c00217 	ldw	r7,8(r5)
11202b48:	29000317 	ldw	r4,12(r5)
11202b4c:	1885883a 	add	r2,r3,r2
11202b50:	10c00054 	ori	r3,r2,1
11202b54:	39000315 	stw	r4,12(r7)
11202b58:	21c00215 	stw	r7,8(r4)
11202b5c:	30c00115 	stw	r3,4(r6)
11202b60:	308d883a 	add	r6,r6,r2
11202b64:	30800015 	stw	r2,0(r6)
11202b68:	003fac06 	br	11202a1c <__alt_data_end+0xffe82a1c>
11202b6c:	00c00504 	movi	r3,20
11202b70:	19401536 	bltu	r3,r5,11202bc8 <_free_r+0x29c>
11202b74:	28c01704 	addi	r3,r5,92
11202b78:	18c7883a 	add	r3,r3,r3
11202b7c:	294016c4 	addi	r5,r5,91
11202b80:	003fb406 	br	11202a54 <__alt_data_end+0xffe82a54>
11202b84:	280bd0ba 	srai	r5,r5,2
11202b88:	00c00044 	movi	r3,1
11202b8c:	38800117 	ldw	r2,4(r7)
11202b90:	194a983a 	sll	r5,r3,r5
11202b94:	2007883a 	mov	r3,r4
11202b98:	2884b03a 	or	r2,r5,r2
11202b9c:	38800115 	stw	r2,4(r7)
11202ba0:	003fbb06 	br	11202a90 <__alt_data_end+0xffe82a90>
11202ba4:	21800515 	stw	r6,20(r4)
11202ba8:	21800415 	stw	r6,16(r4)
11202bac:	10c00054 	ori	r3,r2,1
11202bb0:	31c00315 	stw	r7,12(r6)
11202bb4:	31c00215 	stw	r7,8(r6)
11202bb8:	30c00115 	stw	r3,4(r6)
11202bbc:	308d883a 	add	r6,r6,r2
11202bc0:	30800015 	stw	r2,0(r6)
11202bc4:	003f9506 	br	11202a1c <__alt_data_end+0xffe82a1c>
11202bc8:	00c01504 	movi	r3,84
11202bcc:	19400536 	bltu	r3,r5,11202be4 <_free_r+0x2b8>
11202bd0:	100ad33a 	srli	r5,r2,12
11202bd4:	28c01bc4 	addi	r3,r5,111
11202bd8:	18c7883a 	add	r3,r3,r3
11202bdc:	29401b84 	addi	r5,r5,110
11202be0:	003f9c06 	br	11202a54 <__alt_data_end+0xffe82a54>
11202be4:	00c05504 	movi	r3,340
11202be8:	19400536 	bltu	r3,r5,11202c00 <_free_r+0x2d4>
11202bec:	100ad3fa 	srli	r5,r2,15
11202bf0:	28c01e04 	addi	r3,r5,120
11202bf4:	18c7883a 	add	r3,r3,r3
11202bf8:	29401dc4 	addi	r5,r5,119
11202bfc:	003f9506 	br	11202a54 <__alt_data_end+0xffe82a54>
11202c00:	00c15504 	movi	r3,1364
11202c04:	19400536 	bltu	r3,r5,11202c1c <_free_r+0x2f0>
11202c08:	100ad4ba 	srli	r5,r2,18
11202c0c:	28c01f44 	addi	r3,r5,125
11202c10:	18c7883a 	add	r3,r3,r3
11202c14:	29401f04 	addi	r5,r5,124
11202c18:	003f8e06 	br	11202a54 <__alt_data_end+0xffe82a54>
11202c1c:	00c03f84 	movi	r3,254
11202c20:	01401f84 	movi	r5,126
11202c24:	003f8b06 	br	11202a54 <__alt_data_end+0xffe82a54>
11202c28:	10c00054 	ori	r3,r2,1
11202c2c:	30c00115 	stw	r3,4(r6)
11202c30:	308d883a 	add	r6,r6,r2
11202c34:	30800015 	stw	r2,0(r6)
11202c38:	003f7806 	br	11202a1c <__alt_data_end+0xffe82a1c>

11202c3c <_lseek_r>:
11202c3c:	defffd04 	addi	sp,sp,-12
11202c40:	2805883a 	mov	r2,r5
11202c44:	dc000015 	stw	r16,0(sp)
11202c48:	04044834 	movhi	r16,4384
11202c4c:	dc400115 	stw	r17,4(sp)
11202c50:	300b883a 	mov	r5,r6
11202c54:	841c9e04 	addi	r16,r16,29304
11202c58:	2023883a 	mov	r17,r4
11202c5c:	380d883a 	mov	r6,r7
11202c60:	1009883a 	mov	r4,r2
11202c64:	dfc00215 	stw	ra,8(sp)
11202c68:	80000015 	stw	zero,0(r16)
11202c6c:	120345c0 	call	1120345c <lseek>
11202c70:	00ffffc4 	movi	r3,-1
11202c74:	10c00526 	beq	r2,r3,11202c8c <_lseek_r+0x50>
11202c78:	dfc00217 	ldw	ra,8(sp)
11202c7c:	dc400117 	ldw	r17,4(sp)
11202c80:	dc000017 	ldw	r16,0(sp)
11202c84:	dec00304 	addi	sp,sp,12
11202c88:	f800283a 	ret
11202c8c:	80c00017 	ldw	r3,0(r16)
11202c90:	183ff926 	beq	r3,zero,11202c78 <__alt_data_end+0xffe82c78>
11202c94:	88c00015 	stw	r3,0(r17)
11202c98:	003ff706 	br	11202c78 <__alt_data_end+0xffe82c78>

11202c9c <__smakebuf_r>:
11202c9c:	2880030b 	ldhu	r2,12(r5)
11202ca0:	10c0008c 	andi	r3,r2,2
11202ca4:	1800411e 	bne	r3,zero,11202dac <__smakebuf_r+0x110>
11202ca8:	deffec04 	addi	sp,sp,-80
11202cac:	dc000f15 	stw	r16,60(sp)
11202cb0:	2821883a 	mov	r16,r5
11202cb4:	2940038f 	ldh	r5,14(r5)
11202cb8:	dc401015 	stw	r17,64(sp)
11202cbc:	dfc01315 	stw	ra,76(sp)
11202cc0:	dcc01215 	stw	r19,72(sp)
11202cc4:	dc801115 	stw	r18,68(sp)
11202cc8:	2023883a 	mov	r17,r4
11202ccc:	28001c16 	blt	r5,zero,11202d40 <__smakebuf_r+0xa4>
11202cd0:	d80d883a 	mov	r6,sp
11202cd4:	1202eb80 	call	11202eb8 <_fstat_r>
11202cd8:	10001816 	blt	r2,zero,11202d3c <__smakebuf_r+0xa0>
11202cdc:	d8800117 	ldw	r2,4(sp)
11202ce0:	00e00014 	movui	r3,32768
11202ce4:	10bc000c 	andi	r2,r2,61440
11202ce8:	14c80020 	cmpeqi	r19,r2,8192
11202cec:	10c03726 	beq	r2,r3,11202dcc <__smakebuf_r+0x130>
11202cf0:	80c0030b 	ldhu	r3,12(r16)
11202cf4:	18c20014 	ori	r3,r3,2048
11202cf8:	80c0030d 	sth	r3,12(r16)
11202cfc:	00c80004 	movi	r3,8192
11202d00:	10c0521e 	bne	r2,r3,11202e4c <__smakebuf_r+0x1b0>
11202d04:	8140038f 	ldh	r5,14(r16)
11202d08:	8809883a 	mov	r4,r17
11202d0c:	1202f140 	call	11202f14 <_isatty_r>
11202d10:	10004c26 	beq	r2,zero,11202e44 <__smakebuf_r+0x1a8>
11202d14:	8080030b 	ldhu	r2,12(r16)
11202d18:	80c010c4 	addi	r3,r16,67
11202d1c:	80c00015 	stw	r3,0(r16)
11202d20:	10800054 	ori	r2,r2,1
11202d24:	8080030d 	sth	r2,12(r16)
11202d28:	00800044 	movi	r2,1
11202d2c:	80c00415 	stw	r3,16(r16)
11202d30:	80800515 	stw	r2,20(r16)
11202d34:	04810004 	movi	r18,1024
11202d38:	00000706 	br	11202d58 <__smakebuf_r+0xbc>
11202d3c:	8080030b 	ldhu	r2,12(r16)
11202d40:	10c0200c 	andi	r3,r2,128
11202d44:	18001f1e 	bne	r3,zero,11202dc4 <__smakebuf_r+0x128>
11202d48:	04810004 	movi	r18,1024
11202d4c:	10820014 	ori	r2,r2,2048
11202d50:	8080030d 	sth	r2,12(r16)
11202d54:	0027883a 	mov	r19,zero
11202d58:	900b883a 	mov	r5,r18
11202d5c:	8809883a 	mov	r4,r17
11202d60:	1200ea40 	call	11200ea4 <_malloc_r>
11202d64:	10002c26 	beq	r2,zero,11202e18 <__smakebuf_r+0x17c>
11202d68:	80c0030b 	ldhu	r3,12(r16)
11202d6c:	01044834 	movhi	r4,4384
11202d70:	21013204 	addi	r4,r4,1224
11202d74:	89000f15 	stw	r4,60(r17)
11202d78:	18c02014 	ori	r3,r3,128
11202d7c:	80c0030d 	sth	r3,12(r16)
11202d80:	80800015 	stw	r2,0(r16)
11202d84:	80800415 	stw	r2,16(r16)
11202d88:	84800515 	stw	r18,20(r16)
11202d8c:	98001a1e 	bne	r19,zero,11202df8 <__smakebuf_r+0x15c>
11202d90:	dfc01317 	ldw	ra,76(sp)
11202d94:	dcc01217 	ldw	r19,72(sp)
11202d98:	dc801117 	ldw	r18,68(sp)
11202d9c:	dc401017 	ldw	r17,64(sp)
11202da0:	dc000f17 	ldw	r16,60(sp)
11202da4:	dec01404 	addi	sp,sp,80
11202da8:	f800283a 	ret
11202dac:	288010c4 	addi	r2,r5,67
11202db0:	28800015 	stw	r2,0(r5)
11202db4:	28800415 	stw	r2,16(r5)
11202db8:	00800044 	movi	r2,1
11202dbc:	28800515 	stw	r2,20(r5)
11202dc0:	f800283a 	ret
11202dc4:	04801004 	movi	r18,64
11202dc8:	003fe006 	br	11202d4c <__alt_data_end+0xffe82d4c>
11202dcc:	81000a17 	ldw	r4,40(r16)
11202dd0:	00c44834 	movhi	r3,4384
11202dd4:	18c87c04 	addi	r3,r3,8688
11202dd8:	20ffc51e 	bne	r4,r3,11202cf0 <__alt_data_end+0xffe82cf0>
11202ddc:	8080030b 	ldhu	r2,12(r16)
11202de0:	04810004 	movi	r18,1024
11202de4:	84801315 	stw	r18,76(r16)
11202de8:	1484b03a 	or	r2,r2,r18
11202dec:	8080030d 	sth	r2,12(r16)
11202df0:	0027883a 	mov	r19,zero
11202df4:	003fd806 	br	11202d58 <__alt_data_end+0xffe82d58>
11202df8:	8140038f 	ldh	r5,14(r16)
11202dfc:	8809883a 	mov	r4,r17
11202e00:	1202f140 	call	11202f14 <_isatty_r>
11202e04:	103fe226 	beq	r2,zero,11202d90 <__alt_data_end+0xffe82d90>
11202e08:	8080030b 	ldhu	r2,12(r16)
11202e0c:	10800054 	ori	r2,r2,1
11202e10:	8080030d 	sth	r2,12(r16)
11202e14:	003fde06 	br	11202d90 <__alt_data_end+0xffe82d90>
11202e18:	8080030b 	ldhu	r2,12(r16)
11202e1c:	10c0800c 	andi	r3,r2,512
11202e20:	183fdb1e 	bne	r3,zero,11202d90 <__alt_data_end+0xffe82d90>
11202e24:	10800094 	ori	r2,r2,2
11202e28:	80c010c4 	addi	r3,r16,67
11202e2c:	8080030d 	sth	r2,12(r16)
11202e30:	00800044 	movi	r2,1
11202e34:	80c00015 	stw	r3,0(r16)
11202e38:	80c00415 	stw	r3,16(r16)
11202e3c:	80800515 	stw	r2,20(r16)
11202e40:	003fd306 	br	11202d90 <__alt_data_end+0xffe82d90>
11202e44:	04810004 	movi	r18,1024
11202e48:	003fc306 	br	11202d58 <__alt_data_end+0xffe82d58>
11202e4c:	0027883a 	mov	r19,zero
11202e50:	04810004 	movi	r18,1024
11202e54:	003fc006 	br	11202d58 <__alt_data_end+0xffe82d58>

11202e58 <_read_r>:
11202e58:	defffd04 	addi	sp,sp,-12
11202e5c:	2805883a 	mov	r2,r5
11202e60:	dc000015 	stw	r16,0(sp)
11202e64:	04044834 	movhi	r16,4384
11202e68:	dc400115 	stw	r17,4(sp)
11202e6c:	300b883a 	mov	r5,r6
11202e70:	841c9e04 	addi	r16,r16,29304
11202e74:	2023883a 	mov	r17,r4
11202e78:	380d883a 	mov	r6,r7
11202e7c:	1009883a 	mov	r4,r2
11202e80:	dfc00215 	stw	ra,8(sp)
11202e84:	80000015 	stw	zero,0(r16)
11202e88:	12036300 	call	11203630 <read>
11202e8c:	00ffffc4 	movi	r3,-1
11202e90:	10c00526 	beq	r2,r3,11202ea8 <_read_r+0x50>
11202e94:	dfc00217 	ldw	ra,8(sp)
11202e98:	dc400117 	ldw	r17,4(sp)
11202e9c:	dc000017 	ldw	r16,0(sp)
11202ea0:	dec00304 	addi	sp,sp,12
11202ea4:	f800283a 	ret
11202ea8:	80c00017 	ldw	r3,0(r16)
11202eac:	183ff926 	beq	r3,zero,11202e94 <__alt_data_end+0xffe82e94>
11202eb0:	88c00015 	stw	r3,0(r17)
11202eb4:	003ff706 	br	11202e94 <__alt_data_end+0xffe82e94>

11202eb8 <_fstat_r>:
11202eb8:	defffd04 	addi	sp,sp,-12
11202ebc:	2805883a 	mov	r2,r5
11202ec0:	dc000015 	stw	r16,0(sp)
11202ec4:	04044834 	movhi	r16,4384
11202ec8:	dc400115 	stw	r17,4(sp)
11202ecc:	841c9e04 	addi	r16,r16,29304
11202ed0:	2023883a 	mov	r17,r4
11202ed4:	300b883a 	mov	r5,r6
11202ed8:	1009883a 	mov	r4,r2
11202edc:	dfc00215 	stw	ra,8(sp)
11202ee0:	80000015 	stw	zero,0(r16)
11202ee4:	12032900 	call	11203290 <fstat>
11202ee8:	00ffffc4 	movi	r3,-1
11202eec:	10c00526 	beq	r2,r3,11202f04 <_fstat_r+0x4c>
11202ef0:	dfc00217 	ldw	ra,8(sp)
11202ef4:	dc400117 	ldw	r17,4(sp)
11202ef8:	dc000017 	ldw	r16,0(sp)
11202efc:	dec00304 	addi	sp,sp,12
11202f00:	f800283a 	ret
11202f04:	80c00017 	ldw	r3,0(r16)
11202f08:	183ff926 	beq	r3,zero,11202ef0 <__alt_data_end+0xffe82ef0>
11202f0c:	88c00015 	stw	r3,0(r17)
11202f10:	003ff706 	br	11202ef0 <__alt_data_end+0xffe82ef0>

11202f14 <_isatty_r>:
11202f14:	defffd04 	addi	sp,sp,-12
11202f18:	dc000015 	stw	r16,0(sp)
11202f1c:	04044834 	movhi	r16,4384
11202f20:	dc400115 	stw	r17,4(sp)
11202f24:	841c9e04 	addi	r16,r16,29304
11202f28:	2023883a 	mov	r17,r4
11202f2c:	2809883a 	mov	r4,r5
11202f30:	dfc00215 	stw	ra,8(sp)
11202f34:	80000015 	stw	zero,0(r16)
11202f38:	120337c0 	call	1120337c <isatty>
11202f3c:	00ffffc4 	movi	r3,-1
11202f40:	10c00526 	beq	r2,r3,11202f58 <_isatty_r+0x44>
11202f44:	dfc00217 	ldw	ra,8(sp)
11202f48:	dc400117 	ldw	r17,4(sp)
11202f4c:	dc000017 	ldw	r16,0(sp)
11202f50:	dec00304 	addi	sp,sp,12
11202f54:	f800283a 	ret
11202f58:	80c00017 	ldw	r3,0(r16)
11202f5c:	183ff926 	beq	r3,zero,11202f44 <__alt_data_end+0xffe82f44>
11202f60:	88c00015 	stw	r3,0(r17)
11202f64:	003ff706 	br	11202f44 <__alt_data_end+0xffe82f44>

11202f68 <__divsi3>:
11202f68:	20001b16 	blt	r4,zero,11202fd8 <__divsi3+0x70>
11202f6c:	000f883a 	mov	r7,zero
11202f70:	28001616 	blt	r5,zero,11202fcc <__divsi3+0x64>
11202f74:	200d883a 	mov	r6,r4
11202f78:	29001a2e 	bgeu	r5,r4,11202fe4 <__divsi3+0x7c>
11202f7c:	00800804 	movi	r2,32
11202f80:	00c00044 	movi	r3,1
11202f84:	00000106 	br	11202f8c <__divsi3+0x24>
11202f88:	10000d26 	beq	r2,zero,11202fc0 <__divsi3+0x58>
11202f8c:	294b883a 	add	r5,r5,r5
11202f90:	10bfffc4 	addi	r2,r2,-1
11202f94:	18c7883a 	add	r3,r3,r3
11202f98:	293ffb36 	bltu	r5,r4,11202f88 <__alt_data_end+0xffe82f88>
11202f9c:	0005883a 	mov	r2,zero
11202fa0:	18000726 	beq	r3,zero,11202fc0 <__divsi3+0x58>
11202fa4:	0005883a 	mov	r2,zero
11202fa8:	31400236 	bltu	r6,r5,11202fb4 <__divsi3+0x4c>
11202fac:	314dc83a 	sub	r6,r6,r5
11202fb0:	10c4b03a 	or	r2,r2,r3
11202fb4:	1806d07a 	srli	r3,r3,1
11202fb8:	280ad07a 	srli	r5,r5,1
11202fbc:	183ffa1e 	bne	r3,zero,11202fa8 <__alt_data_end+0xffe82fa8>
11202fc0:	38000126 	beq	r7,zero,11202fc8 <__divsi3+0x60>
11202fc4:	0085c83a 	sub	r2,zero,r2
11202fc8:	f800283a 	ret
11202fcc:	014bc83a 	sub	r5,zero,r5
11202fd0:	39c0005c 	xori	r7,r7,1
11202fd4:	003fe706 	br	11202f74 <__alt_data_end+0xffe82f74>
11202fd8:	0109c83a 	sub	r4,zero,r4
11202fdc:	01c00044 	movi	r7,1
11202fe0:	003fe306 	br	11202f70 <__alt_data_end+0xffe82f70>
11202fe4:	00c00044 	movi	r3,1
11202fe8:	003fee06 	br	11202fa4 <__alt_data_end+0xffe82fa4>

11202fec <__modsi3>:
11202fec:	20001716 	blt	r4,zero,1120304c <__modsi3+0x60>
11202ff0:	000f883a 	mov	r7,zero
11202ff4:	2005883a 	mov	r2,r4
11202ff8:	28001216 	blt	r5,zero,11203044 <__modsi3+0x58>
11202ffc:	2900162e 	bgeu	r5,r4,11203058 <__modsi3+0x6c>
11203000:	01800804 	movi	r6,32
11203004:	00c00044 	movi	r3,1
11203008:	00000106 	br	11203010 <__modsi3+0x24>
1120300c:	30000a26 	beq	r6,zero,11203038 <__modsi3+0x4c>
11203010:	294b883a 	add	r5,r5,r5
11203014:	31bfffc4 	addi	r6,r6,-1
11203018:	18c7883a 	add	r3,r3,r3
1120301c:	293ffb36 	bltu	r5,r4,1120300c <__alt_data_end+0xffe8300c>
11203020:	18000526 	beq	r3,zero,11203038 <__modsi3+0x4c>
11203024:	1806d07a 	srli	r3,r3,1
11203028:	11400136 	bltu	r2,r5,11203030 <__modsi3+0x44>
1120302c:	1145c83a 	sub	r2,r2,r5
11203030:	280ad07a 	srli	r5,r5,1
11203034:	183ffb1e 	bne	r3,zero,11203024 <__alt_data_end+0xffe83024>
11203038:	38000126 	beq	r7,zero,11203040 <__modsi3+0x54>
1120303c:	0085c83a 	sub	r2,zero,r2
11203040:	f800283a 	ret
11203044:	014bc83a 	sub	r5,zero,r5
11203048:	003fec06 	br	11202ffc <__alt_data_end+0xffe82ffc>
1120304c:	0109c83a 	sub	r4,zero,r4
11203050:	01c00044 	movi	r7,1
11203054:	003fe706 	br	11202ff4 <__alt_data_end+0xffe82ff4>
11203058:	00c00044 	movi	r3,1
1120305c:	003ff106 	br	11203024 <__alt_data_end+0xffe83024>

11203060 <__udivsi3>:
11203060:	200d883a 	mov	r6,r4
11203064:	2900152e 	bgeu	r5,r4,112030bc <__udivsi3+0x5c>
11203068:	28001416 	blt	r5,zero,112030bc <__udivsi3+0x5c>
1120306c:	00800804 	movi	r2,32
11203070:	00c00044 	movi	r3,1
11203074:	00000206 	br	11203080 <__udivsi3+0x20>
11203078:	10000e26 	beq	r2,zero,112030b4 <__udivsi3+0x54>
1120307c:	28000516 	blt	r5,zero,11203094 <__udivsi3+0x34>
11203080:	294b883a 	add	r5,r5,r5
11203084:	10bfffc4 	addi	r2,r2,-1
11203088:	18c7883a 	add	r3,r3,r3
1120308c:	293ffa36 	bltu	r5,r4,11203078 <__alt_data_end+0xffe83078>
11203090:	18000826 	beq	r3,zero,112030b4 <__udivsi3+0x54>
11203094:	0005883a 	mov	r2,zero
11203098:	31400236 	bltu	r6,r5,112030a4 <__udivsi3+0x44>
1120309c:	314dc83a 	sub	r6,r6,r5
112030a0:	10c4b03a 	or	r2,r2,r3
112030a4:	1806d07a 	srli	r3,r3,1
112030a8:	280ad07a 	srli	r5,r5,1
112030ac:	183ffa1e 	bne	r3,zero,11203098 <__alt_data_end+0xffe83098>
112030b0:	f800283a 	ret
112030b4:	0005883a 	mov	r2,zero
112030b8:	f800283a 	ret
112030bc:	00c00044 	movi	r3,1
112030c0:	003ff406 	br	11203094 <__alt_data_end+0xffe83094>

112030c4 <__umodsi3>:
112030c4:	2005883a 	mov	r2,r4
112030c8:	2900122e 	bgeu	r5,r4,11203114 <__umodsi3+0x50>
112030cc:	28001116 	blt	r5,zero,11203114 <__umodsi3+0x50>
112030d0:	01800804 	movi	r6,32
112030d4:	00c00044 	movi	r3,1
112030d8:	00000206 	br	112030e4 <__umodsi3+0x20>
112030dc:	30000c26 	beq	r6,zero,11203110 <__umodsi3+0x4c>
112030e0:	28000516 	blt	r5,zero,112030f8 <__umodsi3+0x34>
112030e4:	294b883a 	add	r5,r5,r5
112030e8:	31bfffc4 	addi	r6,r6,-1
112030ec:	18c7883a 	add	r3,r3,r3
112030f0:	293ffa36 	bltu	r5,r4,112030dc <__alt_data_end+0xffe830dc>
112030f4:	18000626 	beq	r3,zero,11203110 <__umodsi3+0x4c>
112030f8:	1806d07a 	srli	r3,r3,1
112030fc:	11400136 	bltu	r2,r5,11203104 <__umodsi3+0x40>
11203100:	1145c83a 	sub	r2,r2,r5
11203104:	280ad07a 	srli	r5,r5,1
11203108:	183ffb1e 	bne	r3,zero,112030f8 <__alt_data_end+0xffe830f8>
1120310c:	f800283a 	ret
11203110:	f800283a 	ret
11203114:	00c00044 	movi	r3,1
11203118:	003ff706 	br	112030f8 <__alt_data_end+0xffe830f8>

1120311c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1120311c:	defffe04 	addi	sp,sp,-8
11203120:	dfc00115 	stw	ra,4(sp)
11203124:	df000015 	stw	fp,0(sp)
11203128:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1120312c:	d0a00917 	ldw	r2,-32732(gp)
11203130:	10000326 	beq	r2,zero,11203140 <alt_get_errno+0x24>
11203134:	d0a00917 	ldw	r2,-32732(gp)
11203138:	103ee83a 	callr	r2
1120313c:	00000106 	br	11203144 <alt_get_errno+0x28>
11203140:	d0a01104 	addi	r2,gp,-32700
}
11203144:	e037883a 	mov	sp,fp
11203148:	dfc00117 	ldw	ra,4(sp)
1120314c:	df000017 	ldw	fp,0(sp)
11203150:	dec00204 	addi	sp,sp,8
11203154:	f800283a 	ret

11203158 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
11203158:	defffb04 	addi	sp,sp,-20
1120315c:	dfc00415 	stw	ra,16(sp)
11203160:	df000315 	stw	fp,12(sp)
11203164:	df000304 	addi	fp,sp,12
11203168:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1120316c:	e0bfff17 	ldw	r2,-4(fp)
11203170:	10000616 	blt	r2,zero,1120318c <close+0x34>
11203174:	e0bfff17 	ldw	r2,-4(fp)
11203178:	10c00324 	muli	r3,r2,12
1120317c:	00844834 	movhi	r2,4384
11203180:	10981504 	addi	r2,r2,24660
11203184:	1885883a 	add	r2,r3,r2
11203188:	00000106 	br	11203190 <close+0x38>
1120318c:	0005883a 	mov	r2,zero
11203190:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
11203194:	e0bffd17 	ldw	r2,-12(fp)
11203198:	10001926 	beq	r2,zero,11203200 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1120319c:	e0bffd17 	ldw	r2,-12(fp)
112031a0:	10800017 	ldw	r2,0(r2)
112031a4:	10800417 	ldw	r2,16(r2)
112031a8:	10000626 	beq	r2,zero,112031c4 <close+0x6c>
112031ac:	e0bffd17 	ldw	r2,-12(fp)
112031b0:	10800017 	ldw	r2,0(r2)
112031b4:	10800417 	ldw	r2,16(r2)
112031b8:	e13ffd17 	ldw	r4,-12(fp)
112031bc:	103ee83a 	callr	r2
112031c0:	00000106 	br	112031c8 <close+0x70>
112031c4:	0005883a 	mov	r2,zero
112031c8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
112031cc:	e13fff17 	ldw	r4,-4(fp)
112031d0:	120372c0 	call	1120372c <alt_release_fd>
    if (rval < 0)
112031d4:	e0bffe17 	ldw	r2,-8(fp)
112031d8:	1000070e 	bge	r2,zero,112031f8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
112031dc:	120311c0 	call	1120311c <alt_get_errno>
112031e0:	1007883a 	mov	r3,r2
112031e4:	e0bffe17 	ldw	r2,-8(fp)
112031e8:	0085c83a 	sub	r2,zero,r2
112031ec:	18800015 	stw	r2,0(r3)
      return -1;
112031f0:	00bfffc4 	movi	r2,-1
112031f4:	00000706 	br	11203214 <close+0xbc>
    }
    return 0;
112031f8:	0005883a 	mov	r2,zero
112031fc:	00000506 	br	11203214 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
11203200:	120311c0 	call	1120311c <alt_get_errno>
11203204:	1007883a 	mov	r3,r2
11203208:	00801444 	movi	r2,81
1120320c:	18800015 	stw	r2,0(r3)
    return -1;
11203210:	00bfffc4 	movi	r2,-1
  }
}
11203214:	e037883a 	mov	sp,fp
11203218:	dfc00117 	ldw	ra,4(sp)
1120321c:	df000017 	ldw	fp,0(sp)
11203220:	dec00204 	addi	sp,sp,8
11203224:	f800283a 	ret

11203228 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
11203228:	defffc04 	addi	sp,sp,-16
1120322c:	df000315 	stw	fp,12(sp)
11203230:	df000304 	addi	fp,sp,12
11203234:	e13ffd15 	stw	r4,-12(fp)
11203238:	e17ffe15 	stw	r5,-8(fp)
1120323c:	e1bfff15 	stw	r6,-4(fp)
  return len;
11203240:	e0bfff17 	ldw	r2,-4(fp)
}
11203244:	e037883a 	mov	sp,fp
11203248:	df000017 	ldw	fp,0(sp)
1120324c:	dec00104 	addi	sp,sp,4
11203250:	f800283a 	ret

11203254 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
11203254:	defffe04 	addi	sp,sp,-8
11203258:	dfc00115 	stw	ra,4(sp)
1120325c:	df000015 	stw	fp,0(sp)
11203260:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
11203264:	d0a00917 	ldw	r2,-32732(gp)
11203268:	10000326 	beq	r2,zero,11203278 <alt_get_errno+0x24>
1120326c:	d0a00917 	ldw	r2,-32732(gp)
11203270:	103ee83a 	callr	r2
11203274:	00000106 	br	1120327c <alt_get_errno+0x28>
11203278:	d0a01104 	addi	r2,gp,-32700
}
1120327c:	e037883a 	mov	sp,fp
11203280:	dfc00117 	ldw	ra,4(sp)
11203284:	df000017 	ldw	fp,0(sp)
11203288:	dec00204 	addi	sp,sp,8
1120328c:	f800283a 	ret

11203290 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
11203290:	defffb04 	addi	sp,sp,-20
11203294:	dfc00415 	stw	ra,16(sp)
11203298:	df000315 	stw	fp,12(sp)
1120329c:	df000304 	addi	fp,sp,12
112032a0:	e13ffe15 	stw	r4,-8(fp)
112032a4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
112032a8:	e0bffe17 	ldw	r2,-8(fp)
112032ac:	10000616 	blt	r2,zero,112032c8 <fstat+0x38>
112032b0:	e0bffe17 	ldw	r2,-8(fp)
112032b4:	10c00324 	muli	r3,r2,12
112032b8:	00844834 	movhi	r2,4384
112032bc:	10981504 	addi	r2,r2,24660
112032c0:	1885883a 	add	r2,r3,r2
112032c4:	00000106 	br	112032cc <fstat+0x3c>
112032c8:	0005883a 	mov	r2,zero
112032cc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
112032d0:	e0bffd17 	ldw	r2,-12(fp)
112032d4:	10001026 	beq	r2,zero,11203318 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
112032d8:	e0bffd17 	ldw	r2,-12(fp)
112032dc:	10800017 	ldw	r2,0(r2)
112032e0:	10800817 	ldw	r2,32(r2)
112032e4:	10000726 	beq	r2,zero,11203304 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
112032e8:	e0bffd17 	ldw	r2,-12(fp)
112032ec:	10800017 	ldw	r2,0(r2)
112032f0:	10800817 	ldw	r2,32(r2)
112032f4:	e17fff17 	ldw	r5,-4(fp)
112032f8:	e13ffd17 	ldw	r4,-12(fp)
112032fc:	103ee83a 	callr	r2
11203300:	00000a06 	br	1120332c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
11203304:	e0bfff17 	ldw	r2,-4(fp)
11203308:	00c80004 	movi	r3,8192
1120330c:	10c00115 	stw	r3,4(r2)
      return 0;
11203310:	0005883a 	mov	r2,zero
11203314:	00000506 	br	1120332c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
11203318:	12032540 	call	11203254 <alt_get_errno>
1120331c:	1007883a 	mov	r3,r2
11203320:	00801444 	movi	r2,81
11203324:	18800015 	stw	r2,0(r3)
    return -1;
11203328:	00bfffc4 	movi	r2,-1
  }
}
1120332c:	e037883a 	mov	sp,fp
11203330:	dfc00117 	ldw	ra,4(sp)
11203334:	df000017 	ldw	fp,0(sp)
11203338:	dec00204 	addi	sp,sp,8
1120333c:	f800283a 	ret

11203340 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
11203340:	defffe04 	addi	sp,sp,-8
11203344:	dfc00115 	stw	ra,4(sp)
11203348:	df000015 	stw	fp,0(sp)
1120334c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
11203350:	d0a00917 	ldw	r2,-32732(gp)
11203354:	10000326 	beq	r2,zero,11203364 <alt_get_errno+0x24>
11203358:	d0a00917 	ldw	r2,-32732(gp)
1120335c:	103ee83a 	callr	r2
11203360:	00000106 	br	11203368 <alt_get_errno+0x28>
11203364:	d0a01104 	addi	r2,gp,-32700
}
11203368:	e037883a 	mov	sp,fp
1120336c:	dfc00117 	ldw	ra,4(sp)
11203370:	df000017 	ldw	fp,0(sp)
11203374:	dec00204 	addi	sp,sp,8
11203378:	f800283a 	ret

1120337c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1120337c:	deffed04 	addi	sp,sp,-76
11203380:	dfc01215 	stw	ra,72(sp)
11203384:	df001115 	stw	fp,68(sp)
11203388:	df001104 	addi	fp,sp,68
1120338c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
11203390:	e0bfff17 	ldw	r2,-4(fp)
11203394:	10000616 	blt	r2,zero,112033b0 <isatty+0x34>
11203398:	e0bfff17 	ldw	r2,-4(fp)
1120339c:	10c00324 	muli	r3,r2,12
112033a0:	00844834 	movhi	r2,4384
112033a4:	10981504 	addi	r2,r2,24660
112033a8:	1885883a 	add	r2,r3,r2
112033ac:	00000106 	br	112033b4 <isatty+0x38>
112033b0:	0005883a 	mov	r2,zero
112033b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
112033b8:	e0bfef17 	ldw	r2,-68(fp)
112033bc:	10000e26 	beq	r2,zero,112033f8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
112033c0:	e0bfef17 	ldw	r2,-68(fp)
112033c4:	10800017 	ldw	r2,0(r2)
112033c8:	10800817 	ldw	r2,32(r2)
112033cc:	1000021e 	bne	r2,zero,112033d8 <isatty+0x5c>
    {
      return 1;
112033d0:	00800044 	movi	r2,1
112033d4:	00000d06 	br	1120340c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
112033d8:	e0bff004 	addi	r2,fp,-64
112033dc:	100b883a 	mov	r5,r2
112033e0:	e13fff17 	ldw	r4,-4(fp)
112033e4:	12032900 	call	11203290 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
112033e8:	e0bff117 	ldw	r2,-60(fp)
112033ec:	10880020 	cmpeqi	r2,r2,8192
112033f0:	10803fcc 	andi	r2,r2,255
112033f4:	00000506 	br	1120340c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
112033f8:	12033400 	call	11203340 <alt_get_errno>
112033fc:	1007883a 	mov	r3,r2
11203400:	00801444 	movi	r2,81
11203404:	18800015 	stw	r2,0(r3)
    return 0;
11203408:	0005883a 	mov	r2,zero
  }
}
1120340c:	e037883a 	mov	sp,fp
11203410:	dfc00117 	ldw	ra,4(sp)
11203414:	df000017 	ldw	fp,0(sp)
11203418:	dec00204 	addi	sp,sp,8
1120341c:	f800283a 	ret

11203420 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
11203420:	defffe04 	addi	sp,sp,-8
11203424:	dfc00115 	stw	ra,4(sp)
11203428:	df000015 	stw	fp,0(sp)
1120342c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
11203430:	d0a00917 	ldw	r2,-32732(gp)
11203434:	10000326 	beq	r2,zero,11203444 <alt_get_errno+0x24>
11203438:	d0a00917 	ldw	r2,-32732(gp)
1120343c:	103ee83a 	callr	r2
11203440:	00000106 	br	11203448 <alt_get_errno+0x28>
11203444:	d0a01104 	addi	r2,gp,-32700
}
11203448:	e037883a 	mov	sp,fp
1120344c:	dfc00117 	ldw	ra,4(sp)
11203450:	df000017 	ldw	fp,0(sp)
11203454:	dec00204 	addi	sp,sp,8
11203458:	f800283a 	ret

1120345c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1120345c:	defff904 	addi	sp,sp,-28
11203460:	dfc00615 	stw	ra,24(sp)
11203464:	df000515 	stw	fp,20(sp)
11203468:	df000504 	addi	fp,sp,20
1120346c:	e13ffd15 	stw	r4,-12(fp)
11203470:	e17ffe15 	stw	r5,-8(fp)
11203474:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
11203478:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1120347c:	e0bffd17 	ldw	r2,-12(fp)
11203480:	10000616 	blt	r2,zero,1120349c <lseek+0x40>
11203484:	e0bffd17 	ldw	r2,-12(fp)
11203488:	10c00324 	muli	r3,r2,12
1120348c:	00844834 	movhi	r2,4384
11203490:	10981504 	addi	r2,r2,24660
11203494:	1885883a 	add	r2,r3,r2
11203498:	00000106 	br	112034a0 <lseek+0x44>
1120349c:	0005883a 	mov	r2,zero
112034a0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
112034a4:	e0bffc17 	ldw	r2,-16(fp)
112034a8:	10001026 	beq	r2,zero,112034ec <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
112034ac:	e0bffc17 	ldw	r2,-16(fp)
112034b0:	10800017 	ldw	r2,0(r2)
112034b4:	10800717 	ldw	r2,28(r2)
112034b8:	10000926 	beq	r2,zero,112034e0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
112034bc:	e0bffc17 	ldw	r2,-16(fp)
112034c0:	10800017 	ldw	r2,0(r2)
112034c4:	10800717 	ldw	r2,28(r2)
112034c8:	e1bfff17 	ldw	r6,-4(fp)
112034cc:	e17ffe17 	ldw	r5,-8(fp)
112034d0:	e13ffc17 	ldw	r4,-16(fp)
112034d4:	103ee83a 	callr	r2
112034d8:	e0bffb15 	stw	r2,-20(fp)
112034dc:	00000506 	br	112034f4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
112034e0:	00bfde84 	movi	r2,-134
112034e4:	e0bffb15 	stw	r2,-20(fp)
112034e8:	00000206 	br	112034f4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
112034ec:	00bfebc4 	movi	r2,-81
112034f0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
112034f4:	e0bffb17 	ldw	r2,-20(fp)
112034f8:	1000070e 	bge	r2,zero,11203518 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
112034fc:	12034200 	call	11203420 <alt_get_errno>
11203500:	1007883a 	mov	r3,r2
11203504:	e0bffb17 	ldw	r2,-20(fp)
11203508:	0085c83a 	sub	r2,zero,r2
1120350c:	18800015 	stw	r2,0(r3)
    rc = -1;
11203510:	00bfffc4 	movi	r2,-1
11203514:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
11203518:	e0bffb17 	ldw	r2,-20(fp)
}
1120351c:	e037883a 	mov	sp,fp
11203520:	dfc00117 	ldw	ra,4(sp)
11203524:	df000017 	ldw	fp,0(sp)
11203528:	dec00204 	addi	sp,sp,8
1120352c:	f800283a 	ret

11203530 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
11203530:	defffd04 	addi	sp,sp,-12
11203534:	dfc00215 	stw	ra,8(sp)
11203538:	df000115 	stw	fp,4(sp)
1120353c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
11203540:	0009883a 	mov	r4,zero
11203544:	12039d80 	call	112039d8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
11203548:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1120354c:	1203a100 	call	11203a10 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
11203550:	01844834 	movhi	r6,4384
11203554:	3195f804 	addi	r6,r6,22496
11203558:	01444834 	movhi	r5,4384
1120355c:	2955f804 	addi	r5,r5,22496
11203560:	01044834 	movhi	r4,4384
11203564:	2115f804 	addi	r4,r4,22496
11203568:	1204d540 	call	11204d54 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1120356c:	12049300 	call	11204930 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
11203570:	01044834 	movhi	r4,4384
11203574:	21126404 	addi	r4,r4,18832
11203578:	12054280 	call	11205428 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1120357c:	d0a01217 	ldw	r2,-32696(gp)
11203580:	d0e01317 	ldw	r3,-32692(gp)
11203584:	d1201417 	ldw	r4,-32688(gp)
11203588:	200d883a 	mov	r6,r4
1120358c:	180b883a 	mov	r5,r3
11203590:	1009883a 	mov	r4,r2
11203594:	12003080 	call	11200308 <main>
11203598:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1120359c:	01000044 	movi	r4,1
112035a0:	12031580 	call	11203158 <close>
  exit (result);
112035a4:	e13fff17 	ldw	r4,-4(fp)
112035a8:	120543c0 	call	1120543c <exit>

112035ac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
112035ac:	defffe04 	addi	sp,sp,-8
112035b0:	df000115 	stw	fp,4(sp)
112035b4:	df000104 	addi	fp,sp,4
112035b8:	e13fff15 	stw	r4,-4(fp)
}
112035bc:	0001883a 	nop
112035c0:	e037883a 	mov	sp,fp
112035c4:	df000017 	ldw	fp,0(sp)
112035c8:	dec00104 	addi	sp,sp,4
112035cc:	f800283a 	ret

112035d0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
112035d0:	defffe04 	addi	sp,sp,-8
112035d4:	df000115 	stw	fp,4(sp)
112035d8:	df000104 	addi	fp,sp,4
112035dc:	e13fff15 	stw	r4,-4(fp)
}
112035e0:	0001883a 	nop
112035e4:	e037883a 	mov	sp,fp
112035e8:	df000017 	ldw	fp,0(sp)
112035ec:	dec00104 	addi	sp,sp,4
112035f0:	f800283a 	ret

112035f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
112035f4:	defffe04 	addi	sp,sp,-8
112035f8:	dfc00115 	stw	ra,4(sp)
112035fc:	df000015 	stw	fp,0(sp)
11203600:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
11203604:	d0a00917 	ldw	r2,-32732(gp)
11203608:	10000326 	beq	r2,zero,11203618 <alt_get_errno+0x24>
1120360c:	d0a00917 	ldw	r2,-32732(gp)
11203610:	103ee83a 	callr	r2
11203614:	00000106 	br	1120361c <alt_get_errno+0x28>
11203618:	d0a01104 	addi	r2,gp,-32700
}
1120361c:	e037883a 	mov	sp,fp
11203620:	dfc00117 	ldw	ra,4(sp)
11203624:	df000017 	ldw	fp,0(sp)
11203628:	dec00204 	addi	sp,sp,8
1120362c:	f800283a 	ret

11203630 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
11203630:	defff904 	addi	sp,sp,-28
11203634:	dfc00615 	stw	ra,24(sp)
11203638:	df000515 	stw	fp,20(sp)
1120363c:	df000504 	addi	fp,sp,20
11203640:	e13ffd15 	stw	r4,-12(fp)
11203644:	e17ffe15 	stw	r5,-8(fp)
11203648:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1120364c:	e0bffd17 	ldw	r2,-12(fp)
11203650:	10000616 	blt	r2,zero,1120366c <read+0x3c>
11203654:	e0bffd17 	ldw	r2,-12(fp)
11203658:	10c00324 	muli	r3,r2,12
1120365c:	00844834 	movhi	r2,4384
11203660:	10981504 	addi	r2,r2,24660
11203664:	1885883a 	add	r2,r3,r2
11203668:	00000106 	br	11203670 <read+0x40>
1120366c:	0005883a 	mov	r2,zero
11203670:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
11203674:	e0bffb17 	ldw	r2,-20(fp)
11203678:	10002226 	beq	r2,zero,11203704 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1120367c:	e0bffb17 	ldw	r2,-20(fp)
11203680:	10800217 	ldw	r2,8(r2)
11203684:	108000cc 	andi	r2,r2,3
11203688:	10800060 	cmpeqi	r2,r2,1
1120368c:	1000181e 	bne	r2,zero,112036f0 <read+0xc0>
        (fd->dev->read))
11203690:	e0bffb17 	ldw	r2,-20(fp)
11203694:	10800017 	ldw	r2,0(r2)
11203698:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1120369c:	10001426 	beq	r2,zero,112036f0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
112036a0:	e0bffb17 	ldw	r2,-20(fp)
112036a4:	10800017 	ldw	r2,0(r2)
112036a8:	10800517 	ldw	r2,20(r2)
112036ac:	e0ffff17 	ldw	r3,-4(fp)
112036b0:	180d883a 	mov	r6,r3
112036b4:	e17ffe17 	ldw	r5,-8(fp)
112036b8:	e13ffb17 	ldw	r4,-20(fp)
112036bc:	103ee83a 	callr	r2
112036c0:	e0bffc15 	stw	r2,-16(fp)
112036c4:	e0bffc17 	ldw	r2,-16(fp)
112036c8:	1000070e 	bge	r2,zero,112036e8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
112036cc:	12035f40 	call	112035f4 <alt_get_errno>
112036d0:	1007883a 	mov	r3,r2
112036d4:	e0bffc17 	ldw	r2,-16(fp)
112036d8:	0085c83a 	sub	r2,zero,r2
112036dc:	18800015 	stw	r2,0(r3)
          return -1;
112036e0:	00bfffc4 	movi	r2,-1
112036e4:	00000c06 	br	11203718 <read+0xe8>
        }
        return rval;
112036e8:	e0bffc17 	ldw	r2,-16(fp)
112036ec:	00000a06 	br	11203718 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
112036f0:	12035f40 	call	112035f4 <alt_get_errno>
112036f4:	1007883a 	mov	r3,r2
112036f8:	00800344 	movi	r2,13
112036fc:	18800015 	stw	r2,0(r3)
11203700:	00000406 	br	11203714 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
11203704:	12035f40 	call	112035f4 <alt_get_errno>
11203708:	1007883a 	mov	r3,r2
1120370c:	00801444 	movi	r2,81
11203710:	18800015 	stw	r2,0(r3)
  }
  return -1;
11203714:	00bfffc4 	movi	r2,-1
}
11203718:	e037883a 	mov	sp,fp
1120371c:	dfc00117 	ldw	ra,4(sp)
11203720:	df000017 	ldw	fp,0(sp)
11203724:	dec00204 	addi	sp,sp,8
11203728:	f800283a 	ret

1120372c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1120372c:	defffe04 	addi	sp,sp,-8
11203730:	df000115 	stw	fp,4(sp)
11203734:	df000104 	addi	fp,sp,4
11203738:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1120373c:	e0bfff17 	ldw	r2,-4(fp)
11203740:	108000d0 	cmplti	r2,r2,3
11203744:	10000d1e 	bne	r2,zero,1120377c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
11203748:	00844834 	movhi	r2,4384
1120374c:	10981504 	addi	r2,r2,24660
11203750:	e0ffff17 	ldw	r3,-4(fp)
11203754:	18c00324 	muli	r3,r3,12
11203758:	10c5883a 	add	r2,r2,r3
1120375c:	10800204 	addi	r2,r2,8
11203760:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
11203764:	00844834 	movhi	r2,4384
11203768:	10981504 	addi	r2,r2,24660
1120376c:	e0ffff17 	ldw	r3,-4(fp)
11203770:	18c00324 	muli	r3,r3,12
11203774:	10c5883a 	add	r2,r2,r3
11203778:	10000015 	stw	zero,0(r2)
  }
}
1120377c:	0001883a 	nop
11203780:	e037883a 	mov	sp,fp
11203784:	df000017 	ldw	fp,0(sp)
11203788:	dec00104 	addi	sp,sp,4
1120378c:	f800283a 	ret

11203790 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
11203790:	defff904 	addi	sp,sp,-28
11203794:	df000615 	stw	fp,24(sp)
11203798:	df000604 	addi	fp,sp,24
1120379c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
112037a0:	0005303a 	rdctl	r2,status
112037a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
112037a8:	e0fffe17 	ldw	r3,-8(fp)
112037ac:	00bfff84 	movi	r2,-2
112037b0:	1884703a 	and	r2,r3,r2
112037b4:	1001703a 	wrctl	status,r2
  
  return context;
112037b8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
112037bc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
112037c0:	d0a00a17 	ldw	r2,-32728(gp)
112037c4:	10c000c4 	addi	r3,r2,3
112037c8:	00bfff04 	movi	r2,-4
112037cc:	1884703a 	and	r2,r3,r2
112037d0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
112037d4:	d0e00a17 	ldw	r3,-32728(gp)
112037d8:	e0bfff17 	ldw	r2,-4(fp)
112037dc:	1887883a 	add	r3,r3,r2
112037e0:	00844e34 	movhi	r2,4408
112037e4:	10800004 	addi	r2,r2,0
112037e8:	10c0062e 	bgeu	r2,r3,11203804 <sbrk+0x74>
112037ec:	e0bffb17 	ldw	r2,-20(fp)
112037f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
112037f4:	e0bffa17 	ldw	r2,-24(fp)
112037f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
112037fc:	00bfffc4 	movi	r2,-1
11203800:	00000b06 	br	11203830 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
11203804:	d0a00a17 	ldw	r2,-32728(gp)
11203808:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1120380c:	d0e00a17 	ldw	r3,-32728(gp)
11203810:	e0bfff17 	ldw	r2,-4(fp)
11203814:	1885883a 	add	r2,r3,r2
11203818:	d0a00a15 	stw	r2,-32728(gp)
1120381c:	e0bffb17 	ldw	r2,-20(fp)
11203820:	e0bffc15 	stw	r2,-16(fp)
11203824:	e0bffc17 	ldw	r2,-16(fp)
11203828:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1120382c:	e0bffd17 	ldw	r2,-12(fp)
} 
11203830:	e037883a 	mov	sp,fp
11203834:	df000017 	ldw	fp,0(sp)
11203838:	dec00104 	addi	sp,sp,4
1120383c:	f800283a 	ret

11203840 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
11203840:	defffd04 	addi	sp,sp,-12
11203844:	dfc00215 	stw	ra,8(sp)
11203848:	df000115 	stw	fp,4(sp)
1120384c:	df000104 	addi	fp,sp,4
11203850:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
11203854:	e13fff17 	ldw	r4,-4(fp)
11203858:	12046f80 	call	112046f8 <alt_busy_sleep>
}
1120385c:	e037883a 	mov	sp,fp
11203860:	dfc00117 	ldw	ra,4(sp)
11203864:	df000017 	ldw	fp,0(sp)
11203868:	dec00204 	addi	sp,sp,8
1120386c:	f800283a 	ret

11203870 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
11203870:	defffe04 	addi	sp,sp,-8
11203874:	dfc00115 	stw	ra,4(sp)
11203878:	df000015 	stw	fp,0(sp)
1120387c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
11203880:	d0a00917 	ldw	r2,-32732(gp)
11203884:	10000326 	beq	r2,zero,11203894 <alt_get_errno+0x24>
11203888:	d0a00917 	ldw	r2,-32732(gp)
1120388c:	103ee83a 	callr	r2
11203890:	00000106 	br	11203898 <alt_get_errno+0x28>
11203894:	d0a01104 	addi	r2,gp,-32700
}
11203898:	e037883a 	mov	sp,fp
1120389c:	dfc00117 	ldw	ra,4(sp)
112038a0:	df000017 	ldw	fp,0(sp)
112038a4:	dec00204 	addi	sp,sp,8
112038a8:	f800283a 	ret

112038ac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
112038ac:	defff904 	addi	sp,sp,-28
112038b0:	dfc00615 	stw	ra,24(sp)
112038b4:	df000515 	stw	fp,20(sp)
112038b8:	df000504 	addi	fp,sp,20
112038bc:	e13ffd15 	stw	r4,-12(fp)
112038c0:	e17ffe15 	stw	r5,-8(fp)
112038c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
112038c8:	e0bffd17 	ldw	r2,-12(fp)
112038cc:	10000616 	blt	r2,zero,112038e8 <write+0x3c>
112038d0:	e0bffd17 	ldw	r2,-12(fp)
112038d4:	10c00324 	muli	r3,r2,12
112038d8:	00844834 	movhi	r2,4384
112038dc:	10981504 	addi	r2,r2,24660
112038e0:	1885883a 	add	r2,r3,r2
112038e4:	00000106 	br	112038ec <write+0x40>
112038e8:	0005883a 	mov	r2,zero
112038ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
112038f0:	e0bffb17 	ldw	r2,-20(fp)
112038f4:	10002126 	beq	r2,zero,1120397c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
112038f8:	e0bffb17 	ldw	r2,-20(fp)
112038fc:	10800217 	ldw	r2,8(r2)
11203900:	108000cc 	andi	r2,r2,3
11203904:	10001826 	beq	r2,zero,11203968 <write+0xbc>
11203908:	e0bffb17 	ldw	r2,-20(fp)
1120390c:	10800017 	ldw	r2,0(r2)
11203910:	10800617 	ldw	r2,24(r2)
11203914:	10001426 	beq	r2,zero,11203968 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
11203918:	e0bffb17 	ldw	r2,-20(fp)
1120391c:	10800017 	ldw	r2,0(r2)
11203920:	10800617 	ldw	r2,24(r2)
11203924:	e0ffff17 	ldw	r3,-4(fp)
11203928:	180d883a 	mov	r6,r3
1120392c:	e17ffe17 	ldw	r5,-8(fp)
11203930:	e13ffb17 	ldw	r4,-20(fp)
11203934:	103ee83a 	callr	r2
11203938:	e0bffc15 	stw	r2,-16(fp)
1120393c:	e0bffc17 	ldw	r2,-16(fp)
11203940:	1000070e 	bge	r2,zero,11203960 <write+0xb4>
      {
        ALT_ERRNO = -rval;
11203944:	12038700 	call	11203870 <alt_get_errno>
11203948:	1007883a 	mov	r3,r2
1120394c:	e0bffc17 	ldw	r2,-16(fp)
11203950:	0085c83a 	sub	r2,zero,r2
11203954:	18800015 	stw	r2,0(r3)
        return -1;
11203958:	00bfffc4 	movi	r2,-1
1120395c:	00000c06 	br	11203990 <write+0xe4>
      }
      return rval;
11203960:	e0bffc17 	ldw	r2,-16(fp)
11203964:	00000a06 	br	11203990 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
11203968:	12038700 	call	11203870 <alt_get_errno>
1120396c:	1007883a 	mov	r3,r2
11203970:	00800344 	movi	r2,13
11203974:	18800015 	stw	r2,0(r3)
11203978:	00000406 	br	1120398c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1120397c:	12038700 	call	11203870 <alt_get_errno>
11203980:	1007883a 	mov	r3,r2
11203984:	00801444 	movi	r2,81
11203988:	18800015 	stw	r2,0(r3)
  }
  return -1;
1120398c:	00bfffc4 	movi	r2,-1
}
11203990:	e037883a 	mov	sp,fp
11203994:	dfc00117 	ldw	ra,4(sp)
11203998:	df000017 	ldw	fp,0(sp)
1120399c:	dec00204 	addi	sp,sp,8
112039a0:	f800283a 	ret

112039a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
112039a4:	defffd04 	addi	sp,sp,-12
112039a8:	dfc00215 	stw	ra,8(sp)
112039ac:	df000115 	stw	fp,4(sp)
112039b0:	df000104 	addi	fp,sp,4
112039b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
112039b8:	d1600604 	addi	r5,gp,-32744
112039bc:	e13fff17 	ldw	r4,-4(fp)
112039c0:	120488c0 	call	1120488c <alt_dev_llist_insert>
}
112039c4:	e037883a 	mov	sp,fp
112039c8:	dfc00117 	ldw	ra,4(sp)
112039cc:	df000017 	ldw	fp,0(sp)
112039d0:	dec00204 	addi	sp,sp,8
112039d4:	f800283a 	ret

112039d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
112039d8:	defffd04 	addi	sp,sp,-12
112039dc:	dfc00215 	stw	ra,8(sp)
112039e0:	df000115 	stw	fp,4(sp)
112039e4:	df000104 	addi	fp,sp,4
112039e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
112039ec:	12051c80 	call	112051c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
112039f0:	00800044 	movi	r2,1
112039f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
112039f8:	0001883a 	nop
112039fc:	e037883a 	mov	sp,fp
11203a00:	dfc00117 	ldw	ra,4(sp)
11203a04:	df000017 	ldw	fp,0(sp)
11203a08:	dec00204 	addi	sp,sp,8
11203a0c:	f800283a 	ret

11203a10 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
11203a10:	defffe04 	addi	sp,sp,-8
11203a14:	dfc00115 	stw	ra,4(sp)
11203a18:	df000015 	stw	fp,0(sp)
11203a1c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
11203a20:	01c01904 	movi	r7,100
11203a24:	000d883a 	mov	r6,zero
11203a28:	000b883a 	mov	r5,zero
11203a2c:	01040034 	movhi	r4,4096
11203a30:	12045500 	call	11204550 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
11203a34:	01800044 	movi	r6,1
11203a38:	000b883a 	mov	r5,zero
11203a3c:	01044834 	movhi	r4,4384
11203a40:	21187f04 	addi	r4,r4,25084
11203a44:	1203bd40 	call	11203bd4 <altera_avalon_jtag_uart_init>
11203a48:	01044834 	movhi	r4,4384
11203a4c:	21187504 	addi	r4,r4,25044
11203a50:	12039a40 	call	112039a4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
11203a54:	0001883a 	nop
}
11203a58:	0001883a 	nop
11203a5c:	e037883a 	mov	sp,fp
11203a60:	dfc00117 	ldw	ra,4(sp)
11203a64:	df000017 	ldw	fp,0(sp)
11203a68:	dec00204 	addi	sp,sp,8
11203a6c:	f800283a 	ret

11203a70 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
11203a70:	defffa04 	addi	sp,sp,-24
11203a74:	dfc00515 	stw	ra,20(sp)
11203a78:	df000415 	stw	fp,16(sp)
11203a7c:	df000404 	addi	fp,sp,16
11203a80:	e13ffd15 	stw	r4,-12(fp)
11203a84:	e17ffe15 	stw	r5,-8(fp)
11203a88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
11203a8c:	e0bffd17 	ldw	r2,-12(fp)
11203a90:	10800017 	ldw	r2,0(r2)
11203a94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
11203a98:	e0bffc17 	ldw	r2,-16(fp)
11203a9c:	10c00a04 	addi	r3,r2,40
11203aa0:	e0bffd17 	ldw	r2,-12(fp)
11203aa4:	10800217 	ldw	r2,8(r2)
11203aa8:	100f883a 	mov	r7,r2
11203aac:	e1bfff17 	ldw	r6,-4(fp)
11203ab0:	e17ffe17 	ldw	r5,-8(fp)
11203ab4:	1809883a 	mov	r4,r3
11203ab8:	12040980 	call	11204098 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
11203abc:	e037883a 	mov	sp,fp
11203ac0:	dfc00117 	ldw	ra,4(sp)
11203ac4:	df000017 	ldw	fp,0(sp)
11203ac8:	dec00204 	addi	sp,sp,8
11203acc:	f800283a 	ret

11203ad0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
11203ad0:	defffa04 	addi	sp,sp,-24
11203ad4:	dfc00515 	stw	ra,20(sp)
11203ad8:	df000415 	stw	fp,16(sp)
11203adc:	df000404 	addi	fp,sp,16
11203ae0:	e13ffd15 	stw	r4,-12(fp)
11203ae4:	e17ffe15 	stw	r5,-8(fp)
11203ae8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
11203aec:	e0bffd17 	ldw	r2,-12(fp)
11203af0:	10800017 	ldw	r2,0(r2)
11203af4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
11203af8:	e0bffc17 	ldw	r2,-16(fp)
11203afc:	10c00a04 	addi	r3,r2,40
11203b00:	e0bffd17 	ldw	r2,-12(fp)
11203b04:	10800217 	ldw	r2,8(r2)
11203b08:	100f883a 	mov	r7,r2
11203b0c:	e1bfff17 	ldw	r6,-4(fp)
11203b10:	e17ffe17 	ldw	r5,-8(fp)
11203b14:	1809883a 	mov	r4,r3
11203b18:	12042b40 	call	112042b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
11203b1c:	e037883a 	mov	sp,fp
11203b20:	dfc00117 	ldw	ra,4(sp)
11203b24:	df000017 	ldw	fp,0(sp)
11203b28:	dec00204 	addi	sp,sp,8
11203b2c:	f800283a 	ret

11203b30 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
11203b30:	defffc04 	addi	sp,sp,-16
11203b34:	dfc00315 	stw	ra,12(sp)
11203b38:	df000215 	stw	fp,8(sp)
11203b3c:	df000204 	addi	fp,sp,8
11203b40:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
11203b44:	e0bfff17 	ldw	r2,-4(fp)
11203b48:	10800017 	ldw	r2,0(r2)
11203b4c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
11203b50:	e0bffe17 	ldw	r2,-8(fp)
11203b54:	10c00a04 	addi	r3,r2,40
11203b58:	e0bfff17 	ldw	r2,-4(fp)
11203b5c:	10800217 	ldw	r2,8(r2)
11203b60:	100b883a 	mov	r5,r2
11203b64:	1809883a 	mov	r4,r3
11203b68:	1203f400 	call	11203f40 <altera_avalon_jtag_uart_close>
}
11203b6c:	e037883a 	mov	sp,fp
11203b70:	dfc00117 	ldw	ra,4(sp)
11203b74:	df000017 	ldw	fp,0(sp)
11203b78:	dec00204 	addi	sp,sp,8
11203b7c:	f800283a 	ret

11203b80 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
11203b80:	defffa04 	addi	sp,sp,-24
11203b84:	dfc00515 	stw	ra,20(sp)
11203b88:	df000415 	stw	fp,16(sp)
11203b8c:	df000404 	addi	fp,sp,16
11203b90:	e13ffd15 	stw	r4,-12(fp)
11203b94:	e17ffe15 	stw	r5,-8(fp)
11203b98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
11203b9c:	e0bffd17 	ldw	r2,-12(fp)
11203ba0:	10800017 	ldw	r2,0(r2)
11203ba4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
11203ba8:	e0bffc17 	ldw	r2,-16(fp)
11203bac:	10800a04 	addi	r2,r2,40
11203bb0:	e1bfff17 	ldw	r6,-4(fp)
11203bb4:	e17ffe17 	ldw	r5,-8(fp)
11203bb8:	1009883a 	mov	r4,r2
11203bbc:	1203fa80 	call	11203fa8 <altera_avalon_jtag_uart_ioctl>
}
11203bc0:	e037883a 	mov	sp,fp
11203bc4:	dfc00117 	ldw	ra,4(sp)
11203bc8:	df000017 	ldw	fp,0(sp)
11203bcc:	dec00204 	addi	sp,sp,8
11203bd0:	f800283a 	ret

11203bd4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
11203bd4:	defffa04 	addi	sp,sp,-24
11203bd8:	dfc00515 	stw	ra,20(sp)
11203bdc:	df000415 	stw	fp,16(sp)
11203be0:	df000404 	addi	fp,sp,16
11203be4:	e13ffd15 	stw	r4,-12(fp)
11203be8:	e17ffe15 	stw	r5,-8(fp)
11203bec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
11203bf0:	e0bffd17 	ldw	r2,-12(fp)
11203bf4:	00c00044 	movi	r3,1
11203bf8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
11203bfc:	e0bffd17 	ldw	r2,-12(fp)
11203c00:	10800017 	ldw	r2,0(r2)
11203c04:	10800104 	addi	r2,r2,4
11203c08:	1007883a 	mov	r3,r2
11203c0c:	e0bffd17 	ldw	r2,-12(fp)
11203c10:	10800817 	ldw	r2,32(r2)
11203c14:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
11203c18:	e0bffe17 	ldw	r2,-8(fp)
11203c1c:	e0ffff17 	ldw	r3,-4(fp)
11203c20:	d8000015 	stw	zero,0(sp)
11203c24:	e1fffd17 	ldw	r7,-12(fp)
11203c28:	01844834 	movhi	r6,4384
11203c2c:	318f2504 	addi	r6,r6,15508
11203c30:	180b883a 	mov	r5,r3
11203c34:	1009883a 	mov	r4,r2
11203c38:	12049f00 	call	112049f0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
11203c3c:	e0bffd17 	ldw	r2,-12(fp)
11203c40:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
11203c44:	e0bffd17 	ldw	r2,-12(fp)
11203c48:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
11203c4c:	d0e01617 	ldw	r3,-32680(gp)
11203c50:	e1fffd17 	ldw	r7,-12(fp)
11203c54:	01844834 	movhi	r6,4384
11203c58:	318fa804 	addi	r6,r6,16032
11203c5c:	180b883a 	mov	r5,r3
11203c60:	1009883a 	mov	r4,r2
11203c64:	12045cc0 	call	112045cc <alt_alarm_start>
11203c68:	1000040e 	bge	r2,zero,11203c7c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
11203c6c:	e0fffd17 	ldw	r3,-12(fp)
11203c70:	00a00034 	movhi	r2,32768
11203c74:	10bfffc4 	addi	r2,r2,-1
11203c78:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
11203c7c:	0001883a 	nop
11203c80:	e037883a 	mov	sp,fp
11203c84:	dfc00117 	ldw	ra,4(sp)
11203c88:	df000017 	ldw	fp,0(sp)
11203c8c:	dec00204 	addi	sp,sp,8
11203c90:	f800283a 	ret

11203c94 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
11203c94:	defff804 	addi	sp,sp,-32
11203c98:	df000715 	stw	fp,28(sp)
11203c9c:	df000704 	addi	fp,sp,28
11203ca0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
11203ca4:	e0bfff17 	ldw	r2,-4(fp)
11203ca8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
11203cac:	e0bffb17 	ldw	r2,-20(fp)
11203cb0:	10800017 	ldw	r2,0(r2)
11203cb4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
11203cb8:	e0bffc17 	ldw	r2,-16(fp)
11203cbc:	10800104 	addi	r2,r2,4
11203cc0:	10800037 	ldwio	r2,0(r2)
11203cc4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
11203cc8:	e0bffd17 	ldw	r2,-12(fp)
11203ccc:	1080c00c 	andi	r2,r2,768
11203cd0:	10006d26 	beq	r2,zero,11203e88 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
11203cd4:	e0bffd17 	ldw	r2,-12(fp)
11203cd8:	1080400c 	andi	r2,r2,256
11203cdc:	10003526 	beq	r2,zero,11203db4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
11203ce0:	00800074 	movhi	r2,1
11203ce4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
11203ce8:	e0bffb17 	ldw	r2,-20(fp)
11203cec:	10800a17 	ldw	r2,40(r2)
11203cf0:	10800044 	addi	r2,r2,1
11203cf4:	1081ffcc 	andi	r2,r2,2047
11203cf8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
11203cfc:	e0bffb17 	ldw	r2,-20(fp)
11203d00:	10c00b17 	ldw	r3,44(r2)
11203d04:	e0bffe17 	ldw	r2,-8(fp)
11203d08:	18801526 	beq	r3,r2,11203d60 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
11203d0c:	e0bffc17 	ldw	r2,-16(fp)
11203d10:	10800037 	ldwio	r2,0(r2)
11203d14:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
11203d18:	e0bff917 	ldw	r2,-28(fp)
11203d1c:	10a0000c 	andi	r2,r2,32768
11203d20:	10001126 	beq	r2,zero,11203d68 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
11203d24:	e0bffb17 	ldw	r2,-20(fp)
11203d28:	10800a17 	ldw	r2,40(r2)
11203d2c:	e0fff917 	ldw	r3,-28(fp)
11203d30:	1809883a 	mov	r4,r3
11203d34:	e0fffb17 	ldw	r3,-20(fp)
11203d38:	1885883a 	add	r2,r3,r2
11203d3c:	10800e04 	addi	r2,r2,56
11203d40:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
11203d44:	e0bffb17 	ldw	r2,-20(fp)
11203d48:	10800a17 	ldw	r2,40(r2)
11203d4c:	10800044 	addi	r2,r2,1
11203d50:	10c1ffcc 	andi	r3,r2,2047
11203d54:	e0bffb17 	ldw	r2,-20(fp)
11203d58:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
11203d5c:	003fe206 	br	11203ce8 <__alt_data_end+0xffe83ce8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
11203d60:	0001883a 	nop
11203d64:	00000106 	br	11203d6c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
11203d68:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
11203d6c:	e0bff917 	ldw	r2,-28(fp)
11203d70:	10bfffec 	andhi	r2,r2,65535
11203d74:	10000f26 	beq	r2,zero,11203db4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
11203d78:	e0bffb17 	ldw	r2,-20(fp)
11203d7c:	10c00817 	ldw	r3,32(r2)
11203d80:	00bfff84 	movi	r2,-2
11203d84:	1886703a 	and	r3,r3,r2
11203d88:	e0bffb17 	ldw	r2,-20(fp)
11203d8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
11203d90:	e0bffc17 	ldw	r2,-16(fp)
11203d94:	10800104 	addi	r2,r2,4
11203d98:	1007883a 	mov	r3,r2
11203d9c:	e0bffb17 	ldw	r2,-20(fp)
11203da0:	10800817 	ldw	r2,32(r2)
11203da4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
11203da8:	e0bffc17 	ldw	r2,-16(fp)
11203dac:	10800104 	addi	r2,r2,4
11203db0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
11203db4:	e0bffd17 	ldw	r2,-12(fp)
11203db8:	1080800c 	andi	r2,r2,512
11203dbc:	103fbe26 	beq	r2,zero,11203cb8 <__alt_data_end+0xffe83cb8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
11203dc0:	e0bffd17 	ldw	r2,-12(fp)
11203dc4:	1004d43a 	srli	r2,r2,16
11203dc8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
11203dcc:	00001406 	br	11203e20 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
11203dd0:	e0bffc17 	ldw	r2,-16(fp)
11203dd4:	e0fffb17 	ldw	r3,-20(fp)
11203dd8:	18c00d17 	ldw	r3,52(r3)
11203ddc:	e13ffb17 	ldw	r4,-20(fp)
11203de0:	20c7883a 	add	r3,r4,r3
11203de4:	18c20e04 	addi	r3,r3,2104
11203de8:	18c00003 	ldbu	r3,0(r3)
11203dec:	18c03fcc 	andi	r3,r3,255
11203df0:	18c0201c 	xori	r3,r3,128
11203df4:	18ffe004 	addi	r3,r3,-128
11203df8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
11203dfc:	e0bffb17 	ldw	r2,-20(fp)
11203e00:	10800d17 	ldw	r2,52(r2)
11203e04:	10800044 	addi	r2,r2,1
11203e08:	10c1ffcc 	andi	r3,r2,2047
11203e0c:	e0bffb17 	ldw	r2,-20(fp)
11203e10:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
11203e14:	e0bffa17 	ldw	r2,-24(fp)
11203e18:	10bfffc4 	addi	r2,r2,-1
11203e1c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
11203e20:	e0bffa17 	ldw	r2,-24(fp)
11203e24:	10000526 	beq	r2,zero,11203e3c <altera_avalon_jtag_uart_irq+0x1a8>
11203e28:	e0bffb17 	ldw	r2,-20(fp)
11203e2c:	10c00d17 	ldw	r3,52(r2)
11203e30:	e0bffb17 	ldw	r2,-20(fp)
11203e34:	10800c17 	ldw	r2,48(r2)
11203e38:	18bfe51e 	bne	r3,r2,11203dd0 <__alt_data_end+0xffe83dd0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
11203e3c:	e0bffa17 	ldw	r2,-24(fp)
11203e40:	103f9d26 	beq	r2,zero,11203cb8 <__alt_data_end+0xffe83cb8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
11203e44:	e0bffb17 	ldw	r2,-20(fp)
11203e48:	10c00817 	ldw	r3,32(r2)
11203e4c:	00bfff44 	movi	r2,-3
11203e50:	1886703a 	and	r3,r3,r2
11203e54:	e0bffb17 	ldw	r2,-20(fp)
11203e58:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
11203e5c:	e0bffb17 	ldw	r2,-20(fp)
11203e60:	10800017 	ldw	r2,0(r2)
11203e64:	10800104 	addi	r2,r2,4
11203e68:	1007883a 	mov	r3,r2
11203e6c:	e0bffb17 	ldw	r2,-20(fp)
11203e70:	10800817 	ldw	r2,32(r2)
11203e74:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
11203e78:	e0bffc17 	ldw	r2,-16(fp)
11203e7c:	10800104 	addi	r2,r2,4
11203e80:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
11203e84:	003f8c06 	br	11203cb8 <__alt_data_end+0xffe83cb8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
11203e88:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
11203e8c:	0001883a 	nop
11203e90:	e037883a 	mov	sp,fp
11203e94:	df000017 	ldw	fp,0(sp)
11203e98:	dec00104 	addi	sp,sp,4
11203e9c:	f800283a 	ret

11203ea0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
11203ea0:	defff804 	addi	sp,sp,-32
11203ea4:	df000715 	stw	fp,28(sp)
11203ea8:	df000704 	addi	fp,sp,28
11203eac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
11203eb0:	e0bffb17 	ldw	r2,-20(fp)
11203eb4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
11203eb8:	e0bff917 	ldw	r2,-28(fp)
11203ebc:	10800017 	ldw	r2,0(r2)
11203ec0:	10800104 	addi	r2,r2,4
11203ec4:	10800037 	ldwio	r2,0(r2)
11203ec8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
11203ecc:	e0bffa17 	ldw	r2,-24(fp)
11203ed0:	1081000c 	andi	r2,r2,1024
11203ed4:	10000b26 	beq	r2,zero,11203f04 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
11203ed8:	e0bff917 	ldw	r2,-28(fp)
11203edc:	10800017 	ldw	r2,0(r2)
11203ee0:	10800104 	addi	r2,r2,4
11203ee4:	1007883a 	mov	r3,r2
11203ee8:	e0bff917 	ldw	r2,-28(fp)
11203eec:	10800817 	ldw	r2,32(r2)
11203ef0:	10810014 	ori	r2,r2,1024
11203ef4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
11203ef8:	e0bff917 	ldw	r2,-28(fp)
11203efc:	10000915 	stw	zero,36(r2)
11203f00:	00000a06 	br	11203f2c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
11203f04:	e0bff917 	ldw	r2,-28(fp)
11203f08:	10c00917 	ldw	r3,36(r2)
11203f0c:	00a00034 	movhi	r2,32768
11203f10:	10bfff04 	addi	r2,r2,-4
11203f14:	10c00536 	bltu	r2,r3,11203f2c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
11203f18:	e0bff917 	ldw	r2,-28(fp)
11203f1c:	10800917 	ldw	r2,36(r2)
11203f20:	10c00044 	addi	r3,r2,1
11203f24:	e0bff917 	ldw	r2,-28(fp)
11203f28:	10c00915 	stw	r3,36(r2)
11203f2c:	d0a01617 	ldw	r2,-32680(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
11203f30:	e037883a 	mov	sp,fp
11203f34:	df000017 	ldw	fp,0(sp)
11203f38:	dec00104 	addi	sp,sp,4
11203f3c:	f800283a 	ret

11203f40 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
11203f40:	defffd04 	addi	sp,sp,-12
11203f44:	df000215 	stw	fp,8(sp)
11203f48:	df000204 	addi	fp,sp,8
11203f4c:	e13ffe15 	stw	r4,-8(fp)
11203f50:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
11203f54:	00000506 	br	11203f6c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
11203f58:	e0bfff17 	ldw	r2,-4(fp)
11203f5c:	1090000c 	andi	r2,r2,16384
11203f60:	10000226 	beq	r2,zero,11203f6c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
11203f64:	00bffd44 	movi	r2,-11
11203f68:	00000b06 	br	11203f98 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
11203f6c:	e0bffe17 	ldw	r2,-8(fp)
11203f70:	10c00d17 	ldw	r3,52(r2)
11203f74:	e0bffe17 	ldw	r2,-8(fp)
11203f78:	10800c17 	ldw	r2,48(r2)
11203f7c:	18800526 	beq	r3,r2,11203f94 <altera_avalon_jtag_uart_close+0x54>
11203f80:	e0bffe17 	ldw	r2,-8(fp)
11203f84:	10c00917 	ldw	r3,36(r2)
11203f88:	e0bffe17 	ldw	r2,-8(fp)
11203f8c:	10800117 	ldw	r2,4(r2)
11203f90:	18bff136 	bltu	r3,r2,11203f58 <__alt_data_end+0xffe83f58>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
11203f94:	0005883a 	mov	r2,zero
}
11203f98:	e037883a 	mov	sp,fp
11203f9c:	df000017 	ldw	fp,0(sp)
11203fa0:	dec00104 	addi	sp,sp,4
11203fa4:	f800283a 	ret

11203fa8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
11203fa8:	defffa04 	addi	sp,sp,-24
11203fac:	df000515 	stw	fp,20(sp)
11203fb0:	df000504 	addi	fp,sp,20
11203fb4:	e13ffd15 	stw	r4,-12(fp)
11203fb8:	e17ffe15 	stw	r5,-8(fp)
11203fbc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
11203fc0:	00bff9c4 	movi	r2,-25
11203fc4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
11203fc8:	e0bffe17 	ldw	r2,-8(fp)
11203fcc:	10da8060 	cmpeqi	r3,r2,27137
11203fd0:	1800031e 	bne	r3,zero,11203fe0 <altera_avalon_jtag_uart_ioctl+0x38>
11203fd4:	109a80a0 	cmpeqi	r2,r2,27138
11203fd8:	1000181e 	bne	r2,zero,1120403c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
11203fdc:	00002906 	br	11204084 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
11203fe0:	e0bffd17 	ldw	r2,-12(fp)
11203fe4:	10c00117 	ldw	r3,4(r2)
11203fe8:	00a00034 	movhi	r2,32768
11203fec:	10bfffc4 	addi	r2,r2,-1
11203ff0:	18802126 	beq	r3,r2,11204078 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
11203ff4:	e0bfff17 	ldw	r2,-4(fp)
11203ff8:	10800017 	ldw	r2,0(r2)
11203ffc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
11204000:	e0bffc17 	ldw	r2,-16(fp)
11204004:	10800090 	cmplti	r2,r2,2
11204008:	1000061e 	bne	r2,zero,11204024 <altera_avalon_jtag_uart_ioctl+0x7c>
1120400c:	e0fffc17 	ldw	r3,-16(fp)
11204010:	00a00034 	movhi	r2,32768
11204014:	10bfffc4 	addi	r2,r2,-1
11204018:	18800226 	beq	r3,r2,11204024 <altera_avalon_jtag_uart_ioctl+0x7c>
1120401c:	e0bffc17 	ldw	r2,-16(fp)
11204020:	00000206 	br	1120402c <altera_avalon_jtag_uart_ioctl+0x84>
11204024:	00a00034 	movhi	r2,32768
11204028:	10bfff84 	addi	r2,r2,-2
1120402c:	e0fffd17 	ldw	r3,-12(fp)
11204030:	18800115 	stw	r2,4(r3)
      rc = 0;
11204034:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
11204038:	00000f06 	br	11204078 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1120403c:	e0bffd17 	ldw	r2,-12(fp)
11204040:	10c00117 	ldw	r3,4(r2)
11204044:	00a00034 	movhi	r2,32768
11204048:	10bfffc4 	addi	r2,r2,-1
1120404c:	18800c26 	beq	r3,r2,11204080 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
11204050:	e0bffd17 	ldw	r2,-12(fp)
11204054:	10c00917 	ldw	r3,36(r2)
11204058:	e0bffd17 	ldw	r2,-12(fp)
1120405c:	10800117 	ldw	r2,4(r2)
11204060:	1885803a 	cmpltu	r2,r3,r2
11204064:	10c03fcc 	andi	r3,r2,255
11204068:	e0bfff17 	ldw	r2,-4(fp)
1120406c:	10c00015 	stw	r3,0(r2)
      rc = 0;
11204070:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
11204074:	00000206 	br	11204080 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
11204078:	0001883a 	nop
1120407c:	00000106 	br	11204084 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
11204080:	0001883a 	nop

  default:
    break;
  }

  return rc;
11204084:	e0bffb17 	ldw	r2,-20(fp)
}
11204088:	e037883a 	mov	sp,fp
1120408c:	df000017 	ldw	fp,0(sp)
11204090:	dec00104 	addi	sp,sp,4
11204094:	f800283a 	ret

11204098 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
11204098:	defff304 	addi	sp,sp,-52
1120409c:	dfc00c15 	stw	ra,48(sp)
112040a0:	df000b15 	stw	fp,44(sp)
112040a4:	df000b04 	addi	fp,sp,44
112040a8:	e13ffc15 	stw	r4,-16(fp)
112040ac:	e17ffd15 	stw	r5,-12(fp)
112040b0:	e1bffe15 	stw	r6,-8(fp)
112040b4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
112040b8:	e0bffd17 	ldw	r2,-12(fp)
112040bc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
112040c0:	00004706 	br	112041e0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
112040c4:	e0bffc17 	ldw	r2,-16(fp)
112040c8:	10800a17 	ldw	r2,40(r2)
112040cc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
112040d0:	e0bffc17 	ldw	r2,-16(fp)
112040d4:	10800b17 	ldw	r2,44(r2)
112040d8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
112040dc:	e0fff717 	ldw	r3,-36(fp)
112040e0:	e0bff817 	ldw	r2,-32(fp)
112040e4:	18800536 	bltu	r3,r2,112040fc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
112040e8:	e0fff717 	ldw	r3,-36(fp)
112040ec:	e0bff817 	ldw	r2,-32(fp)
112040f0:	1885c83a 	sub	r2,r3,r2
112040f4:	e0bff615 	stw	r2,-40(fp)
112040f8:	00000406 	br	1120410c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
112040fc:	00c20004 	movi	r3,2048
11204100:	e0bff817 	ldw	r2,-32(fp)
11204104:	1885c83a 	sub	r2,r3,r2
11204108:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1120410c:	e0bff617 	ldw	r2,-40(fp)
11204110:	10001e26 	beq	r2,zero,1120418c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
11204114:	e0fffe17 	ldw	r3,-8(fp)
11204118:	e0bff617 	ldw	r2,-40(fp)
1120411c:	1880022e 	bgeu	r3,r2,11204128 <altera_avalon_jtag_uart_read+0x90>
        n = space;
11204120:	e0bffe17 	ldw	r2,-8(fp)
11204124:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
11204128:	e0bffc17 	ldw	r2,-16(fp)
1120412c:	10c00e04 	addi	r3,r2,56
11204130:	e0bff817 	ldw	r2,-32(fp)
11204134:	1885883a 	add	r2,r3,r2
11204138:	e1bff617 	ldw	r6,-40(fp)
1120413c:	100b883a 	mov	r5,r2
11204140:	e13ff517 	ldw	r4,-44(fp)
11204144:	12017940 	call	11201794 <memcpy>
      ptr   += n;
11204148:	e0fff517 	ldw	r3,-44(fp)
1120414c:	e0bff617 	ldw	r2,-40(fp)
11204150:	1885883a 	add	r2,r3,r2
11204154:	e0bff515 	stw	r2,-44(fp)
      space -= n;
11204158:	e0fffe17 	ldw	r3,-8(fp)
1120415c:	e0bff617 	ldw	r2,-40(fp)
11204160:	1885c83a 	sub	r2,r3,r2
11204164:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
11204168:	e0fff817 	ldw	r3,-32(fp)
1120416c:	e0bff617 	ldw	r2,-40(fp)
11204170:	1885883a 	add	r2,r3,r2
11204174:	10c1ffcc 	andi	r3,r2,2047
11204178:	e0bffc17 	ldw	r2,-16(fp)
1120417c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
11204180:	e0bffe17 	ldw	r2,-8(fp)
11204184:	00bfcf16 	blt	zero,r2,112040c4 <__alt_data_end+0xffe840c4>
11204188:	00000106 	br	11204190 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1120418c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
11204190:	e0fff517 	ldw	r3,-44(fp)
11204194:	e0bffd17 	ldw	r2,-12(fp)
11204198:	1880141e 	bne	r3,r2,112041ec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1120419c:	e0bfff17 	ldw	r2,-4(fp)
112041a0:	1090000c 	andi	r2,r2,16384
112041a4:	1000131e 	bne	r2,zero,112041f4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
112041a8:	0001883a 	nop
112041ac:	e0bffc17 	ldw	r2,-16(fp)
112041b0:	10c00a17 	ldw	r3,40(r2)
112041b4:	e0bff717 	ldw	r2,-36(fp)
112041b8:	1880051e 	bne	r3,r2,112041d0 <altera_avalon_jtag_uart_read+0x138>
112041bc:	e0bffc17 	ldw	r2,-16(fp)
112041c0:	10c00917 	ldw	r3,36(r2)
112041c4:	e0bffc17 	ldw	r2,-16(fp)
112041c8:	10800117 	ldw	r2,4(r2)
112041cc:	18bff736 	bltu	r3,r2,112041ac <__alt_data_end+0xffe841ac>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
112041d0:	e0bffc17 	ldw	r2,-16(fp)
112041d4:	10c00a17 	ldw	r3,40(r2)
112041d8:	e0bff717 	ldw	r2,-36(fp)
112041dc:	18800726 	beq	r3,r2,112041fc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
112041e0:	e0bffe17 	ldw	r2,-8(fp)
112041e4:	00bfb716 	blt	zero,r2,112040c4 <__alt_data_end+0xffe840c4>
112041e8:	00000506 	br	11204200 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
112041ec:	0001883a 	nop
112041f0:	00000306 	br	11204200 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
112041f4:	0001883a 	nop
112041f8:	00000106 	br	11204200 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
112041fc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
11204200:	e0fff517 	ldw	r3,-44(fp)
11204204:	e0bffd17 	ldw	r2,-12(fp)
11204208:	18801826 	beq	r3,r2,1120426c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1120420c:	0005303a 	rdctl	r2,status
11204210:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
11204214:	e0fffb17 	ldw	r3,-20(fp)
11204218:	00bfff84 	movi	r2,-2
1120421c:	1884703a 	and	r2,r3,r2
11204220:	1001703a 	wrctl	status,r2
  
  return context;
11204224:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
11204228:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1120422c:	e0bffc17 	ldw	r2,-16(fp)
11204230:	10800817 	ldw	r2,32(r2)
11204234:	10c00054 	ori	r3,r2,1
11204238:	e0bffc17 	ldw	r2,-16(fp)
1120423c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
11204240:	e0bffc17 	ldw	r2,-16(fp)
11204244:	10800017 	ldw	r2,0(r2)
11204248:	10800104 	addi	r2,r2,4
1120424c:	1007883a 	mov	r3,r2
11204250:	e0bffc17 	ldw	r2,-16(fp)
11204254:	10800817 	ldw	r2,32(r2)
11204258:	18800035 	stwio	r2,0(r3)
1120425c:	e0bffa17 	ldw	r2,-24(fp)
11204260:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
11204264:	e0bff917 	ldw	r2,-28(fp)
11204268:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1120426c:	e0fff517 	ldw	r3,-44(fp)
11204270:	e0bffd17 	ldw	r2,-12(fp)
11204274:	18800426 	beq	r3,r2,11204288 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
11204278:	e0fff517 	ldw	r3,-44(fp)
1120427c:	e0bffd17 	ldw	r2,-12(fp)
11204280:	1885c83a 	sub	r2,r3,r2
11204284:	00000606 	br	112042a0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
11204288:	e0bfff17 	ldw	r2,-4(fp)
1120428c:	1090000c 	andi	r2,r2,16384
11204290:	10000226 	beq	r2,zero,1120429c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
11204294:	00bffd44 	movi	r2,-11
11204298:	00000106 	br	112042a0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1120429c:	00bffec4 	movi	r2,-5
}
112042a0:	e037883a 	mov	sp,fp
112042a4:	dfc00117 	ldw	ra,4(sp)
112042a8:	df000017 	ldw	fp,0(sp)
112042ac:	dec00204 	addi	sp,sp,8
112042b0:	f800283a 	ret

112042b4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
112042b4:	defff304 	addi	sp,sp,-52
112042b8:	dfc00c15 	stw	ra,48(sp)
112042bc:	df000b15 	stw	fp,44(sp)
112042c0:	df000b04 	addi	fp,sp,44
112042c4:	e13ffc15 	stw	r4,-16(fp)
112042c8:	e17ffd15 	stw	r5,-12(fp)
112042cc:	e1bffe15 	stw	r6,-8(fp)
112042d0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
112042d4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
112042d8:	e0bffd17 	ldw	r2,-12(fp)
112042dc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
112042e0:	00003706 	br	112043c0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
112042e4:	e0bffc17 	ldw	r2,-16(fp)
112042e8:	10800c17 	ldw	r2,48(r2)
112042ec:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
112042f0:	e0bffc17 	ldw	r2,-16(fp)
112042f4:	10800d17 	ldw	r2,52(r2)
112042f8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
112042fc:	e0fff917 	ldw	r3,-28(fp)
11204300:	e0bff517 	ldw	r2,-44(fp)
11204304:	1880062e 	bgeu	r3,r2,11204320 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
11204308:	e0fff517 	ldw	r3,-44(fp)
1120430c:	e0bff917 	ldw	r2,-28(fp)
11204310:	1885c83a 	sub	r2,r3,r2
11204314:	10bfffc4 	addi	r2,r2,-1
11204318:	e0bff615 	stw	r2,-40(fp)
1120431c:	00000b06 	br	1120434c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
11204320:	e0bff517 	ldw	r2,-44(fp)
11204324:	10000526 	beq	r2,zero,1120433c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
11204328:	00c20004 	movi	r3,2048
1120432c:	e0bff917 	ldw	r2,-28(fp)
11204330:	1885c83a 	sub	r2,r3,r2
11204334:	e0bff615 	stw	r2,-40(fp)
11204338:	00000406 	br	1120434c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1120433c:	00c1ffc4 	movi	r3,2047
11204340:	e0bff917 	ldw	r2,-28(fp)
11204344:	1885c83a 	sub	r2,r3,r2
11204348:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1120434c:	e0bff617 	ldw	r2,-40(fp)
11204350:	10001e26 	beq	r2,zero,112043cc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
11204354:	e0fffe17 	ldw	r3,-8(fp)
11204358:	e0bff617 	ldw	r2,-40(fp)
1120435c:	1880022e 	bgeu	r3,r2,11204368 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
11204360:	e0bffe17 	ldw	r2,-8(fp)
11204364:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
11204368:	e0bffc17 	ldw	r2,-16(fp)
1120436c:	10c20e04 	addi	r3,r2,2104
11204370:	e0bff917 	ldw	r2,-28(fp)
11204374:	1885883a 	add	r2,r3,r2
11204378:	e1bff617 	ldw	r6,-40(fp)
1120437c:	e17ffd17 	ldw	r5,-12(fp)
11204380:	1009883a 	mov	r4,r2
11204384:	12017940 	call	11201794 <memcpy>
      ptr   += n;
11204388:	e0fffd17 	ldw	r3,-12(fp)
1120438c:	e0bff617 	ldw	r2,-40(fp)
11204390:	1885883a 	add	r2,r3,r2
11204394:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
11204398:	e0fffe17 	ldw	r3,-8(fp)
1120439c:	e0bff617 	ldw	r2,-40(fp)
112043a0:	1885c83a 	sub	r2,r3,r2
112043a4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
112043a8:	e0fff917 	ldw	r3,-28(fp)
112043ac:	e0bff617 	ldw	r2,-40(fp)
112043b0:	1885883a 	add	r2,r3,r2
112043b4:	10c1ffcc 	andi	r3,r2,2047
112043b8:	e0bffc17 	ldw	r2,-16(fp)
112043bc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
112043c0:	e0bffe17 	ldw	r2,-8(fp)
112043c4:	00bfc716 	blt	zero,r2,112042e4 <__alt_data_end+0xffe842e4>
112043c8:	00000106 	br	112043d0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
112043cc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
112043d0:	0005303a 	rdctl	r2,status
112043d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
112043d8:	e0fffb17 	ldw	r3,-20(fp)
112043dc:	00bfff84 	movi	r2,-2
112043e0:	1884703a 	and	r2,r3,r2
112043e4:	1001703a 	wrctl	status,r2
  
  return context;
112043e8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
112043ec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
112043f0:	e0bffc17 	ldw	r2,-16(fp)
112043f4:	10800817 	ldw	r2,32(r2)
112043f8:	10c00094 	ori	r3,r2,2
112043fc:	e0bffc17 	ldw	r2,-16(fp)
11204400:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
11204404:	e0bffc17 	ldw	r2,-16(fp)
11204408:	10800017 	ldw	r2,0(r2)
1120440c:	10800104 	addi	r2,r2,4
11204410:	1007883a 	mov	r3,r2
11204414:	e0bffc17 	ldw	r2,-16(fp)
11204418:	10800817 	ldw	r2,32(r2)
1120441c:	18800035 	stwio	r2,0(r3)
11204420:	e0bffa17 	ldw	r2,-24(fp)
11204424:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
11204428:	e0bff817 	ldw	r2,-32(fp)
1120442c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
11204430:	e0bffe17 	ldw	r2,-8(fp)
11204434:	0080100e 	bge	zero,r2,11204478 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
11204438:	e0bfff17 	ldw	r2,-4(fp)
1120443c:	1090000c 	andi	r2,r2,16384
11204440:	1000101e 	bne	r2,zero,11204484 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
11204444:	0001883a 	nop
11204448:	e0bffc17 	ldw	r2,-16(fp)
1120444c:	10c00d17 	ldw	r3,52(r2)
11204450:	e0bff517 	ldw	r2,-44(fp)
11204454:	1880051e 	bne	r3,r2,1120446c <altera_avalon_jtag_uart_write+0x1b8>
11204458:	e0bffc17 	ldw	r2,-16(fp)
1120445c:	10c00917 	ldw	r3,36(r2)
11204460:	e0bffc17 	ldw	r2,-16(fp)
11204464:	10800117 	ldw	r2,4(r2)
11204468:	18bff736 	bltu	r3,r2,11204448 <__alt_data_end+0xffe84448>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1120446c:	e0bffc17 	ldw	r2,-16(fp)
11204470:	10800917 	ldw	r2,36(r2)
11204474:	1000051e 	bne	r2,zero,1120448c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
11204478:	e0bffe17 	ldw	r2,-8(fp)
1120447c:	00bfd016 	blt	zero,r2,112043c0 <__alt_data_end+0xffe843c0>
11204480:	00000306 	br	11204490 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
11204484:	0001883a 	nop
11204488:	00000106 	br	11204490 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1120448c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
11204490:	e0fffd17 	ldw	r3,-12(fp)
11204494:	e0bff717 	ldw	r2,-36(fp)
11204498:	18800426 	beq	r3,r2,112044ac <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1120449c:	e0fffd17 	ldw	r3,-12(fp)
112044a0:	e0bff717 	ldw	r2,-36(fp)
112044a4:	1885c83a 	sub	r2,r3,r2
112044a8:	00000606 	br	112044c4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
112044ac:	e0bfff17 	ldw	r2,-4(fp)
112044b0:	1090000c 	andi	r2,r2,16384
112044b4:	10000226 	beq	r2,zero,112044c0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
112044b8:	00bffd44 	movi	r2,-11
112044bc:	00000106 	br	112044c4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
112044c0:	00bffec4 	movi	r2,-5
}
112044c4:	e037883a 	mov	sp,fp
112044c8:	dfc00117 	ldw	ra,4(sp)
112044cc:	df000017 	ldw	fp,0(sp)
112044d0:	dec00204 	addi	sp,sp,8
112044d4:	f800283a 	ret

112044d8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
112044d8:	defffa04 	addi	sp,sp,-24
112044dc:	dfc00515 	stw	ra,20(sp)
112044e0:	df000415 	stw	fp,16(sp)
112044e4:	df000404 	addi	fp,sp,16
112044e8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
112044ec:	0007883a 	mov	r3,zero
112044f0:	e0bfff17 	ldw	r2,-4(fp)
112044f4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
112044f8:	e0bfff17 	ldw	r2,-4(fp)
112044fc:	10800104 	addi	r2,r2,4
11204500:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
11204504:	0005303a 	rdctl	r2,status
11204508:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1120450c:	e0fffd17 	ldw	r3,-12(fp)
11204510:	00bfff84 	movi	r2,-2
11204514:	1884703a 	and	r2,r3,r2
11204518:	1001703a 	wrctl	status,r2
  
  return context;
1120451c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
11204520:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
11204524:	12050c00 	call	112050c0 <alt_tick>
11204528:	e0bffc17 	ldw	r2,-16(fp)
1120452c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
11204530:	e0bffe17 	ldw	r2,-8(fp)
11204534:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
11204538:	0001883a 	nop
1120453c:	e037883a 	mov	sp,fp
11204540:	dfc00117 	ldw	ra,4(sp)
11204544:	df000017 	ldw	fp,0(sp)
11204548:	dec00204 	addi	sp,sp,8
1120454c:	f800283a 	ret

11204550 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
11204550:	defff804 	addi	sp,sp,-32
11204554:	dfc00715 	stw	ra,28(sp)
11204558:	df000615 	stw	fp,24(sp)
1120455c:	df000604 	addi	fp,sp,24
11204560:	e13ffc15 	stw	r4,-16(fp)
11204564:	e17ffd15 	stw	r5,-12(fp)
11204568:	e1bffe15 	stw	r6,-8(fp)
1120456c:	e1ffff15 	stw	r7,-4(fp)
11204570:	e0bfff17 	ldw	r2,-4(fp)
11204574:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
11204578:	d0a01617 	ldw	r2,-32680(gp)
1120457c:	1000021e 	bne	r2,zero,11204588 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
11204580:	e0bffb17 	ldw	r2,-20(fp)
11204584:	d0a01615 	stw	r2,-32680(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
11204588:	e0bffc17 	ldw	r2,-16(fp)
1120458c:	10800104 	addi	r2,r2,4
11204590:	00c001c4 	movi	r3,7
11204594:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
11204598:	d8000015 	stw	zero,0(sp)
1120459c:	e1fffc17 	ldw	r7,-16(fp)
112045a0:	01844834 	movhi	r6,4384
112045a4:	31913604 	addi	r6,r6,17624
112045a8:	e17ffe17 	ldw	r5,-8(fp)
112045ac:	e13ffd17 	ldw	r4,-12(fp)
112045b0:	12049f00 	call	112049f0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
112045b4:	0001883a 	nop
112045b8:	e037883a 	mov	sp,fp
112045bc:	dfc00117 	ldw	ra,4(sp)
112045c0:	df000017 	ldw	fp,0(sp)
112045c4:	dec00204 	addi	sp,sp,8
112045c8:	f800283a 	ret

112045cc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
112045cc:	defff504 	addi	sp,sp,-44
112045d0:	df000a15 	stw	fp,40(sp)
112045d4:	df000a04 	addi	fp,sp,40
112045d8:	e13ffc15 	stw	r4,-16(fp)
112045dc:	e17ffd15 	stw	r5,-12(fp)
112045e0:	e1bffe15 	stw	r6,-8(fp)
112045e4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
112045e8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
112045ec:	d0a01617 	ldw	r2,-32680(gp)
  
  if (alt_ticks_per_second ())
112045f0:	10003c26 	beq	r2,zero,112046e4 <alt_alarm_start+0x118>
  {
    if (alarm)
112045f4:	e0bffc17 	ldw	r2,-16(fp)
112045f8:	10003826 	beq	r2,zero,112046dc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
112045fc:	e0bffc17 	ldw	r2,-16(fp)
11204600:	e0fffe17 	ldw	r3,-8(fp)
11204604:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
11204608:	e0bffc17 	ldw	r2,-16(fp)
1120460c:	e0ffff17 	ldw	r3,-4(fp)
11204610:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
11204614:	0005303a 	rdctl	r2,status
11204618:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1120461c:	e0fff917 	ldw	r3,-28(fp)
11204620:	00bfff84 	movi	r2,-2
11204624:	1884703a 	and	r2,r3,r2
11204628:	1001703a 	wrctl	status,r2
  
  return context;
1120462c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
11204630:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
11204634:	d0a01717 	ldw	r2,-32676(gp)
      
      current_nticks = alt_nticks();
11204638:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1120463c:	e0fffd17 	ldw	r3,-12(fp)
11204640:	e0bff617 	ldw	r2,-40(fp)
11204644:	1885883a 	add	r2,r3,r2
11204648:	10c00044 	addi	r3,r2,1
1120464c:	e0bffc17 	ldw	r2,-16(fp)
11204650:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
11204654:	e0bffc17 	ldw	r2,-16(fp)
11204658:	10c00217 	ldw	r3,8(r2)
1120465c:	e0bff617 	ldw	r2,-40(fp)
11204660:	1880042e 	bgeu	r3,r2,11204674 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
11204664:	e0bffc17 	ldw	r2,-16(fp)
11204668:	00c00044 	movi	r3,1
1120466c:	10c00405 	stb	r3,16(r2)
11204670:	00000206 	br	1120467c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
11204674:	e0bffc17 	ldw	r2,-16(fp)
11204678:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1120467c:	e0bffc17 	ldw	r2,-16(fp)
11204680:	d0e00c04 	addi	r3,gp,-32720
11204684:	e0fffa15 	stw	r3,-24(fp)
11204688:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1120468c:	e0bffb17 	ldw	r2,-20(fp)
11204690:	e0fffa17 	ldw	r3,-24(fp)
11204694:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
11204698:	e0bffa17 	ldw	r2,-24(fp)
1120469c:	10c00017 	ldw	r3,0(r2)
112046a0:	e0bffb17 	ldw	r2,-20(fp)
112046a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
112046a8:	e0bffa17 	ldw	r2,-24(fp)
112046ac:	10800017 	ldw	r2,0(r2)
112046b0:	e0fffb17 	ldw	r3,-20(fp)
112046b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
112046b8:	e0bffa17 	ldw	r2,-24(fp)
112046bc:	e0fffb17 	ldw	r3,-20(fp)
112046c0:	10c00015 	stw	r3,0(r2)
112046c4:	e0bff817 	ldw	r2,-32(fp)
112046c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
112046cc:	e0bff717 	ldw	r2,-36(fp)
112046d0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
112046d4:	0005883a 	mov	r2,zero
112046d8:	00000306 	br	112046e8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
112046dc:	00bffa84 	movi	r2,-22
112046e0:	00000106 	br	112046e8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
112046e4:	00bfde84 	movi	r2,-134
  }
}
112046e8:	e037883a 	mov	sp,fp
112046ec:	df000017 	ldw	fp,0(sp)
112046f0:	dec00104 	addi	sp,sp,4
112046f4:	f800283a 	ret

112046f8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
112046f8:	defffa04 	addi	sp,sp,-24
112046fc:	dfc00515 	stw	ra,20(sp)
11204700:	df000415 	stw	fp,16(sp)
11204704:	df000404 	addi	fp,sp,16
11204708:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
1120470c:	008000c4 	movi	r2,3
11204710:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
11204714:	e0fffd17 	ldw	r3,-12(fp)
11204718:	008003f4 	movhi	r2,15
1120471c:	10909004 	addi	r2,r2,16960
11204720:	1885383a 	mul	r2,r3,r2
11204724:	100b883a 	mov	r5,r2
11204728:	0100bef4 	movhi	r4,763
1120472c:	213c2004 	addi	r4,r4,-3968
11204730:	12030600 	call	11203060 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
11204734:	100b883a 	mov	r5,r2
11204738:	01200034 	movhi	r4,32768
1120473c:	213fffc4 	addi	r4,r4,-1
11204740:	12030600 	call	11203060 <__udivsi3>
11204744:	100b883a 	mov	r5,r2
11204748:	e13fff17 	ldw	r4,-4(fp)
1120474c:	12030600 	call	11203060 <__udivsi3>
11204750:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
11204754:	e0bffe17 	ldw	r2,-8(fp)
11204758:	10002a26 	beq	r2,zero,11204804 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1120475c:	e03ffc15 	stw	zero,-16(fp)
11204760:	00001706 	br	112047c0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
11204764:	00a00034 	movhi	r2,32768
11204768:	10bfffc4 	addi	r2,r2,-1
1120476c:	10bfffc4 	addi	r2,r2,-1
11204770:	103ffe1e 	bne	r2,zero,1120476c <__alt_data_end+0xffe8476c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
11204774:	e0fffd17 	ldw	r3,-12(fp)
11204778:	008003f4 	movhi	r2,15
1120477c:	10909004 	addi	r2,r2,16960
11204780:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
11204784:	100b883a 	mov	r5,r2
11204788:	0100bef4 	movhi	r4,763
1120478c:	213c2004 	addi	r4,r4,-3968
11204790:	12030600 	call	11203060 <__udivsi3>
11204794:	100b883a 	mov	r5,r2
11204798:	01200034 	movhi	r4,32768
1120479c:	213fffc4 	addi	r4,r4,-1
112047a0:	12030600 	call	11203060 <__udivsi3>
112047a4:	1007883a 	mov	r3,r2
112047a8:	e0bfff17 	ldw	r2,-4(fp)
112047ac:	10c5c83a 	sub	r2,r2,r3
112047b0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
112047b4:	e0bffc17 	ldw	r2,-16(fp)
112047b8:	10800044 	addi	r2,r2,1
112047bc:	e0bffc15 	stw	r2,-16(fp)
112047c0:	e0fffc17 	ldw	r3,-16(fp)
112047c4:	e0bffe17 	ldw	r2,-8(fp)
112047c8:	18bfe616 	blt	r3,r2,11204764 <__alt_data_end+0xffe84764>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
112047cc:	e0fffd17 	ldw	r3,-12(fp)
112047d0:	008003f4 	movhi	r2,15
112047d4:	10909004 	addi	r2,r2,16960
112047d8:	1885383a 	mul	r2,r3,r2
112047dc:	100b883a 	mov	r5,r2
112047e0:	0100bef4 	movhi	r4,763
112047e4:	213c2004 	addi	r4,r4,-3968
112047e8:	12030600 	call	11203060 <__udivsi3>
112047ec:	1007883a 	mov	r3,r2
112047f0:	e0bfff17 	ldw	r2,-4(fp)
112047f4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
112047f8:	10bfffc4 	addi	r2,r2,-1
112047fc:	103ffe1e 	bne	r2,zero,112047f8 <__alt_data_end+0xffe847f8>
11204800:	00000d06 	br	11204838 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
11204804:	e0fffd17 	ldw	r3,-12(fp)
11204808:	008003f4 	movhi	r2,15
1120480c:	10909004 	addi	r2,r2,16960
11204810:	1885383a 	mul	r2,r3,r2
11204814:	100b883a 	mov	r5,r2
11204818:	0100bef4 	movhi	r4,763
1120481c:	213c2004 	addi	r4,r4,-3968
11204820:	12030600 	call	11203060 <__udivsi3>
11204824:	1007883a 	mov	r3,r2
11204828:	e0bfff17 	ldw	r2,-4(fp)
1120482c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
11204830:	10bfffc4 	addi	r2,r2,-1
11204834:	00bffe16 	blt	zero,r2,11204830 <__alt_data_end+0xffe84830>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
11204838:	0005883a 	mov	r2,zero
}
1120483c:	e037883a 	mov	sp,fp
11204840:	dfc00117 	ldw	ra,4(sp)
11204844:	df000017 	ldw	fp,0(sp)
11204848:	dec00204 	addi	sp,sp,8
1120484c:	f800283a 	ret

11204850 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
11204850:	defffe04 	addi	sp,sp,-8
11204854:	dfc00115 	stw	ra,4(sp)
11204858:	df000015 	stw	fp,0(sp)
1120485c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
11204860:	d0a00917 	ldw	r2,-32732(gp)
11204864:	10000326 	beq	r2,zero,11204874 <alt_get_errno+0x24>
11204868:	d0a00917 	ldw	r2,-32732(gp)
1120486c:	103ee83a 	callr	r2
11204870:	00000106 	br	11204878 <alt_get_errno+0x28>
11204874:	d0a01104 	addi	r2,gp,-32700
}
11204878:	e037883a 	mov	sp,fp
1120487c:	dfc00117 	ldw	ra,4(sp)
11204880:	df000017 	ldw	fp,0(sp)
11204884:	dec00204 	addi	sp,sp,8
11204888:	f800283a 	ret

1120488c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1120488c:	defffa04 	addi	sp,sp,-24
11204890:	dfc00515 	stw	ra,20(sp)
11204894:	df000415 	stw	fp,16(sp)
11204898:	df000404 	addi	fp,sp,16
1120489c:	e13ffe15 	stw	r4,-8(fp)
112048a0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
112048a4:	e0bffe17 	ldw	r2,-8(fp)
112048a8:	10000326 	beq	r2,zero,112048b8 <alt_dev_llist_insert+0x2c>
112048ac:	e0bffe17 	ldw	r2,-8(fp)
112048b0:	10800217 	ldw	r2,8(r2)
112048b4:	1000061e 	bne	r2,zero,112048d0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
112048b8:	12048500 	call	11204850 <alt_get_errno>
112048bc:	1007883a 	mov	r3,r2
112048c0:	00800584 	movi	r2,22
112048c4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
112048c8:	00bffa84 	movi	r2,-22
112048cc:	00001306 	br	1120491c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
112048d0:	e0bffe17 	ldw	r2,-8(fp)
112048d4:	e0ffff17 	ldw	r3,-4(fp)
112048d8:	e0fffc15 	stw	r3,-16(fp)
112048dc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
112048e0:	e0bffd17 	ldw	r2,-12(fp)
112048e4:	e0fffc17 	ldw	r3,-16(fp)
112048e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
112048ec:	e0bffc17 	ldw	r2,-16(fp)
112048f0:	10c00017 	ldw	r3,0(r2)
112048f4:	e0bffd17 	ldw	r2,-12(fp)
112048f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
112048fc:	e0bffc17 	ldw	r2,-16(fp)
11204900:	10800017 	ldw	r2,0(r2)
11204904:	e0fffd17 	ldw	r3,-12(fp)
11204908:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1120490c:	e0bffc17 	ldw	r2,-16(fp)
11204910:	e0fffd17 	ldw	r3,-12(fp)
11204914:	10c00015 	stw	r3,0(r2)

  return 0;  
11204918:	0005883a 	mov	r2,zero
}
1120491c:	e037883a 	mov	sp,fp
11204920:	dfc00117 	ldw	ra,4(sp)
11204924:	df000017 	ldw	fp,0(sp)
11204928:	dec00204 	addi	sp,sp,8
1120492c:	f800283a 	ret

11204930 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
11204930:	defffd04 	addi	sp,sp,-12
11204934:	dfc00215 	stw	ra,8(sp)
11204938:	df000115 	stw	fp,4(sp)
1120493c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
11204940:	00844834 	movhi	r2,4384
11204944:	1095ee04 	addi	r2,r2,22456
11204948:	e0bfff15 	stw	r2,-4(fp)
1120494c:	00000606 	br	11204968 <_do_ctors+0x38>
        (*ctor) (); 
11204950:	e0bfff17 	ldw	r2,-4(fp)
11204954:	10800017 	ldw	r2,0(r2)
11204958:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1120495c:	e0bfff17 	ldw	r2,-4(fp)
11204960:	10bfff04 	addi	r2,r2,-4
11204964:	e0bfff15 	stw	r2,-4(fp)
11204968:	e0ffff17 	ldw	r3,-4(fp)
1120496c:	00844834 	movhi	r2,4384
11204970:	1095ef04 	addi	r2,r2,22460
11204974:	18bff62e 	bgeu	r3,r2,11204950 <__alt_data_end+0xffe84950>
        (*ctor) (); 
}
11204978:	0001883a 	nop
1120497c:	e037883a 	mov	sp,fp
11204980:	dfc00117 	ldw	ra,4(sp)
11204984:	df000017 	ldw	fp,0(sp)
11204988:	dec00204 	addi	sp,sp,8
1120498c:	f800283a 	ret

11204990 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
11204990:	defffd04 	addi	sp,sp,-12
11204994:	dfc00215 	stw	ra,8(sp)
11204998:	df000115 	stw	fp,4(sp)
1120499c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
112049a0:	00844834 	movhi	r2,4384
112049a4:	1095ee04 	addi	r2,r2,22456
112049a8:	e0bfff15 	stw	r2,-4(fp)
112049ac:	00000606 	br	112049c8 <_do_dtors+0x38>
        (*dtor) (); 
112049b0:	e0bfff17 	ldw	r2,-4(fp)
112049b4:	10800017 	ldw	r2,0(r2)
112049b8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
112049bc:	e0bfff17 	ldw	r2,-4(fp)
112049c0:	10bfff04 	addi	r2,r2,-4
112049c4:	e0bfff15 	stw	r2,-4(fp)
112049c8:	e0ffff17 	ldw	r3,-4(fp)
112049cc:	00844834 	movhi	r2,4384
112049d0:	1095ef04 	addi	r2,r2,22460
112049d4:	18bff62e 	bgeu	r3,r2,112049b0 <__alt_data_end+0xffe849b0>
        (*dtor) (); 
}
112049d8:	0001883a 	nop
112049dc:	e037883a 	mov	sp,fp
112049e0:	dfc00117 	ldw	ra,4(sp)
112049e4:	df000017 	ldw	fp,0(sp)
112049e8:	dec00204 	addi	sp,sp,8
112049ec:	f800283a 	ret

112049f0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
112049f0:	defff904 	addi	sp,sp,-28
112049f4:	dfc00615 	stw	ra,24(sp)
112049f8:	df000515 	stw	fp,20(sp)
112049fc:	df000504 	addi	fp,sp,20
11204a00:	e13ffc15 	stw	r4,-16(fp)
11204a04:	e17ffd15 	stw	r5,-12(fp)
11204a08:	e1bffe15 	stw	r6,-8(fp)
11204a0c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
11204a10:	e0800217 	ldw	r2,8(fp)
11204a14:	d8800015 	stw	r2,0(sp)
11204a18:	e1ffff17 	ldw	r7,-4(fp)
11204a1c:	e1bffe17 	ldw	r6,-8(fp)
11204a20:	e17ffd17 	ldw	r5,-12(fp)
11204a24:	e13ffc17 	ldw	r4,-16(fp)
11204a28:	1204ba00 	call	11204ba0 <alt_iic_isr_register>
}  
11204a2c:	e037883a 	mov	sp,fp
11204a30:	dfc00117 	ldw	ra,4(sp)
11204a34:	df000017 	ldw	fp,0(sp)
11204a38:	dec00204 	addi	sp,sp,8
11204a3c:	f800283a 	ret

11204a40 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
11204a40:	defff904 	addi	sp,sp,-28
11204a44:	df000615 	stw	fp,24(sp)
11204a48:	df000604 	addi	fp,sp,24
11204a4c:	e13ffe15 	stw	r4,-8(fp)
11204a50:	e17fff15 	stw	r5,-4(fp)
11204a54:	e0bfff17 	ldw	r2,-4(fp)
11204a58:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
11204a5c:	0005303a 	rdctl	r2,status
11204a60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
11204a64:	e0fffb17 	ldw	r3,-20(fp)
11204a68:	00bfff84 	movi	r2,-2
11204a6c:	1884703a 	and	r2,r3,r2
11204a70:	1001703a 	wrctl	status,r2
  
  return context;
11204a74:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
11204a78:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
11204a7c:	00c00044 	movi	r3,1
11204a80:	e0bffa17 	ldw	r2,-24(fp)
11204a84:	1884983a 	sll	r2,r3,r2
11204a88:	1007883a 	mov	r3,r2
11204a8c:	d0a01517 	ldw	r2,-32684(gp)
11204a90:	1884b03a 	or	r2,r3,r2
11204a94:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
11204a98:	d0a01517 	ldw	r2,-32684(gp)
11204a9c:	100170fa 	wrctl	ienable,r2
11204aa0:	e0bffc17 	ldw	r2,-16(fp)
11204aa4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
11204aa8:	e0bffd17 	ldw	r2,-12(fp)
11204aac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
11204ab0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
11204ab4:	0001883a 	nop
}
11204ab8:	e037883a 	mov	sp,fp
11204abc:	df000017 	ldw	fp,0(sp)
11204ac0:	dec00104 	addi	sp,sp,4
11204ac4:	f800283a 	ret

11204ac8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
11204ac8:	defff904 	addi	sp,sp,-28
11204acc:	df000615 	stw	fp,24(sp)
11204ad0:	df000604 	addi	fp,sp,24
11204ad4:	e13ffe15 	stw	r4,-8(fp)
11204ad8:	e17fff15 	stw	r5,-4(fp)
11204adc:	e0bfff17 	ldw	r2,-4(fp)
11204ae0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
11204ae4:	0005303a 	rdctl	r2,status
11204ae8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
11204aec:	e0fffb17 	ldw	r3,-20(fp)
11204af0:	00bfff84 	movi	r2,-2
11204af4:	1884703a 	and	r2,r3,r2
11204af8:	1001703a 	wrctl	status,r2
  
  return context;
11204afc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
11204b00:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
11204b04:	00c00044 	movi	r3,1
11204b08:	e0bffa17 	ldw	r2,-24(fp)
11204b0c:	1884983a 	sll	r2,r3,r2
11204b10:	0084303a 	nor	r2,zero,r2
11204b14:	1007883a 	mov	r3,r2
11204b18:	d0a01517 	ldw	r2,-32684(gp)
11204b1c:	1884703a 	and	r2,r3,r2
11204b20:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
11204b24:	d0a01517 	ldw	r2,-32684(gp)
11204b28:	100170fa 	wrctl	ienable,r2
11204b2c:	e0bffc17 	ldw	r2,-16(fp)
11204b30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
11204b34:	e0bffd17 	ldw	r2,-12(fp)
11204b38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
11204b3c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
11204b40:	0001883a 	nop
}
11204b44:	e037883a 	mov	sp,fp
11204b48:	df000017 	ldw	fp,0(sp)
11204b4c:	dec00104 	addi	sp,sp,4
11204b50:	f800283a 	ret

11204b54 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
11204b54:	defffc04 	addi	sp,sp,-16
11204b58:	df000315 	stw	fp,12(sp)
11204b5c:	df000304 	addi	fp,sp,12
11204b60:	e13ffe15 	stw	r4,-8(fp)
11204b64:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
11204b68:	000530fa 	rdctl	r2,ienable
11204b6c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
11204b70:	00c00044 	movi	r3,1
11204b74:	e0bfff17 	ldw	r2,-4(fp)
11204b78:	1884983a 	sll	r2,r3,r2
11204b7c:	1007883a 	mov	r3,r2
11204b80:	e0bffd17 	ldw	r2,-12(fp)
11204b84:	1884703a 	and	r2,r3,r2
11204b88:	1004c03a 	cmpne	r2,r2,zero
11204b8c:	10803fcc 	andi	r2,r2,255
}
11204b90:	e037883a 	mov	sp,fp
11204b94:	df000017 	ldw	fp,0(sp)
11204b98:	dec00104 	addi	sp,sp,4
11204b9c:	f800283a 	ret

11204ba0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
11204ba0:	defff504 	addi	sp,sp,-44
11204ba4:	dfc00a15 	stw	ra,40(sp)
11204ba8:	df000915 	stw	fp,36(sp)
11204bac:	df000904 	addi	fp,sp,36
11204bb0:	e13ffc15 	stw	r4,-16(fp)
11204bb4:	e17ffd15 	stw	r5,-12(fp)
11204bb8:	e1bffe15 	stw	r6,-8(fp)
11204bbc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
11204bc0:	00bffa84 	movi	r2,-22
11204bc4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
11204bc8:	e0bffd17 	ldw	r2,-12(fp)
11204bcc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
11204bd0:	e0bff817 	ldw	r2,-32(fp)
11204bd4:	10800808 	cmpgei	r2,r2,32
11204bd8:	1000271e 	bne	r2,zero,11204c78 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
11204bdc:	0005303a 	rdctl	r2,status
11204be0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
11204be4:	e0fffb17 	ldw	r3,-20(fp)
11204be8:	00bfff84 	movi	r2,-2
11204bec:	1884703a 	and	r2,r3,r2
11204bf0:	1001703a 	wrctl	status,r2
  
  return context;
11204bf4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
11204bf8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
11204bfc:	00844834 	movhi	r2,4384
11204c00:	109caf04 	addi	r2,r2,29372
11204c04:	e0fff817 	ldw	r3,-32(fp)
11204c08:	180690fa 	slli	r3,r3,3
11204c0c:	10c5883a 	add	r2,r2,r3
11204c10:	e0fffe17 	ldw	r3,-8(fp)
11204c14:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
11204c18:	00844834 	movhi	r2,4384
11204c1c:	109caf04 	addi	r2,r2,29372
11204c20:	e0fff817 	ldw	r3,-32(fp)
11204c24:	180690fa 	slli	r3,r3,3
11204c28:	10c5883a 	add	r2,r2,r3
11204c2c:	10800104 	addi	r2,r2,4
11204c30:	e0ffff17 	ldw	r3,-4(fp)
11204c34:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
11204c38:	e0bffe17 	ldw	r2,-8(fp)
11204c3c:	10000526 	beq	r2,zero,11204c54 <alt_iic_isr_register+0xb4>
11204c40:	e0bff817 	ldw	r2,-32(fp)
11204c44:	100b883a 	mov	r5,r2
11204c48:	e13ffc17 	ldw	r4,-16(fp)
11204c4c:	1204a400 	call	11204a40 <alt_ic_irq_enable>
11204c50:	00000406 	br	11204c64 <alt_iic_isr_register+0xc4>
11204c54:	e0bff817 	ldw	r2,-32(fp)
11204c58:	100b883a 	mov	r5,r2
11204c5c:	e13ffc17 	ldw	r4,-16(fp)
11204c60:	1204ac80 	call	11204ac8 <alt_ic_irq_disable>
11204c64:	e0bff715 	stw	r2,-36(fp)
11204c68:	e0bffa17 	ldw	r2,-24(fp)
11204c6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
11204c70:	e0bff917 	ldw	r2,-28(fp)
11204c74:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
11204c78:	e0bff717 	ldw	r2,-36(fp)
}
11204c7c:	e037883a 	mov	sp,fp
11204c80:	dfc00117 	ldw	ra,4(sp)
11204c84:	df000017 	ldw	fp,0(sp)
11204c88:	dec00204 	addi	sp,sp,8
11204c8c:	f800283a 	ret

11204c90 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
11204c90:	defff904 	addi	sp,sp,-28
11204c94:	dfc00615 	stw	ra,24(sp)
11204c98:	df000515 	stw	fp,20(sp)
11204c9c:	df000504 	addi	fp,sp,20
11204ca0:	e13ffc15 	stw	r4,-16(fp)
11204ca4:	e17ffd15 	stw	r5,-12(fp)
11204ca8:	e1bffe15 	stw	r6,-8(fp)
11204cac:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
11204cb0:	e1bfff17 	ldw	r6,-4(fp)
11204cb4:	e17ffe17 	ldw	r5,-8(fp)
11204cb8:	e13ffd17 	ldw	r4,-12(fp)
11204cbc:	1204ed00 	call	11204ed0 <open>
11204cc0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
11204cc4:	e0bffb17 	ldw	r2,-20(fp)
11204cc8:	10001c16 	blt	r2,zero,11204d3c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
11204ccc:	00844834 	movhi	r2,4384
11204cd0:	10981504 	addi	r2,r2,24660
11204cd4:	e0fffb17 	ldw	r3,-20(fp)
11204cd8:	18c00324 	muli	r3,r3,12
11204cdc:	10c5883a 	add	r2,r2,r3
11204ce0:	10c00017 	ldw	r3,0(r2)
11204ce4:	e0bffc17 	ldw	r2,-16(fp)
11204ce8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
11204cec:	00844834 	movhi	r2,4384
11204cf0:	10981504 	addi	r2,r2,24660
11204cf4:	e0fffb17 	ldw	r3,-20(fp)
11204cf8:	18c00324 	muli	r3,r3,12
11204cfc:	10c5883a 	add	r2,r2,r3
11204d00:	10800104 	addi	r2,r2,4
11204d04:	10c00017 	ldw	r3,0(r2)
11204d08:	e0bffc17 	ldw	r2,-16(fp)
11204d0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
11204d10:	00844834 	movhi	r2,4384
11204d14:	10981504 	addi	r2,r2,24660
11204d18:	e0fffb17 	ldw	r3,-20(fp)
11204d1c:	18c00324 	muli	r3,r3,12
11204d20:	10c5883a 	add	r2,r2,r3
11204d24:	10800204 	addi	r2,r2,8
11204d28:	10c00017 	ldw	r3,0(r2)
11204d2c:	e0bffc17 	ldw	r2,-16(fp)
11204d30:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
11204d34:	e13ffb17 	ldw	r4,-20(fp)
11204d38:	120372c0 	call	1120372c <alt_release_fd>
  }
} 
11204d3c:	0001883a 	nop
11204d40:	e037883a 	mov	sp,fp
11204d44:	dfc00117 	ldw	ra,4(sp)
11204d48:	df000017 	ldw	fp,0(sp)
11204d4c:	dec00204 	addi	sp,sp,8
11204d50:	f800283a 	ret

11204d54 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
11204d54:	defffb04 	addi	sp,sp,-20
11204d58:	dfc00415 	stw	ra,16(sp)
11204d5c:	df000315 	stw	fp,12(sp)
11204d60:	df000304 	addi	fp,sp,12
11204d64:	e13ffd15 	stw	r4,-12(fp)
11204d68:	e17ffe15 	stw	r5,-8(fp)
11204d6c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
11204d70:	01c07fc4 	movi	r7,511
11204d74:	01800044 	movi	r6,1
11204d78:	e17ffd17 	ldw	r5,-12(fp)
11204d7c:	01044834 	movhi	r4,4384
11204d80:	21181804 	addi	r4,r4,24672
11204d84:	1204c900 	call	11204c90 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
11204d88:	01c07fc4 	movi	r7,511
11204d8c:	000d883a 	mov	r6,zero
11204d90:	e17ffe17 	ldw	r5,-8(fp)
11204d94:	01044834 	movhi	r4,4384
11204d98:	21181504 	addi	r4,r4,24660
11204d9c:	1204c900 	call	11204c90 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
11204da0:	01c07fc4 	movi	r7,511
11204da4:	01800044 	movi	r6,1
11204da8:	e17fff17 	ldw	r5,-4(fp)
11204dac:	01044834 	movhi	r4,4384
11204db0:	21181b04 	addi	r4,r4,24684
11204db4:	1204c900 	call	11204c90 <alt_open_fd>
}  
11204db8:	0001883a 	nop
11204dbc:	e037883a 	mov	sp,fp
11204dc0:	dfc00117 	ldw	ra,4(sp)
11204dc4:	df000017 	ldw	fp,0(sp)
11204dc8:	dec00204 	addi	sp,sp,8
11204dcc:	f800283a 	ret

11204dd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
11204dd0:	defffe04 	addi	sp,sp,-8
11204dd4:	dfc00115 	stw	ra,4(sp)
11204dd8:	df000015 	stw	fp,0(sp)
11204ddc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
11204de0:	d0a00917 	ldw	r2,-32732(gp)
11204de4:	10000326 	beq	r2,zero,11204df4 <alt_get_errno+0x24>
11204de8:	d0a00917 	ldw	r2,-32732(gp)
11204dec:	103ee83a 	callr	r2
11204df0:	00000106 	br	11204df8 <alt_get_errno+0x28>
11204df4:	d0a01104 	addi	r2,gp,-32700
}
11204df8:	e037883a 	mov	sp,fp
11204dfc:	dfc00117 	ldw	ra,4(sp)
11204e00:	df000017 	ldw	fp,0(sp)
11204e04:	dec00204 	addi	sp,sp,8
11204e08:	f800283a 	ret

11204e0c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
11204e0c:	defffd04 	addi	sp,sp,-12
11204e10:	df000215 	stw	fp,8(sp)
11204e14:	df000204 	addi	fp,sp,8
11204e18:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
11204e1c:	e0bfff17 	ldw	r2,-4(fp)
11204e20:	10800217 	ldw	r2,8(r2)
11204e24:	10d00034 	orhi	r3,r2,16384
11204e28:	e0bfff17 	ldw	r2,-4(fp)
11204e2c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
11204e30:	e03ffe15 	stw	zero,-8(fp)
11204e34:	00001d06 	br	11204eac <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
11204e38:	00844834 	movhi	r2,4384
11204e3c:	10981504 	addi	r2,r2,24660
11204e40:	e0fffe17 	ldw	r3,-8(fp)
11204e44:	18c00324 	muli	r3,r3,12
11204e48:	10c5883a 	add	r2,r2,r3
11204e4c:	10c00017 	ldw	r3,0(r2)
11204e50:	e0bfff17 	ldw	r2,-4(fp)
11204e54:	10800017 	ldw	r2,0(r2)
11204e58:	1880111e 	bne	r3,r2,11204ea0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
11204e5c:	00844834 	movhi	r2,4384
11204e60:	10981504 	addi	r2,r2,24660
11204e64:	e0fffe17 	ldw	r3,-8(fp)
11204e68:	18c00324 	muli	r3,r3,12
11204e6c:	10c5883a 	add	r2,r2,r3
11204e70:	10800204 	addi	r2,r2,8
11204e74:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
11204e78:	1000090e 	bge	r2,zero,11204ea0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
11204e7c:	e0bffe17 	ldw	r2,-8(fp)
11204e80:	10c00324 	muli	r3,r2,12
11204e84:	00844834 	movhi	r2,4384
11204e88:	10981504 	addi	r2,r2,24660
11204e8c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
11204e90:	e0bfff17 	ldw	r2,-4(fp)
11204e94:	18800226 	beq	r3,r2,11204ea0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
11204e98:	00bffcc4 	movi	r2,-13
11204e9c:	00000806 	br	11204ec0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
11204ea0:	e0bffe17 	ldw	r2,-8(fp)
11204ea4:	10800044 	addi	r2,r2,1
11204ea8:	e0bffe15 	stw	r2,-8(fp)
11204eac:	d0a00817 	ldw	r2,-32736(gp)
11204eb0:	1007883a 	mov	r3,r2
11204eb4:	e0bffe17 	ldw	r2,-8(fp)
11204eb8:	18bfdf2e 	bgeu	r3,r2,11204e38 <__alt_data_end+0xffe84e38>
    }
  }
  
  /* The device is not locked */
 
  return 0;
11204ebc:	0005883a 	mov	r2,zero
}
11204ec0:	e037883a 	mov	sp,fp
11204ec4:	df000017 	ldw	fp,0(sp)
11204ec8:	dec00104 	addi	sp,sp,4
11204ecc:	f800283a 	ret

11204ed0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
11204ed0:	defff604 	addi	sp,sp,-40
11204ed4:	dfc00915 	stw	ra,36(sp)
11204ed8:	df000815 	stw	fp,32(sp)
11204edc:	df000804 	addi	fp,sp,32
11204ee0:	e13ffd15 	stw	r4,-12(fp)
11204ee4:	e17ffe15 	stw	r5,-8(fp)
11204ee8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
11204eec:	00bfffc4 	movi	r2,-1
11204ef0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
11204ef4:	00bffb44 	movi	r2,-19
11204ef8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
11204efc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
11204f00:	d1600604 	addi	r5,gp,-32744
11204f04:	e13ffd17 	ldw	r4,-12(fp)
11204f08:	12051ec0 	call	112051ec <alt_find_dev>
11204f0c:	e0bff815 	stw	r2,-32(fp)
11204f10:	e0bff817 	ldw	r2,-32(fp)
11204f14:	1000051e 	bne	r2,zero,11204f2c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
11204f18:	e13ffd17 	ldw	r4,-12(fp)
11204f1c:	120527c0 	call	1120527c <alt_find_file>
11204f20:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
11204f24:	00800044 	movi	r2,1
11204f28:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
11204f2c:	e0bff817 	ldw	r2,-32(fp)
11204f30:	10002926 	beq	r2,zero,11204fd8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
11204f34:	e13ff817 	ldw	r4,-32(fp)
11204f38:	12053840 	call	11205384 <alt_get_fd>
11204f3c:	e0bff915 	stw	r2,-28(fp)
11204f40:	e0bff917 	ldw	r2,-28(fp)
11204f44:	1000030e 	bge	r2,zero,11204f54 <open+0x84>
    {
      status = index;
11204f48:	e0bff917 	ldw	r2,-28(fp)
11204f4c:	e0bffa15 	stw	r2,-24(fp)
11204f50:	00002306 	br	11204fe0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
11204f54:	e0bff917 	ldw	r2,-28(fp)
11204f58:	10c00324 	muli	r3,r2,12
11204f5c:	00844834 	movhi	r2,4384
11204f60:	10981504 	addi	r2,r2,24660
11204f64:	1885883a 	add	r2,r3,r2
11204f68:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
11204f6c:	e0fffe17 	ldw	r3,-8(fp)
11204f70:	00900034 	movhi	r2,16384
11204f74:	10bfffc4 	addi	r2,r2,-1
11204f78:	1886703a 	and	r3,r3,r2
11204f7c:	e0bffc17 	ldw	r2,-16(fp)
11204f80:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
11204f84:	e0bffb17 	ldw	r2,-20(fp)
11204f88:	1000051e 	bne	r2,zero,11204fa0 <open+0xd0>
11204f8c:	e13ffc17 	ldw	r4,-16(fp)
11204f90:	1204e0c0 	call	11204e0c <alt_file_locked>
11204f94:	e0bffa15 	stw	r2,-24(fp)
11204f98:	e0bffa17 	ldw	r2,-24(fp)
11204f9c:	10001016 	blt	r2,zero,11204fe0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
11204fa0:	e0bff817 	ldw	r2,-32(fp)
11204fa4:	10800317 	ldw	r2,12(r2)
11204fa8:	10000826 	beq	r2,zero,11204fcc <open+0xfc>
11204fac:	e0bff817 	ldw	r2,-32(fp)
11204fb0:	10800317 	ldw	r2,12(r2)
11204fb4:	e1ffff17 	ldw	r7,-4(fp)
11204fb8:	e1bffe17 	ldw	r6,-8(fp)
11204fbc:	e17ffd17 	ldw	r5,-12(fp)
11204fc0:	e13ffc17 	ldw	r4,-16(fp)
11204fc4:	103ee83a 	callr	r2
11204fc8:	00000106 	br	11204fd0 <open+0x100>
11204fcc:	0005883a 	mov	r2,zero
11204fd0:	e0bffa15 	stw	r2,-24(fp)
11204fd4:	00000206 	br	11204fe0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
11204fd8:	00bffb44 	movi	r2,-19
11204fdc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
11204fe0:	e0bffa17 	ldw	r2,-24(fp)
11204fe4:	1000090e 	bge	r2,zero,1120500c <open+0x13c>
  {
    alt_release_fd (index);  
11204fe8:	e13ff917 	ldw	r4,-28(fp)
11204fec:	120372c0 	call	1120372c <alt_release_fd>
    ALT_ERRNO = -status;
11204ff0:	1204dd00 	call	11204dd0 <alt_get_errno>
11204ff4:	1007883a 	mov	r3,r2
11204ff8:	e0bffa17 	ldw	r2,-24(fp)
11204ffc:	0085c83a 	sub	r2,zero,r2
11205000:	18800015 	stw	r2,0(r3)
    return -1;
11205004:	00bfffc4 	movi	r2,-1
11205008:	00000106 	br	11205010 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
1120500c:	e0bff917 	ldw	r2,-28(fp)
}
11205010:	e037883a 	mov	sp,fp
11205014:	dfc00117 	ldw	ra,4(sp)
11205018:	df000017 	ldw	fp,0(sp)
1120501c:	dec00204 	addi	sp,sp,8
11205020:	f800283a 	ret

11205024 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
11205024:	defffa04 	addi	sp,sp,-24
11205028:	df000515 	stw	fp,20(sp)
1120502c:	df000504 	addi	fp,sp,20
11205030:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
11205034:	0005303a 	rdctl	r2,status
11205038:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1120503c:	e0fffc17 	ldw	r3,-16(fp)
11205040:	00bfff84 	movi	r2,-2
11205044:	1884703a 	and	r2,r3,r2
11205048:	1001703a 	wrctl	status,r2
  
  return context;
1120504c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
11205050:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
11205054:	e0bfff17 	ldw	r2,-4(fp)
11205058:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1120505c:	e0bffd17 	ldw	r2,-12(fp)
11205060:	10800017 	ldw	r2,0(r2)
11205064:	e0fffd17 	ldw	r3,-12(fp)
11205068:	18c00117 	ldw	r3,4(r3)
1120506c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
11205070:	e0bffd17 	ldw	r2,-12(fp)
11205074:	10800117 	ldw	r2,4(r2)
11205078:	e0fffd17 	ldw	r3,-12(fp)
1120507c:	18c00017 	ldw	r3,0(r3)
11205080:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
11205084:	e0bffd17 	ldw	r2,-12(fp)
11205088:	e0fffd17 	ldw	r3,-12(fp)
1120508c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
11205090:	e0bffd17 	ldw	r2,-12(fp)
11205094:	e0fffd17 	ldw	r3,-12(fp)
11205098:	10c00015 	stw	r3,0(r2)
1120509c:	e0bffb17 	ldw	r2,-20(fp)
112050a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
112050a4:	e0bffe17 	ldw	r2,-8(fp)
112050a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
112050ac:	0001883a 	nop
112050b0:	e037883a 	mov	sp,fp
112050b4:	df000017 	ldw	fp,0(sp)
112050b8:	dec00104 	addi	sp,sp,4
112050bc:	f800283a 	ret

112050c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
112050c0:	defffb04 	addi	sp,sp,-20
112050c4:	dfc00415 	stw	ra,16(sp)
112050c8:	df000315 	stw	fp,12(sp)
112050cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
112050d0:	d0a00c17 	ldw	r2,-32720(gp)
112050d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
112050d8:	d0a01717 	ldw	r2,-32676(gp)
112050dc:	10800044 	addi	r2,r2,1
112050e0:	d0a01715 	stw	r2,-32676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
112050e4:	00002e06 	br	112051a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
112050e8:	e0bffd17 	ldw	r2,-12(fp)
112050ec:	10800017 	ldw	r2,0(r2)
112050f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
112050f4:	e0bffd17 	ldw	r2,-12(fp)
112050f8:	10800403 	ldbu	r2,16(r2)
112050fc:	10803fcc 	andi	r2,r2,255
11205100:	10000426 	beq	r2,zero,11205114 <alt_tick+0x54>
11205104:	d0a01717 	ldw	r2,-32676(gp)
11205108:	1000021e 	bne	r2,zero,11205114 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1120510c:	e0bffd17 	ldw	r2,-12(fp)
11205110:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
11205114:	e0bffd17 	ldw	r2,-12(fp)
11205118:	10800217 	ldw	r2,8(r2)
1120511c:	d0e01717 	ldw	r3,-32676(gp)
11205120:	18801d36 	bltu	r3,r2,11205198 <alt_tick+0xd8>
11205124:	e0bffd17 	ldw	r2,-12(fp)
11205128:	10800403 	ldbu	r2,16(r2)
1120512c:	10803fcc 	andi	r2,r2,255
11205130:	1000191e 	bne	r2,zero,11205198 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
11205134:	e0bffd17 	ldw	r2,-12(fp)
11205138:	10800317 	ldw	r2,12(r2)
1120513c:	e0fffd17 	ldw	r3,-12(fp)
11205140:	18c00517 	ldw	r3,20(r3)
11205144:	1809883a 	mov	r4,r3
11205148:	103ee83a 	callr	r2
1120514c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
11205150:	e0bfff17 	ldw	r2,-4(fp)
11205154:	1000031e 	bne	r2,zero,11205164 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
11205158:	e13ffd17 	ldw	r4,-12(fp)
1120515c:	12050240 	call	11205024 <alt_alarm_stop>
11205160:	00000d06 	br	11205198 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
11205164:	e0bffd17 	ldw	r2,-12(fp)
11205168:	10c00217 	ldw	r3,8(r2)
1120516c:	e0bfff17 	ldw	r2,-4(fp)
11205170:	1887883a 	add	r3,r3,r2
11205174:	e0bffd17 	ldw	r2,-12(fp)
11205178:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1120517c:	e0bffd17 	ldw	r2,-12(fp)
11205180:	10c00217 	ldw	r3,8(r2)
11205184:	d0a01717 	ldw	r2,-32676(gp)
11205188:	1880032e 	bgeu	r3,r2,11205198 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1120518c:	e0bffd17 	ldw	r2,-12(fp)
11205190:	00c00044 	movi	r3,1
11205194:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
11205198:	e0bffe17 	ldw	r2,-8(fp)
1120519c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
112051a0:	e0fffd17 	ldw	r3,-12(fp)
112051a4:	d0a00c04 	addi	r2,gp,-32720
112051a8:	18bfcf1e 	bne	r3,r2,112050e8 <__alt_data_end+0xffe850e8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
112051ac:	0001883a 	nop
}
112051b0:	0001883a 	nop
112051b4:	e037883a 	mov	sp,fp
112051b8:	dfc00117 	ldw	ra,4(sp)
112051bc:	df000017 	ldw	fp,0(sp)
112051c0:	dec00204 	addi	sp,sp,8
112051c4:	f800283a 	ret

112051c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
112051c8:	deffff04 	addi	sp,sp,-4
112051cc:	df000015 	stw	fp,0(sp)
112051d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
112051d4:	000170fa 	wrctl	ienable,zero
}
112051d8:	0001883a 	nop
112051dc:	e037883a 	mov	sp,fp
112051e0:	df000017 	ldw	fp,0(sp)
112051e4:	dec00104 	addi	sp,sp,4
112051e8:	f800283a 	ret

112051ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
112051ec:	defffa04 	addi	sp,sp,-24
112051f0:	dfc00515 	stw	ra,20(sp)
112051f4:	df000415 	stw	fp,16(sp)
112051f8:	df000404 	addi	fp,sp,16
112051fc:	e13ffe15 	stw	r4,-8(fp)
11205200:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
11205204:	e0bfff17 	ldw	r2,-4(fp)
11205208:	10800017 	ldw	r2,0(r2)
1120520c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
11205210:	e13ffe17 	ldw	r4,-8(fp)
11205214:	12004280 	call	11200428 <strlen>
11205218:	10800044 	addi	r2,r2,1
1120521c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
11205220:	00000d06 	br	11205258 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
11205224:	e0bffc17 	ldw	r2,-16(fp)
11205228:	10800217 	ldw	r2,8(r2)
1120522c:	e0fffd17 	ldw	r3,-12(fp)
11205230:	180d883a 	mov	r6,r3
11205234:	e17ffe17 	ldw	r5,-8(fp)
11205238:	1009883a 	mov	r4,r2
1120523c:	12054740 	call	11205474 <memcmp>
11205240:	1000021e 	bne	r2,zero,1120524c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
11205244:	e0bffc17 	ldw	r2,-16(fp)
11205248:	00000706 	br	11205268 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1120524c:	e0bffc17 	ldw	r2,-16(fp)
11205250:	10800017 	ldw	r2,0(r2)
11205254:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
11205258:	e0fffc17 	ldw	r3,-16(fp)
1120525c:	e0bfff17 	ldw	r2,-4(fp)
11205260:	18bff01e 	bne	r3,r2,11205224 <__alt_data_end+0xffe85224>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
11205264:	0005883a 	mov	r2,zero
}
11205268:	e037883a 	mov	sp,fp
1120526c:	dfc00117 	ldw	ra,4(sp)
11205270:	df000017 	ldw	fp,0(sp)
11205274:	dec00204 	addi	sp,sp,8
11205278:	f800283a 	ret

1120527c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1120527c:	defffb04 	addi	sp,sp,-20
11205280:	dfc00415 	stw	ra,16(sp)
11205284:	df000315 	stw	fp,12(sp)
11205288:	df000304 	addi	fp,sp,12
1120528c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
11205290:	d0a00417 	ldw	r2,-32752(gp)
11205294:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
11205298:	00003106 	br	11205360 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1120529c:	e0bffd17 	ldw	r2,-12(fp)
112052a0:	10800217 	ldw	r2,8(r2)
112052a4:	1009883a 	mov	r4,r2
112052a8:	12004280 	call	11200428 <strlen>
112052ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
112052b0:	e0bffd17 	ldw	r2,-12(fp)
112052b4:	10c00217 	ldw	r3,8(r2)
112052b8:	e0bffe17 	ldw	r2,-8(fp)
112052bc:	10bfffc4 	addi	r2,r2,-1
112052c0:	1885883a 	add	r2,r3,r2
112052c4:	10800003 	ldbu	r2,0(r2)
112052c8:	10803fcc 	andi	r2,r2,255
112052cc:	1080201c 	xori	r2,r2,128
112052d0:	10bfe004 	addi	r2,r2,-128
112052d4:	10800bd8 	cmpnei	r2,r2,47
112052d8:	1000031e 	bne	r2,zero,112052e8 <alt_find_file+0x6c>
    {
      len -= 1;
112052dc:	e0bffe17 	ldw	r2,-8(fp)
112052e0:	10bfffc4 	addi	r2,r2,-1
112052e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
112052e8:	e0bffe17 	ldw	r2,-8(fp)
112052ec:	e0ffff17 	ldw	r3,-4(fp)
112052f0:	1885883a 	add	r2,r3,r2
112052f4:	10800003 	ldbu	r2,0(r2)
112052f8:	10803fcc 	andi	r2,r2,255
112052fc:	1080201c 	xori	r2,r2,128
11205300:	10bfe004 	addi	r2,r2,-128
11205304:	10800be0 	cmpeqi	r2,r2,47
11205308:	1000081e 	bne	r2,zero,1120532c <alt_find_file+0xb0>
1120530c:	e0bffe17 	ldw	r2,-8(fp)
11205310:	e0ffff17 	ldw	r3,-4(fp)
11205314:	1885883a 	add	r2,r3,r2
11205318:	10800003 	ldbu	r2,0(r2)
1120531c:	10803fcc 	andi	r2,r2,255
11205320:	1080201c 	xori	r2,r2,128
11205324:	10bfe004 	addi	r2,r2,-128
11205328:	10000a1e 	bne	r2,zero,11205354 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1120532c:	e0bffd17 	ldw	r2,-12(fp)
11205330:	10800217 	ldw	r2,8(r2)
11205334:	e0fffe17 	ldw	r3,-8(fp)
11205338:	180d883a 	mov	r6,r3
1120533c:	e17fff17 	ldw	r5,-4(fp)
11205340:	1009883a 	mov	r4,r2
11205344:	12054740 	call	11205474 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
11205348:	1000021e 	bne	r2,zero,11205354 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1120534c:	e0bffd17 	ldw	r2,-12(fp)
11205350:	00000706 	br	11205370 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
11205354:	e0bffd17 	ldw	r2,-12(fp)
11205358:	10800017 	ldw	r2,0(r2)
1120535c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
11205360:	e0fffd17 	ldw	r3,-12(fp)
11205364:	d0a00404 	addi	r2,gp,-32752
11205368:	18bfcc1e 	bne	r3,r2,1120529c <__alt_data_end+0xffe8529c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1120536c:	0005883a 	mov	r2,zero
}
11205370:	e037883a 	mov	sp,fp
11205374:	dfc00117 	ldw	ra,4(sp)
11205378:	df000017 	ldw	fp,0(sp)
1120537c:	dec00204 	addi	sp,sp,8
11205380:	f800283a 	ret

11205384 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
11205384:	defffc04 	addi	sp,sp,-16
11205388:	df000315 	stw	fp,12(sp)
1120538c:	df000304 	addi	fp,sp,12
11205390:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
11205394:	00bffa04 	movi	r2,-24
11205398:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1120539c:	e03ffd15 	stw	zero,-12(fp)
112053a0:	00001906 	br	11205408 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
112053a4:	00844834 	movhi	r2,4384
112053a8:	10981504 	addi	r2,r2,24660
112053ac:	e0fffd17 	ldw	r3,-12(fp)
112053b0:	18c00324 	muli	r3,r3,12
112053b4:	10c5883a 	add	r2,r2,r3
112053b8:	10800017 	ldw	r2,0(r2)
112053bc:	10000f1e 	bne	r2,zero,112053fc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
112053c0:	00844834 	movhi	r2,4384
112053c4:	10981504 	addi	r2,r2,24660
112053c8:	e0fffd17 	ldw	r3,-12(fp)
112053cc:	18c00324 	muli	r3,r3,12
112053d0:	10c5883a 	add	r2,r2,r3
112053d4:	e0ffff17 	ldw	r3,-4(fp)
112053d8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
112053dc:	d0e00817 	ldw	r3,-32736(gp)
112053e0:	e0bffd17 	ldw	r2,-12(fp)
112053e4:	1880020e 	bge	r3,r2,112053f0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
112053e8:	e0bffd17 	ldw	r2,-12(fp)
112053ec:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
112053f0:	e0bffd17 	ldw	r2,-12(fp)
112053f4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
112053f8:	00000606 	br	11205414 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
112053fc:	e0bffd17 	ldw	r2,-12(fp)
11205400:	10800044 	addi	r2,r2,1
11205404:	e0bffd15 	stw	r2,-12(fp)
11205408:	e0bffd17 	ldw	r2,-12(fp)
1120540c:	10800810 	cmplti	r2,r2,32
11205410:	103fe41e 	bne	r2,zero,112053a4 <__alt_data_end+0xffe853a4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
11205414:	e0bffe17 	ldw	r2,-8(fp)
}
11205418:	e037883a 	mov	sp,fp
1120541c:	df000017 	ldw	fp,0(sp)
11205420:	dec00104 	addi	sp,sp,4
11205424:	f800283a 	ret

11205428 <atexit>:
11205428:	200b883a 	mov	r5,r4
1120542c:	000f883a 	mov	r7,zero
11205430:	000d883a 	mov	r6,zero
11205434:	0009883a 	mov	r4,zero
11205438:	12054f01 	jmpi	112054f0 <__register_exitproc>

1120543c <exit>:
1120543c:	defffe04 	addi	sp,sp,-8
11205440:	000b883a 	mov	r5,zero
11205444:	dc000015 	stw	r16,0(sp)
11205448:	dfc00115 	stw	ra,4(sp)
1120544c:	2021883a 	mov	r16,r4
11205450:	12056080 	call	11205608 <__call_exitprocs>
11205454:	00844834 	movhi	r2,4384
11205458:	109c8d04 	addi	r2,r2,29236
1120545c:	11000017 	ldw	r4,0(r2)
11205460:	20800f17 	ldw	r2,60(r4)
11205464:	10000126 	beq	r2,zero,1120546c <exit+0x30>
11205468:	103ee83a 	callr	r2
1120546c:	8009883a 	mov	r4,r16
11205470:	12057880 	call	11205788 <_exit>

11205474 <memcmp>:
11205474:	01c000c4 	movi	r7,3
11205478:	3980192e 	bgeu	r7,r6,112054e0 <memcmp+0x6c>
1120547c:	2144b03a 	or	r2,r4,r5
11205480:	11c4703a 	and	r2,r2,r7
11205484:	10000f26 	beq	r2,zero,112054c4 <memcmp+0x50>
11205488:	20800003 	ldbu	r2,0(r4)
1120548c:	28c00003 	ldbu	r3,0(r5)
11205490:	10c0151e 	bne	r2,r3,112054e8 <memcmp+0x74>
11205494:	31bfff84 	addi	r6,r6,-2
11205498:	01ffffc4 	movi	r7,-1
1120549c:	00000406 	br	112054b0 <memcmp+0x3c>
112054a0:	20800003 	ldbu	r2,0(r4)
112054a4:	28c00003 	ldbu	r3,0(r5)
112054a8:	31bfffc4 	addi	r6,r6,-1
112054ac:	10c00e1e 	bne	r2,r3,112054e8 <memcmp+0x74>
112054b0:	21000044 	addi	r4,r4,1
112054b4:	29400044 	addi	r5,r5,1
112054b8:	31fff91e 	bne	r6,r7,112054a0 <__alt_data_end+0xffe854a0>
112054bc:	0005883a 	mov	r2,zero
112054c0:	f800283a 	ret
112054c4:	20c00017 	ldw	r3,0(r4)
112054c8:	28800017 	ldw	r2,0(r5)
112054cc:	18bfee1e 	bne	r3,r2,11205488 <__alt_data_end+0xffe85488>
112054d0:	31bfff04 	addi	r6,r6,-4
112054d4:	21000104 	addi	r4,r4,4
112054d8:	29400104 	addi	r5,r5,4
112054dc:	39bff936 	bltu	r7,r6,112054c4 <__alt_data_end+0xffe854c4>
112054e0:	303fe91e 	bne	r6,zero,11205488 <__alt_data_end+0xffe85488>
112054e4:	003ff506 	br	112054bc <__alt_data_end+0xffe854bc>
112054e8:	10c5c83a 	sub	r2,r2,r3
112054ec:	f800283a 	ret

112054f0 <__register_exitproc>:
112054f0:	defffa04 	addi	sp,sp,-24
112054f4:	dc000315 	stw	r16,12(sp)
112054f8:	04044834 	movhi	r16,4384
112054fc:	841c8d04 	addi	r16,r16,29236
11205500:	80c00017 	ldw	r3,0(r16)
11205504:	dc400415 	stw	r17,16(sp)
11205508:	dfc00515 	stw	ra,20(sp)
1120550c:	18805217 	ldw	r2,328(r3)
11205510:	2023883a 	mov	r17,r4
11205514:	10003726 	beq	r2,zero,112055f4 <__register_exitproc+0x104>
11205518:	10c00117 	ldw	r3,4(r2)
1120551c:	010007c4 	movi	r4,31
11205520:	20c00e16 	blt	r4,r3,1120555c <__register_exitproc+0x6c>
11205524:	1a000044 	addi	r8,r3,1
11205528:	8800221e 	bne	r17,zero,112055b4 <__register_exitproc+0xc4>
1120552c:	18c00084 	addi	r3,r3,2
11205530:	18c7883a 	add	r3,r3,r3
11205534:	18c7883a 	add	r3,r3,r3
11205538:	12000115 	stw	r8,4(r2)
1120553c:	10c7883a 	add	r3,r2,r3
11205540:	19400015 	stw	r5,0(r3)
11205544:	0005883a 	mov	r2,zero
11205548:	dfc00517 	ldw	ra,20(sp)
1120554c:	dc400417 	ldw	r17,16(sp)
11205550:	dc000317 	ldw	r16,12(sp)
11205554:	dec00604 	addi	sp,sp,24
11205558:	f800283a 	ret
1120555c:	00800034 	movhi	r2,0
11205560:	10800004 	addi	r2,r2,0
11205564:	10002626 	beq	r2,zero,11205600 <__register_exitproc+0x110>
11205568:	01006404 	movi	r4,400
1120556c:	d9400015 	stw	r5,0(sp)
11205570:	d9800115 	stw	r6,4(sp)
11205574:	d9c00215 	stw	r7,8(sp)
11205578:	00000000 	call	10000000 <__reset+0xb6c0000>
1120557c:	d9400017 	ldw	r5,0(sp)
11205580:	d9800117 	ldw	r6,4(sp)
11205584:	d9c00217 	ldw	r7,8(sp)
11205588:	10001d26 	beq	r2,zero,11205600 <__register_exitproc+0x110>
1120558c:	81000017 	ldw	r4,0(r16)
11205590:	10000115 	stw	zero,4(r2)
11205594:	02000044 	movi	r8,1
11205598:	22405217 	ldw	r9,328(r4)
1120559c:	0007883a 	mov	r3,zero
112055a0:	12400015 	stw	r9,0(r2)
112055a4:	20805215 	stw	r2,328(r4)
112055a8:	10006215 	stw	zero,392(r2)
112055ac:	10006315 	stw	zero,396(r2)
112055b0:	883fde26 	beq	r17,zero,1120552c <__alt_data_end+0xffe8552c>
112055b4:	18c9883a 	add	r4,r3,r3
112055b8:	2109883a 	add	r4,r4,r4
112055bc:	1109883a 	add	r4,r2,r4
112055c0:	21802215 	stw	r6,136(r4)
112055c4:	01800044 	movi	r6,1
112055c8:	12406217 	ldw	r9,392(r2)
112055cc:	30cc983a 	sll	r6,r6,r3
112055d0:	4992b03a 	or	r9,r9,r6
112055d4:	12406215 	stw	r9,392(r2)
112055d8:	21c04215 	stw	r7,264(r4)
112055dc:	01000084 	movi	r4,2
112055e0:	893fd21e 	bne	r17,r4,1120552c <__alt_data_end+0xffe8552c>
112055e4:	11006317 	ldw	r4,396(r2)
112055e8:	218cb03a 	or	r6,r4,r6
112055ec:	11806315 	stw	r6,396(r2)
112055f0:	003fce06 	br	1120552c <__alt_data_end+0xffe8552c>
112055f4:	18805304 	addi	r2,r3,332
112055f8:	18805215 	stw	r2,328(r3)
112055fc:	003fc606 	br	11205518 <__alt_data_end+0xffe85518>
11205600:	00bfffc4 	movi	r2,-1
11205604:	003fd006 	br	11205548 <__alt_data_end+0xffe85548>

11205608 <__call_exitprocs>:
11205608:	defff504 	addi	sp,sp,-44
1120560c:	df000915 	stw	fp,36(sp)
11205610:	dd400615 	stw	r21,24(sp)
11205614:	dc800315 	stw	r18,12(sp)
11205618:	dfc00a15 	stw	ra,40(sp)
1120561c:	ddc00815 	stw	r23,32(sp)
11205620:	dd800715 	stw	r22,28(sp)
11205624:	dd000515 	stw	r20,20(sp)
11205628:	dcc00415 	stw	r19,16(sp)
1120562c:	dc400215 	stw	r17,8(sp)
11205630:	dc000115 	stw	r16,4(sp)
11205634:	d9000015 	stw	r4,0(sp)
11205638:	2839883a 	mov	fp,r5
1120563c:	04800044 	movi	r18,1
11205640:	057fffc4 	movi	r21,-1
11205644:	00844834 	movhi	r2,4384
11205648:	109c8d04 	addi	r2,r2,29236
1120564c:	12000017 	ldw	r8,0(r2)
11205650:	45005217 	ldw	r20,328(r8)
11205654:	44c05204 	addi	r19,r8,328
11205658:	a0001c26 	beq	r20,zero,112056cc <__call_exitprocs+0xc4>
1120565c:	a0800117 	ldw	r2,4(r20)
11205660:	15ffffc4 	addi	r23,r2,-1
11205664:	b8000d16 	blt	r23,zero,1120569c <__call_exitprocs+0x94>
11205668:	14000044 	addi	r16,r2,1
1120566c:	8421883a 	add	r16,r16,r16
11205670:	8421883a 	add	r16,r16,r16
11205674:	84402004 	addi	r17,r16,128
11205678:	a463883a 	add	r17,r20,r17
1120567c:	a421883a 	add	r16,r20,r16
11205680:	e0001e26 	beq	fp,zero,112056fc <__call_exitprocs+0xf4>
11205684:	80804017 	ldw	r2,256(r16)
11205688:	e0801c26 	beq	fp,r2,112056fc <__call_exitprocs+0xf4>
1120568c:	bdffffc4 	addi	r23,r23,-1
11205690:	843fff04 	addi	r16,r16,-4
11205694:	8c7fff04 	addi	r17,r17,-4
11205698:	bd7ff91e 	bne	r23,r21,11205680 <__alt_data_end+0xffe85680>
1120569c:	00800034 	movhi	r2,0
112056a0:	10800004 	addi	r2,r2,0
112056a4:	10000926 	beq	r2,zero,112056cc <__call_exitprocs+0xc4>
112056a8:	a0800117 	ldw	r2,4(r20)
112056ac:	1000301e 	bne	r2,zero,11205770 <__call_exitprocs+0x168>
112056b0:	a0800017 	ldw	r2,0(r20)
112056b4:	10003226 	beq	r2,zero,11205780 <__call_exitprocs+0x178>
112056b8:	a009883a 	mov	r4,r20
112056bc:	98800015 	stw	r2,0(r19)
112056c0:	00000000 	call	10000000 <__reset+0xb6c0000>
112056c4:	9d000017 	ldw	r20,0(r19)
112056c8:	a03fe41e 	bne	r20,zero,1120565c <__alt_data_end+0xffe8565c>
112056cc:	dfc00a17 	ldw	ra,40(sp)
112056d0:	df000917 	ldw	fp,36(sp)
112056d4:	ddc00817 	ldw	r23,32(sp)
112056d8:	dd800717 	ldw	r22,28(sp)
112056dc:	dd400617 	ldw	r21,24(sp)
112056e0:	dd000517 	ldw	r20,20(sp)
112056e4:	dcc00417 	ldw	r19,16(sp)
112056e8:	dc800317 	ldw	r18,12(sp)
112056ec:	dc400217 	ldw	r17,8(sp)
112056f0:	dc000117 	ldw	r16,4(sp)
112056f4:	dec00b04 	addi	sp,sp,44
112056f8:	f800283a 	ret
112056fc:	a0800117 	ldw	r2,4(r20)
11205700:	80c00017 	ldw	r3,0(r16)
11205704:	10bfffc4 	addi	r2,r2,-1
11205708:	15c01426 	beq	r2,r23,1120575c <__call_exitprocs+0x154>
1120570c:	80000015 	stw	zero,0(r16)
11205710:	183fde26 	beq	r3,zero,1120568c <__alt_data_end+0xffe8568c>
11205714:	95c8983a 	sll	r4,r18,r23
11205718:	a0806217 	ldw	r2,392(r20)
1120571c:	a5800117 	ldw	r22,4(r20)
11205720:	2084703a 	and	r2,r4,r2
11205724:	10000b26 	beq	r2,zero,11205754 <__call_exitprocs+0x14c>
11205728:	a0806317 	ldw	r2,396(r20)
1120572c:	2088703a 	and	r4,r4,r2
11205730:	20000c1e 	bne	r4,zero,11205764 <__call_exitprocs+0x15c>
11205734:	89400017 	ldw	r5,0(r17)
11205738:	d9000017 	ldw	r4,0(sp)
1120573c:	183ee83a 	callr	r3
11205740:	a0800117 	ldw	r2,4(r20)
11205744:	15bfbf1e 	bne	r2,r22,11205644 <__alt_data_end+0xffe85644>
11205748:	98800017 	ldw	r2,0(r19)
1120574c:	153fcf26 	beq	r2,r20,1120568c <__alt_data_end+0xffe8568c>
11205750:	003fbc06 	br	11205644 <__alt_data_end+0xffe85644>
11205754:	183ee83a 	callr	r3
11205758:	003ff906 	br	11205740 <__alt_data_end+0xffe85740>
1120575c:	a5c00115 	stw	r23,4(r20)
11205760:	003feb06 	br	11205710 <__alt_data_end+0xffe85710>
11205764:	89000017 	ldw	r4,0(r17)
11205768:	183ee83a 	callr	r3
1120576c:	003ff406 	br	11205740 <__alt_data_end+0xffe85740>
11205770:	a0800017 	ldw	r2,0(r20)
11205774:	a027883a 	mov	r19,r20
11205778:	1029883a 	mov	r20,r2
1120577c:	003fb606 	br	11205658 <__alt_data_end+0xffe85658>
11205780:	0005883a 	mov	r2,zero
11205784:	003ffb06 	br	11205774 <__alt_data_end+0xffe85774>

11205788 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
11205788:	defffd04 	addi	sp,sp,-12
1120578c:	df000215 	stw	fp,8(sp)
11205790:	df000204 	addi	fp,sp,8
11205794:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
11205798:	0001883a 	nop
1120579c:	e0bfff17 	ldw	r2,-4(fp)
112057a0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
112057a4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
112057a8:	10000226 	beq	r2,zero,112057b4 <_exit+0x2c>
    ALT_SIM_FAIL();
112057ac:	002af070 	cmpltui	zero,zero,43969
112057b0:	00000106 	br	112057b8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
112057b4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
112057b8:	003fff06 	br	112057b8 <__alt_data_end+0xffe857b8>
