// QDRII_SLAVE_example.v

// This file was auto-generated from alt_mem_if_qdrii_tg_ed_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 203

`timescale 1 ps / 1 ps
module QDRII_SLAVE_example (
		input  wire        pll_ref_clk,                     //   pll_ref_clk.clk
		input  wire        global_reset_n,                  //  global_reset.reset_n
		input  wire        soft_reset_n,                    //    soft_reset.reset_n
		output wire        afi_clk,                         //       afi_clk.clk
		output wire        afi_half_clk,                    //  afi_half_clk.clk
		output wire        afi_reset_n,                     //     afi_reset.reset_n
		output wire [17:0] mem_d,                           //        memory.mem_d
		output wire [0:0]  mem_wps_n,                       //              .mem_wps_n
		output wire [1:0]  mem_bws_n,                       //              .mem_bws_n
		output wire [19:0] mem_a,                           //              .mem_a
		input  wire [17:0] mem_q,                           //              .mem_q
		output wire [0:0]  mem_rps_n,                       //              .mem_rps_n
		output wire [0:0]  mem_k,                           //              .mem_k
		output wire [0:0]  mem_k_n,                         //              .mem_k_n
		input  wire [0:0]  mem_cq,                          //              .mem_cq
		input  wire [0:0]  mem_cq_n,                        //              .mem_cq_n
		output wire [0:0]  mem_doff_n,                      //              .mem_doff_n
		output wire [17:0] memory_1_mem_d,                  //      memory_1.mem_d
		output wire [0:0]  memory_1_mem_wps_n,              //              .mem_wps_n
		output wire [1:0]  memory_1_mem_bws_n,              //              .mem_bws_n
		output wire [19:0] memory_1_mem_a,                  //              .mem_a
		input  wire [17:0] memory_1_mem_q,                  //              .mem_q
		output wire [0:0]  memory_1_mem_rps_n,              //              .mem_rps_n
		output wire [0:0]  memory_1_mem_k,                  //              .mem_k
		output wire [0:0]  memory_1_mem_k_n,                //              .mem_k_n
		input  wire [0:0]  memory_1_mem_cq,                 //              .mem_cq
		input  wire [0:0]  memory_1_mem_cq_n,               //              .mem_cq_n
		output wire [0:0]  memory_1_mem_doff_n,             //              .mem_doff_n
		input  wire        oct_1_rzqin,                     //         oct_1.rzqin
		output wire        local_init_done,                 //   emif_status.local_init_done
		output wire        local_cal_success,               //              .local_cal_success
		output wire        local_cal_fail,                  //              .local_cal_fail
		output wire        emif_status_1_local_init_done,   // emif_status_1.local_init_done
		output wire        emif_status_1_local_cal_success, //              .local_cal_success
		output wire        emif_status_1_local_cal_fail,    //              .local_cal_fail
		output wire        drv_status_pass,                 //    drv_status.pass
		output wire        drv_status_fail,                 //              .fail
		output wire        drv_status_test_complete,        //              .test_complete
		output wire        drv_status_1_pass,               //  drv_status_1.pass
		output wire        drv_status_1_fail,               //              .fail
		output wire        drv_status_1_test_complete       //              .test_complete
	);

	wire         if1_pll_sharing_pll_write_clk;              // if1:pll_write_clk -> if0:pll_write_clk
	wire         if1_pll_sharing_pll_avl_clk;                // if1:pll_avl_clk -> if0:pll_avl_clk
	wire         if1_pll_sharing_pll_write_clk_pre_phy_clk;  // if1:pll_write_clk_pre_phy_clk -> if0:pll_write_clk_pre_phy_clk
	wire         if1_pll_sharing_pll_addr_cmd_clk;           // if1:pll_addr_cmd_clk -> if0:pll_addr_cmd_clk
	wire         if1_pll_sharing_pll_p2c_read_clk;           // if1:pll_p2c_read_clk -> if0:pll_p2c_read_clk
	wire         if1_pll_sharing_pll_config_clk;             // if1:pll_config_clk -> if0:pll_config_clk
	wire         if1_pll_sharing_pll_mem_clk;                // if1:pll_mem_clk -> if0:pll_mem_clk
	wire         if1_pll_sharing_pll_locked;                 // if1:pll_locked -> if0:pll_locked
	wire         if1_pll_sharing_pll_c2p_write_clk;          // if1:pll_c2p_write_clk -> if0:pll_c2p_write_clk
	wire         if0_dll_sharing_dll_pll_locked;             // if0:dll_pll_locked -> if1:dll_pll_locked
	wire   [6:0] if1_dll_sharing_dll_delayctrl;              // if1:dll_delayctrl -> if0:dll_delayctrl
	wire  [15:0] if1_oct_sharing_parallelterminationcontrol; // if1:parallelterminationcontrol -> if0:parallelterminationcontrol
	wire  [15:0] if1_oct_sharing_seriesterminationcontrol;   // if1:seriesterminationcontrol -> if0:seriesterminationcontrol
	wire         if1_afi_reset_export_reset;                 // if1:afi_reset_export_n -> [if0:afi_reset_n, rst_controller_001:reset_in0]
	wire         d0_avl_w_waitrequest;                       // mm_interconnect_0:d0_avl_w_waitrequest -> d0:avl_ready_w
	wire  [22:0] d0_avl_w_address;                           // d0:avl_addr_w -> mm_interconnect_0:d0_avl_w_address
	wire         d0_avl_w_write;                             // d0:avl_write_req -> mm_interconnect_0:d0_avl_w_write
	wire  [71:0] d0_avl_w_writedata;                         // d0:avl_wdata -> mm_interconnect_0:d0_avl_w_writedata
	wire         d0_avl_w_burstcount;                        // d0:avl_size_w -> mm_interconnect_0:d0_avl_w_burstcount
	wire         mm_interconnect_0_if0_avl_w_waitrequest;    // if0:avl_w_ready -> mm_interconnect_0:if0_avl_w_waitrequest
	wire  [19:0] mm_interconnect_0_if0_avl_w_address;        // mm_interconnect_0:if0_avl_w_address -> if0:avl_w_addr
	wire         mm_interconnect_0_if0_avl_w_write;          // mm_interconnect_0:if0_avl_w_write -> if0:avl_w_write_req
	wire  [71:0] mm_interconnect_0_if0_avl_w_writedata;      // mm_interconnect_0:if0_avl_w_writedata -> if0:avl_w_wdata
	wire   [0:0] mm_interconnect_0_if0_avl_w_burstcount;     // mm_interconnect_0:if0_avl_w_burstcount -> if0:avl_w_size
	wire         d0_avl_r_waitrequest;                       // mm_interconnect_1:d0_avl_r_waitrequest -> d0:avl_ready
	wire  [71:0] d0_avl_r_readdata;                          // mm_interconnect_1:d0_avl_r_readdata -> d0:avl_rdata
	wire         d0_avl_r_read;                              // d0:avl_read_req -> mm_interconnect_1:d0_avl_r_read
	wire  [22:0] d0_avl_r_address;                           // d0:avl_addr -> mm_interconnect_1:d0_avl_r_address
	wire         d0_avl_r_readdatavalid;                     // mm_interconnect_1:d0_avl_r_readdatavalid -> d0:avl_rdata_valid
	wire         d0_avl_r_burstcount;                        // d0:avl_size -> mm_interconnect_1:d0_avl_r_burstcount
	wire  [71:0] mm_interconnect_1_if0_avl_r_readdata;       // if0:avl_r_rdata -> mm_interconnect_1:if0_avl_r_readdata
	wire         mm_interconnect_1_if0_avl_r_waitrequest;    // if0:avl_r_ready -> mm_interconnect_1:if0_avl_r_waitrequest
	wire  [19:0] mm_interconnect_1_if0_avl_r_address;        // mm_interconnect_1:if0_avl_r_address -> if0:avl_r_addr
	wire         mm_interconnect_1_if0_avl_r_read;           // mm_interconnect_1:if0_avl_r_read -> if0:avl_r_read_req
	wire         mm_interconnect_1_if0_avl_r_readdatavalid;  // if0:avl_r_rdata_valid -> mm_interconnect_1:if0_avl_r_readdatavalid
	wire   [0:0] mm_interconnect_1_if0_avl_r_burstcount;     // mm_interconnect_1:if0_avl_r_burstcount -> if0:avl_r_size
	wire         d1_avl_w_waitrequest;                       // mm_interconnect_2:d1_avl_w_waitrequest -> d1:avl_ready_w
	wire  [22:0] d1_avl_w_address;                           // d1:avl_addr_w -> mm_interconnect_2:d1_avl_w_address
	wire         d1_avl_w_write;                             // d1:avl_write_req -> mm_interconnect_2:d1_avl_w_write
	wire  [71:0] d1_avl_w_writedata;                         // d1:avl_wdata -> mm_interconnect_2:d1_avl_w_writedata
	wire         d1_avl_w_burstcount;                        // d1:avl_size_w -> mm_interconnect_2:d1_avl_w_burstcount
	wire         mm_interconnect_2_if1_avl_w_waitrequest;    // if1:avl_w_ready -> mm_interconnect_2:if1_avl_w_waitrequest
	wire  [19:0] mm_interconnect_2_if1_avl_w_address;        // mm_interconnect_2:if1_avl_w_address -> if1:avl_w_addr
	wire         mm_interconnect_2_if1_avl_w_write;          // mm_interconnect_2:if1_avl_w_write -> if1:avl_w_write_req
	wire  [71:0] mm_interconnect_2_if1_avl_w_writedata;      // mm_interconnect_2:if1_avl_w_writedata -> if1:avl_w_wdata
	wire   [0:0] mm_interconnect_2_if1_avl_w_burstcount;     // mm_interconnect_2:if1_avl_w_burstcount -> if1:avl_w_size
	wire         d1_avl_r_waitrequest;                       // mm_interconnect_3:d1_avl_r_waitrequest -> d1:avl_ready
	wire  [71:0] d1_avl_r_readdata;                          // mm_interconnect_3:d1_avl_r_readdata -> d1:avl_rdata
	wire         d1_avl_r_read;                              // d1:avl_read_req -> mm_interconnect_3:d1_avl_r_read
	wire  [22:0] d1_avl_r_address;                           // d1:avl_addr -> mm_interconnect_3:d1_avl_r_address
	wire         d1_avl_r_readdatavalid;                     // mm_interconnect_3:d1_avl_r_readdatavalid -> d1:avl_rdata_valid
	wire         d1_avl_r_burstcount;                        // d1:avl_size -> mm_interconnect_3:d1_avl_r_burstcount
	wire  [71:0] mm_interconnect_3_if1_avl_r_readdata;       // if1:avl_r_rdata -> mm_interconnect_3:if1_avl_r_readdata
	wire         mm_interconnect_3_if1_avl_r_waitrequest;    // if1:avl_r_ready -> mm_interconnect_3:if1_avl_r_waitrequest
	wire  [19:0] mm_interconnect_3_if1_avl_r_address;        // mm_interconnect_3:if1_avl_r_address -> if1:avl_r_addr
	wire         mm_interconnect_3_if1_avl_r_read;           // mm_interconnect_3:if1_avl_r_read -> if1:avl_r_read_req
	wire         mm_interconnect_3_if1_avl_r_readdatavalid;  // if1:avl_r_rdata_valid -> mm_interconnect_3:if1_avl_r_readdatavalid
	wire   [0:0] mm_interconnect_3_if1_avl_r_burstcount;     // mm_interconnect_3:if1_avl_r_burstcount -> if1:avl_r_size
	wire         rst_controller_reset_out_reset;             // rst_controller:reset_out -> [mm_interconnect_0:d0_avl_reset_reset_bridge_in_reset_reset, mm_interconnect_0:d0_avl_w_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_1:d0_avl_r_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_1:d0_avl_reset_reset_bridge_in_reset_reset, mm_interconnect_2:d1_avl_reset_reset_bridge_in_reset_reset, mm_interconnect_2:d1_avl_w_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_3:d1_avl_r_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_3:d1_avl_reset_reset_bridge_in_reset_reset]
	wire         rst_controller_001_reset_out_reset;         // rst_controller_001:reset_out -> [mm_interconnect_0:if0_afi_reset_in_reset_bridge_in_reset_reset, mm_interconnect_0:if0_avl_w_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_1:if0_afi_reset_in_reset_bridge_in_reset_reset, mm_interconnect_1:if0_avl_r_translator_reset_reset_bridge_in_reset_reset]
	wire         rst_controller_002_reset_out_reset;         // rst_controller_002:reset_out -> [mm_interconnect_2:if1_avl_w_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_2:if1_soft_reset_reset_bridge_in_reset_reset, mm_interconnect_3:if1_avl_r_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_3:if1_soft_reset_reset_bridge_in_reset_reset]

	QDRII_SLAVE_example_if0 if0 (
		.global_reset_n             (global_reset_n),                             //    global_reset.reset_n
		.soft_reset_n               (soft_reset_n),                               //      soft_reset.reset_n
		.afi_clk                    (afi_clk),                                    //      afi_clk_in.clk
		.afi_half_clk               (afi_half_clk),                               // afi_half_clk_in.clk
		.afi_reset_n                (if1_afi_reset_export_reset),                 //    afi_reset_in.reset_n
		.mem_d                      (mem_d),                                      //          memory.mem_d
		.mem_wps_n                  (mem_wps_n),                                  //                .mem_wps_n
		.mem_bws_n                  (mem_bws_n),                                  //                .mem_bws_n
		.mem_a                      (mem_a),                                      //                .mem_a
		.mem_q                      (mem_q),                                      //                .mem_q
		.mem_rps_n                  (mem_rps_n),                                  //                .mem_rps_n
		.mem_k                      (mem_k),                                      //                .mem_k
		.mem_k_n                    (mem_k_n),                                    //                .mem_k_n
		.mem_cq                     (mem_cq),                                     //                .mem_cq
		.mem_cq_n                   (mem_cq_n),                                   //                .mem_cq_n
		.mem_doff_n                 (mem_doff_n),                                 //                .mem_doff_n
		.avl_w_write_req            (mm_interconnect_0_if0_avl_w_write),          //           avl_w.write
		.avl_w_ready                (mm_interconnect_0_if0_avl_w_waitrequest),    //                .waitrequest_n
		.avl_w_addr                 (mm_interconnect_0_if0_avl_w_address),        //                .address
		.avl_w_size                 (mm_interconnect_0_if0_avl_w_burstcount),     //                .burstcount
		.avl_w_wdata                (mm_interconnect_0_if0_avl_w_writedata),      //                .writedata
		.avl_r_read_req             (mm_interconnect_1_if0_avl_r_read),           //           avl_r.read
		.avl_r_ready                (mm_interconnect_1_if0_avl_r_waitrequest),    //                .waitrequest_n
		.avl_r_addr                 (mm_interconnect_1_if0_avl_r_address),        //                .address
		.avl_r_size                 (mm_interconnect_1_if0_avl_r_burstcount),     //                .burstcount
		.avl_r_rdata_valid          (mm_interconnect_1_if0_avl_r_readdatavalid),  //                .readdatavalid
		.avl_r_rdata                (mm_interconnect_1_if0_avl_r_readdata),       //                .readdata
		.local_init_done            (local_init_done),                            //          status.local_init_done
		.local_cal_success          (local_cal_success),                          //                .local_cal_success
		.local_cal_fail             (local_cal_fail),                             //                .local_cal_fail
		.seriesterminationcontrol   (if1_oct_sharing_seriesterminationcontrol),   //     oct_sharing.seriesterminationcontrol
		.parallelterminationcontrol (if1_oct_sharing_parallelterminationcontrol), //                .parallelterminationcontrol
		.pll_mem_clk                (if1_pll_sharing_pll_mem_clk),                //     pll_sharing.pll_mem_clk
		.pll_write_clk              (if1_pll_sharing_pll_write_clk),              //                .pll_write_clk
		.pll_locked                 (if1_pll_sharing_pll_locked),                 //                .pll_locked
		.pll_write_clk_pre_phy_clk  (if1_pll_sharing_pll_write_clk_pre_phy_clk),  //                .pll_write_clk_pre_phy_clk
		.pll_addr_cmd_clk           (if1_pll_sharing_pll_addr_cmd_clk),           //                .pll_addr_cmd_clk
		.pll_avl_clk                (if1_pll_sharing_pll_avl_clk),                //                .pll_avl_clk
		.pll_config_clk             (if1_pll_sharing_pll_config_clk),             //                .pll_config_clk
		.pll_p2c_read_clk           (if1_pll_sharing_pll_p2c_read_clk),           //                .pll_p2c_read_clk
		.pll_c2p_write_clk          (if1_pll_sharing_pll_c2p_write_clk),          //                .pll_c2p_write_clk
		.dll_pll_locked             (if0_dll_sharing_dll_pll_locked),             //     dll_sharing.dll_pll_locked
		.dll_delayctrl              (if1_dll_sharing_dll_delayctrl)               //                .dll_delayctrl
	);

	QDRII_SLAVE_example_if1 if1 (
		.pll_ref_clk                (pll_ref_clk),                                //      pll_ref_clk.clk
		.global_reset_n             (global_reset_n),                             //     global_reset.reset_n
		.soft_reset_n               (soft_reset_n),                               //       soft_reset.reset_n
		.afi_clk                    (afi_clk),                                    //          afi_clk.clk
		.afi_half_clk               (afi_half_clk),                               //     afi_half_clk.clk
		.afi_reset_n                (afi_reset_n),                                //        afi_reset.reset_n
		.afi_reset_export_n         (if1_afi_reset_export_reset),                 // afi_reset_export.reset_n
		.mem_d                      (memory_1_mem_d),                             //           memory.mem_d
		.mem_wps_n                  (memory_1_mem_wps_n),                         //                 .mem_wps_n
		.mem_bws_n                  (memory_1_mem_bws_n),                         //                 .mem_bws_n
		.mem_a                      (memory_1_mem_a),                             //                 .mem_a
		.mem_q                      (memory_1_mem_q),                             //                 .mem_q
		.mem_rps_n                  (memory_1_mem_rps_n),                         //                 .mem_rps_n
		.mem_k                      (memory_1_mem_k),                             //                 .mem_k
		.mem_k_n                    (memory_1_mem_k_n),                           //                 .mem_k_n
		.mem_cq                     (memory_1_mem_cq),                            //                 .mem_cq
		.mem_cq_n                   (memory_1_mem_cq_n),                          //                 .mem_cq_n
		.mem_doff_n                 (memory_1_mem_doff_n),                        //                 .mem_doff_n
		.avl_w_write_req            (mm_interconnect_2_if1_avl_w_write),          //            avl_w.write
		.avl_w_ready                (mm_interconnect_2_if1_avl_w_waitrequest),    //                 .waitrequest_n
		.avl_w_addr                 (mm_interconnect_2_if1_avl_w_address),        //                 .address
		.avl_w_size                 (mm_interconnect_2_if1_avl_w_burstcount),     //                 .burstcount
		.avl_w_wdata                (mm_interconnect_2_if1_avl_w_writedata),      //                 .writedata
		.avl_r_read_req             (mm_interconnect_3_if1_avl_r_read),           //            avl_r.read
		.avl_r_ready                (mm_interconnect_3_if1_avl_r_waitrequest),    //                 .waitrequest_n
		.avl_r_addr                 (mm_interconnect_3_if1_avl_r_address),        //                 .address
		.avl_r_size                 (mm_interconnect_3_if1_avl_r_burstcount),     //                 .burstcount
		.avl_r_rdata_valid          (mm_interconnect_3_if1_avl_r_readdatavalid),  //                 .readdatavalid
		.avl_r_rdata                (mm_interconnect_3_if1_avl_r_readdata),       //                 .readdata
		.local_init_done            (emif_status_1_local_init_done),              //           status.local_init_done
		.local_cal_success          (emif_status_1_local_cal_success),            //                 .local_cal_success
		.local_cal_fail             (emif_status_1_local_cal_fail),               //                 .local_cal_fail
		.oct_rzqin                  (oct_1_rzqin),                                //              oct.rzqin
		.seriesterminationcontrol   (if1_oct_sharing_seriesterminationcontrol),   //      oct_sharing.seriesterminationcontrol
		.parallelterminationcontrol (if1_oct_sharing_parallelterminationcontrol), //                 .parallelterminationcontrol
		.pll_mem_clk                (if1_pll_sharing_pll_mem_clk),                //      pll_sharing.pll_mem_clk
		.pll_write_clk              (if1_pll_sharing_pll_write_clk),              //                 .pll_write_clk
		.pll_locked                 (if1_pll_sharing_pll_locked),                 //                 .pll_locked
		.pll_write_clk_pre_phy_clk  (if1_pll_sharing_pll_write_clk_pre_phy_clk),  //                 .pll_write_clk_pre_phy_clk
		.pll_addr_cmd_clk           (if1_pll_sharing_pll_addr_cmd_clk),           //                 .pll_addr_cmd_clk
		.pll_avl_clk                (if1_pll_sharing_pll_avl_clk),                //                 .pll_avl_clk
		.pll_config_clk             (if1_pll_sharing_pll_config_clk),             //                 .pll_config_clk
		.pll_p2c_read_clk           (if1_pll_sharing_pll_p2c_read_clk),           //                 .pll_p2c_read_clk
		.pll_c2p_write_clk          (if1_pll_sharing_pll_c2p_write_clk),          //                 .pll_c2p_write_clk
		.dll_pll_locked             (if0_dll_sharing_dll_pll_locked),             //      dll_sharing.dll_pll_locked
		.dll_delayctrl              (if1_dll_sharing_dll_delayctrl)               //                 .dll_delayctrl
	);

	QDRII_SLAVE_example_d0 #(
		.DEVICE_FAMILY                          ("Stratix V"),
		.TG_AVL_DATA_WIDTH                      (72),
		.TG_AVL_ADDR_WIDTH                      (23),
		.TG_AVL_WORD_ADDR_WIDTH                 (20),
		.TG_AVL_SIZE_WIDTH                      (1),
		.TG_AVL_BE_WIDTH                        (8),
		.DRIVER_SIGNATURE                       (1431634081),
		.TG_GEN_BYTE_ADDR                       (1),
		.TG_NUM_DRIVER_LOOP                     (1),
		.TG_ENABLE_UNIX_ID                      (0),
		.TG_USE_UNIX_ID                         (0),
		.TG_RANDOM_BYTE_ENABLE                  (0),
		.TG_ENABLE_READ_COMPARE                 (1),
		.TG_POWER_OF_TWO_BURSTS_ONLY            (0),
		.TG_BURST_ON_BURST_BOUNDARY             (0),
		.TG_DO_NOT_CROSS_4KB_BOUNDARY           (0),
		.TG_TIMEOUT_COUNTER_WIDTH               (32),
		.TG_MAX_READ_LATENCY                    (20),
		.TG_SINGLE_RW_SEQ_ADDR_COUNT            (32),
		.TG_SINGLE_RW_RAND_ADDR_COUNT           (32),
		.TG_SINGLE_RW_RAND_SEQ_ADDR_COUNT       (32),
		.TG_BLOCK_RW_SEQ_ADDR_COUNT             (8),
		.TG_BLOCK_RW_RAND_ADDR_COUNT            (8),
		.TG_BLOCK_RW_RAND_SEQ_ADDR_COUNT        (8),
		.TG_BLOCK_RW_BLOCK_SIZE                 (8),
		.TG_TEMPLATE_STAGE_COUNT                (4),
		.TG_SEQ_ADDR_GEN_MIN_BURSTCOUNT         (1),
		.TG_SEQ_ADDR_GEN_MAX_BURSTCOUNT         (1),
		.TG_RAND_ADDR_GEN_MIN_BURSTCOUNT        (1),
		.TG_RAND_ADDR_GEN_MAX_BURSTCOUNT        (1),
		.TG_RAND_SEQ_ADDR_GEN_MIN_BURSTCOUNT    (1),
		.TG_RAND_SEQ_ADDR_GEN_MAX_BURSTCOUNT    (1),
		.TG_RAND_SEQ_ADDR_GEN_RAND_ADDR_PERCENT (50)
	) d0 (
		.clk             (afi_clk),                  // avl_clock.clk
		.reset_n         (afi_reset_n),              // avl_reset.reset_n
		.pass            (drv_status_pass),          //    status.pass
		.fail            (drv_status_fail),          //          .fail
		.test_complete   (drv_status_test_complete), //          .test_complete
		.avl_write_req   (d0_avl_w_write),           //     avl_w.write
		.avl_ready_w     (~d0_avl_w_waitrequest),    //          .waitrequest_n
		.avl_addr_w      (d0_avl_w_address),         //          .address
		.avl_size_w      (d0_avl_w_burstcount),      //          .burstcount
		.avl_wdata       (d0_avl_w_writedata),       //          .writedata
		.avl_read_req    (d0_avl_r_read),            //     avl_r.read
		.avl_ready       (~d0_avl_r_waitrequest),    //          .waitrequest_n
		.avl_addr        (d0_avl_r_address),         //          .address
		.avl_size        (d0_avl_r_burstcount),      //          .burstcount
		.avl_rdata_valid (d0_avl_r_readdatavalid),   //          .readdatavalid
		.avl_rdata       (d0_avl_r_readdata)         //          .readdata
	);

	QDRII_SLAVE_example_d0 #(
		.DEVICE_FAMILY                          ("Stratix V"),
		.TG_AVL_DATA_WIDTH                      (72),
		.TG_AVL_ADDR_WIDTH                      (23),
		.TG_AVL_WORD_ADDR_WIDTH                 (20),
		.TG_AVL_SIZE_WIDTH                      (1),
		.TG_AVL_BE_WIDTH                        (8),
		.DRIVER_SIGNATURE                       (1431634081),
		.TG_GEN_BYTE_ADDR                       (1),
		.TG_NUM_DRIVER_LOOP                     (1),
		.TG_ENABLE_UNIX_ID                      (0),
		.TG_USE_UNIX_ID                         (0),
		.TG_RANDOM_BYTE_ENABLE                  (0),
		.TG_ENABLE_READ_COMPARE                 (1),
		.TG_POWER_OF_TWO_BURSTS_ONLY            (0),
		.TG_BURST_ON_BURST_BOUNDARY             (0),
		.TG_DO_NOT_CROSS_4KB_BOUNDARY           (0),
		.TG_TIMEOUT_COUNTER_WIDTH               (32),
		.TG_MAX_READ_LATENCY                    (20),
		.TG_SINGLE_RW_SEQ_ADDR_COUNT            (32),
		.TG_SINGLE_RW_RAND_ADDR_COUNT           (32),
		.TG_SINGLE_RW_RAND_SEQ_ADDR_COUNT       (32),
		.TG_BLOCK_RW_SEQ_ADDR_COUNT             (8),
		.TG_BLOCK_RW_RAND_ADDR_COUNT            (8),
		.TG_BLOCK_RW_RAND_SEQ_ADDR_COUNT        (8),
		.TG_BLOCK_RW_BLOCK_SIZE                 (8),
		.TG_TEMPLATE_STAGE_COUNT                (4),
		.TG_SEQ_ADDR_GEN_MIN_BURSTCOUNT         (1),
		.TG_SEQ_ADDR_GEN_MAX_BURSTCOUNT         (1),
		.TG_RAND_ADDR_GEN_MIN_BURSTCOUNT        (1),
		.TG_RAND_ADDR_GEN_MAX_BURSTCOUNT        (1),
		.TG_RAND_SEQ_ADDR_GEN_MIN_BURSTCOUNT    (1),
		.TG_RAND_SEQ_ADDR_GEN_MAX_BURSTCOUNT    (1),
		.TG_RAND_SEQ_ADDR_GEN_RAND_ADDR_PERCENT (50)
	) d1 (
		.clk             (afi_clk),                    // avl_clock.clk
		.reset_n         (afi_reset_n),                // avl_reset.reset_n
		.pass            (drv_status_1_pass),          //    status.pass
		.fail            (drv_status_1_fail),          //          .fail
		.test_complete   (drv_status_1_test_complete), //          .test_complete
		.avl_write_req   (d1_avl_w_write),             //     avl_w.write
		.avl_ready_w     (~d1_avl_w_waitrequest),      //          .waitrequest_n
		.avl_addr_w      (d1_avl_w_address),           //          .address
		.avl_size_w      (d1_avl_w_burstcount),        //          .burstcount
		.avl_wdata       (d1_avl_w_writedata),         //          .writedata
		.avl_read_req    (d1_avl_r_read),              //     avl_r.read
		.avl_ready       (~d1_avl_r_waitrequest),      //          .waitrequest_n
		.avl_addr        (d1_avl_r_address),           //          .address
		.avl_size        (d1_avl_r_burstcount),        //          .burstcount
		.avl_rdata_valid (d1_avl_r_readdatavalid),     //          .readdatavalid
		.avl_rdata       (d1_avl_r_readdata)           //          .readdata
	);

	QDRII_SLAVE_example_mm_interconnect_0 mm_interconnect_0 (
		.if1_afi_clk_clk                                        (afi_clk),                                  //                                      if1_afi_clk.clk
		.d0_avl_reset_reset_bridge_in_reset_reset               (rst_controller_reset_out_reset),           //               d0_avl_reset_reset_bridge_in_reset.reset
		.d0_avl_w_translator_reset_reset_bridge_in_reset_reset  (rst_controller_reset_out_reset),           //  d0_avl_w_translator_reset_reset_bridge_in_reset.reset
		.if0_afi_reset_in_reset_bridge_in_reset_reset           (rst_controller_001_reset_out_reset),       //           if0_afi_reset_in_reset_bridge_in_reset.reset
		.if0_avl_w_translator_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),       // if0_avl_w_translator_reset_reset_bridge_in_reset.reset
		.d0_avl_w_address                                       (d0_avl_w_address),                         //                                         d0_avl_w.address
		.d0_avl_w_waitrequest                                   (d0_avl_w_waitrequest),                     //                                                 .waitrequest
		.d0_avl_w_burstcount                                    (d0_avl_w_burstcount),                      //                                                 .burstcount
		.d0_avl_w_write                                         (d0_avl_w_write),                           //                                                 .write
		.d0_avl_w_writedata                                     (d0_avl_w_writedata),                       //                                                 .writedata
		.if0_avl_w_address                                      (mm_interconnect_0_if0_avl_w_address),      //                                        if0_avl_w.address
		.if0_avl_w_write                                        (mm_interconnect_0_if0_avl_w_write),        //                                                 .write
		.if0_avl_w_writedata                                    (mm_interconnect_0_if0_avl_w_writedata),    //                                                 .writedata
		.if0_avl_w_burstcount                                   (mm_interconnect_0_if0_avl_w_burstcount),   //                                                 .burstcount
		.if0_avl_w_waitrequest                                  (~mm_interconnect_0_if0_avl_w_waitrequest)  //                                                 .waitrequest
	);

	QDRII_SLAVE_example_mm_interconnect_1 mm_interconnect_1 (
		.if1_afi_clk_clk                                        (afi_clk),                                   //                                      if1_afi_clk.clk
		.d0_avl_r_translator_reset_reset_bridge_in_reset_reset  (rst_controller_reset_out_reset),            //  d0_avl_r_translator_reset_reset_bridge_in_reset.reset
		.d0_avl_reset_reset_bridge_in_reset_reset               (rst_controller_reset_out_reset),            //               d0_avl_reset_reset_bridge_in_reset.reset
		.if0_afi_reset_in_reset_bridge_in_reset_reset           (rst_controller_001_reset_out_reset),        //           if0_afi_reset_in_reset_bridge_in_reset.reset
		.if0_avl_r_translator_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),        // if0_avl_r_translator_reset_reset_bridge_in_reset.reset
		.d0_avl_r_address                                       (d0_avl_r_address),                          //                                         d0_avl_r.address
		.d0_avl_r_waitrequest                                   (d0_avl_r_waitrequest),                      //                                                 .waitrequest
		.d0_avl_r_burstcount                                    (d0_avl_r_burstcount),                       //                                                 .burstcount
		.d0_avl_r_read                                          (d0_avl_r_read),                             //                                                 .read
		.d0_avl_r_readdata                                      (d0_avl_r_readdata),                         //                                                 .readdata
		.d0_avl_r_readdatavalid                                 (d0_avl_r_readdatavalid),                    //                                                 .readdatavalid
		.if0_avl_r_address                                      (mm_interconnect_1_if0_avl_r_address),       //                                        if0_avl_r.address
		.if0_avl_r_read                                         (mm_interconnect_1_if0_avl_r_read),          //                                                 .read
		.if0_avl_r_readdata                                     (mm_interconnect_1_if0_avl_r_readdata),      //                                                 .readdata
		.if0_avl_r_burstcount                                   (mm_interconnect_1_if0_avl_r_burstcount),    //                                                 .burstcount
		.if0_avl_r_readdatavalid                                (mm_interconnect_1_if0_avl_r_readdatavalid), //                                                 .readdatavalid
		.if0_avl_r_waitrequest                                  (~mm_interconnect_1_if0_avl_r_waitrequest)   //                                                 .waitrequest
	);

	QDRII_SLAVE_example_mm_interconnect_2 mm_interconnect_2 (
		.if1_afi_clk_clk                                        (afi_clk),                                  //                                      if1_afi_clk.clk
		.d1_avl_reset_reset_bridge_in_reset_reset               (rst_controller_reset_out_reset),           //               d1_avl_reset_reset_bridge_in_reset.reset
		.d1_avl_w_translator_reset_reset_bridge_in_reset_reset  (rst_controller_reset_out_reset),           //  d1_avl_w_translator_reset_reset_bridge_in_reset.reset
		.if1_avl_w_translator_reset_reset_bridge_in_reset_reset (rst_controller_002_reset_out_reset),       // if1_avl_w_translator_reset_reset_bridge_in_reset.reset
		.if1_soft_reset_reset_bridge_in_reset_reset             (rst_controller_002_reset_out_reset),       //             if1_soft_reset_reset_bridge_in_reset.reset
		.d1_avl_w_address                                       (d1_avl_w_address),                         //                                         d1_avl_w.address
		.d1_avl_w_waitrequest                                   (d1_avl_w_waitrequest),                     //                                                 .waitrequest
		.d1_avl_w_burstcount                                    (d1_avl_w_burstcount),                      //                                                 .burstcount
		.d1_avl_w_write                                         (d1_avl_w_write),                           //                                                 .write
		.d1_avl_w_writedata                                     (d1_avl_w_writedata),                       //                                                 .writedata
		.if1_avl_w_address                                      (mm_interconnect_2_if1_avl_w_address),      //                                        if1_avl_w.address
		.if1_avl_w_write                                        (mm_interconnect_2_if1_avl_w_write),        //                                                 .write
		.if1_avl_w_writedata                                    (mm_interconnect_2_if1_avl_w_writedata),    //                                                 .writedata
		.if1_avl_w_burstcount                                   (mm_interconnect_2_if1_avl_w_burstcount),   //                                                 .burstcount
		.if1_avl_w_waitrequest                                  (~mm_interconnect_2_if1_avl_w_waitrequest)  //                                                 .waitrequest
	);

	QDRII_SLAVE_example_mm_interconnect_3 mm_interconnect_3 (
		.if1_afi_clk_clk                                        (afi_clk),                                   //                                      if1_afi_clk.clk
		.d1_avl_r_translator_reset_reset_bridge_in_reset_reset  (rst_controller_reset_out_reset),            //  d1_avl_r_translator_reset_reset_bridge_in_reset.reset
		.d1_avl_reset_reset_bridge_in_reset_reset               (rst_controller_reset_out_reset),            //               d1_avl_reset_reset_bridge_in_reset.reset
		.if1_avl_r_translator_reset_reset_bridge_in_reset_reset (rst_controller_002_reset_out_reset),        // if1_avl_r_translator_reset_reset_bridge_in_reset.reset
		.if1_soft_reset_reset_bridge_in_reset_reset             (rst_controller_002_reset_out_reset),        //             if1_soft_reset_reset_bridge_in_reset.reset
		.d1_avl_r_address                                       (d1_avl_r_address),                          //                                         d1_avl_r.address
		.d1_avl_r_waitrequest                                   (d1_avl_r_waitrequest),                      //                                                 .waitrequest
		.d1_avl_r_burstcount                                    (d1_avl_r_burstcount),                       //                                                 .burstcount
		.d1_avl_r_read                                          (d1_avl_r_read),                             //                                                 .read
		.d1_avl_r_readdata                                      (d1_avl_r_readdata),                         //                                                 .readdata
		.d1_avl_r_readdatavalid                                 (d1_avl_r_readdatavalid),                    //                                                 .readdatavalid
		.if1_avl_r_address                                      (mm_interconnect_3_if1_avl_r_address),       //                                        if1_avl_r.address
		.if1_avl_r_read                                         (mm_interconnect_3_if1_avl_r_read),          //                                                 .read
		.if1_avl_r_readdata                                     (mm_interconnect_3_if1_avl_r_readdata),      //                                                 .readdata
		.if1_avl_r_burstcount                                   (mm_interconnect_3_if1_avl_r_burstcount),    //                                                 .burstcount
		.if1_avl_r_readdatavalid                                (mm_interconnect_3_if1_avl_r_readdatavalid), //                                                 .readdatavalid
		.if1_avl_r_waitrequest                                  (~mm_interconnect_3_if1_avl_r_waitrequest)   //                                                 .waitrequest
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~afi_reset_n),                   // reset_in0.reset
		.clk            (afi_clk),                        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~if1_afi_reset_export_reset),        // reset_in0.reset
		.clk            (afi_clk),                            //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~soft_reset_n),                      // reset_in0.reset
		.clk            (afi_clk),                            //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
