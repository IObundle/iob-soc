// QDRII_MASTER_0002.v

// This file was auto-generated from alt_mem_if_qdrii_emif_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 203

`timescale 1 ps / 1 ps
module QDRII_MASTER_0002 (
		input  wire        pll_ref_clk,                  //      pll_ref_clk.clk
		input  wire        global_reset_n,               //     global_reset.reset_n
		input  wire        soft_reset_n,                 //       soft_reset.reset_n
		output wire        afi_clk,                      //          afi_clk.clk
		output wire        afi_half_clk,                 //     afi_half_clk.clk
		output wire        afi_reset_n,                  //        afi_reset.reset_n
		output wire        afi_reset_export_n,           // afi_reset_export.reset_n
		output wire [17:0] mem_d,                        //           memory.mem_d
		output wire [0:0]  mem_wps_n,                    //                 .mem_wps_n
		output wire [1:0]  mem_bws_n,                    //                 .mem_bws_n
		output wire [19:0] mem_a,                        //                 .mem_a
		input  wire [17:0] mem_q,                        //                 .mem_q
		output wire [0:0]  mem_rps_n,                    //                 .mem_rps_n
		output wire [0:0]  mem_k,                        //                 .mem_k
		output wire [0:0]  mem_k_n,                      //                 .mem_k_n
		input  wire [0:0]  mem_cq,                       //                 .mem_cq
		input  wire [0:0]  mem_cq_n,                     //                 .mem_cq_n
		output wire [0:0]  mem_doff_n,                   //                 .mem_doff_n
		input  wire        avl_w_write_req,              //            avl_w.write
		output wire        avl_w_ready,                  //                 .waitrequest_n
		input  wire [19:0] avl_w_addr,                   //                 .address
		input  wire        avl_w_size,                   //                 .burstcount
		input  wire [71:0] avl_w_wdata,                  //                 .writedata
		input  wire        avl_r_read_req,               //            avl_r.read
		output wire        avl_r_ready,                  //                 .waitrequest_n
		input  wire [19:0] avl_r_addr,                   //                 .address
		input  wire        avl_r_size,                   //                 .burstcount
		output wire        avl_r_rdata_valid,            //                 .readdatavalid
		output wire [71:0] avl_r_rdata,                  //                 .readdata
		output wire        local_init_done,              //           status.local_init_done
		output wire        local_cal_success,            //                 .local_cal_success
		output wire        local_cal_fail,               //                 .local_cal_fail
		input  wire        oct_rzqin,                    //              oct.rzqin
		output wire [15:0] seriesterminationcontrol,     //      oct_sharing.seriesterminationcontrol
		output wire [15:0] parallelterminationcontrol,   //                 .parallelterminationcontrol
		output wire [15:0] seriesterminationcontrol_1,   //    oct_sharing_1.seriesterminationcontrol
		output wire [15:0] parallelterminationcontrol_1, //                 .parallelterminationcontrol
		output wire [15:0] seriesterminationcontrol_2,   //    oct_sharing_2.seriesterminationcontrol
		output wire [15:0] parallelterminationcontrol_2, //                 .parallelterminationcontrol
		output wire        pll_mem_clk,                  //      pll_sharing.pll_mem_clk
		output wire        pll_write_clk,                //                 .pll_write_clk
		output wire        pll_locked,                   //                 .pll_locked
		output wire        pll_write_clk_pre_phy_clk,    //                 .pll_write_clk_pre_phy_clk
		output wire        pll_addr_cmd_clk,             //                 .pll_addr_cmd_clk
		output wire        pll_avl_clk,                  //                 .pll_avl_clk
		output wire        pll_config_clk,               //                 .pll_config_clk
		output wire        pll_p2c_read_clk,             //                 .pll_p2c_read_clk
		output wire        pll_c2p_write_clk,            //                 .pll_c2p_write_clk
		output wire        pll_mem_clk_1,                //    pll_sharing_1.pll_mem_clk
		output wire        pll_write_clk_1,              //                 .pll_write_clk
		output wire        pll_locked_1,                 //                 .pll_locked
		output wire        pll_write_clk_pre_phy_clk_1,  //                 .pll_write_clk_pre_phy_clk
		output wire        pll_addr_cmd_clk_1,           //                 .pll_addr_cmd_clk
		output wire        pll_avl_clk_1,                //                 .pll_avl_clk
		output wire        pll_config_clk_1,             //                 .pll_config_clk
		output wire        pll_p2c_read_clk_1,           //                 .pll_p2c_read_clk
		output wire        pll_c2p_write_clk_1,          //                 .pll_c2p_write_clk
		input  wire        dll_pll_locked,               //      dll_sharing.dll_pll_locked
		output wire [6:0]  dll_delayctrl,                //                 .dll_delayctrl
		input  wire        dll_pll_locked_1,             //    dll_sharing_1.dll_pll_locked
		output wire [6:0]  dll_delayctrl_1               //                 .dll_delayctrl
	);

	wire   [1:0] m0_phy_mux_afi_rdata_en_full;       // m0:phy_mux_rdata_en_full -> p0:afi_rdata_en_full
	wire   [1:0] m0_phy_mux_afi_doff_n;              // m0:phy_mux_doff_n -> p0:afi_doff_n
	wire   [1:0] m0_phy_mux_afi_rps_n;               // m0:phy_mux_rps_n -> p0:afi_rps_n
	wire         p0_afi_afi_cal_success;             // p0:afi_cal_success -> m0:phy_mux_cal_success
	wire   [1:0] m0_phy_mux_afi_wdata_valid;         // m0:phy_mux_wdata_valid -> p0:afi_wdata_valid
	wire  [71:0] p0_afi_afi_rdata;                   // p0:afi_rdata -> m0:phy_mux_rdata
	wire  [71:0] m0_phy_mux_afi_wdata;               // m0:phy_mux_wdata -> p0:afi_wdata
	wire  [39:0] m0_phy_mux_afi_addr;                // m0:phy_mux_addr -> p0:afi_addr
	wire         p0_afi_afi_cal_fail;                // p0:afi_cal_fail -> m0:phy_mux_cal_fail
	wire   [1:0] p0_afi_afi_rdata_valid;             // p0:afi_rdata_valid -> m0:phy_mux_rdata_valid
	wire   [1:0] m0_phy_mux_afi_rdata_en;            // m0:phy_mux_rdata_en -> p0:afi_rdata_en
	wire   [1:0] m0_phy_mux_afi_wps_n;               // m0:phy_mux_wps_n -> p0:afi_wps_n
	wire   [7:0] m0_phy_mux_afi_bws_n;               // m0:phy_mux_bws_n -> p0:afi_bws_n
	wire         p0_avl_clk_clk;                     // p0:avl_clk -> s0:avl_clk
	wire         p0_avl_reset_reset;                 // p0:avl_reset_n -> s0:avl_reset_n
	wire         p0_scc_clk_clk;                     // p0:scc_clk -> s0:scc_clk
	wire         p0_scc_reset_reset;                 // p0:scc_reset_n -> s0:reset_n_scc_clk
	wire   [1:0] s0_afi_afi_rdata_en_full;           // s0:afi_rdata_en_full -> m0:seq_mux_rdata_en_full
	wire   [1:0] s0_afi_afi_doff_n;                  // s0:afi_doff_n -> m0:seq_mux_doff_n
	wire   [1:0] m0_seq_mux_afi_rdata_valid;         // m0:seq_mux_rdata_valid -> s0:afi_rdata_valid
	wire   [1:0] s0_afi_afi_rps_n;                   // s0:afi_rps_n -> m0:seq_mux_rps_n
	wire   [1:0] s0_afi_afi_wdata_valid;             // s0:afi_wdata_valid -> m0:seq_mux_wdata_valid
	wire  [71:0] m0_seq_mux_afi_rdata;               // m0:seq_mux_rdata -> s0:afi_rdata
	wire   [1:0] s0_afi_afi_rdata_en;                // s0:afi_rdata_en -> m0:seq_mux_rdata_en
	wire  [71:0] s0_afi_afi_wdata;                   // s0:afi_wdata -> m0:seq_mux_wdata
	wire   [1:0] s0_afi_afi_wps_n;                   // s0:afi_wps_n -> m0:seq_mux_wps_n
	wire  [39:0] s0_afi_afi_addr;                    // s0:afi_addr -> m0:seq_mux_addr
	wire   [7:0] s0_afi_afi_bws_n;                   // s0:afi_bws_n -> m0:seq_mux_bws_n
	wire         s0_mux_sel_mux_sel;                 // s0:phy_mux_sel -> m0:mux_sel
	wire   [5:0] s0_phy_phy_afi_rlat;                // s0:phy_afi_rlat -> p0:phy_afi_rlat
	wire         p0_phy_phy_clk;                     // p0:phy_clk -> s0:phy_clk
	wire   [3:0] s0_phy_phy_read_latency_counter;    // s0:phy_read_latency_counter -> p0:phy_read_latency_counter
	wire   [5:0] s0_phy_phy_afi_wlat;                // s0:phy_afi_wlat -> p0:phy_afi_wlat
	wire         s0_phy_phy_reset_mem_stable;        // s0:phy_reset_mem_stable -> p0:phy_reset_mem_stable
	wire   [0:0] s0_phy_phy_read_increment_vfifo_qr; // s0:phy_read_increment_vfifo_qr -> p0:phy_read_increment_vfifo_qr
	wire   [0:0] s0_phy_phy_vfifo_rd_en_override;    // s0:phy_vfifo_rd_en_override -> p0:phy_vfifo_rd_en_override
	wire   [0:0] s0_phy_phy_read_fifo_reset;         // s0:phy_read_fifo_reset -> p0:phy_read_fifo_reset
	wire         s0_phy_phy_cal_fail;                // s0:phy_cal_fail -> p0:phy_cal_fail
	wire         s0_phy_phy_cal_success;             // s0:phy_cal_success -> p0:phy_cal_success
	wire         p0_phy_phy_reset_n;                 // p0:phy_reset_n -> s0:phy_reset_n
	wire  [31:0] s0_phy_phy_cal_debug_info;          // s0:phy_cal_debug_info -> p0:phy_cal_debug_info
	wire   [0:0] s0_phy_phy_read_increment_vfifo_hr; // s0:phy_read_increment_vfifo_hr -> p0:phy_read_increment_vfifo_hr
	wire   [0:0] s0_phy_phy_read_increment_vfifo_fr; // s0:phy_read_increment_vfifo_fr -> p0:phy_read_increment_vfifo_fr
	wire  [71:0] p0_phy_phy_read_fifo_q;             // p0:phy_read_fifo_q -> s0:phy_read_fifo_q
	wire   [7:0] p0_calib_calib_skip_steps;          // p0:calib_skip_steps -> s0:calib_skip_steps
	wire  [17:0] s0_scc_scc_dq_ena;                  // s0:scc_dq_ena -> p0:scc_dq_ena
	wire   [0:0] s0_scc_scc_upd;                     // s0:scc_upd -> p0:scc_upd
	wire   [0:0] s0_scc_scc_dqs_io_ena;              // s0:scc_dqs_io_ena -> p0:scc_dqs_io_ena
	wire   [1:0] s0_scc_scc_dm_ena;                  // s0:scc_dm_ena -> p0:scc_dm_ena
	wire   [0:0] p0_scc_capture_strobe_tracking;     // p0:capture_strobe_tracking -> s0:capture_strobe_tracking
	wire   [0:0] s0_scc_scc_dqs_ena;                 // s0:scc_dqs_ena -> p0:scc_dqs_ena
	wire   [0:0] s0_scc_scc_data;                    // s0:scc_data -> p0:scc_data
	wire   [1:0] c0_afi_afi_rdata_en_full;           // c0:afi_rdata_en_full -> m0:afi_rdata_en_full
	wire         m0_afi_afi_cal_fail;                // m0:afi_cal_fail -> c0:afi_cal_fail
	wire   [1:0] m0_afi_afi_rdata_valid;             // m0:afi_rdata_valid -> c0:afi_rdata_valid
	wire   [1:0] c0_afi_afi_rps_n;                   // c0:afi_rps_n -> m0:afi_rps_n
	wire         m0_afi_afi_cal_success;             // m0:afi_cal_success -> c0:afi_cal_success
	wire   [1:0] c0_afi_afi_wdata_valid;             // c0:afi_wdata_valid -> m0:afi_wdata_valid
	wire  [71:0] m0_afi_afi_rdata;                   // m0:afi_rdata -> c0:afi_rdata
	wire   [1:0] c0_afi_afi_rdata_en;                // c0:afi_rdata_en -> m0:afi_rdata_en
	wire  [71:0] c0_afi_afi_wdata;                   // c0:afi_wdata -> m0:afi_wdata
	wire   [1:0] c0_afi_afi_wps_n;                   // c0:afi_wps_n -> m0:afi_wps_n
	wire  [39:0] c0_afi_afi_addr;                    // c0:afi_addr -> m0:afi_addr
	wire   [7:0] c0_afi_afi_bws_n;                   // c0:afi_bws_n -> m0:afi_bws_n
	wire         p0_dll_clk_clk;                     // p0:dll_clk -> dll0:clk
	wire         p0_dll_sharing_dll_pll_locked;      // p0:dll_pll_locked -> dll0:dll_pll_locked

	QDRII_MASTER_pll0 pll0 (
		.global_reset_n            (global_reset_n),            // global_reset.reset_n
		.afi_clk                   (afi_clk),                   //      afi_clk.clk
		.afi_half_clk              (afi_half_clk),              // afi_half_clk.clk
		.pll_ref_clk               (pll_ref_clk),               //  pll_ref_clk.clk
		.pll_mem_clk               (pll_mem_clk),               //  pll_sharing.pll_mem_clk
		.pll_write_clk             (pll_write_clk),             //             .pll_write_clk
		.pll_locked                (pll_locked),                //             .pll_locked
		.pll_write_clk_pre_phy_clk (pll_write_clk_pre_phy_clk), //             .pll_write_clk_pre_phy_clk
		.pll_addr_cmd_clk          (pll_addr_cmd_clk),          //             .pll_addr_cmd_clk
		.pll_avl_clk               (pll_avl_clk),               //             .pll_avl_clk
		.pll_config_clk            (pll_config_clk),            //             .pll_config_clk
		.pll_p2c_read_clk          (pll_p2c_read_clk),          //             .pll_p2c_read_clk
		.pll_c2p_write_clk         (pll_c2p_write_clk)          //             .pll_c2p_write_clk
	);

	QDRII_MASTER_p0 p0 (
		.global_reset_n              (global_reset_n),                     //     global_reset.reset_n
		.soft_reset_n                (soft_reset_n),                       //       soft_reset.reset_n
		.afi_reset_n                 (afi_reset_n),                        //        afi_reset.reset_n
		.afi_reset_export_n          (afi_reset_export_n),                 // afi_reset_export.reset_n
		.afi_clk                     (afi_clk),                            //          afi_clk.clk
		.afi_half_clk                (afi_half_clk),                       //     afi_half_clk.clk
		.avl_clk                     (p0_avl_clk_clk),                     //          avl_clk.clk
		.avl_reset_n                 (p0_avl_reset_reset),                 //        avl_reset.reset_n
		.scc_clk                     (p0_scc_clk_clk),                     //          scc_clk.clk
		.scc_reset_n                 (p0_scc_reset_reset),                 //        scc_reset.reset_n
		.dll_clk                     (p0_dll_clk_clk),                     //          dll_clk.clk
		.afi_addr                    (m0_phy_mux_afi_addr),                //              afi.afi_addr
		.afi_wps_n                   (m0_phy_mux_afi_wps_n),               //                 .afi_wps_n
		.afi_rps_n                   (m0_phy_mux_afi_rps_n),               //                 .afi_rps_n
		.afi_doff_n                  (m0_phy_mux_afi_doff_n),              //                 .afi_doff_n
		.afi_wdata_valid             (m0_phy_mux_afi_wdata_valid),         //                 .afi_wdata_valid
		.afi_wdata                   (m0_phy_mux_afi_wdata),               //                 .afi_wdata
		.afi_bws_n                   (m0_phy_mux_afi_bws_n),               //                 .afi_bws_n
		.afi_rdata                   (p0_afi_afi_rdata),                   //                 .afi_rdata
		.afi_rdata_en                (m0_phy_mux_afi_rdata_en),            //                 .afi_rdata_en
		.afi_rdata_en_full           (m0_phy_mux_afi_rdata_en_full),       //                 .afi_rdata_en_full
		.afi_rdata_valid             (p0_afi_afi_rdata_valid),             //                 .afi_rdata_valid
		.afi_cal_success             (p0_afi_afi_cal_success),             //                 .afi_cal_success
		.afi_cal_fail                (p0_afi_afi_cal_fail),                //                 .afi_cal_fail
		.phy_clk                     (p0_phy_phy_clk),                     //              phy.phy_clk
		.phy_reset_n                 (p0_phy_phy_reset_n),                 //                 .phy_reset_n
		.phy_read_latency_counter    (s0_phy_phy_read_latency_counter),    //                 .phy_read_latency_counter
		.phy_afi_wlat                (s0_phy_phy_afi_wlat),                //                 .phy_afi_wlat
		.phy_afi_rlat                (s0_phy_phy_afi_rlat),                //                 .phy_afi_rlat
		.phy_read_increment_vfifo_fr (s0_phy_phy_read_increment_vfifo_fr), //                 .phy_read_increment_vfifo_fr
		.phy_read_increment_vfifo_hr (s0_phy_phy_read_increment_vfifo_hr), //                 .phy_read_increment_vfifo_hr
		.phy_read_increment_vfifo_qr (s0_phy_phy_read_increment_vfifo_qr), //                 .phy_read_increment_vfifo_qr
		.phy_reset_mem_stable        (s0_phy_phy_reset_mem_stable),        //                 .phy_reset_mem_stable
		.phy_cal_success             (s0_phy_phy_cal_success),             //                 .phy_cal_success
		.phy_cal_fail                (s0_phy_phy_cal_fail),                //                 .phy_cal_fail
		.phy_cal_debug_info          (s0_phy_phy_cal_debug_info),          //                 .phy_cal_debug_info
		.phy_read_fifo_reset         (s0_phy_phy_read_fifo_reset),         //                 .phy_read_fifo_reset
		.phy_vfifo_rd_en_override    (s0_phy_phy_vfifo_rd_en_override),    //                 .phy_vfifo_rd_en_override
		.phy_read_fifo_q             (p0_phy_phy_read_fifo_q),             //                 .phy_read_fifo_q
		.calib_skip_steps            (p0_calib_calib_skip_steps),          //            calib.calib_skip_steps
		.scc_data                    (s0_scc_scc_data),                    //              scc.scc_data
		.scc_dqs_ena                 (s0_scc_scc_dqs_ena),                 //                 .scc_dqs_ena
		.scc_dqs_io_ena              (s0_scc_scc_dqs_io_ena),              //                 .scc_dqs_io_ena
		.scc_dq_ena                  (s0_scc_scc_dq_ena),                  //                 .scc_dq_ena
		.scc_dm_ena                  (s0_scc_scc_dm_ena),                  //                 .scc_dm_ena
		.capture_strobe_tracking     (p0_scc_capture_strobe_tracking),     //                 .capture_strobe_tracking
		.scc_upd                     (s0_scc_scc_upd),                     //                 .scc_upd
		.pll_mem_clk                 (pll_mem_clk),                        //      pll_sharing.pll_mem_clk
		.pll_write_clk               (pll_write_clk),                      //                 .pll_write_clk
		.pll_locked                  (pll_locked),                         //                 .pll_locked
		.pll_write_clk_pre_phy_clk   (pll_write_clk_pre_phy_clk),          //                 .pll_write_clk_pre_phy_clk
		.pll_addr_cmd_clk            (pll_addr_cmd_clk),                   //                 .pll_addr_cmd_clk
		.pll_avl_clk                 (pll_avl_clk),                        //                 .pll_avl_clk
		.pll_config_clk              (pll_config_clk),                     //                 .pll_config_clk
		.pll_p2c_read_clk            (pll_p2c_read_clk),                   //                 .pll_p2c_read_clk
		.pll_c2p_write_clk           (pll_c2p_write_clk),                  //                 .pll_c2p_write_clk
		.dll_pll_locked              (p0_dll_sharing_dll_pll_locked),      //      dll_sharing.dll_pll_locked
		.dll_delayctrl               (dll_delayctrl),                      //                 .dll_delayctrl
		.seriesterminationcontrol    (seriesterminationcontrol),           //      oct_sharing.seriesterminationcontrol
		.parallelterminationcontrol  (parallelterminationcontrol),         //                 .parallelterminationcontrol
		.mem_d                       (mem_d),                              //           memory.mem_d
		.mem_wps_n                   (mem_wps_n),                          //                 .mem_wps_n
		.mem_bws_n                   (mem_bws_n),                          //                 .mem_bws_n
		.mem_a                       (mem_a),                              //                 .mem_a
		.mem_q                       (mem_q),                              //                 .mem_q
		.mem_rps_n                   (mem_rps_n),                          //                 .mem_rps_n
		.mem_k                       (mem_k),                              //                 .mem_k
		.mem_k_n                     (mem_k_n),                            //                 .mem_k_n
		.mem_cq                      (mem_cq),                             //                 .mem_cq
		.mem_cq_n                    (mem_cq_n),                           //                 .mem_cq_n
		.mem_doff_n                  (mem_doff_n),                         //                 .mem_doff_n
		.csr_soft_reset_req          (1'b0)                                //      (terminated)
	);

	afi_mux_qdrii #(
		.AFI_RATE_RATIO      (2),
		.AFI_ADDR_WIDTH      (40),
		.AFI_CONTROL_WIDTH   (2),
		.AFI_DM_WIDTH        (8),
		.AFI_DQ_WIDTH        (72),
		.AFI_WRITE_DQS_WIDTH (2)
	) m0 (
		.afi_addr              (c0_afi_afi_addr),              //     afi.afi_addr
		.afi_wps_n             (c0_afi_afi_wps_n),             //        .afi_wps_n
		.afi_rps_n             (c0_afi_afi_rps_n),             //        .afi_rps_n
		.afi_wdata_valid       (c0_afi_afi_wdata_valid),       //        .afi_wdata_valid
		.afi_wdata             (c0_afi_afi_wdata),             //        .afi_wdata
		.afi_bws_n             (c0_afi_afi_bws_n),             //        .afi_bws_n
		.afi_rdata             (m0_afi_afi_rdata),             //        .afi_rdata
		.afi_rdata_en          (c0_afi_afi_rdata_en),          //        .afi_rdata_en
		.afi_rdata_en_full     (c0_afi_afi_rdata_en_full),     //        .afi_rdata_en_full
		.afi_rdata_valid       (m0_afi_afi_rdata_valid),       //        .afi_rdata_valid
		.afi_cal_success       (m0_afi_afi_cal_success),       //        .afi_cal_success
		.afi_cal_fail          (m0_afi_afi_cal_fail),          //        .afi_cal_fail
		.seq_mux_addr          (s0_afi_afi_addr),              // seq_mux.afi_addr
		.seq_mux_wps_n         (s0_afi_afi_wps_n),             //        .afi_wps_n
		.seq_mux_rps_n         (s0_afi_afi_rps_n),             //        .afi_rps_n
		.seq_mux_doff_n        (s0_afi_afi_doff_n),            //        .afi_doff_n
		.seq_mux_wdata_valid   (s0_afi_afi_wdata_valid),       //        .afi_wdata_valid
		.seq_mux_wdata         (s0_afi_afi_wdata),             //        .afi_wdata
		.seq_mux_bws_n         (s0_afi_afi_bws_n),             //        .afi_bws_n
		.seq_mux_rdata         (m0_seq_mux_afi_rdata),         //        .afi_rdata
		.seq_mux_rdata_en      (s0_afi_afi_rdata_en),          //        .afi_rdata_en
		.seq_mux_rdata_en_full (s0_afi_afi_rdata_en_full),     //        .afi_rdata_en_full
		.seq_mux_rdata_valid   (m0_seq_mux_afi_rdata_valid),   //        .afi_rdata_valid
		.phy_mux_addr          (m0_phy_mux_afi_addr),          // phy_mux.afi_addr
		.phy_mux_wps_n         (m0_phy_mux_afi_wps_n),         //        .afi_wps_n
		.phy_mux_rps_n         (m0_phy_mux_afi_rps_n),         //        .afi_rps_n
		.phy_mux_doff_n        (m0_phy_mux_afi_doff_n),        //        .afi_doff_n
		.phy_mux_wdata_valid   (m0_phy_mux_afi_wdata_valid),   //        .afi_wdata_valid
		.phy_mux_wdata         (m0_phy_mux_afi_wdata),         //        .afi_wdata
		.phy_mux_bws_n         (m0_phy_mux_afi_bws_n),         //        .afi_bws_n
		.phy_mux_rdata         (p0_afi_afi_rdata),             //        .afi_rdata
		.phy_mux_rdata_en      (m0_phy_mux_afi_rdata_en),      //        .afi_rdata_en
		.phy_mux_rdata_en_full (m0_phy_mux_afi_rdata_en_full), //        .afi_rdata_en_full
		.phy_mux_rdata_valid   (p0_afi_afi_rdata_valid),       //        .afi_rdata_valid
		.phy_mux_cal_success   (p0_afi_afi_cal_success),       //        .afi_cal_success
		.phy_mux_cal_fail      (p0_afi_afi_cal_fail),          //        .afi_cal_fail
		.mux_sel               (s0_mux_sel_mux_sel)            // mux_sel.mux_sel
	);

	QDRII_MASTER_s0 s0 (
		.avl_clk                     (p0_avl_clk_clk),                     //   avl_clk.clk
		.avl_reset_n                 (p0_avl_reset_reset),                 // avl_reset.reset_n
		.scc_clk                     (p0_scc_clk_clk),                     //   scc_clk.clk
		.reset_n_scc_clk             (p0_scc_reset_reset),                 // scc_reset.reset_n
		.scc_data                    (s0_scc_scc_data),                    //       scc.scc_data
		.scc_dqs_ena                 (s0_scc_scc_dqs_ena),                 //          .scc_dqs_ena
		.scc_dqs_io_ena              (s0_scc_scc_dqs_io_ena),              //          .scc_dqs_io_ena
		.scc_dq_ena                  (s0_scc_scc_dq_ena),                  //          .scc_dq_ena
		.scc_dm_ena                  (s0_scc_scc_dm_ena),                  //          .scc_dm_ena
		.capture_strobe_tracking     (p0_scc_capture_strobe_tracking),     //          .capture_strobe_tracking
		.scc_upd                     (s0_scc_scc_upd),                     //          .scc_upd
		.phy_clk                     (p0_phy_phy_clk),                     //       phy.phy_clk
		.phy_reset_n                 (p0_phy_phy_reset_n),                 //          .phy_reset_n
		.phy_read_latency_counter    (s0_phy_phy_read_latency_counter),    //          .phy_read_latency_counter
		.phy_afi_wlat                (s0_phy_phy_afi_wlat),                //          .phy_afi_wlat
		.phy_afi_rlat                (s0_phy_phy_afi_rlat),                //          .phy_afi_rlat
		.phy_read_increment_vfifo_fr (s0_phy_phy_read_increment_vfifo_fr), //          .phy_read_increment_vfifo_fr
		.phy_read_increment_vfifo_hr (s0_phy_phy_read_increment_vfifo_hr), //          .phy_read_increment_vfifo_hr
		.phy_read_increment_vfifo_qr (s0_phy_phy_read_increment_vfifo_qr), //          .phy_read_increment_vfifo_qr
		.phy_reset_mem_stable        (s0_phy_phy_reset_mem_stable),        //          .phy_reset_mem_stable
		.phy_cal_success             (s0_phy_phy_cal_success),             //          .phy_cal_success
		.phy_cal_fail                (s0_phy_phy_cal_fail),                //          .phy_cal_fail
		.phy_cal_debug_info          (s0_phy_phy_cal_debug_info),          //          .phy_cal_debug_info
		.phy_read_fifo_reset         (s0_phy_phy_read_fifo_reset),         //          .phy_read_fifo_reset
		.phy_vfifo_rd_en_override    (s0_phy_phy_vfifo_rd_en_override),    //          .phy_vfifo_rd_en_override
		.phy_read_fifo_q             (p0_phy_phy_read_fifo_q),             //          .phy_read_fifo_q
		.calib_skip_steps            (p0_calib_calib_skip_steps),          //     calib.calib_skip_steps
		.phy_mux_sel                 (s0_mux_sel_mux_sel),                 //   mux_sel.mux_sel
		.afi_clk                     (afi_clk),                            //   afi_clk.clk
		.afi_reset_n                 (afi_reset_n),                        // afi_reset.reset_n
		.afi_addr                    (s0_afi_afi_addr),                    //       afi.afi_addr
		.afi_wps_n                   (s0_afi_afi_wps_n),                   //          .afi_wps_n
		.afi_rps_n                   (s0_afi_afi_rps_n),                   //          .afi_rps_n
		.afi_doff_n                  (s0_afi_afi_doff_n),                  //          .afi_doff_n
		.afi_wdata_valid             (s0_afi_afi_wdata_valid),             //          .afi_wdata_valid
		.afi_wdata                   (s0_afi_afi_wdata),                   //          .afi_wdata
		.afi_bws_n                   (s0_afi_afi_bws_n),                   //          .afi_bws_n
		.afi_rdata                   (m0_seq_mux_afi_rdata),               //          .afi_rdata
		.afi_rdata_en                (s0_afi_afi_rdata_en),                //          .afi_rdata_en
		.afi_rdata_en_full           (s0_afi_afi_rdata_en_full),           //          .afi_rdata_en_full
		.afi_rdata_valid             (m0_seq_mux_afi_rdata_valid),         //          .afi_rdata_valid
		.phy_write_fr_cycle_shifts   ()                                    // (terminated)
	);

	alt_qdr_controller_top_hr_bl4 #(
		.MEM_T_WL                (1),
		.CTL_ADDR_WIDTH          (20),
		.CTL_CS_WIDTH            (1),
		.AVL_ADDR_WIDTH          (20),
		.AVL_BE_WIDTH            (8),
		.AVL_DATA_WIDTH          (72),
		.AVL_SIZE_WIDTH          (1),
		.CONTINUE_AFTER_CAL_FAIL (0),
		.AFI_RATE_RATIO          (2),
		.AFI_ADDR_WIDTH          (40),
		.AFI_CONTROL_WIDTH       (2),
		.AFI_CS_WIDTH            (2),
		.AFI_DM_WIDTH            (8),
		.AFI_DQ_WIDTH            (72),
		.AFI_WRITE_DQS_WIDTH     (2),
		.DEVICE_FAMILY           ("Stratix V")
	) c0 (
		.afi_clk           (afi_clk),                  //   afi_clk.clk
		.afi_reset_n       (afi_reset_n),              // afi_reset.reset_n
		.avl_w_write_req   (avl_w_write_req),          //     avl_w.write
		.avl_w_ready       (avl_w_ready),              //          .waitrequest_n
		.avl_w_addr        (avl_w_addr),               //          .address
		.avl_w_size        (avl_w_size),               //          .burstcount
		.avl_w_wdata       (avl_w_wdata),              //          .writedata
		.avl_r_read_req    (avl_r_read_req),           //     avl_r.read
		.avl_r_ready       (avl_r_ready),              //          .waitrequest_n
		.avl_r_addr        (avl_r_addr),               //          .address
		.avl_r_size        (avl_r_size),               //          .burstcount
		.avl_r_rdata_valid (avl_r_rdata_valid),        //          .readdatavalid
		.avl_r_rdata       (avl_r_rdata),              //          .readdata
		.afi_addr          (c0_afi_afi_addr),          //       afi.afi_addr
		.afi_wps_n         (c0_afi_afi_wps_n),         //          .afi_wps_n
		.afi_rps_n         (c0_afi_afi_rps_n),         //          .afi_rps_n
		.afi_wdata_valid   (c0_afi_afi_wdata_valid),   //          .afi_wdata_valid
		.afi_wdata         (c0_afi_afi_wdata),         //          .afi_wdata
		.afi_bws_n         (c0_afi_afi_bws_n),         //          .afi_bws_n
		.afi_rdata         (m0_afi_afi_rdata),         //          .afi_rdata
		.afi_rdata_en      (c0_afi_afi_rdata_en),      //          .afi_rdata_en
		.afi_rdata_en_full (c0_afi_afi_rdata_en_full), //          .afi_rdata_en_full
		.afi_rdata_valid   (m0_afi_afi_rdata_valid),   //          .afi_rdata_valid
		.afi_cal_success   (m0_afi_afi_cal_success),   //          .afi_cal_success
		.afi_cal_fail      (m0_afi_afi_cal_fail),      //          .afi_cal_fail
		.local_init_done   (local_init_done),          //    status.local_init_done
		.local_cal_success (local_cal_success),        //          .local_cal_success
		.local_cal_fail    (local_cal_fail)            //          .local_cal_fail
	);

	altera_mem_if_oct_stratixv #(
		.OCT_TERM_CONTROL_WIDTH (16)
	) oct0 (
		.oct_rzqin                  (oct_rzqin),                  //         oct.rzqin
		.seriesterminationcontrol   (seriesterminationcontrol),   // oct_sharing.seriesterminationcontrol
		.parallelterminationcontrol (parallelterminationcontrol)  //            .parallelterminationcontrol
	);

	altera_mem_if_dll_stratixv #(
		.DLL_DELAY_CTRL_WIDTH       (7),
		.DLL_OFFSET_CTRL_WIDTH      (6),
		.DELAY_BUFFER_MODE          ("HIGH"),
		.DELAY_CHAIN_LENGTH         (8),
		.DLL_INPUT_FREQUENCY_PS_STR ("1818 ps")
	) dll0 (
		.clk            (p0_dll_clk_clk),                //         clk.clk
		.dll_pll_locked (p0_dll_sharing_dll_pll_locked), // dll_sharing.dll_pll_locked
		.dll_delayctrl  (dll_delayctrl)                  //            .dll_delayctrl
	);

	assign parallelterminationcontrol_1 = parallelterminationcontrol;

	assign parallelterminationcontrol_2 = parallelterminationcontrol;

	assign seriesterminationcontrol_1 = seriesterminationcontrol;

	assign seriesterminationcontrol_2 = seriesterminationcontrol;

	assign pll_write_clk_1 = pll_write_clk;

	assign pll_avl_clk_1 = pll_avl_clk;

	assign pll_write_clk_pre_phy_clk_1 = pll_write_clk_pre_phy_clk;

	assign pll_addr_cmd_clk_1 = pll_addr_cmd_clk;

	assign pll_p2c_read_clk_1 = pll_p2c_read_clk;

	assign pll_config_clk_1 = pll_config_clk;

	assign pll_mem_clk_1 = pll_mem_clk;

	assign pll_locked_1 = pll_locked;

	assign pll_c2p_write_clk_1 = pll_c2p_write_clk;

	assign dll_delayctrl_1 = dll_delayctrl;

endmodule
