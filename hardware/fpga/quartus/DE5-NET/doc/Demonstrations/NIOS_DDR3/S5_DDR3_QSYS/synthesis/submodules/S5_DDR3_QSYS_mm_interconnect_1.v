// S5_DDR3_QSYS_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 203

`timescale 1 ps / 1 ps
module S5_DDR3_QSYS_mm_interconnect_1 (
		input  wire        clk_50_clk_clk,                                                   //                                                 clk_50_clk.clk
		input  wire        mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset, // mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset.reset
		input  wire [9:0]  mm_clock_crossing_bridge_io_m0_address,                           //                             mm_clock_crossing_bridge_io_m0.address
		output wire        mm_clock_crossing_bridge_io_m0_waitrequest,                       //                                                           .waitrequest
		input  wire [0:0]  mm_clock_crossing_bridge_io_m0_burstcount,                        //                                                           .burstcount
		input  wire [3:0]  mm_clock_crossing_bridge_io_m0_byteenable,                        //                                                           .byteenable
		input  wire        mm_clock_crossing_bridge_io_m0_read,                              //                                                           .read
		output wire [31:0] mm_clock_crossing_bridge_io_m0_readdata,                          //                                                           .readdata
		output wire        mm_clock_crossing_bridge_io_m0_readdatavalid,                     //                                                           .readdatavalid
		input  wire        mm_clock_crossing_bridge_io_m0_write,                             //                                                           .write
		input  wire [31:0] mm_clock_crossing_bridge_io_m0_writedata,                         //                                                           .writedata
		input  wire        mm_clock_crossing_bridge_io_m0_debugaccess,                       //                                                           .debugaccess
		output wire [1:0]  button_s1_address,                                                //                                                  button_s1.address
		input  wire [31:0] button_s1_readdata,                                               //                                                           .readdata
		output wire [1:0]  ddr3_status_s1_address,                                           //                                             ddr3_status_s1.address
		input  wire [31:0] ddr3_status_s1_readdata,                                          //                                                           .readdata
		output wire [0:0]  sysid_qsys_control_slave_address,                                 //                                   sysid_qsys_control_slave.address
		input  wire [31:0] sysid_qsys_control_slave_readdata,                                //                                                           .readdata
		output wire [2:0]  timer_s1_address,                                                 //                                                   timer_s1.address
		output wire        timer_s1_write,                                                   //                                                           .write
		input  wire [15:0] timer_s1_readdata,                                                //                                                           .readdata
		output wire [15:0] timer_s1_writedata,                                               //                                                           .writedata
		output wire        timer_s1_chipselect                                               //                                                           .chipselect
	);

	wire         mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_waitrequest;   // mm_clock_crossing_bridge_io_m0_agent:av_waitrequest -> mm_clock_crossing_bridge_io_m0_translator:uav_waitrequest
	wire  [31:0] mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_readdata;      // mm_clock_crossing_bridge_io_m0_agent:av_readdata -> mm_clock_crossing_bridge_io_m0_translator:uav_readdata
	wire         mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_debugaccess;   // mm_clock_crossing_bridge_io_m0_translator:uav_debugaccess -> mm_clock_crossing_bridge_io_m0_agent:av_debugaccess
	wire   [9:0] mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_address;       // mm_clock_crossing_bridge_io_m0_translator:uav_address -> mm_clock_crossing_bridge_io_m0_agent:av_address
	wire         mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_read;          // mm_clock_crossing_bridge_io_m0_translator:uav_read -> mm_clock_crossing_bridge_io_m0_agent:av_read
	wire   [3:0] mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_byteenable;    // mm_clock_crossing_bridge_io_m0_translator:uav_byteenable -> mm_clock_crossing_bridge_io_m0_agent:av_byteenable
	wire         mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_readdatavalid; // mm_clock_crossing_bridge_io_m0_agent:av_readdatavalid -> mm_clock_crossing_bridge_io_m0_translator:uav_readdatavalid
	wire         mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_lock;          // mm_clock_crossing_bridge_io_m0_translator:uav_lock -> mm_clock_crossing_bridge_io_m0_agent:av_lock
	wire         mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_write;         // mm_clock_crossing_bridge_io_m0_translator:uav_write -> mm_clock_crossing_bridge_io_m0_agent:av_write
	wire  [31:0] mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_writedata;     // mm_clock_crossing_bridge_io_m0_translator:uav_writedata -> mm_clock_crossing_bridge_io_m0_agent:av_writedata
	wire   [2:0] mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_burstcount;    // mm_clock_crossing_bridge_io_m0_translator:uav_burstcount -> mm_clock_crossing_bridge_io_m0_agent:av_burstcount
	wire  [31:0] sysid_qsys_control_slave_agent_m0_readdata;                                        // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire         sysid_qsys_control_slave_agent_m0_waitrequest;                                     // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire         sysid_qsys_control_slave_agent_m0_debugaccess;                                     // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire   [9:0] sysid_qsys_control_slave_agent_m0_address;                                         // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire   [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                                      // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire         sysid_qsys_control_slave_agent_m0_read;                                            // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire         sysid_qsys_control_slave_agent_m0_readdatavalid;                                   // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire         sysid_qsys_control_slave_agent_m0_lock;                                            // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire  [31:0] sysid_qsys_control_slave_agent_m0_writedata;                                       // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire         sysid_qsys_control_slave_agent_m0_write;                                           // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire   [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                                      // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire         sysid_qsys_control_slave_agent_rf_source_valid;                                    // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [82:0] sysid_qsys_control_slave_agent_rf_source_data;                                     // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire         sysid_qsys_control_slave_agent_rf_source_ready;                                    // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire         sysid_qsys_control_slave_agent_rf_source_startofpacket;                            // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire         sysid_qsys_control_slave_agent_rf_source_endofpacket;                              // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                                 // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [82:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                                  // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                                 // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;                         // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                           // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                                 // cmd_mux:src_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire  [81:0] cmd_mux_src_data;                                                                  // cmd_mux:src_data -> sysid_qsys_control_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                                 // sysid_qsys_control_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [3:0] cmd_mux_src_channel;                                                               // cmd_mux:src_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                         // cmd_mux:src_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                           // cmd_mux:src_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire  [31:0] button_s1_agent_m0_readdata;                                                       // button_s1_translator:uav_readdata -> button_s1_agent:m0_readdata
	wire         button_s1_agent_m0_waitrequest;                                                    // button_s1_translator:uav_waitrequest -> button_s1_agent:m0_waitrequest
	wire         button_s1_agent_m0_debugaccess;                                                    // button_s1_agent:m0_debugaccess -> button_s1_translator:uav_debugaccess
	wire   [9:0] button_s1_agent_m0_address;                                                        // button_s1_agent:m0_address -> button_s1_translator:uav_address
	wire   [3:0] button_s1_agent_m0_byteenable;                                                     // button_s1_agent:m0_byteenable -> button_s1_translator:uav_byteenable
	wire         button_s1_agent_m0_read;                                                           // button_s1_agent:m0_read -> button_s1_translator:uav_read
	wire         button_s1_agent_m0_readdatavalid;                                                  // button_s1_translator:uav_readdatavalid -> button_s1_agent:m0_readdatavalid
	wire         button_s1_agent_m0_lock;                                                           // button_s1_agent:m0_lock -> button_s1_translator:uav_lock
	wire  [31:0] button_s1_agent_m0_writedata;                                                      // button_s1_agent:m0_writedata -> button_s1_translator:uav_writedata
	wire         button_s1_agent_m0_write;                                                          // button_s1_agent:m0_write -> button_s1_translator:uav_write
	wire   [2:0] button_s1_agent_m0_burstcount;                                                     // button_s1_agent:m0_burstcount -> button_s1_translator:uav_burstcount
	wire         button_s1_agent_rf_source_valid;                                                   // button_s1_agent:rf_source_valid -> button_s1_agent_rsp_fifo:in_valid
	wire  [82:0] button_s1_agent_rf_source_data;                                                    // button_s1_agent:rf_source_data -> button_s1_agent_rsp_fifo:in_data
	wire         button_s1_agent_rf_source_ready;                                                   // button_s1_agent_rsp_fifo:in_ready -> button_s1_agent:rf_source_ready
	wire         button_s1_agent_rf_source_startofpacket;                                           // button_s1_agent:rf_source_startofpacket -> button_s1_agent_rsp_fifo:in_startofpacket
	wire         button_s1_agent_rf_source_endofpacket;                                             // button_s1_agent:rf_source_endofpacket -> button_s1_agent_rsp_fifo:in_endofpacket
	wire         button_s1_agent_rsp_fifo_out_valid;                                                // button_s1_agent_rsp_fifo:out_valid -> button_s1_agent:rf_sink_valid
	wire  [82:0] button_s1_agent_rsp_fifo_out_data;                                                 // button_s1_agent_rsp_fifo:out_data -> button_s1_agent:rf_sink_data
	wire         button_s1_agent_rsp_fifo_out_ready;                                                // button_s1_agent:rf_sink_ready -> button_s1_agent_rsp_fifo:out_ready
	wire         button_s1_agent_rsp_fifo_out_startofpacket;                                        // button_s1_agent_rsp_fifo:out_startofpacket -> button_s1_agent:rf_sink_startofpacket
	wire         button_s1_agent_rsp_fifo_out_endofpacket;                                          // button_s1_agent_rsp_fifo:out_endofpacket -> button_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                             // cmd_mux_001:src_valid -> button_s1_agent:cp_valid
	wire  [81:0] cmd_mux_001_src_data;                                                              // cmd_mux_001:src_data -> button_s1_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                             // button_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [3:0] cmd_mux_001_src_channel;                                                           // cmd_mux_001:src_channel -> button_s1_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                     // cmd_mux_001:src_startofpacket -> button_s1_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                       // cmd_mux_001:src_endofpacket -> button_s1_agent:cp_endofpacket
	wire  [31:0] timer_s1_agent_m0_readdata;                                                        // timer_s1_translator:uav_readdata -> timer_s1_agent:m0_readdata
	wire         timer_s1_agent_m0_waitrequest;                                                     // timer_s1_translator:uav_waitrequest -> timer_s1_agent:m0_waitrequest
	wire         timer_s1_agent_m0_debugaccess;                                                     // timer_s1_agent:m0_debugaccess -> timer_s1_translator:uav_debugaccess
	wire   [9:0] timer_s1_agent_m0_address;                                                         // timer_s1_agent:m0_address -> timer_s1_translator:uav_address
	wire   [3:0] timer_s1_agent_m0_byteenable;                                                      // timer_s1_agent:m0_byteenable -> timer_s1_translator:uav_byteenable
	wire         timer_s1_agent_m0_read;                                                            // timer_s1_agent:m0_read -> timer_s1_translator:uav_read
	wire         timer_s1_agent_m0_readdatavalid;                                                   // timer_s1_translator:uav_readdatavalid -> timer_s1_agent:m0_readdatavalid
	wire         timer_s1_agent_m0_lock;                                                            // timer_s1_agent:m0_lock -> timer_s1_translator:uav_lock
	wire  [31:0] timer_s1_agent_m0_writedata;                                                       // timer_s1_agent:m0_writedata -> timer_s1_translator:uav_writedata
	wire         timer_s1_agent_m0_write;                                                           // timer_s1_agent:m0_write -> timer_s1_translator:uav_write
	wire   [2:0] timer_s1_agent_m0_burstcount;                                                      // timer_s1_agent:m0_burstcount -> timer_s1_translator:uav_burstcount
	wire         timer_s1_agent_rf_source_valid;                                                    // timer_s1_agent:rf_source_valid -> timer_s1_agent_rsp_fifo:in_valid
	wire  [82:0] timer_s1_agent_rf_source_data;                                                     // timer_s1_agent:rf_source_data -> timer_s1_agent_rsp_fifo:in_data
	wire         timer_s1_agent_rf_source_ready;                                                    // timer_s1_agent_rsp_fifo:in_ready -> timer_s1_agent:rf_source_ready
	wire         timer_s1_agent_rf_source_startofpacket;                                            // timer_s1_agent:rf_source_startofpacket -> timer_s1_agent_rsp_fifo:in_startofpacket
	wire         timer_s1_agent_rf_source_endofpacket;                                              // timer_s1_agent:rf_source_endofpacket -> timer_s1_agent_rsp_fifo:in_endofpacket
	wire         timer_s1_agent_rsp_fifo_out_valid;                                                 // timer_s1_agent_rsp_fifo:out_valid -> timer_s1_agent:rf_sink_valid
	wire  [82:0] timer_s1_agent_rsp_fifo_out_data;                                                  // timer_s1_agent_rsp_fifo:out_data -> timer_s1_agent:rf_sink_data
	wire         timer_s1_agent_rsp_fifo_out_ready;                                                 // timer_s1_agent:rf_sink_ready -> timer_s1_agent_rsp_fifo:out_ready
	wire         timer_s1_agent_rsp_fifo_out_startofpacket;                                         // timer_s1_agent_rsp_fifo:out_startofpacket -> timer_s1_agent:rf_sink_startofpacket
	wire         timer_s1_agent_rsp_fifo_out_endofpacket;                                           // timer_s1_agent_rsp_fifo:out_endofpacket -> timer_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                             // cmd_mux_002:src_valid -> timer_s1_agent:cp_valid
	wire  [81:0] cmd_mux_002_src_data;                                                              // cmd_mux_002:src_data -> timer_s1_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                             // timer_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [3:0] cmd_mux_002_src_channel;                                                           // cmd_mux_002:src_channel -> timer_s1_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                                     // cmd_mux_002:src_startofpacket -> timer_s1_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                       // cmd_mux_002:src_endofpacket -> timer_s1_agent:cp_endofpacket
	wire  [31:0] ddr3_status_s1_agent_m0_readdata;                                                  // ddr3_status_s1_translator:uav_readdata -> ddr3_status_s1_agent:m0_readdata
	wire         ddr3_status_s1_agent_m0_waitrequest;                                               // ddr3_status_s1_translator:uav_waitrequest -> ddr3_status_s1_agent:m0_waitrequest
	wire         ddr3_status_s1_agent_m0_debugaccess;                                               // ddr3_status_s1_agent:m0_debugaccess -> ddr3_status_s1_translator:uav_debugaccess
	wire   [9:0] ddr3_status_s1_agent_m0_address;                                                   // ddr3_status_s1_agent:m0_address -> ddr3_status_s1_translator:uav_address
	wire   [3:0] ddr3_status_s1_agent_m0_byteenable;                                                // ddr3_status_s1_agent:m0_byteenable -> ddr3_status_s1_translator:uav_byteenable
	wire         ddr3_status_s1_agent_m0_read;                                                      // ddr3_status_s1_agent:m0_read -> ddr3_status_s1_translator:uav_read
	wire         ddr3_status_s1_agent_m0_readdatavalid;                                             // ddr3_status_s1_translator:uav_readdatavalid -> ddr3_status_s1_agent:m0_readdatavalid
	wire         ddr3_status_s1_agent_m0_lock;                                                      // ddr3_status_s1_agent:m0_lock -> ddr3_status_s1_translator:uav_lock
	wire  [31:0] ddr3_status_s1_agent_m0_writedata;                                                 // ddr3_status_s1_agent:m0_writedata -> ddr3_status_s1_translator:uav_writedata
	wire         ddr3_status_s1_agent_m0_write;                                                     // ddr3_status_s1_agent:m0_write -> ddr3_status_s1_translator:uav_write
	wire   [2:0] ddr3_status_s1_agent_m0_burstcount;                                                // ddr3_status_s1_agent:m0_burstcount -> ddr3_status_s1_translator:uav_burstcount
	wire         ddr3_status_s1_agent_rf_source_valid;                                              // ddr3_status_s1_agent:rf_source_valid -> ddr3_status_s1_agent_rsp_fifo:in_valid
	wire  [82:0] ddr3_status_s1_agent_rf_source_data;                                               // ddr3_status_s1_agent:rf_source_data -> ddr3_status_s1_agent_rsp_fifo:in_data
	wire         ddr3_status_s1_agent_rf_source_ready;                                              // ddr3_status_s1_agent_rsp_fifo:in_ready -> ddr3_status_s1_agent:rf_source_ready
	wire         ddr3_status_s1_agent_rf_source_startofpacket;                                      // ddr3_status_s1_agent:rf_source_startofpacket -> ddr3_status_s1_agent_rsp_fifo:in_startofpacket
	wire         ddr3_status_s1_agent_rf_source_endofpacket;                                        // ddr3_status_s1_agent:rf_source_endofpacket -> ddr3_status_s1_agent_rsp_fifo:in_endofpacket
	wire         ddr3_status_s1_agent_rsp_fifo_out_valid;                                           // ddr3_status_s1_agent_rsp_fifo:out_valid -> ddr3_status_s1_agent:rf_sink_valid
	wire  [82:0] ddr3_status_s1_agent_rsp_fifo_out_data;                                            // ddr3_status_s1_agent_rsp_fifo:out_data -> ddr3_status_s1_agent:rf_sink_data
	wire         ddr3_status_s1_agent_rsp_fifo_out_ready;                                           // ddr3_status_s1_agent:rf_sink_ready -> ddr3_status_s1_agent_rsp_fifo:out_ready
	wire         ddr3_status_s1_agent_rsp_fifo_out_startofpacket;                                   // ddr3_status_s1_agent_rsp_fifo:out_startofpacket -> ddr3_status_s1_agent:rf_sink_startofpacket
	wire         ddr3_status_s1_agent_rsp_fifo_out_endofpacket;                                     // ddr3_status_s1_agent_rsp_fifo:out_endofpacket -> ddr3_status_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                             // cmd_mux_003:src_valid -> ddr3_status_s1_agent:cp_valid
	wire  [81:0] cmd_mux_003_src_data;                                                              // cmd_mux_003:src_data -> ddr3_status_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                             // ddr3_status_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [3:0] cmd_mux_003_src_channel;                                                           // cmd_mux_003:src_channel -> ddr3_status_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                                     // cmd_mux_003:src_startofpacket -> ddr3_status_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                       // cmd_mux_003:src_endofpacket -> ddr3_status_s1_agent:cp_endofpacket
	wire         mm_clock_crossing_bridge_io_m0_agent_cp_valid;                                     // mm_clock_crossing_bridge_io_m0_agent:cp_valid -> router:sink_valid
	wire  [81:0] mm_clock_crossing_bridge_io_m0_agent_cp_data;                                      // mm_clock_crossing_bridge_io_m0_agent:cp_data -> router:sink_data
	wire         mm_clock_crossing_bridge_io_m0_agent_cp_ready;                                     // router:sink_ready -> mm_clock_crossing_bridge_io_m0_agent:cp_ready
	wire         mm_clock_crossing_bridge_io_m0_agent_cp_startofpacket;                             // mm_clock_crossing_bridge_io_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         mm_clock_crossing_bridge_io_m0_agent_cp_endofpacket;                               // mm_clock_crossing_bridge_io_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         sysid_qsys_control_slave_agent_rp_valid;                                           // sysid_qsys_control_slave_agent:rp_valid -> router_001:sink_valid
	wire  [81:0] sysid_qsys_control_slave_agent_rp_data;                                            // sysid_qsys_control_slave_agent:rp_data -> router_001:sink_data
	wire         sysid_qsys_control_slave_agent_rp_ready;                                           // router_001:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire         sysid_qsys_control_slave_agent_rp_startofpacket;                                   // sysid_qsys_control_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         sysid_qsys_control_slave_agent_rp_endofpacket;                                     // sysid_qsys_control_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                              // router_001:src_valid -> rsp_demux:sink_valid
	wire  [81:0] router_001_src_data;                                                               // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                              // rsp_demux:sink_ready -> router_001:src_ready
	wire   [3:0] router_001_src_channel;                                                            // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                                      // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                                        // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         button_s1_agent_rp_valid;                                                          // button_s1_agent:rp_valid -> router_002:sink_valid
	wire  [81:0] button_s1_agent_rp_data;                                                           // button_s1_agent:rp_data -> router_002:sink_data
	wire         button_s1_agent_rp_ready;                                                          // router_002:sink_ready -> button_s1_agent:rp_ready
	wire         button_s1_agent_rp_startofpacket;                                                  // button_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         button_s1_agent_rp_endofpacket;                                                    // button_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                              // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [81:0] router_002_src_data;                                                               // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                                              // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [3:0] router_002_src_channel;                                                            // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                                      // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                                        // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         timer_s1_agent_rp_valid;                                                           // timer_s1_agent:rp_valid -> router_003:sink_valid
	wire  [81:0] timer_s1_agent_rp_data;                                                            // timer_s1_agent:rp_data -> router_003:sink_data
	wire         timer_s1_agent_rp_ready;                                                           // router_003:sink_ready -> timer_s1_agent:rp_ready
	wire         timer_s1_agent_rp_startofpacket;                                                   // timer_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         timer_s1_agent_rp_endofpacket;                                                     // timer_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                              // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [81:0] router_003_src_data;                                                               // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                                              // rsp_demux_002:sink_ready -> router_003:src_ready
	wire   [3:0] router_003_src_channel;                                                            // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                                      // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                                        // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         ddr3_status_s1_agent_rp_valid;                                                     // ddr3_status_s1_agent:rp_valid -> router_004:sink_valid
	wire  [81:0] ddr3_status_s1_agent_rp_data;                                                      // ddr3_status_s1_agent:rp_data -> router_004:sink_data
	wire         ddr3_status_s1_agent_rp_ready;                                                     // router_004:sink_ready -> ddr3_status_s1_agent:rp_ready
	wire         ddr3_status_s1_agent_rp_startofpacket;                                             // ddr3_status_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         ddr3_status_s1_agent_rp_endofpacket;                                               // ddr3_status_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                              // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [81:0] router_004_src_data;                                                               // router_004:src_data -> rsp_demux_003:sink_data
	wire         router_004_src_ready;                                                              // rsp_demux_003:sink_ready -> router_004:src_ready
	wire   [3:0] router_004_src_channel;                                                            // router_004:src_channel -> rsp_demux_003:sink_channel
	wire         router_004_src_startofpacket;                                                      // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_004_src_endofpacket;                                                        // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         router_src_valid;                                                                  // router:src_valid -> mm_clock_crossing_bridge_io_m0_limiter:cmd_sink_valid
	wire  [81:0] router_src_data;                                                                   // router:src_data -> mm_clock_crossing_bridge_io_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                                  // mm_clock_crossing_bridge_io_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [3:0] router_src_channel;                                                                // router:src_channel -> mm_clock_crossing_bridge_io_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                          // router:src_startofpacket -> mm_clock_crossing_bridge_io_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                            // router:src_endofpacket -> mm_clock_crossing_bridge_io_m0_limiter:cmd_sink_endofpacket
	wire  [81:0] mm_clock_crossing_bridge_io_m0_limiter_cmd_src_data;                               // mm_clock_crossing_bridge_io_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         mm_clock_crossing_bridge_io_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> mm_clock_crossing_bridge_io_m0_limiter:cmd_src_ready
	wire   [3:0] mm_clock_crossing_bridge_io_m0_limiter_cmd_src_channel;                            // mm_clock_crossing_bridge_io_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         mm_clock_crossing_bridge_io_m0_limiter_cmd_src_startofpacket;                      // mm_clock_crossing_bridge_io_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         mm_clock_crossing_bridge_io_m0_limiter_cmd_src_endofpacket;                        // mm_clock_crossing_bridge_io_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                                 // rsp_mux:src_valid -> mm_clock_crossing_bridge_io_m0_limiter:rsp_sink_valid
	wire  [81:0] rsp_mux_src_data;                                                                  // rsp_mux:src_data -> mm_clock_crossing_bridge_io_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                                 // mm_clock_crossing_bridge_io_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [3:0] rsp_mux_src_channel;                                                               // rsp_mux:src_channel -> mm_clock_crossing_bridge_io_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                                         // rsp_mux:src_startofpacket -> mm_clock_crossing_bridge_io_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                           // rsp_mux:src_endofpacket -> mm_clock_crossing_bridge_io_m0_limiter:rsp_sink_endofpacket
	wire         mm_clock_crossing_bridge_io_m0_limiter_rsp_src_valid;                              // mm_clock_crossing_bridge_io_m0_limiter:rsp_src_valid -> mm_clock_crossing_bridge_io_m0_agent:rp_valid
	wire  [81:0] mm_clock_crossing_bridge_io_m0_limiter_rsp_src_data;                               // mm_clock_crossing_bridge_io_m0_limiter:rsp_src_data -> mm_clock_crossing_bridge_io_m0_agent:rp_data
	wire         mm_clock_crossing_bridge_io_m0_limiter_rsp_src_ready;                              // mm_clock_crossing_bridge_io_m0_agent:rp_ready -> mm_clock_crossing_bridge_io_m0_limiter:rsp_src_ready
	wire   [3:0] mm_clock_crossing_bridge_io_m0_limiter_rsp_src_channel;                            // mm_clock_crossing_bridge_io_m0_limiter:rsp_src_channel -> mm_clock_crossing_bridge_io_m0_agent:rp_channel
	wire         mm_clock_crossing_bridge_io_m0_limiter_rsp_src_startofpacket;                      // mm_clock_crossing_bridge_io_m0_limiter:rsp_src_startofpacket -> mm_clock_crossing_bridge_io_m0_agent:rp_startofpacket
	wire         mm_clock_crossing_bridge_io_m0_limiter_rsp_src_endofpacket;                        // mm_clock_crossing_bridge_io_m0_limiter:rsp_src_endofpacket -> mm_clock_crossing_bridge_io_m0_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                              // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [81:0] cmd_demux_src0_data;                                                               // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                              // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [3:0] cmd_demux_src0_channel;                                                            // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                      // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                        // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                              // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [81:0] cmd_demux_src1_data;                                                               // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                              // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [3:0] cmd_demux_src1_channel;                                                            // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                      // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                        // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                              // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [81:0] cmd_demux_src2_data;                                                               // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                              // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [3:0] cmd_demux_src2_channel;                                                            // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                      // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                        // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                              // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [81:0] cmd_demux_src3_data;                                                               // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                              // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [3:0] cmd_demux_src3_channel;                                                            // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                      // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                        // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                              // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [81:0] rsp_demux_src0_data;                                                               // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                              // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [3:0] rsp_demux_src0_channel;                                                            // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                      // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                        // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                          // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [81:0] rsp_demux_001_src0_data;                                                           // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                          // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [3:0] rsp_demux_001_src0_channel;                                                        // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                                  // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                                    // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                          // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [81:0] rsp_demux_002_src0_data;                                                           // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                          // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [3:0] rsp_demux_002_src0_channel;                                                        // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                                  // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                                    // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                          // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [81:0] rsp_demux_003_src0_data;                                                           // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                          // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [3:0] rsp_demux_003_src0_channel;                                                        // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                                  // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                                    // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire   [3:0] mm_clock_crossing_bridge_io_m0_limiter_cmd_valid_data;                             // mm_clock_crossing_bridge_io_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                               // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                                // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                               // avalon_st_adapter:in_0_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                     // avalon_st_adapter:out_0_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                                      // avalon_st_adapter:out_0_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                     // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                     // avalon_st_adapter:out_0_error -> sysid_qsys_control_slave_agent:rdata_fifo_sink_error
	wire         button_s1_agent_rdata_fifo_src_valid;                                              // button_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] button_s1_agent_rdata_fifo_src_data;                                               // button_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         button_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_001:in_0_ready -> button_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                                 // avalon_st_adapter_001:out_0_valid -> button_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                                  // avalon_st_adapter_001:out_0_data -> button_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                                 // button_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                                 // avalon_st_adapter_001:out_0_error -> button_s1_agent:rdata_fifo_sink_error
	wire         timer_s1_agent_rdata_fifo_src_valid;                                               // timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] timer_s1_agent_rdata_fifo_src_data;                                                // timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         timer_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_002:in_0_ready -> timer_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                                 // avalon_st_adapter_002:out_0_valid -> timer_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                                  // avalon_st_adapter_002:out_0_data -> timer_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                                 // timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                                 // avalon_st_adapter_002:out_0_error -> timer_s1_agent:rdata_fifo_sink_error
	wire         ddr3_status_s1_agent_rdata_fifo_src_valid;                                         // ddr3_status_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] ddr3_status_s1_agent_rdata_fifo_src_data;                                          // ddr3_status_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         ddr3_status_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_003:in_0_ready -> ddr3_status_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                                 // avalon_st_adapter_003:out_0_valid -> ddr3_status_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                                  // avalon_st_adapter_003:out_0_data -> ddr3_status_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                                 // ddr3_status_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                                 // avalon_st_adapter_003:out_0_error -> ddr3_status_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (10),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (10),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_clock_crossing_bridge_io_m0_translator (
		.clk                    (clk_50_clk_clk),                                                                    //                       clk.clk
		.reset                  (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_clock_crossing_bridge_io_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_clock_crossing_bridge_io_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_clock_crossing_bridge_io_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_clock_crossing_bridge_io_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_clock_crossing_bridge_io_m0_read),                                               //                          .read
		.av_readdata            (mm_clock_crossing_bridge_io_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_clock_crossing_bridge_io_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_clock_crossing_bridge_io_m0_write),                                              //                          .write
		.av_writedata           (mm_clock_crossing_bridge_io_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (mm_clock_crossing_bridge_io_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                                              //               (terminated)
		.av_lock                (1'b0),                                                                              //               (terminated)
		.uav_clken              (),                                                                                  //               (terminated)
		.av_clken               (1'b1),                                                                              //               (terminated)
		.uav_response           (2'b00),                                                                             //               (terminated)
		.av_response            (),                                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (clk_50_clk_clk),                                                   //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),                           //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),                          //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                                 //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),                                //                         .readdata
		.av_write               (),                                                                 //              (terminated)
		.av_read                (),                                                                 //              (terminated)
		.av_writedata           (),                                                                 //              (terminated)
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_burstcount          (),                                                                 //              (terminated)
		.av_byteenable          (),                                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                                             //              (terminated)
		.av_waitrequest         (1'b0),                                                             //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.av_chipselect          (),                                                                 //              (terminated)
		.av_clken               (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_debugaccess         (),                                                                 //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) button_s1_translator (
		.clk                    (clk_50_clk_clk),                                                   //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (button_s1_agent_m0_address),                                       // avalon_universal_slave_0.address
		.uav_burstcount         (button_s1_agent_m0_burstcount),                                    //                         .burstcount
		.uav_read               (button_s1_agent_m0_read),                                          //                         .read
		.uav_write              (button_s1_agent_m0_write),                                         //                         .write
		.uav_waitrequest        (button_s1_agent_m0_waitrequest),                                   //                         .waitrequest
		.uav_readdatavalid      (button_s1_agent_m0_readdatavalid),                                 //                         .readdatavalid
		.uav_byteenable         (button_s1_agent_m0_byteenable),                                    //                         .byteenable
		.uav_readdata           (button_s1_agent_m0_readdata),                                      //                         .readdata
		.uav_writedata          (button_s1_agent_m0_writedata),                                     //                         .writedata
		.uav_lock               (button_s1_agent_m0_lock),                                          //                         .lock
		.uav_debugaccess        (button_s1_agent_m0_debugaccess),                                   //                         .debugaccess
		.av_address             (button_s1_address),                                                //      avalon_anti_slave_0.address
		.av_readdata            (button_s1_readdata),                                               //                         .readdata
		.av_write               (),                                                                 //              (terminated)
		.av_read                (),                                                                 //              (terminated)
		.av_writedata           (),                                                                 //              (terminated)
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_burstcount          (),                                                                 //              (terminated)
		.av_byteenable          (),                                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                                             //              (terminated)
		.av_waitrequest         (1'b0),                                                             //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.av_chipselect          (),                                                                 //              (terminated)
		.av_clken               (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_debugaccess         (),                                                                 //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_s1_translator (
		.clk                    (clk_50_clk_clk),                                                   //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_s1_agent_m0_address),                                        // avalon_universal_slave_0.address
		.uav_burstcount         (timer_s1_agent_m0_burstcount),                                     //                         .burstcount
		.uav_read               (timer_s1_agent_m0_read),                                           //                         .read
		.uav_write              (timer_s1_agent_m0_write),                                          //                         .write
		.uav_waitrequest        (timer_s1_agent_m0_waitrequest),                                    //                         .waitrequest
		.uav_readdatavalid      (timer_s1_agent_m0_readdatavalid),                                  //                         .readdatavalid
		.uav_byteenable         (timer_s1_agent_m0_byteenable),                                     //                         .byteenable
		.uav_readdata           (timer_s1_agent_m0_readdata),                                       //                         .readdata
		.uav_writedata          (timer_s1_agent_m0_writedata),                                      //                         .writedata
		.uav_lock               (timer_s1_agent_m0_lock),                                           //                         .lock
		.uav_debugaccess        (timer_s1_agent_m0_debugaccess),                                    //                         .debugaccess
		.av_address             (timer_s1_address),                                                 //      avalon_anti_slave_0.address
		.av_write               (timer_s1_write),                                                   //                         .write
		.av_readdata            (timer_s1_readdata),                                                //                         .readdata
		.av_writedata           (timer_s1_writedata),                                               //                         .writedata
		.av_chipselect          (timer_s1_chipselect),                                              //                         .chipselect
		.av_read                (),                                                                 //              (terminated)
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_burstcount          (),                                                                 //              (terminated)
		.av_byteenable          (),                                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                                             //              (terminated)
		.av_waitrequest         (1'b0),                                                             //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.av_clken               (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_debugaccess         (),                                                                 //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ddr3_status_s1_translator (
		.clk                    (clk_50_clk_clk),                                                   //                      clk.clk
		.reset                  (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ddr3_status_s1_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (ddr3_status_s1_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (ddr3_status_s1_agent_m0_read),                                     //                         .read
		.uav_write              (ddr3_status_s1_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (ddr3_status_s1_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (ddr3_status_s1_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (ddr3_status_s1_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (ddr3_status_s1_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (ddr3_status_s1_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (ddr3_status_s1_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (ddr3_status_s1_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (ddr3_status_s1_address),                                           //      avalon_anti_slave_0.address
		.av_readdata            (ddr3_status_s1_readdata),                                          //                         .readdata
		.av_write               (),                                                                 //              (terminated)
		.av_read                (),                                                                 //              (terminated)
		.av_writedata           (),                                                                 //              (terminated)
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_burstcount          (),                                                                 //              (terminated)
		.av_byteenable          (),                                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                                             //              (terminated)
		.av_waitrequest         (1'b0),                                                             //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.av_chipselect          (),                                                                 //              (terminated)
		.av_clken               (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_debugaccess         (),                                                                 //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_QOS_H                 (64),
		.PKT_QOS_L                 (64),
		.PKT_DATA_SIDEBAND_H       (62),
		.PKT_DATA_SIDEBAND_L       (62),
		.PKT_ADDR_SIDEBAND_H       (61),
		.PKT_ADDR_SIDEBAND_L       (61),
		.PKT_BURST_TYPE_H          (60),
		.PKT_BURST_TYPE_L          (59),
		.PKT_CACHE_H               (76),
		.PKT_CACHE_L               (73),
		.PKT_THREAD_ID_H           (69),
		.PKT_THREAD_ID_L           (69),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_EXCLUSIVE       (51),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (67),
		.ST_DATA_W                 (82),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_clock_crossing_bridge_io_m0_agent (
		.clk                   (clk_50_clk_clk),                                                                    //       clk.clk
		.reset                 (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_clock_crossing_bridge_io_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_clock_crossing_bridge_io_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_clock_crossing_bridge_io_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_clock_crossing_bridge_io_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_clock_crossing_bridge_io_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_clock_crossing_bridge_io_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (mm_clock_crossing_bridge_io_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mm_clock_crossing_bridge_io_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mm_clock_crossing_bridge_io_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mm_clock_crossing_bridge_io_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mm_clock_crossing_bridge_io_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mm_clock_crossing_bridge_io_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (82),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_50_clk_clk),                                                   //             clk.clk
		.reset                   (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                        //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                           //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                           //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),                      //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                          //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                          //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                          //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                           //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                              //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (83),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                   //       clk.clk
		.reset             (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),                    //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),                   //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (82),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) button_s1_agent (
		.clk                     (clk_50_clk_clk),                                                   //             clk.clk
		.reset                   (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (button_s1_agent_m0_address),                                       //              m0.address
		.m0_burstcount           (button_s1_agent_m0_burstcount),                                    //                .burstcount
		.m0_byteenable           (button_s1_agent_m0_byteenable),                                    //                .byteenable
		.m0_debugaccess          (button_s1_agent_m0_debugaccess),                                   //                .debugaccess
		.m0_lock                 (button_s1_agent_m0_lock),                                          //                .lock
		.m0_readdata             (button_s1_agent_m0_readdata),                                      //                .readdata
		.m0_readdatavalid        (button_s1_agent_m0_readdatavalid),                                 //                .readdatavalid
		.m0_read                 (button_s1_agent_m0_read),                                          //                .read
		.m0_waitrequest          (button_s1_agent_m0_waitrequest),                                   //                .waitrequest
		.m0_writedata            (button_s1_agent_m0_writedata),                                     //                .writedata
		.m0_write                (button_s1_agent_m0_write),                                         //                .write
		.rp_endofpacket          (button_s1_agent_rp_endofpacket),                                   //              rp.endofpacket
		.rp_ready                (button_s1_agent_rp_ready),                                         //                .ready
		.rp_valid                (button_s1_agent_rp_valid),                                         //                .valid
		.rp_data                 (button_s1_agent_rp_data),                                          //                .data
		.rp_startofpacket        (button_s1_agent_rp_startofpacket),                                 //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                          //                .channel
		.rf_sink_ready           (button_s1_agent_rsp_fifo_out_ready),                               //         rf_sink.ready
		.rf_sink_valid           (button_s1_agent_rsp_fifo_out_valid),                               //                .valid
		.rf_sink_startofpacket   (button_s1_agent_rsp_fifo_out_startofpacket),                       //                .startofpacket
		.rf_sink_endofpacket     (button_s1_agent_rsp_fifo_out_endofpacket),                         //                .endofpacket
		.rf_sink_data            (button_s1_agent_rsp_fifo_out_data),                                //                .data
		.rf_source_ready         (button_s1_agent_rf_source_ready),                                  //       rf_source.ready
		.rf_source_valid         (button_s1_agent_rf_source_valid),                                  //                .valid
		.rf_source_startofpacket (button_s1_agent_rf_source_startofpacket),                          //                .startofpacket
		.rf_source_endofpacket   (button_s1_agent_rf_source_endofpacket),                            //                .endofpacket
		.rf_source_data          (button_s1_agent_rf_source_data),                                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (button_s1_agent_rdata_fifo_src_ready),                             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (button_s1_agent_rdata_fifo_src_valid),                             //                .valid
		.rdata_fifo_src_data     (button_s1_agent_rdata_fifo_src_data),                              //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (83),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) button_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                   //       clk.clk
		.reset             (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (button_s1_agent_rf_source_data),                                   //        in.data
		.in_valid          (button_s1_agent_rf_source_valid),                                  //          .valid
		.in_ready          (button_s1_agent_rf_source_ready),                                  //          .ready
		.in_startofpacket  (button_s1_agent_rf_source_startofpacket),                          //          .startofpacket
		.in_endofpacket    (button_s1_agent_rf_source_endofpacket),                            //          .endofpacket
		.out_data          (button_s1_agent_rsp_fifo_out_data),                                //       out.data
		.out_valid         (button_s1_agent_rsp_fifo_out_valid),                               //          .valid
		.out_ready         (button_s1_agent_rsp_fifo_out_ready),                               //          .ready
		.out_startofpacket (button_s1_agent_rsp_fifo_out_startofpacket),                       //          .startofpacket
		.out_endofpacket   (button_s1_agent_rsp_fifo_out_endofpacket),                         //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (82),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_s1_agent (
		.clk                     (clk_50_clk_clk),                                                   //             clk.clk
		.reset                   (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_s1_agent_m0_address),                                        //              m0.address
		.m0_burstcount           (timer_s1_agent_m0_burstcount),                                     //                .burstcount
		.m0_byteenable           (timer_s1_agent_m0_byteenable),                                     //                .byteenable
		.m0_debugaccess          (timer_s1_agent_m0_debugaccess),                                    //                .debugaccess
		.m0_lock                 (timer_s1_agent_m0_lock),                                           //                .lock
		.m0_readdata             (timer_s1_agent_m0_readdata),                                       //                .readdata
		.m0_readdatavalid        (timer_s1_agent_m0_readdatavalid),                                  //                .readdatavalid
		.m0_read                 (timer_s1_agent_m0_read),                                           //                .read
		.m0_waitrequest          (timer_s1_agent_m0_waitrequest),                                    //                .waitrequest
		.m0_writedata            (timer_s1_agent_m0_writedata),                                      //                .writedata
		.m0_write                (timer_s1_agent_m0_write),                                          //                .write
		.rp_endofpacket          (timer_s1_agent_rp_endofpacket),                                    //              rp.endofpacket
		.rp_ready                (timer_s1_agent_rp_ready),                                          //                .ready
		.rp_valid                (timer_s1_agent_rp_valid),                                          //                .valid
		.rp_data                 (timer_s1_agent_rp_data),                                           //                .data
		.rp_startofpacket        (timer_s1_agent_rp_startofpacket),                                  //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                          //                .channel
		.rf_sink_ready           (timer_s1_agent_rsp_fifo_out_ready),                                //         rf_sink.ready
		.rf_sink_valid           (timer_s1_agent_rsp_fifo_out_valid),                                //                .valid
		.rf_sink_startofpacket   (timer_s1_agent_rsp_fifo_out_startofpacket),                        //                .startofpacket
		.rf_sink_endofpacket     (timer_s1_agent_rsp_fifo_out_endofpacket),                          //                .endofpacket
		.rf_sink_data            (timer_s1_agent_rsp_fifo_out_data),                                 //                .data
		.rf_source_ready         (timer_s1_agent_rf_source_ready),                                   //       rf_source.ready
		.rf_source_valid         (timer_s1_agent_rf_source_valid),                                   //                .valid
		.rf_source_startofpacket (timer_s1_agent_rf_source_startofpacket),                           //                .startofpacket
		.rf_source_endofpacket   (timer_s1_agent_rf_source_endofpacket),                             //                .endofpacket
		.rf_source_data          (timer_s1_agent_rf_source_data),                                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (timer_s1_agent_rdata_fifo_src_ready),                              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_s1_agent_rdata_fifo_src_valid),                              //                .valid
		.rdata_fifo_src_data     (timer_s1_agent_rdata_fifo_src_data),                               //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (83),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                   //       clk.clk
		.reset             (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rf_source_data),                                    //        in.data
		.in_valid          (timer_s1_agent_rf_source_valid),                                   //          .valid
		.in_ready          (timer_s1_agent_rf_source_ready),                                   //          .ready
		.in_startofpacket  (timer_s1_agent_rf_source_startofpacket),                           //          .startofpacket
		.in_endofpacket    (timer_s1_agent_rf_source_endofpacket),                             //          .endofpacket
		.out_data          (timer_s1_agent_rsp_fifo_out_data),                                 //       out.data
		.out_valid         (timer_s1_agent_rsp_fifo_out_valid),                                //          .valid
		.out_ready         (timer_s1_agent_rsp_fifo_out_ready),                                //          .ready
		.out_startofpacket (timer_s1_agent_rsp_fifo_out_startofpacket),                        //          .startofpacket
		.out_endofpacket   (timer_s1_agent_rsp_fifo_out_endofpacket),                          //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (81),
		.PKT_ORI_BURST_SIZE_L      (79),
		.PKT_RESPONSE_STATUS_H     (78),
		.PKT_RESPONSE_STATUS_L     (77),
		.PKT_BURST_SIZE_H          (58),
		.PKT_BURST_SIZE_L          (56),
		.PKT_TRANS_LOCK            (50),
		.PKT_BEGIN_BURST           (63),
		.PKT_PROTECTION_H          (72),
		.PKT_PROTECTION_L          (70),
		.PKT_BURSTWRAP_H           (55),
		.PKT_BURSTWRAP_L           (55),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_ADDR_H                (45),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (46),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.PKT_TRANS_READ            (49),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (65),
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (82),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ddr3_status_s1_agent (
		.clk                     (clk_50_clk_clk),                                                   //             clk.clk
		.reset                   (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ddr3_status_s1_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (ddr3_status_s1_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (ddr3_status_s1_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (ddr3_status_s1_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (ddr3_status_s1_agent_m0_lock),                                     //                .lock
		.m0_readdata             (ddr3_status_s1_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (ddr3_status_s1_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (ddr3_status_s1_agent_m0_read),                                     //                .read
		.m0_waitrequest          (ddr3_status_s1_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (ddr3_status_s1_agent_m0_writedata),                                //                .writedata
		.m0_write                (ddr3_status_s1_agent_m0_write),                                    //                .write
		.rp_endofpacket          (ddr3_status_s1_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (ddr3_status_s1_agent_rp_ready),                                    //                .ready
		.rp_valid                (ddr3_status_s1_agent_rp_valid),                                    //                .valid
		.rp_data                 (ddr3_status_s1_agent_rp_data),                                     //                .data
		.rp_startofpacket        (ddr3_status_s1_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                          //                .channel
		.rf_sink_ready           (ddr3_status_s1_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (ddr3_status_s1_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (ddr3_status_s1_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (ddr3_status_s1_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (ddr3_status_s1_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (ddr3_status_s1_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (ddr3_status_s1_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (ddr3_status_s1_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (ddr3_status_s1_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (ddr3_status_s1_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (ddr3_status_s1_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr3_status_s1_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (ddr3_status_s1_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (83),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr3_status_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                   //       clk.clk
		.reset             (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ddr3_status_s1_agent_rf_source_data),                              //        in.data
		.in_valid          (ddr3_status_s1_agent_rf_source_valid),                             //          .valid
		.in_ready          (ddr3_status_s1_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (ddr3_status_s1_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (ddr3_status_s1_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (ddr3_status_s1_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (ddr3_status_s1_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (ddr3_status_s1_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (ddr3_status_s1_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (ddr3_status_s1_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	S5_DDR3_QSYS_mm_interconnect_1_router router (
		.sink_ready         (mm_clock_crossing_bridge_io_m0_agent_cp_ready),                    //      sink.ready
		.sink_valid         (mm_clock_crossing_bridge_io_m0_agent_cp_valid),                    //          .valid
		.sink_data          (mm_clock_crossing_bridge_io_m0_agent_cp_data),                     //          .data
		.sink_startofpacket (mm_clock_crossing_bridge_io_m0_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (mm_clock_crossing_bridge_io_m0_agent_cp_endofpacket),              //          .endofpacket
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	S5_DDR3_QSYS_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),                          //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),                          //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),                           //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	S5_DDR3_QSYS_mm_interconnect_1_router_001 router_002 (
		.sink_ready         (button_s1_agent_rp_ready),                                         //      sink.ready
		.sink_valid         (button_s1_agent_rp_valid),                                         //          .valid
		.sink_data          (button_s1_agent_rp_data),                                          //          .data
		.sink_startofpacket (button_s1_agent_rp_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (button_s1_agent_rp_endofpacket),                                   //          .endofpacket
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                             //       src.ready
		.src_valid          (router_002_src_valid),                                             //          .valid
		.src_data           (router_002_src_data),                                              //          .data
		.src_channel        (router_002_src_channel),                                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                        //          .endofpacket
	);

	S5_DDR3_QSYS_mm_interconnect_1_router_001 router_003 (
		.sink_ready         (timer_s1_agent_rp_ready),                                          //      sink.ready
		.sink_valid         (timer_s1_agent_rp_valid),                                          //          .valid
		.sink_data          (timer_s1_agent_rp_data),                                           //          .data
		.sink_startofpacket (timer_s1_agent_rp_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (timer_s1_agent_rp_endofpacket),                                    //          .endofpacket
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                             //       src.ready
		.src_valid          (router_003_src_valid),                                             //          .valid
		.src_data           (router_003_src_data),                                              //          .data
		.src_channel        (router_003_src_channel),                                           //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                        //          .endofpacket
	);

	S5_DDR3_QSYS_mm_interconnect_1_router_001 router_004 (
		.sink_ready         (ddr3_status_s1_agent_rp_ready),                                    //      sink.ready
		.sink_valid         (ddr3_status_s1_agent_rp_valid),                                    //          .valid
		.sink_data          (ddr3_status_s1_agent_rp_data),                                     //          .data
		.sink_startofpacket (ddr3_status_s1_agent_rp_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (ddr3_status_s1_agent_rp_endofpacket),                              //          .endofpacket
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                             //       src.ready
		.src_valid          (router_004_src_valid),                                             //          .valid
		.src_data           (router_004_src_data),                                              //          .data
		.src_channel        (router_004_src_channel),                                           //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                        //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (68),
		.PKT_DEST_ID_L             (67),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (65),
		.PKT_BYTE_CNT_H            (54),
		.PKT_BYTE_CNT_L            (52),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (47),
		.PKT_TRANS_WRITE           (48),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (82),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_clock_crossing_bridge_io_m0_limiter (
		.clk                    (clk_50_clk_clk),                                                   //       clk.clk
		.reset                  (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                 //          .valid
		.cmd_sink_data          (router_src_data),                                                  //          .data
		.cmd_sink_channel       (router_src_channel),                                               //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                         //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                           //          .endofpacket
		.cmd_src_ready          (mm_clock_crossing_bridge_io_m0_limiter_cmd_src_ready),             //   cmd_src.ready
		.cmd_src_data           (mm_clock_crossing_bridge_io_m0_limiter_cmd_src_data),              //          .data
		.cmd_src_channel        (mm_clock_crossing_bridge_io_m0_limiter_cmd_src_channel),           //          .channel
		.cmd_src_startofpacket  (mm_clock_crossing_bridge_io_m0_limiter_cmd_src_startofpacket),     //          .startofpacket
		.cmd_src_endofpacket    (mm_clock_crossing_bridge_io_m0_limiter_cmd_src_endofpacket),       //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                              //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.rsp_src_ready          (mm_clock_crossing_bridge_io_m0_limiter_rsp_src_ready),             //   rsp_src.ready
		.rsp_src_valid          (mm_clock_crossing_bridge_io_m0_limiter_rsp_src_valid),             //          .valid
		.rsp_src_data           (mm_clock_crossing_bridge_io_m0_limiter_rsp_src_data),              //          .data
		.rsp_src_channel        (mm_clock_crossing_bridge_io_m0_limiter_rsp_src_channel),           //          .channel
		.rsp_src_startofpacket  (mm_clock_crossing_bridge_io_m0_limiter_rsp_src_startofpacket),     //          .startofpacket
		.rsp_src_endofpacket    (mm_clock_crossing_bridge_io_m0_limiter_rsp_src_endofpacket),       //          .endofpacket
		.cmd_src_valid          (mm_clock_crossing_bridge_io_m0_limiter_cmd_valid_data)             // cmd_valid.data
	);

	S5_DDR3_QSYS_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (clk_50_clk_clk),                                                   //        clk.clk
		.reset              (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (mm_clock_crossing_bridge_io_m0_limiter_cmd_src_ready),             //       sink.ready
		.sink_channel       (mm_clock_crossing_bridge_io_m0_limiter_cmd_src_channel),           //           .channel
		.sink_data          (mm_clock_crossing_bridge_io_m0_limiter_cmd_src_data),              //           .data
		.sink_startofpacket (mm_clock_crossing_bridge_io_m0_limiter_cmd_src_startofpacket),     //           .startofpacket
		.sink_endofpacket   (mm_clock_crossing_bridge_io_m0_limiter_cmd_src_endofpacket),       //           .endofpacket
		.sink_valid         (mm_clock_crossing_bridge_io_m0_limiter_cmd_valid_data),            // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                             //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //           .valid
		.src0_data          (cmd_demux_src0_data),                                              //           .data
		.src0_channel       (cmd_demux_src0_channel),                                           //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                       //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                             //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                             //           .valid
		.src1_data          (cmd_demux_src1_data),                                              //           .data
		.src1_channel       (cmd_demux_src1_channel),                                           //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                     //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                       //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                             //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                             //           .valid
		.src2_data          (cmd_demux_src2_data),                                              //           .data
		.src2_channel       (cmd_demux_src2_channel),                                           //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                     //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                       //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                             //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                             //           .valid
		.src3_data          (cmd_demux_src3_data),                                              //           .data
		.src3_channel       (cmd_demux_src3_channel),                                           //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                     //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket)                                        //           .endofpacket
	);

	S5_DDR3_QSYS_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_50_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                //          .valid
		.src_data            (cmd_mux_src_data),                                                 //          .data
		.src_channel         (cmd_mux_src_channel),                                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                             //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                             //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                           //          .channel
		.sink0_data          (cmd_demux_src0_data),                                              //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                        //          .endofpacket
	);

	S5_DDR3_QSYS_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (clk_50_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                            //          .valid
		.src_data            (cmd_mux_001_src_data),                                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                             //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                             //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                           //          .channel
		.sink0_data          (cmd_demux_src1_data),                                              //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                        //          .endofpacket
	);

	S5_DDR3_QSYS_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (clk_50_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                            //          .valid
		.src_data            (cmd_mux_002_src_data),                                             //          .data
		.src_channel         (cmd_mux_002_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                             //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                             //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                           //          .channel
		.sink0_data          (cmd_demux_src2_data),                                              //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                                        //          .endofpacket
	);

	S5_DDR3_QSYS_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (clk_50_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                            //          .valid
		.src_data            (cmd_mux_003_src_data),                                             //          .data
		.src_channel         (cmd_mux_003_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                             //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                             //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                           //          .channel
		.sink0_data          (cmd_demux_src3_data),                                              //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                                        //          .endofpacket
	);

	S5_DDR3_QSYS_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                             //      sink.ready
		.sink_channel       (router_001_src_channel),                                           //          .channel
		.sink_data          (router_001_src_data),                                              //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_001_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                             //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                             //          .valid
		.src0_data          (rsp_demux_src0_data),                                              //          .data
		.src0_channel       (rsp_demux_src0_channel),                                           //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                        //          .endofpacket
	);

	S5_DDR3_QSYS_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                             //      sink.ready
		.sink_channel       (router_002_src_channel),                                           //          .channel
		.sink_data          (router_002_src_data),                                              //          .data
		.sink_startofpacket (router_002_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_002_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                    //          .endofpacket
	);

	S5_DDR3_QSYS_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                             //      sink.ready
		.sink_channel       (router_003_src_channel),                                           //          .channel
		.sink_data          (router_003_src_data),                                              //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_003_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                    //          .endofpacket
	);

	S5_DDR3_QSYS_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (clk_50_clk_clk),                                                   //       clk.clk
		.reset              (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                             //      sink.ready
		.sink_channel       (router_004_src_channel),                                           //          .channel
		.sink_data          (router_004_src_data),                                              //          .data
		.sink_startofpacket (router_004_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_004_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                                    //          .endofpacket
	);

	S5_DDR3_QSYS_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (clk_50_clk_clk),                                                   //       clk.clk
		.reset               (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                //          .valid
		.src_data            (rsp_mux_src_data),                                                 //          .data
		.src_channel         (rsp_mux_src_channel),                                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                             //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                             //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                           //          .channel
		.sink0_data          (rsp_demux_src0_data),                                              //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                       //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                         //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                         //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                       //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                          //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                   //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                         //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                         //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                       //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                          //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                 //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                   //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                         //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                         //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                       //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                          //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                 //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket)                                    //          .endofpacket
	);

	S5_DDR3_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_50_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysid_qsys_control_slave_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                    //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                    //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                     //         .error
	);

	S5_DDR3_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (button_s1_agent_rdata_fifo_src_data),                              //     in_0.data
		.in_0_valid     (button_s1_agent_rdata_fifo_src_valid),                             //         .valid
		.in_0_ready     (button_s1_agent_rdata_fifo_src_ready),                             //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                 //         .error
	);

	S5_DDR3_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_s1_agent_rdata_fifo_src_data),                               //     in_0.data
		.in_0_valid     (timer_s1_agent_rdata_fifo_src_valid),                              //         .valid
		.in_0_ready     (timer_s1_agent_rdata_fifo_src_ready),                              //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                 //         .error
	);

	S5_DDR3_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (mm_clock_crossing_bridge_io_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ddr3_status_s1_agent_rdata_fifo_src_data),                         //     in_0.data
		.in_0_valid     (ddr3_status_s1_agent_rdata_fifo_src_valid),                        //         .valid
		.in_0_ready     (ddr3_status_s1_agent_rdata_fifo_src_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                                 //         .error
	);

endmodule
