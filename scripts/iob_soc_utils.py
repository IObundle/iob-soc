import os


def generate_peripheral_base_addresses(peripherals_list, out_file):
    """Create C header file containing peripheral base addresses.
    :param list peripherals_list: list of peripheral blocks
    :param str out_file: output file path
    """
    # Don't override output file
    if os.path.isfile(out_file):
        return

    n_slaves_w = (len(peripherals_list) - 1).bit_length()

    os.makedirs(os.path.dirname(out_file), exist_ok=True)
    with open(out_file, "w") as f:
        for idx, instance in enumerate(peripherals_list):
            instance_name = instance["instance_name"]
            f.write(
                f"#define {instance_name}_BASE (PBUS_BASE + ({idx}<<(P_BIT-{n_slaves_w})))\n"
            )


def generate_makefile_segments(attributes_dict, peripherals, params):
    """Generate automatic makefile segments for iob_soc.
    :param dict attributes_dict: iob_soc attributes
    :param list peripherals: list of peripheral blocks
    :param dict params: iob_soc python parameters
    """
    name = attributes_dict["name"]
    build_dir = attributes_dict["build_dir"]

    #
    # Create auto_sw_build.mk
    #
    os.makedirs(f"{build_dir}/software", exist_ok=True)
    with open(f"{build_dir}/software/auto_sw_build.mk", "w") as file:
        file.write("#This file was auto generated by iob_soc_utils.py\n")
        if params["use_extmem"] and params["init_mem"]:
            # Append init_ddr_contents.hex target to sw_build.mk
            file.write("\n#Auto-generated target to create init_ddr_contents.hex\n")
            file.write("HEX+=init_ddr_contents.hex\n")
            file.write("# init file for external mem with firmware of both systems\n")
            file.write(f"init_ddr_contents.hex: {name}_firmware.hex\n")

            # TODO: Remove SUT stuff from iob-soc (only used for Tester)
            # sut_firmware_name = (
            #    python_module.sut_fw_name.replace(".c", ".hex")
            #    if "sut_fw_name" in python_module.__dict__.keys()
            #    else "-"
            # )
            sut_firmware_name = "-"
            file.write(
                f"	../../scripts/hex_join.py $^ {sut_firmware_name} {params['mem_addr_w']} > $@\n"
            )
        if params["use_ethernet"]:
            # Set custom ethernet CONSOLE_CMD
            file.write(
                'CONSOLE_CMD ?=rm -f soc2cnsl cnsl2soc; $(IOB_CONSOLE_PYTHON_ENV) $(PYTHON_DIR)/console_ethernet.py -L -c $(PYTHON_DIR)/console.py -m "$(RMAC_ADDR)" -i "$(ETH_IF)"\n',
            )
            file.write(
                """\
    UTARGETS+=iob_eth_rmac.h
    EMUL_HDR+=iob_eth_rmac.h
    iob_eth_rmac.h:
        echo "#define ETH_RMAC_ADDR 0x$(RMAC_ADDR)" > $@\n
""",
            )

    #
    # Create auto_fpga_build.mk
    #
    os.makedirs(f"{build_dir}/hardware/fpga", exist_ok=True)
    with open(f"{build_dir}/hardware/fpga/auto_fpga_build.mk", "w") as file:
        file.write("#This file was auto generated by iob_soc_utils.py\n")

        # Set N_INTERCONNECT_SLAVES variable
        # TODO: Count axi interfaces automatically for peripherals with DMA
        file.write("N_INTERCONNECT_SLAVES:=1\n")
        # Set USE_EXTMEM variable
        file.write(f"USE_EXTMEM:={int(params['use_extmem'])}\n")
        # Set INIT_MEM variable
        file.write(f"INIT_MEM:={int(params['init_mem'])}\n")
        if params["use_ethernet"]:
            # Set custom ethernet CONSOLE_CMD
            file.write(
                'CONSOLE_CMD=$(IOB_CONSOLE_PYTHON_ENV) $(PYTHON_DIR)/console_ethernet.py -s /dev/usb-uart -c $(PYTHON_DIR)/console.py -m "$(RMAC_ADDR)" -i "$(ETH_IF)"\n',
            )

    #
    # Create auto_sim_build.mk
    #
    os.makedirs(f"{build_dir}/hardware/simulation", exist_ok=True)
    with open(f"{build_dir}/hardware/simulation/auto_sim_build.mk", "w") as file:
        file.write("#This file was auto generated by iob_soc_utils.py\n")
        if params["use_ethernet"]:
            file.write("USE_ETHERNET=1\n")
            # Set custom ethernet CONSOLE_CMD
            file.write(
                'ETH2FILE_SCRIPT="$(PYTHON_DIR)/eth2file.py"\n'
                'CONSOLE_CMD=$(IOB_CONSOLE_PYTHON_ENV) $(PYTHON_DIR)/console_ethernet.py -L -c $(PYTHON_DIR)/console.py -e $(ETH2FILE_SCRIPT) -m "$(RMAC_ADDR)" -i "$(ETH_IF)" -t 60\n',
            )
